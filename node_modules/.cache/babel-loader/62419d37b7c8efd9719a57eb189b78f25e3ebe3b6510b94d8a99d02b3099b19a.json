{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vladi Gotsin\\\\Desktop\\\\react\\\\Chess-React.js-\\\\src\\\\HelperMethods.js\";\nimport React from 'react';\nimport * as GlobalVariables from './globalVariables';\n\n/**\r\n * Checks if a character is Uppercase using the ASCII table.\r\n * @param {string} value - The character to check.\r\n * @returns {boolean} - True if the character is uppercase, false otherwise.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function IsUpperCase(value) {\n  return value.charCodeAt(0) >= 65 && value.charCodeAt(0) <= 90;\n}\n\n/**\r\n * Checks if a character is Lowercase using the ASCII table.\r\n * @param {string} value - The character to check.\r\n * @returns {boolean} - True if the character is lowercase, false otherwise.\r\n */\n_c = IsUpperCase;\nexport function IsLowerCase(value) {\n  return value.charCodeAt(0) >= 97 && value.charCodeAt(0) <= 122;\n}\n\n/**\r\n * Checks if a character is a Digit using the ASCII table.\r\n * @param {string} value - The character to check.\r\n * @returns {boolean} - True if the character is a digit, false otherwise.\r\n */\n_c2 = IsLowerCase;\nexport function IsDigit(value) {\n  return value.charCodeAt(0) >= 48 && value.charCodeAt(0) <= 57;\n}\n\n/**\r\n * Parses a FEN string and returns its components.\r\n * @param {string} fen - The FEN string to parse.\r\n * @returns {object} - An object containing the FEN components.\r\n */\n_c3 = IsDigit;\nexport function ParseFEN(fen) {\n  const fenParts = fen.split(' ');\n  if (fenParts.length !== 6) {\n    throw new Error('Invalid FEN');\n  }\n  const [fenBoard, fenTurn, fenCastling, fenEnPassant, fenHalfMoves, fenFullMoves] = fenParts;\n  return {\n    fenBoard,\n    fenTurn,\n    fenCastling,\n    fenEnPassant,\n    fenHalfMoves: Number(fenHalfMoves),\n    fenFullMoves: Number(fenFullMoves)\n  };\n}\n\n/**\r\n * Converts FEN piece notation to an actual piece.\r\n * @param {string} letter - The FEN notation of the piece.\r\n * @returns {string} - The actual piece.\r\n */\n_c4 = ParseFEN;\nexport function ConvertFENtoPiece(letter) {\n  const FEN_PIECE_MAP = {\n    [GlobalVariables.FEN_PIECES_BLACK.PAWN]: GlobalVariables.PIECES.PAWN,\n    [GlobalVariables.FEN_PIECES_BLACK.KNIGHT]: GlobalVariables.PIECES.KNIGHT,\n    [GlobalVariables.FEN_PIECES_BLACK.KING]: GlobalVariables.PIECES.KING,\n    [GlobalVariables.FEN_PIECES_BLACK.QUEEN]: GlobalVariables.PIECES.QUEEN,\n    [GlobalVariables.FEN_PIECES_BLACK.ROOK]: GlobalVariables.PIECES.ROOK,\n    [GlobalVariables.FEN_PIECES_BLACK.BISHOP]: GlobalVariables.PIECES.BISHOP\n  };\n  return FEN_PIECE_MAP[letter.toLowerCase()] || \"\";\n}\n\n/**\r\n * Converts the FEN piece notation to a piece that we can use in the square component.\r\n * @param {string} value - The FEN notation of the piece.\r\n * @returns {string} - The piece in {color-piece} format.\r\n */\n_c5 = ConvertFENtoPiece;\nexport function ConvertFENPieceToPiece(value) {\n  if (IsUpperCase(value)) {\n    return `${GlobalVariables.COLORS.WHITE}-${ConvertFENtoPiece(value)}`;\n  }\n  if (IsLowerCase(value)) {\n    return `${GlobalVariables.COLORS.BLACK}-${ConvertFENtoPiece(value)}`;\n  }\n  return \"\";\n}\n\n/**\r\n * Converts a string in FEN format to a normal string.\r\n * @param {string} value - The FEN string.\r\n * @returns {string} - The normal string.\r\n */\n_c6 = ConvertFENPieceToPiece;\nexport function ConvertFenToString(value) {\n  return value.split('').reduce((result, char) => {\n    if (IsDigit(char)) {\n      return result + GlobalVariables.EMPTY_SQUARE_PIECE.repeat(Number(char));\n    }\n    return result + char;\n  }, '');\n}\n\n/**\r\n * Checks if two squares are on the same row.\r\n * @param {object} square1 - The first square.\r\n * @param {object} square2 - The second square.\r\n * @returns {boolean} - True if the squares are on the same row, false otherwise.\r\n */\n_c7 = ConvertFenToString;\nexport function checkIfTwoSquaresAreOnTheSameRow(square1, square2) {\n  return square1.props.x === square2.props.x;\n}\n\n/**\r\n * Checks if the square is on the given row number.\r\n * @param {object} square - The square to check.\r\n * @param {number} rowNumber - The row number.\r\n * @returns {boolean} - True if the square is on the given row, false otherwise.\r\n */\nexport function isSquareOnRow(square, rowNumber) {\n  return square.props.x === rowNumber;\n}\n\n/**\r\n * Gets the piece from a square.\r\n * @param {object} square - The square to get the piece from.\r\n * @returns {string} - The piece.\r\n */\nexport function getPiece(square) {\n  return square.props.piece.split(GlobalVariables.PIECE_DELIMITER)[GlobalVariables.PIECE_PIECE_INDEX];\n}\n\n/**\r\n * Checks if a square has a specific piece.\r\n * @param {object} square - The square to check.\r\n * @param {string} piece - The piece to check for.\r\n * @returns {boolean} - True if the square has the piece, false otherwise.\r\n */\nexport function doesTheSquareHasThePiece(square, piece) {\n  return getPiece(square) === piece;\n}\n\n/**\r\n * Gets the piece color from a square.\r\n * @param {object} square - The square to get the piece color from.\r\n * @returns {string} - The piece color.\r\n */\nexport function getPieceColor(square) {\n  return square.props.piece.split(GlobalVariables.PIECE_DELIMITER)[GlobalVariables.PIECE_COLOR_INDEX];\n}\n\n/**\r\n * Checks if a color is white.\r\n * @param {string} color - The color to check.\r\n * @returns {boolean} - True if the color is white, false otherwise.\r\n */\nexport function isColorWhite(color) {\n  return color === GlobalVariables.COLORS.WHITE;\n}\n\n/**\r\n * Checks if a color is black.\r\n * @param {string} color - The color to check.\r\n * @returns {boolean} - True if the color is black, false otherwise.\r\n */\nexport function isColorBlack(color) {\n  return color === GlobalVariables.COLORS.BLACK;\n}\n\n/**\r\n * Checks if two pieces are of the same color.\r\n * @param {string} piece1 - The first piece.\r\n * @param {string} piece2 - The second piece.\r\n * @returns {boolean} - True if the pieces are of the same color, false otherwise.\r\n */\nexport function areSameColor(piece1, piece2) {\n  const color1 = piece1.split(GlobalVariables.PIECE_DELIMITER)[GlobalVariables.PIECE_COLOR_INDEX];\n  const color2 = piece2.split(GlobalVariables.PIECE_DELIMITER)[GlobalVariables.PIECE_COLOR_INDEX];\n  return color1 === color2;\n}\n\n/**\r\n * Checks if a move is equal to the current selected square.\r\n * @param {object} move - The move to check.\r\n * @returns {boolean} - True if the move is equal to the current selected square, false otherwise.\r\n */\nexport function checkIfAMoveIsEqualToTheCurrentSelectedSquare(move) {\n  return move.props.x === GlobalVariables.CurrentSquareSelection.x && move.props.y === GlobalVariables.CurrentSquareSelection.y;\n}\n\n/**\r\n * Compares if two squares are the same.\r\n * @param {object} square1 - The first square.\r\n * @param {object} square2 - The second square.\r\n * @returns {boolean} - True if the squares are the same, false otherwise.\r\n */\nexport function compareIfTwoSquaresAreTheSame(square1, square2) {\n  return square1.props.x === square2.props.x && square1.props.y === square2.props.y;\n}\n\n/**\r\n * Gets a target square by its location.\r\n * @param {number} x - The x coordinate of the target square.\r\n * @param {number} y - The y coordinate of the target square.\r\n * @returns {object} - The target square.\r\n */\nexport function getATargetSquareByLocation(x, y) {\n  return GlobalVariables.BoardPosition[x][y];\n}\n\n/**\r\n * Gets a target square by its piece.\r\n * @param {string} piece - The piece to search for.\r\n * @returns {object} - The target square.\r\n */\nexport function getATargetSquareByPiece(piece) {\n  for (let row of GlobalVariables.BoardPosition) {\n    for (let square of row) {\n      if (square.props.piece === piece) {\n        return square;\n      }\n    }\n  }\n  return null;\n}\n\n/**\r\n * Checks if castling is possible.\r\n * @param {string} castlingType - The type of castling (long or short).\r\n * @param {boolean} [withWhite=true] - True if checking for white's castling, false otherwise.\r\n * @returns {boolean} - True if castling is possible, false otherwise.\r\n */\nexport function isCastlingPossible(castlingType, withWhite = true) {\n  const row = withWhite ? GlobalVariables.CASTLE_ROW_WHITE : GlobalVariables.CASTLE_ROW_BLACK;\n  const pieces = withWhite ? GlobalVariables.FEN_PIECES_WHITE : GlobalVariables.FEN_PIECES_BLACK;\n  const [rookCol, kingCol, pathCols] = castlingType === GlobalVariables.CASTLING_TYPES.LONG ? [GlobalVariables.CASTLE_ROOK_INITIAL_COL_LONG, GlobalVariables.CASTLE_KING_INITIAL_COL, GlobalVariables.CASTLE_PATH_COLS_LONG] : [GlobalVariables.CASTLE_ROOK_INITIAL_COL_SHORT, GlobalVariables.CASTLE_KING_INITIAL_COL, GlobalVariables.CASTLE_PATH_COLS_SHORT];\n  return GlobalVariables.BoardPosition[row][rookCol] === pieces.ROOK && GlobalVariables.BoardPosition[row][kingCol] === pieces.KING && pathCols.every(col => GlobalVariables.BoardPosition[row][col] === GlobalVariables.EMPTY_SQUARE_PIECE);\n}\n\n/**\r\n * Checks if a pawn is on its starting square.\r\n * @param {object} pawn - The pawn to check.\r\n * @returns {boolean} - True if the pawn is on its starting square, false otherwise.\r\n */\nexport function isPawnOnStartingSquare(pawn) {\n  const isWhite = isColorWhite(getPieceColor(pawn));\n  return isWhite ? pawn.props.x === GlobalVariables.WHITE_PAWN_STARTING_SQUARE : pawn.props.x === GlobalVariables.BLACK_PAWN_STARTING_SQUARE;\n}\n\n/**\r\n * Checks if a pawn is on an en passant square.\r\n * @param {object} pawn - The pawn to check.\r\n * @returns {boolean} - True if the pawn is on an en passant square, false otherwise.\r\n */\nexport function isPawnOnEnPassantSquare(pawn) {\n  const isWhite = isColorWhite(getPieceColor(pawn));\n  return isWhite ? pawn.props.x === GlobalVariables.WHITE_EN_PASSANT_SQUARE : pawn.props.x === GlobalVariables.BLACK_EN_PASSANT_SQUARE;\n}\n\n/**\r\n * Checks if a square is available for a move.\r\n * @param {object} square - The square to check.\r\n * @returns {boolean} - True if the square is available, false otherwise.\r\n */\nexport function isSquareAvailable(square) {\n  return !square.props.piece;\n}\n\n/**\r\n * Updates a column on a row with a new value.\r\n * @param {Array} row - The row to update.\r\n * @param {number} colIndex - The column index.\r\n * @param {string} newValue - The new value.\r\n * @returns {Array} - The updated row.\r\n */\nexport function updateColumnOnARow(row, colIndex, newValue) {\n  row[colIndex] = newValue;\n  return row;\n}\n\n/**\r\n * Removes the current square's piece.\r\n * @param {object} currentSquare - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @param {Array} row - The row to update.\r\n * @returns {Array} - The updated row.\r\n */\nexport function handleSquareOnCurrentRow(currentSquare, targetSquare, row) {\n  return checkIfTwoSquaresAreOnTheSameRow(currentSquare, targetSquare) ? handleSquareAndTargetSquareOnTheSameRow(currentSquare, targetSquare, row) : updateColumnOnARow(row, currentSquare.props.y, GlobalVariables.EMPTY_SQUARE_PIECE);\n}\n\n/**\r\n * Updates the target square with the current square's piece.\r\n * @param {object} currentSquare - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @param {Array} row - The row to update.\r\n * @returns {Array} - The updated row.\r\n */\nexport function handleTargetSquareOnCurrentRow(currentSquare, targetSquare, row) {\n  return updateColumnOnARow(row, targetSquare.props.y, ConvertPieceToFENPiece(currentSquare.props.piece));\n}\n\n/**\r\n * Checks if we're making a move on the same row and performs castling if we want to castle.\r\n * @param {object} currentSquare - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @param {Array} row - The row to update.\r\n * @returns {Array} - The updated row.\r\n */\nexport function handleSquareAndTargetSquareOnTheSameRow(currentSquare, targetSquare, row) {\n  if (doesTheSquareHasThePiece(currentSquare, GlobalVariables.PIECES.KING) && isCastlingPossible(currentSquare, targetSquare)) {\n    return handleCastling(currentSquare, row);\n  }\n  return SidewaysCapture(row, Number(currentSquare.props.y), Number(targetSquare.props.y), currentSquare.props.piece);\n}\n\n/**\r\n * Performs castling by swapping the rook and the king.\r\n * @param {object} square - The square to update.\r\n * @param {Array} row - The row to update.\r\n * @returns {Array} - The updated row.\r\n */\nexport function handleCastling(square, row) {\n  const color = getPieceColor(square);\n  const isWhite = isColorWhite(color);\n  const kingPiece = isWhite ? GlobalVariables.FEN_PIECES_WHITE.KING : GlobalVariables.FEN_PIECES_BLACK.KING;\n  const rookPiece = isWhite ? GlobalVariables.FEN_PIECES_WHITE.ROOK : GlobalVariables.FEN_PIECES_BLACK.ROOK;\n  Object.values(GlobalVariables.CASTLING_TYPES).forEach(type => {\n    if (isCastlingPossible(type, isWhite)) {\n      const [emptySquares, kingFinalCol, rookFinalCol] = type === GlobalVariables.CASTLING_TYPES.LONG ? [GlobalVariables.EMPTY_SQUARES_AFTER_LONG_CASTLE, GlobalVariables.CASTLE_KING_FINAL_COL_LONG, GlobalVariables.CASTLE_ROOK_FINAL_COL_LONG] : [GlobalVariables.EMPTY_SQUARES_AFTER_SHORT_CASTLE, GlobalVariables.CASTLE_KING_FINAL_COL_SHORT, GlobalVariables.CASTLE_ROOK_FINAL_COL_SHORT];\n      emptySquares.forEach(col => row[col] = GlobalVariables.EMPTY_SQUARE_PIECE);\n      row[kingFinalCol] = kingPiece;\n      row[rookFinalCol] = rookPiece;\n    }\n  });\n  return row;\n}\n\n/**\r\n * Generates a new FEN string based on the current board state.\r\n */\n//TODO: ensure everything gets parsed correctly\n//TODO: refactor the code\nexport function generateANewFen() {\n  let fenString = '';\n  for (let i = 0; i < BoardPosition.length; i++) {\n    let row = BoardPosition[i];\n    for (let j = 0; j < row.length; j++) {\n      let column = row[j];\n      if (column == ' ') {\n        if (fenString && HelperMethods.IsDigit(fenString[fenString.length - 1])) {\n          let lastChar = fenString.slice(-1);\n          fenString = fenString.substring(0, fenString.length - 1);\n          fenString += Number(lastChar) + 1;\n        } else {\n          fenString += '1';\n        }\n      } else {\n        fenString += column;\n      }\n    }\n    fenString += '/';\n  }\n  fenString = fenString.substring(0, fenString.length - 1); //removes the last slash\n\n  fenString += IsWhiteToMove ? ' w' : ' b';\n  let castlingRules = '';\n  castlingRules += CastlingRights.whiteShortCastle ? 'K' : '';\n  castlingRules += CastlingRights.whiteLongCastle ? 'Q' : '';\n  castlingRules += CastlingRights.blackShortCastle ? 'k' : '';\n  castlingRules += CastlingRights.blackLongCastle ? 'q' : '';\n  fenString += castlingRules.length == 0 ? ' -' : ' ' + castlingRules;\n  fenString += EnPassant.isPossible ? ' ' + convertLocationToCoordinates(EnPassant.x, EnPassant.y) : ' -';\n  fenString += ' ' + HalfMoves;\n  fenString += ' ' + FullMoves;\n  setFen(fenString);\n}\n\n/**\r\n * Parses the FEN string to update the board state.\r\n * @param {boolean} updateBoardPosition - Whether to update the board position.\r\n */\n//TODO: refactor\nexport function fenParser(updateBoardPosition = true) {\n  //parses the FEN string to variables\n  const {\n    fenBoard,\n    fenTurn,\n    fenCastling,\n    fenEnPassant,\n    fenHalfMoves,\n    fenFullMoves\n  } = HelperMethods.ParseFEN(fen);\n  const fenRows = fenBoard.split('/');\n  let arr = [];\n\n  //splits all rows and creates a matrix for the board\n  for (let row of fenRows) {\n    const tokens = row.split('');\n    let r = [];\n    for (let i = 0; i < tokens.length; i++) {\n      if (Number(tokens[i])) {\n        for (let j = 0; j < Number(tokens[i]); j++) {\n          r.push(' ');\n        }\n      } else {\n        r.push(tokens[i]);\n      }\n    }\n    arr.push(r);\n  }\n\n  //generates a Square component for each element in the matrix created above\n  let squareColorIsWhite = true;\n  let squares = [];\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let color = squareColorIsWhite ? \"\" : \"dark\";\n      const possibleMoveStatus = isPossibleMoveRef.current.find(item => item.key === `${i}-${j}`);\n\n      //boardSquares.push(\n      squares.push( /*#__PURE__*/_jsxDEV(Square, {\n        getPossibleMoves: getPossibleMoves,\n        x: i,\n        y: j,\n        piece: HelperMethods.ConvertFENPieceToPiece(arr[i][j]),\n        color: color,\n        movePiece: movePiece,\n        isPossibleMove: possibleMoveStatus ? possibleMoveStatus.value : false,\n        resetPossibleMoves: resetPossibleMoves\n      }, `${i}-${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 17\n      }, this));\n      squareColorIsWhite = !squareColorIsWhite;\n    }\n    squareColorIsWhite = !squareColorIsWhite;\n  }\n  setBoardSquares(squares);\n\n  // BoardSquares.splice(0, BoardSquares.length);\n  // BoardSquares.push(...squares)\n  // console.log(BoardSquares)\n\n  if (fenCastling.includes('K')) {\n    CastlingRights.whiteShortCastle = true;\n  }\n  if (fenCastling.includes('Q')) {\n    CastlingRights.whiteLongCastle = true;\n  }\n  if (fenCastling.includes('k')) {\n    CastlingRights.blackShortCastle = true;\n  }\n  if (fenCastling.includes('q')) {\n    CastlingRights.blackLongCastle = true;\n  }\n  fenTurn == 'w' ? updateIsWhiteToMove(true) : updateIsWhiteToMove(false);\n  updateHalfMoves(fenHalfMoves);\n  updateFullMoves(fenFullMoves);\n  if (updateBoardPosition) {\n    BoardPosition.splice(0, BoardPosition.length, ...arr);\n  }\n  if (!fenEnPassant.includes(PIECE_DELIMITER)) {\n    let location = HelperMethods.convertCoordinatesToLocation(fenEnPassant);\n    EnPassant.isPossible = true;\n    EnPassant.x = location.x;\n    EnPassant.y = location.y;\n  }\n}\n\n/**\r\n * Updates the board position after making a move.\r\n * @param {object} currentSquare - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @returns {Array} - The updated board position.\r\n */\nexport function updateBoardPosition(currentSquare, targetSquare) {\n  return GlobalVariables.BoardPosition.map((row, rowIndex) => {\n    if (isSquareOnRow(currentSquare, rowIndex)) {\n      row = handleSquareOnCurrentRow(currentSquare, targetSquare, row);\n    }\n    if (isSquareOnRow(targetSquare, rowIndex)) {\n      row = handleTargetSquareOnCurrentRow(currentSquare, targetSquare, row);\n    }\n    return row;\n  });\n}\n\n/**\r\n * Modifies the row to capture pieces sideways.\r\n * @param {Array} row - The row to update.\r\n * @param {number} colIndex - The column index of the current square.\r\n * @param {number} targetColIndex - The column index of the target square.\r\n * @param {string} value - The piece value.\r\n * @returns {Array} - The updated row.\r\n */\nexport function SidewaysCapture(row, colIndex, targetColIndex, value) {\n  return row.map((col, index) => {\n    if (index === colIndex) return GlobalVariables.EMPTY_SQUARE_PIECE;\n    if (index === targetColIndex) return ConvertPieceToFENPiece(value);\n    return col;\n  });\n}\n\n/**\r\n * Converts the piece from {color-piece} format to FEN format (a single letter).\r\n * @param {string} value - The piece value.\r\n * @returns {string} - The FEN notation of the piece.\r\n */\n_c8 = SidewaysCapture;\nexport function ConvertPieceToFENPiece(value) {\n  const [color, piece] = value.split(GlobalVariables.PIECE_DELIMITER);\n  const pieceMapping = {\n    [GlobalVariables.PIECES.PAWN]: GlobalVariables.FEN_PIECES_BLACK.PAWN,\n    [GlobalVariables.PIECES.KNIGHT]: GlobalVariables.FEN_PIECES_BLACK.KNIGHT,\n    [GlobalVariables.PIECES.BISHOP]: GlobalVariables.FEN_PIECES_BLACK.BISHOP,\n    [GlobalVariables.PIECES.ROOK]: GlobalVariables.FEN_PIECES_BLACK.ROOK,\n    [GlobalVariables.PIECES.QUEEN]: GlobalVariables.FEN_PIECES_BLACK.QUEEN,\n    [GlobalVariables.PIECES.KING]: GlobalVariables.FEN_PIECES_BLACK.KING\n  };\n  const fenPiece = pieceMapping[piece];\n  return isColorWhite(color) ? fenPiece.toUpperCase() : fenPiece;\n}\n\n/**\r\n * Generates the square components for the board.\r\n * @param {Array} boardSquares - The current board squares.\r\n * @param {Array} isPossibleMove - The possible moves.\r\n * @param {function} getPossibleMoves - The function to get possible moves.\r\n * @param {function} movePiece - The function to move a piece.\r\n * @param {function} resetPossibleMoves - The function to reset possible moves.\r\n * @returns {Array} - The square components.\r\n */\n_c9 = ConvertPieceToFENPiece;\nexport function generateSquareComponents(boardSquares, isPossibleMove, getPossibleMoves, movePiece, resetPossibleMoves) {\n  return boardSquares.flatMap((row, rowIndex) => row.map((square, colIndex) => /*#__PURE__*/_jsxDEV(Square, {\n    x: rowIndex,\n    y: colIndex,\n    piece: square.piece,\n    color: square.color,\n    getPossibleMoves: getPossibleMoves,\n    movePiece: movePiece,\n    isPossibleMove: isPossibleMove.includes(square),\n    resetPossibleMoves: resetPossibleMoves\n  }, `${rowIndex}-${colIndex}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 558,\n    columnNumber: 13\n  }, this)));\n}\n\n/**\r\n * Updates the current position to a new position after making the move.\r\n * @param {object} square - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @param {array} position - The current position.\r\n * @returns {array} - The updated position.\r\n */\nexport function UpdatePosition(square, targetSquare, position) {\n  return position.map((row, rowIndex) => {\n    if (isSquareOnRow(square, rowIndex)) {\n      row = handleSquareOnCurrentRow(square, targetSquare, row);\n    }\n    if (isSquareOnRow(targetSquare, rowIndex)) {\n      row = handleTargetSquareOnCurrentRow(square, targetSquare, row);\n    }\n    return row;\n  });\n}\n\n/**\r\n * Converts board coordinates to X and Y position on the board, e.g., a8 = 0, 0\r\n * @param {string} coordinates - The board coordinates to convert.\r\n * @returns {object} - Returns an object with x and y properties.\r\n */\n_c10 = UpdatePosition;\nexport function convertCoordinatesToLocation(coordinates) {\n  let tokens = coordinates.split('');\n\n  //skip invalid coordinates\n  if (tokens.length != 2) {\n    return;\n  }\n  let letter = tokens[0].toString().toUpperCase();\n  let number = tokens[1];\n\n  //65 is the ASCII code for capital A which will give us 0 if we have A as a coordinate; A-F will give us 0-7 for y (columns)\n  //reverse the numbers since we draw the board top down for x (rows)\n  return {\n    x: DIM - Number(number),\n    y: letter.charCodeAt(0) - 65\n  };\n}\n\n/**\r\n * Converts a piece location to board coordinate, e.g., 0, 0 to a8\r\n * @param {string} x - The X position.\r\n * @param {string} y - The Y position.\r\n * @returns {string} - Returns a string containing the board coordinates.\r\n */\nexport function convertLocationToCoordinates(x, y) {\n  //maps y (column) to the letter coordinate; add 65 (capital A code) to the ASCII code for the location we have and we get a letter between A and F\n  //reverses the x (rows) coordinate because we drop the board top down, while coordinates go down up\n  return `${String.fromCharCode(y + 65)}${DIM - x}`.toLowerCase();\n}\n\n/**\r\n * Determines if the king is in check.\r\n * @param {object} kingSquare - The square where the king is located.\r\n * @param {object} [pseudo] - The square where a piece is hypothetically moved.\r\n * @param {object} [currentSquare=null] - The square of the piece being moved.\r\n * @param {string} color - The color of the king ('white' or 'black').\r\n * @returns {boolean} - True if the king is in check, false otherwise.\r\n */\nfunction isKingInCheck(kingSquare, pseudo, currentSquare = null, color) {\n  const squares = boardSquaresRef.current;\n  const updatedSquares = squares.map(s => {\n    if (pseudo && s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\n      return /*#__PURE__*/React.cloneElement(s, {\n        piece: pseudo.props.piece\n      });\n    } else if (currentSquare && s.props.x === currentSquare.props.x && s.props.y === currentSquare.props.y) {\n      return /*#__PURE__*/React.cloneElement(s, {\n        piece: ''\n      });\n    } else {\n      return s;\n    }\n  });\n  const checkDirections = directions => {\n    for (const [dx, dy] of directions) {\n      for (let i = 1; i < DIM; i++) {\n        const piece = updatedSquares.find(s => s.props.x === kingSquare.props.x + dx * i && s.props.y === kingSquare.props.y + dy * i);\n        if (!piece) break;\n        const [pieceColor, pieceType] = piece.props.piece.split(\"-\");\n        if (pieceColor !== color) {\n          if (pieceType === \"queen\" || pieceType === \"rook\" || pieceType === \"bishop\" || i === 1 && pieceType === \"pawn\" && (dx === -1 || dx === 1)) {\n            return true;\n          }\n          if (piece.props.piece) break;\n        } else {\n          break;\n        }\n      }\n    }\n    return false;\n  };\n  const linearDirections = [[1, 0], [-1, 0], [0, 1], [0, -1] // Right, Left, Up, Down\n  ];\n  const diagonalDirections = [[1, 1], [-1, -1], [1, -1], [-1, 1] // Diagonals\n  ];\n  if (checkDirections(linearDirections) || checkDirections(diagonalDirections)) {\n    return true;\n  }\n  const knightMoves = [[-2, -1], [-2, 1], [2, -1], [2, 1], [-1, 2], [1, 2], [-1, -2], [1, -2]];\n  for (const [dx, dy] of knightMoves) {\n    const piece = updatedSquares.find(s => s.props.x === kingSquare.props.x + dx && s.props.y === kingSquare.props.y + dy);\n    if (piece && piece.props.piece.split(\"-\")[0] !== color && piece.props.piece.split(\"-\")[1] === \"knight\") {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\r\n * Determines if the white king is in check.\r\n * @param {object} kingSquare - The square where the king is located.\r\n * @param {object} [pseudo] - The square where a piece is hypothetically moved.\r\n * @param {object} [currentSquare=null] - The square of the piece being moved.\r\n * @returns {boolean} - True if the white king is in check, false otherwise.\r\n */\nfunction isWhiteInCheck(kingSquare, pseudo, currentSquare = null) {\n  return isKingInCheck(kingSquare, pseudo, currentSquare, 'white');\n}\n\n/**\r\n * Determines if the black king is in check.\r\n * @param {object} kingSquare - The square where the king is located.\r\n * @param {object} [pseudo] - The square where a piece is hypothetically moved.\r\n * @param {object} [currentSquare=null] - The square of the piece being moved.\r\n * @returns {boolean} - True if the black king is in check, false otherwise.\r\n */\nfunction isBlackInCheck(kingSquare, pseudo, currentSquare = null) {\n  return isKingInCheck(kingSquare, pseudo, currentSquare, 'black');\n}\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10;\n$RefreshReg$(_c, \"IsUpperCase\");\n$RefreshReg$(_c2, \"IsLowerCase\");\n$RefreshReg$(_c3, \"IsDigit\");\n$RefreshReg$(_c4, \"ParseFEN\");\n$RefreshReg$(_c5, \"ConvertFENtoPiece\");\n$RefreshReg$(_c6, \"ConvertFENPieceToPiece\");\n$RefreshReg$(_c7, \"ConvertFenToString\");\n$RefreshReg$(_c8, \"SidewaysCapture\");\n$RefreshReg$(_c9, \"ConvertPieceToFENPiece\");\n$RefreshReg$(_c10, \"UpdatePosition\");","map":{"version":3,"names":["React","GlobalVariables","jsxDEV","_jsxDEV","IsUpperCase","value","charCodeAt","_c","IsLowerCase","_c2","IsDigit","_c3","ParseFEN","fen","fenParts","split","length","Error","fenBoard","fenTurn","fenCastling","fenEnPassant","fenHalfMoves","fenFullMoves","Number","_c4","ConvertFENtoPiece","letter","FEN_PIECE_MAP","FEN_PIECES_BLACK","PAWN","PIECES","KNIGHT","KING","QUEEN","ROOK","BISHOP","toLowerCase","_c5","ConvertFENPieceToPiece","COLORS","WHITE","BLACK","_c6","ConvertFenToString","reduce","result","char","EMPTY_SQUARE_PIECE","repeat","_c7","checkIfTwoSquaresAreOnTheSameRow","square1","square2","props","x","isSquareOnRow","square","rowNumber","getPiece","piece","PIECE_DELIMITER","PIECE_PIECE_INDEX","doesTheSquareHasThePiece","getPieceColor","PIECE_COLOR_INDEX","isColorWhite","color","isColorBlack","areSameColor","piece1","piece2","color1","color2","checkIfAMoveIsEqualToTheCurrentSelectedSquare","move","CurrentSquareSelection","y","compareIfTwoSquaresAreTheSame","getATargetSquareByLocation","BoardPosition","getATargetSquareByPiece","row","isCastlingPossible","castlingType","withWhite","CASTLE_ROW_WHITE","CASTLE_ROW_BLACK","pieces","FEN_PIECES_WHITE","rookCol","kingCol","pathCols","CASTLING_TYPES","LONG","CASTLE_ROOK_INITIAL_COL_LONG","CASTLE_KING_INITIAL_COL","CASTLE_PATH_COLS_LONG","CASTLE_ROOK_INITIAL_COL_SHORT","CASTLE_PATH_COLS_SHORT","every","col","isPawnOnStartingSquare","pawn","isWhite","WHITE_PAWN_STARTING_SQUARE","BLACK_PAWN_STARTING_SQUARE","isPawnOnEnPassantSquare","WHITE_EN_PASSANT_SQUARE","BLACK_EN_PASSANT_SQUARE","isSquareAvailable","updateColumnOnARow","colIndex","newValue","handleSquareOnCurrentRow","currentSquare","targetSquare","handleSquareAndTargetSquareOnTheSameRow","handleTargetSquareOnCurrentRow","ConvertPieceToFENPiece","handleCastling","SidewaysCapture","kingPiece","rookPiece","Object","values","forEach","type","emptySquares","kingFinalCol","rookFinalCol","EMPTY_SQUARES_AFTER_LONG_CASTLE","CASTLE_KING_FINAL_COL_LONG","CASTLE_ROOK_FINAL_COL_LONG","EMPTY_SQUARES_AFTER_SHORT_CASTLE","CASTLE_KING_FINAL_COL_SHORT","CASTLE_ROOK_FINAL_COL_SHORT","generateANewFen","fenString","i","j","column","HelperMethods","lastChar","slice","substring","IsWhiteToMove","castlingRules","CastlingRights","whiteShortCastle","whiteLongCastle","blackShortCastle","blackLongCastle","EnPassant","isPossible","convertLocationToCoordinates","HalfMoves","FullMoves","setFen","fenParser","updateBoardPosition","fenRows","arr","tokens","r","push","squareColorIsWhite","squares","possibleMoveStatus","isPossibleMoveRef","current","find","item","key","Square","getPossibleMoves","movePiece","isPossibleMove","resetPossibleMoves","fileName","_jsxFileName","lineNumber","columnNumber","setBoardSquares","includes","updateIsWhiteToMove","updateHalfMoves","updateFullMoves","splice","location","convertCoordinatesToLocation","map","rowIndex","targetColIndex","index","_c8","pieceMapping","fenPiece","toUpperCase","_c9","generateSquareComponents","boardSquares","flatMap","UpdatePosition","position","_c10","coordinates","toString","number","DIM","String","fromCharCode","isKingInCheck","kingSquare","pseudo","boardSquaresRef","updatedSquares","s","cloneElement","checkDirections","directions","dx","dy","pieceColor","pieceType","linearDirections","diagonalDirections","knightMoves","isWhiteInCheck","isBlackInCheck","$RefreshReg$"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/Chess-React.js-/src/HelperMethods.js"],"sourcesContent":["import React from 'react';\r\nimport * as GlobalVariables from './globalVariables';\r\n\r\n/**\r\n * Checks if a character is Uppercase using the ASCII table.\r\n * @param {string} value - The character to check.\r\n * @returns {boolean} - True if the character is uppercase, false otherwise.\r\n */\r\nexport function IsUpperCase(value) {\r\n    return value.charCodeAt(0) >= 65 && value.charCodeAt(0) <= 90;\r\n}\r\n\r\n/**\r\n * Checks if a character is Lowercase using the ASCII table.\r\n * @param {string} value - The character to check.\r\n * @returns {boolean} - True if the character is lowercase, false otherwise.\r\n */\r\nexport function IsLowerCase(value) {\r\n    return value.charCodeAt(0) >= 97 && value.charCodeAt(0) <= 122;\r\n}\r\n\r\n/**\r\n * Checks if a character is a Digit using the ASCII table.\r\n * @param {string} value - The character to check.\r\n * @returns {boolean} - True if the character is a digit, false otherwise.\r\n */\r\nexport function IsDigit(value) {\r\n    return value.charCodeAt(0) >= 48 && value.charCodeAt(0) <= 57;\r\n}\r\n\r\n/**\r\n * Parses a FEN string and returns its components.\r\n * @param {string} fen - The FEN string to parse.\r\n * @returns {object} - An object containing the FEN components.\r\n */\r\nexport function ParseFEN(fen) {\r\n    const fenParts = fen.split(' ');\r\n    if (fenParts.length !== 6) {\r\n        throw new Error('Invalid FEN');\r\n    }\r\n    const [fenBoard, fenTurn, fenCastling, fenEnPassant, fenHalfMoves, fenFullMoves] = fenParts;\r\n    return {\r\n        fenBoard,\r\n        fenTurn,\r\n        fenCastling,\r\n        fenEnPassant,\r\n        fenHalfMoves: Number(fenHalfMoves),\r\n        fenFullMoves: Number(fenFullMoves)\r\n    };\r\n}\r\n\r\n/**\r\n * Converts FEN piece notation to an actual piece.\r\n * @param {string} letter - The FEN notation of the piece.\r\n * @returns {string} - The actual piece.\r\n */\r\nexport function ConvertFENtoPiece(letter) {\r\n    const FEN_PIECE_MAP = {\r\n        [GlobalVariables.FEN_PIECES_BLACK.PAWN]: GlobalVariables.PIECES.PAWN,\r\n        [GlobalVariables.FEN_PIECES_BLACK.KNIGHT]: GlobalVariables.PIECES.KNIGHT,\r\n        [GlobalVariables.FEN_PIECES_BLACK.KING]: GlobalVariables.PIECES.KING,\r\n        [GlobalVariables.FEN_PIECES_BLACK.QUEEN]: GlobalVariables.PIECES.QUEEN,\r\n        [GlobalVariables.FEN_PIECES_BLACK.ROOK]: GlobalVariables.PIECES.ROOK,\r\n        [GlobalVariables.FEN_PIECES_BLACK.BISHOP]: GlobalVariables.PIECES.BISHOP,\r\n    };\r\n\r\n    return FEN_PIECE_MAP[letter.toLowerCase()] || \"\";\r\n}\r\n\r\n/**\r\n * Converts the FEN piece notation to a piece that we can use in the square component.\r\n * @param {string} value - The FEN notation of the piece.\r\n * @returns {string} - The piece in {color-piece} format.\r\n */\r\nexport function ConvertFENPieceToPiece(value) {\r\n    if (IsUpperCase(value)) {\r\n        return `${GlobalVariables.COLORS.WHITE}-${ConvertFENtoPiece(value)}`;\r\n    }\r\n\r\n    if (IsLowerCase(value)) {\r\n        return `${GlobalVariables.COLORS.BLACK}-${ConvertFENtoPiece(value)}`;\r\n    }\r\n\r\n    return \"\";\r\n}\r\n\r\n/**\r\n * Converts a string in FEN format to a normal string.\r\n * @param {string} value - The FEN string.\r\n * @returns {string} - The normal string.\r\n */\r\nexport function ConvertFenToString(value) {\r\n    return value.split('').reduce((result, char) => {\r\n        if (IsDigit(char)) {\r\n            return result + GlobalVariables.EMPTY_SQUARE_PIECE.repeat(Number(char));\r\n        }\r\n        return result + char;\r\n    }, '');\r\n}\r\n\r\n/**\r\n * Checks if two squares are on the same row.\r\n * @param {object} square1 - The first square.\r\n * @param {object} square2 - The second square.\r\n * @returns {boolean} - True if the squares are on the same row, false otherwise.\r\n */\r\nexport function checkIfTwoSquaresAreOnTheSameRow(square1, square2) {\r\n    return square1.props.x === square2.props.x;\r\n}\r\n\r\n/**\r\n * Checks if the square is on the given row number.\r\n * @param {object} square - The square to check.\r\n * @param {number} rowNumber - The row number.\r\n * @returns {boolean} - True if the square is on the given row, false otherwise.\r\n */\r\nexport function isSquareOnRow(square, rowNumber) {\r\n    return square.props.x === rowNumber;\r\n}\r\n\r\n/**\r\n * Gets the piece from a square.\r\n * @param {object} square - The square to get the piece from.\r\n * @returns {string} - The piece.\r\n */\r\nexport function getPiece(square) {\r\n    return square.props.piece.split(GlobalVariables.PIECE_DELIMITER)[GlobalVariables.PIECE_PIECE_INDEX];\r\n}\r\n\r\n/**\r\n * Checks if a square has a specific piece.\r\n * @param {object} square - The square to check.\r\n * @param {string} piece - The piece to check for.\r\n * @returns {boolean} - True if the square has the piece, false otherwise.\r\n */\r\nexport function doesTheSquareHasThePiece(square, piece) {\r\n    return getPiece(square) === piece;\r\n}\r\n\r\n/**\r\n * Gets the piece color from a square.\r\n * @param {object} square - The square to get the piece color from.\r\n * @returns {string} - The piece color.\r\n */\r\nexport function getPieceColor(square) {\r\n    return square.props.piece.split(GlobalVariables.PIECE_DELIMITER)[GlobalVariables.PIECE_COLOR_INDEX];\r\n}\r\n\r\n/**\r\n * Checks if a color is white.\r\n * @param {string} color - The color to check.\r\n * @returns {boolean} - True if the color is white, false otherwise.\r\n */\r\nexport function isColorWhite(color) {\r\n    return color === GlobalVariables.COLORS.WHITE;\r\n}\r\n\r\n/**\r\n * Checks if a color is black.\r\n * @param {string} color - The color to check.\r\n * @returns {boolean} - True if the color is black, false otherwise.\r\n */\r\nexport function isColorBlack(color) {\r\n    return color === GlobalVariables.COLORS.BLACK;\r\n}\r\n\r\n/**\r\n * Checks if two pieces are of the same color.\r\n * @param {string} piece1 - The first piece.\r\n * @param {string} piece2 - The second piece.\r\n * @returns {boolean} - True if the pieces are of the same color, false otherwise.\r\n */\r\nexport function areSameColor(piece1, piece2) {\r\n    const color1 = piece1.split(GlobalVariables.PIECE_DELIMITER)[GlobalVariables.PIECE_COLOR_INDEX];\r\n    const color2 = piece2.split(GlobalVariables.PIECE_DELIMITER)[GlobalVariables.PIECE_COLOR_INDEX];\r\n    return color1 === color2;\r\n}\r\n\r\n/**\r\n * Checks if a move is equal to the current selected square.\r\n * @param {object} move - The move to check.\r\n * @returns {boolean} - True if the move is equal to the current selected square, false otherwise.\r\n */\r\nexport function checkIfAMoveIsEqualToTheCurrentSelectedSquare(move) {\r\n    return move.props.x === GlobalVariables.CurrentSquareSelection.x && move.props.y === GlobalVariables.CurrentSquareSelection.y;\r\n}\r\n\r\n/**\r\n * Compares if two squares are the same.\r\n * @param {object} square1 - The first square.\r\n * @param {object} square2 - The second square.\r\n * @returns {boolean} - True if the squares are the same, false otherwise.\r\n */\r\nexport function compareIfTwoSquaresAreTheSame(square1, square2) {\r\n    return square1.props.x === square2.props.x && square1.props.y === square2.props.y;\r\n}\r\n\r\n/**\r\n * Gets a target square by its location.\r\n * @param {number} x - The x coordinate of the target square.\r\n * @param {number} y - The y coordinate of the target square.\r\n * @returns {object} - The target square.\r\n */\r\nexport function getATargetSquareByLocation(x, y) {\r\n    return GlobalVariables.BoardPosition[x][y];\r\n}\r\n\r\n/**\r\n * Gets a target square by its piece.\r\n * @param {string} piece - The piece to search for.\r\n * @returns {object} - The target square.\r\n */\r\nexport function getATargetSquareByPiece(piece) {\r\n    for (let row of GlobalVariables.BoardPosition) {\r\n        for (let square of row) {\r\n            if (square.props.piece === piece) {\r\n                return square;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Checks if castling is possible.\r\n * @param {string} castlingType - The type of castling (long or short).\r\n * @param {boolean} [withWhite=true] - True if checking for white's castling, false otherwise.\r\n * @returns {boolean} - True if castling is possible, false otherwise.\r\n */\r\nexport function isCastlingPossible(castlingType, withWhite = true) {\r\n    const row = withWhite ? GlobalVariables.CASTLE_ROW_WHITE : GlobalVariables.CASTLE_ROW_BLACK;\r\n    const pieces = withWhite ? GlobalVariables.FEN_PIECES_WHITE : GlobalVariables.FEN_PIECES_BLACK;\r\n    const [rookCol, kingCol, pathCols] = castlingType === GlobalVariables.CASTLING_TYPES.LONG ?\r\n        [GlobalVariables.CASTLE_ROOK_INITIAL_COL_LONG, GlobalVariables.CASTLE_KING_INITIAL_COL, GlobalVariables.CASTLE_PATH_COLS_LONG] :\r\n        [GlobalVariables.CASTLE_ROOK_INITIAL_COL_SHORT, GlobalVariables.CASTLE_KING_INITIAL_COL, GlobalVariables.CASTLE_PATH_COLS_SHORT];\r\n\r\n    return GlobalVariables.BoardPosition[row][rookCol] === pieces.ROOK &&\r\n        GlobalVariables.BoardPosition[row][kingCol] === pieces.KING &&\r\n        pathCols.every(col => GlobalVariables.BoardPosition[row][col] === GlobalVariables.EMPTY_SQUARE_PIECE);\r\n}\r\n\r\n/**\r\n * Checks if a pawn is on its starting square.\r\n * @param {object} pawn - The pawn to check.\r\n * @returns {boolean} - True if the pawn is on its starting square, false otherwise.\r\n */\r\nexport function isPawnOnStartingSquare(pawn) {\r\n    const isWhite = isColorWhite(getPieceColor(pawn));\r\n    return isWhite ? pawn.props.x === GlobalVariables.WHITE_PAWN_STARTING_SQUARE : pawn.props.x === GlobalVariables.BLACK_PAWN_STARTING_SQUARE;\r\n}\r\n\r\n/**\r\n * Checks if a pawn is on an en passant square.\r\n * @param {object} pawn - The pawn to check.\r\n * @returns {boolean} - True if the pawn is on an en passant square, false otherwise.\r\n */\r\nexport function isPawnOnEnPassantSquare(pawn) {\r\n    const isWhite = isColorWhite(getPieceColor(pawn));\r\n    return isWhite ? pawn.props.x === GlobalVariables.WHITE_EN_PASSANT_SQUARE : pawn.props.x === GlobalVariables.BLACK_EN_PASSANT_SQUARE;\r\n}\r\n\r\n/**\r\n * Checks if a square is available for a move.\r\n * @param {object} square - The square to check.\r\n * @returns {boolean} - True if the square is available, false otherwise.\r\n */\r\nexport function isSquareAvailable(square) {\r\n    return !square.props.piece;\r\n}\r\n\r\n/**\r\n * Updates a column on a row with a new value.\r\n * @param {Array} row - The row to update.\r\n * @param {number} colIndex - The column index.\r\n * @param {string} newValue - The new value.\r\n * @returns {Array} - The updated row.\r\n */\r\nexport function updateColumnOnARow(row, colIndex, newValue) {\r\n    row[colIndex] = newValue;\r\n    return row;\r\n}\r\n\r\n/**\r\n * Removes the current square's piece.\r\n * @param {object} currentSquare - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @param {Array} row - The row to update.\r\n * @returns {Array} - The updated row.\r\n */\r\nexport function handleSquareOnCurrentRow(currentSquare, targetSquare, row) {\r\n    return checkIfTwoSquaresAreOnTheSameRow(currentSquare, targetSquare) ?\r\n        handleSquareAndTargetSquareOnTheSameRow(currentSquare, targetSquare, row) :\r\n        updateColumnOnARow(row, currentSquare.props.y, GlobalVariables.EMPTY_SQUARE_PIECE);\r\n}\r\n\r\n/**\r\n * Updates the target square with the current square's piece.\r\n * @param {object} currentSquare - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @param {Array} row - The row to update.\r\n * @returns {Array} - The updated row.\r\n */\r\nexport function handleTargetSquareOnCurrentRow(currentSquare, targetSquare, row) {\r\n    return updateColumnOnARow(row, targetSquare.props.y, ConvertPieceToFENPiece(currentSquare.props.piece));\r\n}\r\n\r\n/**\r\n * Checks if we're making a move on the same row and performs castling if we want to castle.\r\n * @param {object} currentSquare - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @param {Array} row - The row to update.\r\n * @returns {Array} - The updated row.\r\n */\r\nexport function handleSquareAndTargetSquareOnTheSameRow(currentSquare, targetSquare, row) {\r\n    if (doesTheSquareHasThePiece(currentSquare, GlobalVariables.PIECES.KING) && isCastlingPossible(currentSquare, targetSquare)) {\r\n        return handleCastling(currentSquare, row);\r\n    }\r\n    return SidewaysCapture(row, Number(currentSquare.props.y), Number(targetSquare.props.y), currentSquare.props.piece);\r\n}\r\n\r\n/**\r\n * Performs castling by swapping the rook and the king.\r\n * @param {object} square - The square to update.\r\n * @param {Array} row - The row to update.\r\n * @returns {Array} - The updated row.\r\n */\r\nexport function handleCastling(square, row) {\r\n    const color = getPieceColor(square);\r\n    const isWhite = isColorWhite(color);\r\n    const kingPiece = isWhite ? GlobalVariables.FEN_PIECES_WHITE.KING : GlobalVariables.FEN_PIECES_BLACK.KING;\r\n    const rookPiece = isWhite ? GlobalVariables.FEN_PIECES_WHITE.ROOK : GlobalVariables.FEN_PIECES_BLACK.ROOK;\r\n\r\n    Object.values(GlobalVariables.CASTLING_TYPES).forEach(type => {\r\n        if (isCastlingPossible(type, isWhite)) {\r\n            const [emptySquares, kingFinalCol, rookFinalCol] = type === GlobalVariables.CASTLING_TYPES.LONG ?\r\n                [GlobalVariables.EMPTY_SQUARES_AFTER_LONG_CASTLE, GlobalVariables.CASTLE_KING_FINAL_COL_LONG, GlobalVariables.CASTLE_ROOK_FINAL_COL_LONG] :\r\n                [GlobalVariables.EMPTY_SQUARES_AFTER_SHORT_CASTLE, GlobalVariables.CASTLE_KING_FINAL_COL_SHORT, GlobalVariables.CASTLE_ROOK_FINAL_COL_SHORT];\r\n            emptySquares.forEach(col => row[col] = GlobalVariables.EMPTY_SQUARE_PIECE);\r\n            row[kingFinalCol] = kingPiece;\r\n            row[rookFinalCol] = rookPiece;\r\n        }\r\n    });\r\n\r\n    return row;\r\n}\r\n\r\n/**\r\n * Generates a new FEN string based on the current board state.\r\n */\r\n//TODO: ensure everything gets parsed correctly\r\n//TODO: refactor the code\r\nexport function generateANewFen() {\r\n    let fenString = ''\r\n\r\n    for (let i = 0; i < BoardPosition.length; i++) {\r\n        let row = BoardPosition[i]\r\n        for (let j = 0; j < row.length; j++) {\r\n            let column = row[j]\r\n\r\n            if (column == ' ') {\r\n                if (fenString && HelperMethods.IsDigit(fenString[fenString.length - 1])) {\r\n                    let lastChar = fenString.slice(-1)\r\n                    fenString = fenString.substring(0, fenString.length - 1)\r\n                    fenString += Number(lastChar) + 1\r\n                } else {\r\n                    fenString += '1'\r\n                }\r\n            } else {\r\n                fenString += column\r\n            }\r\n        }\r\n        fenString += '/'\r\n    }\r\n\r\n    fenString = fenString.substring(0, fenString.length - 1) //removes the last slash\r\n\r\n    fenString += IsWhiteToMove ? ' w' : ' b'\r\n\r\n    let castlingRules = ''\r\n\r\n    castlingRules += CastlingRights.whiteShortCastle ? 'K' : ''\r\n    castlingRules += CastlingRights.whiteLongCastle ? 'Q' : ''\r\n    castlingRules += CastlingRights.blackShortCastle ? 'k' : ''\r\n    castlingRules += CastlingRights.blackLongCastle ? 'q' : ''\r\n\r\n    fenString += castlingRules.length == 0 ? ' -' : ' ' + castlingRules\r\n\r\n    fenString += EnPassant.isPossible ? ' ' + convertLocationToCoordinates(EnPassant.x, EnPassant.y) : ' -'\r\n\r\n    fenString += ' ' + HalfMoves\r\n    fenString += ' ' + FullMoves\r\n\r\n    setFen(fenString)\r\n}\r\n\r\n/**\r\n * Parses the FEN string to update the board state.\r\n * @param {boolean} updateBoardPosition - Whether to update the board position.\r\n */\r\n//TODO: refactor\r\nexport function fenParser(updateBoardPosition = true) {\r\n    //parses the FEN string to variables\r\n    const { fenBoard, fenTurn, fenCastling, fenEnPassant, fenHalfMoves, fenFullMoves } = HelperMethods.ParseFEN(fen)\r\n\r\n    const fenRows = fenBoard.split('/')\r\n\r\n    let arr = [];\r\n\r\n    //splits all rows and creates a matrix for the board\r\n    for (let row of fenRows) {\r\n        const tokens = row.split('')\r\n\r\n        let r = []\r\n\r\n        for (let i = 0; i < tokens.length; i++) {\r\n            if (Number(tokens[i])) {\r\n                for (let j = 0; j < Number(tokens[i]); j++) {\r\n                    r.push(' ')\r\n                }\r\n            } else {\r\n                r.push(tokens[i])\r\n            }\r\n        }\r\n\r\n        arr.push(r)\r\n    }\r\n\r\n    //generates a Square component for each element in the matrix created above\r\n    let squareColorIsWhite = true;\r\n    let squares = []\r\n\r\n    for (let i = 0; i < arr.length; i++) {\r\n        for (let j = 0; j < arr[i].length; j++) {\r\n            let color = squareColorIsWhite ? \"\" : \"dark\";\r\n            const possibleMoveStatus = isPossibleMoveRef.current.find(item => item.key === `${i}-${j}`);\r\n\r\n            //boardSquares.push(\r\n            squares.push(\r\n                <Square\r\n                    getPossibleMoves={getPossibleMoves}\r\n                    key={`${i}-${j}`}\r\n                    x={i}\r\n                    y={j}\r\n                    piece={HelperMethods.ConvertFENPieceToPiece(arr[i][j])}\r\n                    color={color}\r\n                    movePiece={movePiece}\r\n                    isPossibleMove={possibleMoveStatus ? possibleMoveStatus.value : false}\r\n                    resetPossibleMoves={resetPossibleMoves}\r\n                />\r\n            )\r\n            squareColorIsWhite = !squareColorIsWhite;\r\n        }\r\n        squareColorIsWhite = !squareColorIsWhite;\r\n    }\r\n\r\n    setBoardSquares(squares)\r\n\r\n    // BoardSquares.splice(0, BoardSquares.length);\r\n    // BoardSquares.push(...squares)\r\n    // console.log(BoardSquares)\r\n\r\n    if (fenCastling.includes('K')) {\r\n        CastlingRights.whiteShortCastle = true;\r\n    }\r\n    if (fenCastling.includes('Q')) {\r\n        CastlingRights.whiteLongCastle = true;\r\n    }\r\n    if (fenCastling.includes('k')) {\r\n        CastlingRights.blackShortCastle = true;\r\n    }\r\n    if (fenCastling.includes('q')) {\r\n        CastlingRights.blackLongCastle = true;\r\n    }\r\n\r\n    fenTurn == 'w' ? updateIsWhiteToMove(true) : updateIsWhiteToMove(false)\r\n    updateHalfMoves(fenHalfMoves)\r\n    updateFullMoves(fenFullMoves)\r\n\r\n    if (updateBoardPosition) {\r\n        BoardPosition.splice(0, BoardPosition.length, ...arr)\r\n    }\r\n\r\n    if (!fenEnPassant.includes(PIECE_DELIMITER)) {\r\n        let location = HelperMethods.convertCoordinatesToLocation(fenEnPassant)\r\n\r\n        EnPassant.isPossible = true\r\n        EnPassant.x = location.x\r\n        EnPassant.y = location.y\r\n    }\r\n}\r\n\r\n/**\r\n * Updates the board position after making a move.\r\n * @param {object} currentSquare - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @returns {Array} - The updated board position.\r\n */\r\nexport function updateBoardPosition(currentSquare, targetSquare) {\r\n    return GlobalVariables.BoardPosition.map((row, rowIndex) => {\r\n        if (isSquareOnRow(currentSquare, rowIndex)) {\r\n            row = handleSquareOnCurrentRow(currentSquare, targetSquare, row);\r\n        }\r\n        if (isSquareOnRow(targetSquare, rowIndex)) {\r\n            row = handleTargetSquareOnCurrentRow(currentSquare, targetSquare, row);\r\n        }\r\n        return row;\r\n    });\r\n}\r\n\r\n/**\r\n * Modifies the row to capture pieces sideways.\r\n * @param {Array} row - The row to update.\r\n * @param {number} colIndex - The column index of the current square.\r\n * @param {number} targetColIndex - The column index of the target square.\r\n * @param {string} value - The piece value.\r\n * @returns {Array} - The updated row.\r\n */\r\nexport function SidewaysCapture(row, colIndex, targetColIndex, value) {\r\n    return row.map((col, index) => {\r\n        if (index === colIndex) return GlobalVariables.EMPTY_SQUARE_PIECE;\r\n        if (index === targetColIndex) return ConvertPieceToFENPiece(value);\r\n        return col;\r\n    });\r\n}\r\n\r\n/**\r\n * Converts the piece from {color-piece} format to FEN format (a single letter).\r\n * @param {string} value - The piece value.\r\n * @returns {string} - The FEN notation of the piece.\r\n */\r\nexport function ConvertPieceToFENPiece(value) {\r\n    const [color, piece] = value.split(GlobalVariables.PIECE_DELIMITER);\r\n    const pieceMapping = {\r\n        [GlobalVariables.PIECES.PAWN]: GlobalVariables.FEN_PIECES_BLACK.PAWN,\r\n        [GlobalVariables.PIECES.KNIGHT]: GlobalVariables.FEN_PIECES_BLACK.KNIGHT,\r\n        [GlobalVariables.PIECES.BISHOP]: GlobalVariables.FEN_PIECES_BLACK.BISHOP,\r\n        [GlobalVariables.PIECES.ROOK]: GlobalVariables.FEN_PIECES_BLACK.ROOK,\r\n        [GlobalVariables.PIECES.QUEEN]: GlobalVariables.FEN_PIECES_BLACK.QUEEN,\r\n        [GlobalVariables.PIECES.KING]: GlobalVariables.FEN_PIECES_BLACK.KING,\r\n    };\r\n\r\n    const fenPiece = pieceMapping[piece];\r\n    return isColorWhite(color) ? fenPiece.toUpperCase() : fenPiece;\r\n}\r\n\r\n/**\r\n * Generates the square components for the board.\r\n * @param {Array} boardSquares - The current board squares.\r\n * @param {Array} isPossibleMove - The possible moves.\r\n * @param {function} getPossibleMoves - The function to get possible moves.\r\n * @param {function} movePiece - The function to move a piece.\r\n * @param {function} resetPossibleMoves - The function to reset possible moves.\r\n * @returns {Array} - The square components.\r\n */\r\nexport function generateSquareComponents(boardSquares, isPossibleMove, getPossibleMoves, movePiece, resetPossibleMoves) {\r\n    return boardSquares.flatMap((row, rowIndex) =>\r\n        row.map((square, colIndex) => (\r\n            <Square\r\n                key={`${rowIndex}-${colIndex}`}\r\n                x={rowIndex}\r\n                y={colIndex}\r\n                piece={square.piece}\r\n                color={square.color}\r\n                getPossibleMoves={getPossibleMoves}\r\n                movePiece={movePiece}\r\n                isPossibleMove={isPossibleMove.includes(square)}\r\n                resetPossibleMoves={resetPossibleMoves}\r\n            />\r\n        ))\r\n    );\r\n}\r\n\r\n/**\r\n * Updates the current position to a new position after making the move.\r\n * @param {object} square - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @param {array} position - The current position.\r\n * @returns {array} - The updated position.\r\n */\r\nexport function UpdatePosition(square, targetSquare, position) {\r\n    return position.map((row, rowIndex) => {\r\n        if (isSquareOnRow(square, rowIndex)) {\r\n            row = handleSquareOnCurrentRow(square, targetSquare, row);\r\n        }\r\n        if (isSquareOnRow(targetSquare, rowIndex)) {\r\n            row = handleTargetSquareOnCurrentRow(square, targetSquare, row);\r\n        }\r\n        return row;\r\n    });\r\n}\r\n\r\n/**\r\n * Converts board coordinates to X and Y position on the board, e.g., a8 = 0, 0\r\n * @param {string} coordinates - The board coordinates to convert.\r\n * @returns {object} - Returns an object with x and y properties.\r\n */\r\nexport function convertCoordinatesToLocation(coordinates) {\r\n    let tokens = coordinates.split('')\r\n\r\n    //skip invalid coordinates\r\n    if (tokens.length != 2) {\r\n        return\r\n    }\r\n\r\n    let letter = tokens[0].toString().toUpperCase()\r\n    let number = tokens[1]\r\n\r\n    //65 is the ASCII code for capital A which will give us 0 if we have A as a coordinate; A-F will give us 0-7 for y (columns)\r\n    //reverse the numbers since we draw the board top down for x (rows)\r\n    return { x: DIM - Number(number), y: letter.charCodeAt(0) - 65 }\r\n}\r\n\r\n/**\r\n * Converts a piece location to board coordinate, e.g., 0, 0 to a8\r\n * @param {string} x - The X position.\r\n * @param {string} y - The Y position.\r\n * @returns {string} - Returns a string containing the board coordinates.\r\n */\r\nexport function convertLocationToCoordinates(x, y) {\r\n    //maps y (column) to the letter coordinate; add 65 (capital A code) to the ASCII code for the location we have and we get a letter between A and F\r\n    //reverses the x (rows) coordinate because we drop the board top down, while coordinates go down up\r\n    return `${String.fromCharCode(y + 65)}${DIM - x}`.toLowerCase()\r\n}\r\n\r\n/**\r\n * Determines if the king is in check.\r\n * @param {object} kingSquare - The square where the king is located.\r\n * @param {object} [pseudo] - The square where a piece is hypothetically moved.\r\n * @param {object} [currentSquare=null] - The square of the piece being moved.\r\n * @param {string} color - The color of the king ('white' or 'black').\r\n * @returns {boolean} - True if the king is in check, false otherwise.\r\n */\r\nfunction isKingInCheck(kingSquare, pseudo, currentSquare = null, color) {\r\n    const squares = boardSquaresRef.current;\r\n\r\n    const updatedSquares = squares.map(s => {\r\n        if (pseudo && s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\r\n            return React.cloneElement(s, { piece: pseudo.props.piece });\r\n        } else if (currentSquare && s.props.x === currentSquare.props.x && s.props.y === currentSquare.props.y) {\r\n            return React.cloneElement(s, { piece: '' });\r\n        } else {\r\n            return s;\r\n        }\r\n    });\r\n\r\n    const checkDirections = (directions) => {\r\n        for (const [dx, dy] of directions) {\r\n            for (let i = 1; i < DIM; i++) {\r\n                const piece = updatedSquares.find(s => s.props.x === kingSquare.props.x + dx * i && s.props.y === kingSquare.props.y + dy * i);\r\n                if (!piece) break;\r\n                const [pieceColor, pieceType] = piece.props.piece.split(\"-\");\r\n                if (pieceColor !== color) {\r\n                    if (pieceType === \"queen\" || pieceType === \"rook\" || pieceType === \"bishop\" || (i === 1 && pieceType === \"pawn\" && (dx === -1 || dx === 1))) {\r\n                        return true;\r\n                    }\r\n                    if (piece.props.piece) break;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const linearDirections = [\r\n        [1, 0], [-1, 0], [0, 1], [0, -1]  // Right, Left, Up, Down\r\n    ];\r\n\r\n    const diagonalDirections = [\r\n        [1, 1], [-1, -1], [1, -1], [-1, 1]  // Diagonals\r\n    ];\r\n\r\n    if (checkDirections(linearDirections) || checkDirections(diagonalDirections)) {\r\n        return true;\r\n    }\r\n\r\n    const knightMoves = [\r\n        [-2, -1], [-2, 1], [2, -1], [2, 1],\r\n        [-1, 2], [1, 2], [-1, -2], [1, -2]\r\n    ];\r\n\r\n    for (const [dx, dy] of knightMoves) {\r\n        const piece = updatedSquares.find(s => s.props.x === kingSquare.props.x + dx && s.props.y === kingSquare.props.y + dy);\r\n        if (piece && piece.props.piece.split(\"-\")[0] !== color && piece.props.piece.split(\"-\")[1] === \"knight\") {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/**\r\n * Determines if the white king is in check.\r\n * @param {object} kingSquare - The square where the king is located.\r\n * @param {object} [pseudo] - The square where a piece is hypothetically moved.\r\n * @param {object} [currentSquare=null] - The square of the piece being moved.\r\n * @returns {boolean} - True if the white king is in check, false otherwise.\r\n */\r\nfunction isWhiteInCheck(kingSquare, pseudo, currentSquare = null) {\r\n    return isKingInCheck(kingSquare, pseudo, currentSquare, 'white');\r\n}\r\n\r\n/**\r\n * Determines if the black king is in check.\r\n * @param {object} kingSquare - The square where the king is located.\r\n * @param {object} [pseudo] - The square where a piece is hypothetically moved.\r\n * @param {object} [currentSquare=null] - The square of the piece being moved.\r\n * @returns {boolean} - True if the black king is in check, false otherwise.\r\n */\r\nfunction isBlackInCheck(kingSquare, pseudo, currentSquare = null) {\r\n    return isKingInCheck(kingSquare, pseudo, currentSquare, 'black');\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,KAAKC,eAAe,MAAM,mBAAmB;;AAEpD;AACA;AACA;AACA;AACA;AAJA,SAAAC,MAAA,IAAAC,OAAA;AAKA,OAAO,SAASC,WAAWA,CAACC,KAAK,EAAE;EAC/B,OAAOA,KAAK,CAACC,UAAU,CAAC,CAAC,CAAC,IAAI,EAAE,IAAID,KAAK,CAACC,UAAU,CAAC,CAAC,CAAC,IAAI,EAAE;AACjE;;AAEA;AACA;AACA;AACA;AACA;AAJAC,EAAA,GAJgBH,WAAW;AAS3B,OAAO,SAASI,WAAWA,CAACH,KAAK,EAAE;EAC/B,OAAOA,KAAK,CAACC,UAAU,CAAC,CAAC,CAAC,IAAI,EAAE,IAAID,KAAK,CAACC,UAAU,CAAC,CAAC,CAAC,IAAI,GAAG;AAClE;;AAEA;AACA;AACA;AACA;AACA;AAJAG,GAAA,GAJgBD,WAAW;AAS3B,OAAO,SAASE,OAAOA,CAACL,KAAK,EAAE;EAC3B,OAAOA,KAAK,CAACC,UAAU,CAAC,CAAC,CAAC,IAAI,EAAE,IAAID,KAAK,CAACC,UAAU,CAAC,CAAC,CAAC,IAAI,EAAE;AACjE;;AAEA;AACA;AACA;AACA;AACA;AAJAK,GAAA,GAJgBD,OAAO;AASvB,OAAO,SAASE,QAAQA,CAACC,GAAG,EAAE;EAC1B,MAAMC,QAAQ,GAAGD,GAAG,CAACE,KAAK,CAAC,GAAG,CAAC;EAC/B,IAAID,QAAQ,CAACE,MAAM,KAAK,CAAC,EAAE;IACvB,MAAM,IAAIC,KAAK,CAAC,aAAa,CAAC;EAClC;EACA,MAAM,CAACC,QAAQ,EAAEC,OAAO,EAAEC,WAAW,EAAEC,YAAY,EAAEC,YAAY,EAAEC,YAAY,CAAC,GAAGT,QAAQ;EAC3F,OAAO;IACHI,QAAQ;IACRC,OAAO;IACPC,WAAW;IACXC,YAAY;IACZC,YAAY,EAAEE,MAAM,CAACF,YAAY,CAAC;IAClCC,YAAY,EAAEC,MAAM,CAACD,YAAY;EACrC,CAAC;AACL;;AAEA;AACA;AACA;AACA;AACA;AAJAE,GAAA,GAhBgBb,QAAQ;AAqBxB,OAAO,SAASc,iBAAiBA,CAACC,MAAM,EAAE;EACtC,MAAMC,aAAa,GAAG;IAClB,CAAC3B,eAAe,CAAC4B,gBAAgB,CAACC,IAAI,GAAG7B,eAAe,CAAC8B,MAAM,CAACD,IAAI;IACpE,CAAC7B,eAAe,CAAC4B,gBAAgB,CAACG,MAAM,GAAG/B,eAAe,CAAC8B,MAAM,CAACC,MAAM;IACxE,CAAC/B,eAAe,CAAC4B,gBAAgB,CAACI,IAAI,GAAGhC,eAAe,CAAC8B,MAAM,CAACE,IAAI;IACpE,CAAChC,eAAe,CAAC4B,gBAAgB,CAACK,KAAK,GAAGjC,eAAe,CAAC8B,MAAM,CAACG,KAAK;IACtE,CAACjC,eAAe,CAAC4B,gBAAgB,CAACM,IAAI,GAAGlC,eAAe,CAAC8B,MAAM,CAACI,IAAI;IACpE,CAAClC,eAAe,CAAC4B,gBAAgB,CAACO,MAAM,GAAGnC,eAAe,CAAC8B,MAAM,CAACK;EACtE,CAAC;EAED,OAAOR,aAAa,CAACD,MAAM,CAACU,WAAW,CAAC,CAAC,CAAC,IAAI,EAAE;AACpD;;AAEA;AACA;AACA;AACA;AACA;AAJAC,GAAA,GAbgBZ,iBAAiB;AAkBjC,OAAO,SAASa,sBAAsBA,CAAClC,KAAK,EAAE;EAC1C,IAAID,WAAW,CAACC,KAAK,CAAC,EAAE;IACpB,OAAQ,GAAEJ,eAAe,CAACuC,MAAM,CAACC,KAAM,IAAGf,iBAAiB,CAACrB,KAAK,CAAE,EAAC;EACxE;EAEA,IAAIG,WAAW,CAACH,KAAK,CAAC,EAAE;IACpB,OAAQ,GAAEJ,eAAe,CAACuC,MAAM,CAACE,KAAM,IAAGhB,iBAAiB,CAACrB,KAAK,CAAE,EAAC;EACxE;EAEA,OAAO,EAAE;AACb;;AAEA;AACA;AACA;AACA;AACA;AAJAsC,GAAA,GAZgBJ,sBAAsB;AAiBtC,OAAO,SAASK,kBAAkBA,CAACvC,KAAK,EAAE;EACtC,OAAOA,KAAK,CAACU,KAAK,CAAC,EAAE,CAAC,CAAC8B,MAAM,CAAC,CAACC,MAAM,EAAEC,IAAI,KAAK;IAC5C,IAAIrC,OAAO,CAACqC,IAAI,CAAC,EAAE;MACf,OAAOD,MAAM,GAAG7C,eAAe,CAAC+C,kBAAkB,CAACC,MAAM,CAACzB,MAAM,CAACuB,IAAI,CAAC,CAAC;IAC3E;IACA,OAAOD,MAAM,GAAGC,IAAI;EACxB,CAAC,EAAE,EAAE,CAAC;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AALAG,GAAA,GATgBN,kBAAkB;AAelC,OAAO,SAASO,gCAAgCA,CAACC,OAAO,EAAEC,OAAO,EAAE;EAC/D,OAAOD,OAAO,CAACE,KAAK,CAACC,CAAC,KAAKF,OAAO,CAACC,KAAK,CAACC,CAAC;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAACC,MAAM,EAAEC,SAAS,EAAE;EAC7C,OAAOD,MAAM,CAACH,KAAK,CAACC,CAAC,KAAKG,SAAS;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,QAAQA,CAACF,MAAM,EAAE;EAC7B,OAAOA,MAAM,CAACH,KAAK,CAACM,KAAK,CAAC7C,KAAK,CAACd,eAAe,CAAC4D,eAAe,CAAC,CAAC5D,eAAe,CAAC6D,iBAAiB,CAAC;AACvG;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,wBAAwBA,CAACN,MAAM,EAAEG,KAAK,EAAE;EACpD,OAAOD,QAAQ,CAACF,MAAM,CAAC,KAAKG,KAAK;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,aAAaA,CAACP,MAAM,EAAE;EAClC,OAAOA,MAAM,CAACH,KAAK,CAACM,KAAK,CAAC7C,KAAK,CAACd,eAAe,CAAC4D,eAAe,CAAC,CAAC5D,eAAe,CAACgE,iBAAiB,CAAC;AACvG;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAACC,KAAK,EAAE;EAChC,OAAOA,KAAK,KAAKlE,eAAe,CAACuC,MAAM,CAACC,KAAK;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS2B,YAAYA,CAACD,KAAK,EAAE;EAChC,OAAOA,KAAK,KAAKlE,eAAe,CAACuC,MAAM,CAACE,KAAK;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS2B,YAAYA,CAACC,MAAM,EAAEC,MAAM,EAAE;EACzC,MAAMC,MAAM,GAAGF,MAAM,CAACvD,KAAK,CAACd,eAAe,CAAC4D,eAAe,CAAC,CAAC5D,eAAe,CAACgE,iBAAiB,CAAC;EAC/F,MAAMQ,MAAM,GAAGF,MAAM,CAACxD,KAAK,CAACd,eAAe,CAAC4D,eAAe,CAAC,CAAC5D,eAAe,CAACgE,iBAAiB,CAAC;EAC/F,OAAOO,MAAM,KAAKC,MAAM;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,6CAA6CA,CAACC,IAAI,EAAE;EAChE,OAAOA,IAAI,CAACrB,KAAK,CAACC,CAAC,KAAKtD,eAAe,CAAC2E,sBAAsB,CAACrB,CAAC,IAAIoB,IAAI,CAACrB,KAAK,CAACuB,CAAC,KAAK5E,eAAe,CAAC2E,sBAAsB,CAACC,CAAC;AACjI;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,6BAA6BA,CAAC1B,OAAO,EAAEC,OAAO,EAAE;EAC5D,OAAOD,OAAO,CAACE,KAAK,CAACC,CAAC,KAAKF,OAAO,CAACC,KAAK,CAACC,CAAC,IAAIH,OAAO,CAACE,KAAK,CAACuB,CAAC,KAAKxB,OAAO,CAACC,KAAK,CAACuB,CAAC;AACrF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,0BAA0BA,CAACxB,CAAC,EAAEsB,CAAC,EAAE;EAC7C,OAAO5E,eAAe,CAAC+E,aAAa,CAACzB,CAAC,CAAC,CAACsB,CAAC,CAAC;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,uBAAuBA,CAACrB,KAAK,EAAE;EAC3C,KAAK,IAAIsB,GAAG,IAAIjF,eAAe,CAAC+E,aAAa,EAAE;IAC3C,KAAK,IAAIvB,MAAM,IAAIyB,GAAG,EAAE;MACpB,IAAIzB,MAAM,CAACH,KAAK,CAACM,KAAK,KAAKA,KAAK,EAAE;QAC9B,OAAOH,MAAM;MACjB;IACJ;EACJ;EACA,OAAO,IAAI;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS0B,kBAAkBA,CAACC,YAAY,EAAEC,SAAS,GAAG,IAAI,EAAE;EAC/D,MAAMH,GAAG,GAAGG,SAAS,GAAGpF,eAAe,CAACqF,gBAAgB,GAAGrF,eAAe,CAACsF,gBAAgB;EAC3F,MAAMC,MAAM,GAAGH,SAAS,GAAGpF,eAAe,CAACwF,gBAAgB,GAAGxF,eAAe,CAAC4B,gBAAgB;EAC9F,MAAM,CAAC6D,OAAO,EAAEC,OAAO,EAAEC,QAAQ,CAAC,GAAGR,YAAY,KAAKnF,eAAe,CAAC4F,cAAc,CAACC,IAAI,GACrF,CAAC7F,eAAe,CAAC8F,4BAA4B,EAAE9F,eAAe,CAAC+F,uBAAuB,EAAE/F,eAAe,CAACgG,qBAAqB,CAAC,GAC9H,CAAChG,eAAe,CAACiG,6BAA6B,EAAEjG,eAAe,CAAC+F,uBAAuB,EAAE/F,eAAe,CAACkG,sBAAsB,CAAC;EAEpI,OAAOlG,eAAe,CAAC+E,aAAa,CAACE,GAAG,CAAC,CAACQ,OAAO,CAAC,KAAKF,MAAM,CAACrD,IAAI,IAC9DlC,eAAe,CAAC+E,aAAa,CAACE,GAAG,CAAC,CAACS,OAAO,CAAC,KAAKH,MAAM,CAACvD,IAAI,IAC3D2D,QAAQ,CAACQ,KAAK,CAACC,GAAG,IAAIpG,eAAe,CAAC+E,aAAa,CAACE,GAAG,CAAC,CAACmB,GAAG,CAAC,KAAKpG,eAAe,CAAC+C,kBAAkB,CAAC;AAC7G;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASsD,sBAAsBA,CAACC,IAAI,EAAE;EACzC,MAAMC,OAAO,GAAGtC,YAAY,CAACF,aAAa,CAACuC,IAAI,CAAC,CAAC;EACjD,OAAOC,OAAO,GAAGD,IAAI,CAACjD,KAAK,CAACC,CAAC,KAAKtD,eAAe,CAACwG,0BAA0B,GAAGF,IAAI,CAACjD,KAAK,CAACC,CAAC,KAAKtD,eAAe,CAACyG,0BAA0B;AAC9I;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,uBAAuBA,CAACJ,IAAI,EAAE;EAC1C,MAAMC,OAAO,GAAGtC,YAAY,CAACF,aAAa,CAACuC,IAAI,CAAC,CAAC;EACjD,OAAOC,OAAO,GAAGD,IAAI,CAACjD,KAAK,CAACC,CAAC,KAAKtD,eAAe,CAAC2G,uBAAuB,GAAGL,IAAI,CAACjD,KAAK,CAACC,CAAC,KAAKtD,eAAe,CAAC4G,uBAAuB;AACxI;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,iBAAiBA,CAACrD,MAAM,EAAE;EACtC,OAAO,CAACA,MAAM,CAACH,KAAK,CAACM,KAAK;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASmD,kBAAkBA,CAAC7B,GAAG,EAAE8B,QAAQ,EAAEC,QAAQ,EAAE;EACxD/B,GAAG,CAAC8B,QAAQ,CAAC,GAAGC,QAAQ;EACxB,OAAO/B,GAAG;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASgC,wBAAwBA,CAACC,aAAa,EAAEC,YAAY,EAAElC,GAAG,EAAE;EACvE,OAAO/B,gCAAgC,CAACgE,aAAa,EAAEC,YAAY,CAAC,GAChEC,uCAAuC,CAACF,aAAa,EAAEC,YAAY,EAAElC,GAAG,CAAC,GACzE6B,kBAAkB,CAAC7B,GAAG,EAAEiC,aAAa,CAAC7D,KAAK,CAACuB,CAAC,EAAE5E,eAAe,CAAC+C,kBAAkB,CAAC;AAC1F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASsE,8BAA8BA,CAACH,aAAa,EAAEC,YAAY,EAAElC,GAAG,EAAE;EAC7E,OAAO6B,kBAAkB,CAAC7B,GAAG,EAAEkC,YAAY,CAAC9D,KAAK,CAACuB,CAAC,EAAE0C,sBAAsB,CAACJ,aAAa,CAAC7D,KAAK,CAACM,KAAK,CAAC,CAAC;AAC3G;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASyD,uCAAuCA,CAACF,aAAa,EAAEC,YAAY,EAAElC,GAAG,EAAE;EACtF,IAAInB,wBAAwB,CAACoD,aAAa,EAAElH,eAAe,CAAC8B,MAAM,CAACE,IAAI,CAAC,IAAIkD,kBAAkB,CAACgC,aAAa,EAAEC,YAAY,CAAC,EAAE;IACzH,OAAOI,cAAc,CAACL,aAAa,EAAEjC,GAAG,CAAC;EAC7C;EACA,OAAOuC,eAAe,CAACvC,GAAG,EAAE1D,MAAM,CAAC2F,aAAa,CAAC7D,KAAK,CAACuB,CAAC,CAAC,EAAErD,MAAM,CAAC4F,YAAY,CAAC9D,KAAK,CAACuB,CAAC,CAAC,EAAEsC,aAAa,CAAC7D,KAAK,CAACM,KAAK,CAAC;AACvH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS4D,cAAcA,CAAC/D,MAAM,EAAEyB,GAAG,EAAE;EACxC,MAAMf,KAAK,GAAGH,aAAa,CAACP,MAAM,CAAC;EACnC,MAAM+C,OAAO,GAAGtC,YAAY,CAACC,KAAK,CAAC;EACnC,MAAMuD,SAAS,GAAGlB,OAAO,GAAGvG,eAAe,CAACwF,gBAAgB,CAACxD,IAAI,GAAGhC,eAAe,CAAC4B,gBAAgB,CAACI,IAAI;EACzG,MAAM0F,SAAS,GAAGnB,OAAO,GAAGvG,eAAe,CAACwF,gBAAgB,CAACtD,IAAI,GAAGlC,eAAe,CAAC4B,gBAAgB,CAACM,IAAI;EAEzGyF,MAAM,CAACC,MAAM,CAAC5H,eAAe,CAAC4F,cAAc,CAAC,CAACiC,OAAO,CAACC,IAAI,IAAI;IAC1D,IAAI5C,kBAAkB,CAAC4C,IAAI,EAAEvB,OAAO,CAAC,EAAE;MACnC,MAAM,CAACwB,YAAY,EAAEC,YAAY,EAAEC,YAAY,CAAC,GAAGH,IAAI,KAAK9H,eAAe,CAAC4F,cAAc,CAACC,IAAI,GAC3F,CAAC7F,eAAe,CAACkI,+BAA+B,EAAElI,eAAe,CAACmI,0BAA0B,EAAEnI,eAAe,CAACoI,0BAA0B,CAAC,GACzI,CAACpI,eAAe,CAACqI,gCAAgC,EAAErI,eAAe,CAACsI,2BAA2B,EAAEtI,eAAe,CAACuI,2BAA2B,CAAC;MAChJR,YAAY,CAACF,OAAO,CAACzB,GAAG,IAAInB,GAAG,CAACmB,GAAG,CAAC,GAAGpG,eAAe,CAAC+C,kBAAkB,CAAC;MAC1EkC,GAAG,CAAC+C,YAAY,CAAC,GAAGP,SAAS;MAC7BxC,GAAG,CAACgD,YAAY,CAAC,GAAGP,SAAS;IACjC;EACJ,CAAC,CAAC;EAEF,OAAOzC,GAAG;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASuD,eAAeA,CAAA,EAAG;EAC9B,IAAIC,SAAS,GAAG,EAAE;EAElB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG3D,aAAa,CAAChE,MAAM,EAAE2H,CAAC,EAAE,EAAE;IAC3C,IAAIzD,GAAG,GAAGF,aAAa,CAAC2D,CAAC,CAAC;IAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG1D,GAAG,CAAClE,MAAM,EAAE4H,CAAC,EAAE,EAAE;MACjC,IAAIC,MAAM,GAAG3D,GAAG,CAAC0D,CAAC,CAAC;MAEnB,IAAIC,MAAM,IAAI,GAAG,EAAE;QACf,IAAIH,SAAS,IAAII,aAAa,CAACpI,OAAO,CAACgI,SAAS,CAACA,SAAS,CAAC1H,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE;UACrE,IAAI+H,QAAQ,GAAGL,SAAS,CAACM,KAAK,CAAC,CAAC,CAAC,CAAC;UAClCN,SAAS,GAAGA,SAAS,CAACO,SAAS,CAAC,CAAC,EAAEP,SAAS,CAAC1H,MAAM,GAAG,CAAC,CAAC;UACxD0H,SAAS,IAAIlH,MAAM,CAACuH,QAAQ,CAAC,GAAG,CAAC;QACrC,CAAC,MAAM;UACHL,SAAS,IAAI,GAAG;QACpB;MACJ,CAAC,MAAM;QACHA,SAAS,IAAIG,MAAM;MACvB;IACJ;IACAH,SAAS,IAAI,GAAG;EACpB;EAEAA,SAAS,GAAGA,SAAS,CAACO,SAAS,CAAC,CAAC,EAAEP,SAAS,CAAC1H,MAAM,GAAG,CAAC,CAAC,EAAC;;EAEzD0H,SAAS,IAAIQ,aAAa,GAAG,IAAI,GAAG,IAAI;EAExC,IAAIC,aAAa,GAAG,EAAE;EAEtBA,aAAa,IAAIC,cAAc,CAACC,gBAAgB,GAAG,GAAG,GAAG,EAAE;EAC3DF,aAAa,IAAIC,cAAc,CAACE,eAAe,GAAG,GAAG,GAAG,EAAE;EAC1DH,aAAa,IAAIC,cAAc,CAACG,gBAAgB,GAAG,GAAG,GAAG,EAAE;EAC3DJ,aAAa,IAAIC,cAAc,CAACI,eAAe,GAAG,GAAG,GAAG,EAAE;EAE1Dd,SAAS,IAAIS,aAAa,CAACnI,MAAM,IAAI,CAAC,GAAG,IAAI,GAAG,GAAG,GAAGmI,aAAa;EAEnET,SAAS,IAAIe,SAAS,CAACC,UAAU,GAAG,GAAG,GAAGC,4BAA4B,CAACF,SAAS,CAAClG,CAAC,EAAEkG,SAAS,CAAC5E,CAAC,CAAC,GAAG,IAAI;EAEvG6D,SAAS,IAAI,GAAG,GAAGkB,SAAS;EAC5BlB,SAAS,IAAI,GAAG,GAAGmB,SAAS;EAE5BC,MAAM,CAACpB,SAAS,CAAC;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASqB,SAASA,CAACC,mBAAmB,GAAG,IAAI,EAAE;EAClD;EACA,MAAM;IAAE9I,QAAQ;IAAEC,OAAO;IAAEC,WAAW;IAAEC,YAAY;IAAEC,YAAY;IAAEC;EAAa,CAAC,GAAGuH,aAAa,CAAClI,QAAQ,CAACC,GAAG,CAAC;EAEhH,MAAMoJ,OAAO,GAAG/I,QAAQ,CAACH,KAAK,CAAC,GAAG,CAAC;EAEnC,IAAImJ,GAAG,GAAG,EAAE;;EAEZ;EACA,KAAK,IAAIhF,GAAG,IAAI+E,OAAO,EAAE;IACrB,MAAME,MAAM,GAAGjF,GAAG,CAACnE,KAAK,CAAC,EAAE,CAAC;IAE5B,IAAIqJ,CAAC,GAAG,EAAE;IAEV,KAAK,IAAIzB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwB,MAAM,CAACnJ,MAAM,EAAE2H,CAAC,EAAE,EAAE;MACpC,IAAInH,MAAM,CAAC2I,MAAM,CAACxB,CAAC,CAAC,CAAC,EAAE;QACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpH,MAAM,CAAC2I,MAAM,CAACxB,CAAC,CAAC,CAAC,EAAEC,CAAC,EAAE,EAAE;UACxCwB,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;QACf;MACJ,CAAC,MAAM;QACHD,CAAC,CAACC,IAAI,CAACF,MAAM,CAACxB,CAAC,CAAC,CAAC;MACrB;IACJ;IAEAuB,GAAG,CAACG,IAAI,CAACD,CAAC,CAAC;EACf;;EAEA;EACA,IAAIE,kBAAkB,GAAG,IAAI;EAC7B,IAAIC,OAAO,GAAG,EAAE;EAEhB,KAAK,IAAI5B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuB,GAAG,CAAClJ,MAAM,EAAE2H,CAAC,EAAE,EAAE;IACjC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsB,GAAG,CAACvB,CAAC,CAAC,CAAC3H,MAAM,EAAE4H,CAAC,EAAE,EAAE;MACpC,IAAIzE,KAAK,GAAGmG,kBAAkB,GAAG,EAAE,GAAG,MAAM;MAC5C,MAAME,kBAAkB,GAAGC,iBAAiB,CAACC,OAAO,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,GAAG,KAAM,GAAElC,CAAE,IAAGC,CAAE,EAAC,CAAC;;MAE3F;MACA2B,OAAO,CAACF,IAAI,eACRlK,OAAA,CAAC2K,MAAM;QACHC,gBAAgB,EAAEA,gBAAiB;QAEnCxH,CAAC,EAAEoF,CAAE;QACL9D,CAAC,EAAE+D,CAAE;QACLhF,KAAK,EAAEkF,aAAa,CAACvG,sBAAsB,CAAC2H,GAAG,CAACvB,CAAC,CAAC,CAACC,CAAC,CAAC,CAAE;QACvDzE,KAAK,EAAEA,KAAM;QACb6G,SAAS,EAAEA,SAAU;QACrBC,cAAc,EAAET,kBAAkB,GAAGA,kBAAkB,CAACnK,KAAK,GAAG,KAAM;QACtE6K,kBAAkB,EAAEA;MAAmB,GAPjC,GAAEvC,CAAE,IAAGC,CAAE,EAAC;QAAAuC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAQnB,CACL,CAAC;MACDhB,kBAAkB,GAAG,CAACA,kBAAkB;IAC5C;IACAA,kBAAkB,GAAG,CAACA,kBAAkB;EAC5C;EAEAiB,eAAe,CAAChB,OAAO,CAAC;;EAExB;EACA;EACA;;EAEA,IAAInJ,WAAW,CAACoK,QAAQ,CAAC,GAAG,CAAC,EAAE;IAC3BpC,cAAc,CAACC,gBAAgB,GAAG,IAAI;EAC1C;EACA,IAAIjI,WAAW,CAACoK,QAAQ,CAAC,GAAG,CAAC,EAAE;IAC3BpC,cAAc,CAACE,eAAe,GAAG,IAAI;EACzC;EACA,IAAIlI,WAAW,CAACoK,QAAQ,CAAC,GAAG,CAAC,EAAE;IAC3BpC,cAAc,CAACG,gBAAgB,GAAG,IAAI;EAC1C;EACA,IAAInI,WAAW,CAACoK,QAAQ,CAAC,GAAG,CAAC,EAAE;IAC3BpC,cAAc,CAACI,eAAe,GAAG,IAAI;EACzC;EAEArI,OAAO,IAAI,GAAG,GAAGsK,mBAAmB,CAAC,IAAI,CAAC,GAAGA,mBAAmB,CAAC,KAAK,CAAC;EACvEC,eAAe,CAACpK,YAAY,CAAC;EAC7BqK,eAAe,CAACpK,YAAY,CAAC;EAE7B,IAAIyI,mBAAmB,EAAE;IACrBhF,aAAa,CAAC4G,MAAM,CAAC,CAAC,EAAE5G,aAAa,CAAChE,MAAM,EAAE,GAAGkJ,GAAG,CAAC;EACzD;EAEA,IAAI,CAAC7I,YAAY,CAACmK,QAAQ,CAAC3H,eAAe,CAAC,EAAE;IACzC,IAAIgI,QAAQ,GAAG/C,aAAa,CAACgD,4BAA4B,CAACzK,YAAY,CAAC;IAEvEoI,SAAS,CAACC,UAAU,GAAG,IAAI;IAC3BD,SAAS,CAAClG,CAAC,GAAGsI,QAAQ,CAACtI,CAAC;IACxBkG,SAAS,CAAC5E,CAAC,GAAGgH,QAAQ,CAAChH,CAAC;EAC5B;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASmF,mBAAmBA,CAAC7C,aAAa,EAAEC,YAAY,EAAE;EAC7D,OAAOnH,eAAe,CAAC+E,aAAa,CAAC+G,GAAG,CAAC,CAAC7G,GAAG,EAAE8G,QAAQ,KAAK;IACxD,IAAIxI,aAAa,CAAC2D,aAAa,EAAE6E,QAAQ,CAAC,EAAE;MACxC9G,GAAG,GAAGgC,wBAAwB,CAACC,aAAa,EAAEC,YAAY,EAAElC,GAAG,CAAC;IACpE;IACA,IAAI1B,aAAa,CAAC4D,YAAY,EAAE4E,QAAQ,CAAC,EAAE;MACvC9G,GAAG,GAAGoC,8BAA8B,CAACH,aAAa,EAAEC,YAAY,EAAElC,GAAG,CAAC;IAC1E;IACA,OAAOA,GAAG;EACd,CAAC,CAAC;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASuC,eAAeA,CAACvC,GAAG,EAAE8B,QAAQ,EAAEiF,cAAc,EAAE5L,KAAK,EAAE;EAClE,OAAO6E,GAAG,CAAC6G,GAAG,CAAC,CAAC1F,GAAG,EAAE6F,KAAK,KAAK;IAC3B,IAAIA,KAAK,KAAKlF,QAAQ,EAAE,OAAO/G,eAAe,CAAC+C,kBAAkB;IACjE,IAAIkJ,KAAK,KAAKD,cAAc,EAAE,OAAO1E,sBAAsB,CAAClH,KAAK,CAAC;IAClE,OAAOgG,GAAG;EACd,CAAC,CAAC;AACN;;AAEA;AACA;AACA;AACA;AACA;AAJA8F,GAAA,GARgB1E,eAAe;AAa/B,OAAO,SAASF,sBAAsBA,CAAClH,KAAK,EAAE;EAC1C,MAAM,CAAC8D,KAAK,EAAEP,KAAK,CAAC,GAAGvD,KAAK,CAACU,KAAK,CAACd,eAAe,CAAC4D,eAAe,CAAC;EACnE,MAAMuI,YAAY,GAAG;IACjB,CAACnM,eAAe,CAAC8B,MAAM,CAACD,IAAI,GAAG7B,eAAe,CAAC4B,gBAAgB,CAACC,IAAI;IACpE,CAAC7B,eAAe,CAAC8B,MAAM,CAACC,MAAM,GAAG/B,eAAe,CAAC4B,gBAAgB,CAACG,MAAM;IACxE,CAAC/B,eAAe,CAAC8B,MAAM,CAACK,MAAM,GAAGnC,eAAe,CAAC4B,gBAAgB,CAACO,MAAM;IACxE,CAACnC,eAAe,CAAC8B,MAAM,CAACI,IAAI,GAAGlC,eAAe,CAAC4B,gBAAgB,CAACM,IAAI;IACpE,CAAClC,eAAe,CAAC8B,MAAM,CAACG,KAAK,GAAGjC,eAAe,CAAC4B,gBAAgB,CAACK,KAAK;IACtE,CAACjC,eAAe,CAAC8B,MAAM,CAACE,IAAI,GAAGhC,eAAe,CAAC4B,gBAAgB,CAACI;EACpE,CAAC;EAED,MAAMoK,QAAQ,GAAGD,YAAY,CAACxI,KAAK,CAAC;EACpC,OAAOM,YAAY,CAACC,KAAK,CAAC,GAAGkI,QAAQ,CAACC,WAAW,CAAC,CAAC,GAAGD,QAAQ;AAClE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARAE,GAAA,GAfgBhF,sBAAsB;AAwBtC,OAAO,SAASiF,wBAAwBA,CAACC,YAAY,EAAExB,cAAc,EAAEF,gBAAgB,EAAEC,SAAS,EAAEE,kBAAkB,EAAE;EACpH,OAAOuB,YAAY,CAACC,OAAO,CAAC,CAACxH,GAAG,EAAE8G,QAAQ,KACtC9G,GAAG,CAAC6G,GAAG,CAAC,CAACtI,MAAM,EAAEuD,QAAQ,kBACrB7G,OAAA,CAAC2K,MAAM;IAEHvH,CAAC,EAAEyI,QAAS;IACZnH,CAAC,EAAEmC,QAAS;IACZpD,KAAK,EAAEH,MAAM,CAACG,KAAM;IACpBO,KAAK,EAAEV,MAAM,CAACU,KAAM;IACpB4G,gBAAgB,EAAEA,gBAAiB;IACnCC,SAAS,EAAEA,SAAU;IACrBC,cAAc,EAAEA,cAAc,CAACO,QAAQ,CAAC/H,MAAM,CAAE;IAChDyH,kBAAkB,EAAEA;EAAmB,GARjC,GAAEc,QAAS,IAAGhF,QAAS,EAAC;IAAAmE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OASjC,CACJ,CACL,CAAC;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASqB,cAAcA,CAAClJ,MAAM,EAAE2D,YAAY,EAAEwF,QAAQ,EAAE;EAC3D,OAAOA,QAAQ,CAACb,GAAG,CAAC,CAAC7G,GAAG,EAAE8G,QAAQ,KAAK;IACnC,IAAIxI,aAAa,CAACC,MAAM,EAAEuI,QAAQ,CAAC,EAAE;MACjC9G,GAAG,GAAGgC,wBAAwB,CAACzD,MAAM,EAAE2D,YAAY,EAAElC,GAAG,CAAC;IAC7D;IACA,IAAI1B,aAAa,CAAC4D,YAAY,EAAE4E,QAAQ,CAAC,EAAE;MACvC9G,GAAG,GAAGoC,8BAA8B,CAAC7D,MAAM,EAAE2D,YAAY,EAAElC,GAAG,CAAC;IACnE;IACA,OAAOA,GAAG;EACd,CAAC,CAAC;AACN;;AAEA;AACA;AACA;AACA;AACA;AAJA2H,IAAA,GAZgBF,cAAc;AAiB9B,OAAO,SAASb,4BAA4BA,CAACgB,WAAW,EAAE;EACtD,IAAI3C,MAAM,GAAG2C,WAAW,CAAC/L,KAAK,CAAC,EAAE,CAAC;;EAElC;EACA,IAAIoJ,MAAM,CAACnJ,MAAM,IAAI,CAAC,EAAE;IACpB;EACJ;EAEA,IAAIW,MAAM,GAAGwI,MAAM,CAAC,CAAC,CAAC,CAAC4C,QAAQ,CAAC,CAAC,CAACT,WAAW,CAAC,CAAC;EAC/C,IAAIU,MAAM,GAAG7C,MAAM,CAAC,CAAC,CAAC;;EAEtB;EACA;EACA,OAAO;IAAE5G,CAAC,EAAE0J,GAAG,GAAGzL,MAAM,CAACwL,MAAM,CAAC;IAAEnI,CAAC,EAAElD,MAAM,CAACrB,UAAU,CAAC,CAAC,CAAC,GAAG;EAAG,CAAC;AACpE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASqJ,4BAA4BA,CAACpG,CAAC,EAAEsB,CAAC,EAAE;EAC/C;EACA;EACA,OAAQ,GAAEqI,MAAM,CAACC,YAAY,CAACtI,CAAC,GAAG,EAAE,CAAE,GAAEoI,GAAG,GAAG1J,CAAE,EAAC,CAAClB,WAAW,CAAC,CAAC;AACnE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS+K,aAAaA,CAACC,UAAU,EAAEC,MAAM,EAAEnG,aAAa,GAAG,IAAI,EAAEhD,KAAK,EAAE;EACpE,MAAMoG,OAAO,GAAGgD,eAAe,CAAC7C,OAAO;EAEvC,MAAM8C,cAAc,GAAGjD,OAAO,CAACwB,GAAG,CAAC0B,CAAC,IAAI;IACpC,IAAIH,MAAM,IAAIG,CAAC,CAACnK,KAAK,CAACC,CAAC,KAAK+J,MAAM,CAAChK,KAAK,CAACC,CAAC,IAAIkK,CAAC,CAACnK,KAAK,CAACuB,CAAC,KAAKyI,MAAM,CAAChK,KAAK,CAACuB,CAAC,EAAE;MACxE,oBAAO7E,KAAK,CAAC0N,YAAY,CAACD,CAAC,EAAE;QAAE7J,KAAK,EAAE0J,MAAM,CAAChK,KAAK,CAACM;MAAM,CAAC,CAAC;IAC/D,CAAC,MAAM,IAAIuD,aAAa,IAAIsG,CAAC,CAACnK,KAAK,CAACC,CAAC,KAAK4D,aAAa,CAAC7D,KAAK,CAACC,CAAC,IAAIkK,CAAC,CAACnK,KAAK,CAACuB,CAAC,KAAKsC,aAAa,CAAC7D,KAAK,CAACuB,CAAC,EAAE;MACpG,oBAAO7E,KAAK,CAAC0N,YAAY,CAACD,CAAC,EAAE;QAAE7J,KAAK,EAAE;MAAG,CAAC,CAAC;IAC/C,CAAC,MAAM;MACH,OAAO6J,CAAC;IACZ;EACJ,CAAC,CAAC;EAEF,MAAME,eAAe,GAAIC,UAAU,IAAK;IACpC,KAAK,MAAM,CAACC,EAAE,EAAEC,EAAE,CAAC,IAAIF,UAAU,EAAE;MAC/B,KAAK,IAAIjF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsE,GAAG,EAAEtE,CAAC,EAAE,EAAE;QAC1B,MAAM/E,KAAK,GAAG4J,cAAc,CAAC7C,IAAI,CAAC8C,CAAC,IAAIA,CAAC,CAACnK,KAAK,CAACC,CAAC,KAAK8J,UAAU,CAAC/J,KAAK,CAACC,CAAC,GAAGsK,EAAE,GAAGlF,CAAC,IAAI8E,CAAC,CAACnK,KAAK,CAACuB,CAAC,KAAKwI,UAAU,CAAC/J,KAAK,CAACuB,CAAC,GAAGiJ,EAAE,GAAGnF,CAAC,CAAC;QAC9H,IAAI,CAAC/E,KAAK,EAAE;QACZ,MAAM,CAACmK,UAAU,EAAEC,SAAS,CAAC,GAAGpK,KAAK,CAACN,KAAK,CAACM,KAAK,CAAC7C,KAAK,CAAC,GAAG,CAAC;QAC5D,IAAIgN,UAAU,KAAK5J,KAAK,EAAE;UACtB,IAAI6J,SAAS,KAAK,OAAO,IAAIA,SAAS,KAAK,MAAM,IAAIA,SAAS,KAAK,QAAQ,IAAKrF,CAAC,KAAK,CAAC,IAAIqF,SAAS,KAAK,MAAM,KAAKH,EAAE,KAAK,CAAC,CAAC,IAAIA,EAAE,KAAK,CAAC,CAAE,EAAE;YACzI,OAAO,IAAI;UACf;UACA,IAAIjK,KAAK,CAACN,KAAK,CAACM,KAAK,EAAE;QAC3B,CAAC,MAAM;UACH;QACJ;MACJ;IACJ;IACA,OAAO,KAAK;EAChB,CAAC;EAED,MAAMqK,gBAAgB,GAAG,CACrB,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAE;EAAA,CACrC;EAED,MAAMC,kBAAkB,GAAG,CACvB,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE;EAAA,CACvC;EAED,IAAIP,eAAe,CAACM,gBAAgB,CAAC,IAAIN,eAAe,CAACO,kBAAkB,CAAC,EAAE;IAC1E,OAAO,IAAI;EACf;EAEA,MAAMC,WAAW,GAAG,CAChB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAClC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CACrC;EAED,KAAK,MAAM,CAACN,EAAE,EAAEC,EAAE,CAAC,IAAIK,WAAW,EAAE;IAChC,MAAMvK,KAAK,GAAG4J,cAAc,CAAC7C,IAAI,CAAC8C,CAAC,IAAIA,CAAC,CAACnK,KAAK,CAACC,CAAC,KAAK8J,UAAU,CAAC/J,KAAK,CAACC,CAAC,GAAGsK,EAAE,IAAIJ,CAAC,CAACnK,KAAK,CAACuB,CAAC,KAAKwI,UAAU,CAAC/J,KAAK,CAACuB,CAAC,GAAGiJ,EAAE,CAAC;IACtH,IAAIlK,KAAK,IAAIA,KAAK,CAACN,KAAK,CAACM,KAAK,CAAC7C,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKoD,KAAK,IAAIP,KAAK,CAACN,KAAK,CAACM,KAAK,CAAC7C,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;MACpG,OAAO,IAAI;IACf;EACJ;EAEA,OAAO,KAAK;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASqN,cAAcA,CAACf,UAAU,EAAEC,MAAM,EAAEnG,aAAa,GAAG,IAAI,EAAE;EAC9D,OAAOiG,aAAa,CAACC,UAAU,EAAEC,MAAM,EAAEnG,aAAa,EAAE,OAAO,CAAC;AACpE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASkH,cAAcA,CAAChB,UAAU,EAAEC,MAAM,EAAEnG,aAAa,GAAG,IAAI,EAAE;EAC9D,OAAOiG,aAAa,CAACC,UAAU,EAAEC,MAAM,EAAEnG,aAAa,EAAE,OAAO,CAAC;AACpE;AAAC,IAAA5G,EAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAc,GAAA,EAAAa,GAAA,EAAAK,GAAA,EAAAO,GAAA,EAAAiJ,GAAA,EAAAI,GAAA,EAAAM,IAAA;AAAAyB,YAAA,CAAA/N,EAAA;AAAA+N,YAAA,CAAA7N,GAAA;AAAA6N,YAAA,CAAA3N,GAAA;AAAA2N,YAAA,CAAA7M,GAAA;AAAA6M,YAAA,CAAAhM,GAAA;AAAAgM,YAAA,CAAA3L,GAAA;AAAA2L,YAAA,CAAApL,GAAA;AAAAoL,YAAA,CAAAnC,GAAA;AAAAmC,YAAA,CAAA/B,GAAA;AAAA+B,YAAA,CAAAzB,IAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}