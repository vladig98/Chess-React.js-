{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vladi Gotsin\\\\Desktop\\\\react\\\\Chess-React.js-\\\\src\\\\Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Square from \"./Square.js\";\nimport * as HelperMethods from \"./HelperMethods.js\";\nimport * as GlobalVariables from \"./globalVariables.js\";\n\n/*\r\nTODO:\r\nCode Reusability: refactor some of the repeated code and generate new functions if needed\r\nConsistency and Naming: Have better and more consistent names for variables and functions\r\nDocumentation: add more comments to understand what is going on\r\nTesting: add unit tests\r\nImplementations: add promotions, implement endgames (mate, stalemate, draws repetition, 50 moves rule)\r\nBugs: Fix bugs (if any)\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Board() {\n  _s();\n  //<summary>\n  //FEN - Forsyth-Edwards Notation\n  //small letters - black pieces\n  //capital letters - white pieces\n  //numbers - empty board squares\n  //(/) - separates each board row\n  //first letter after the board indicates whose turn it is to move (w - white, b - black)\n  //next letters indicate castling rights, k - king-side, q - queen-side, (-) - no castling allowed for any side\n  //en passant square - when a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square\n  //the number of half turns (white moves, then black moves = 2 half moves) that were made without a pawn move or a capture of a piece (50-move rule when reaches 100)\n  //the number of full moves (white moves, then black moves = 1 full move); increase after every black half move\n  //</summary>\n  //starting position\n  //'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\n  //r1bqk2r/pppp1ppp/2n5/8/1bBPn3/2N2N2/PP3PPP/R1BQK2R w KQkq - 0 8\n  //r1bqk2r/pppp1ppp/2n2n2/2b5/2BPP3/5N2/PP3PPP/RNBQK2R b KQkq - 0 6\n  //r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21\n  const [fen, setFen] = useState('r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21');\n  //tracks if we can move to a square and adds a circle to the square if we can\n  const [isPossibleMove, setIsPossibleMove] = useState([]);\n  //keeps track of all square components that are visualized on the page; used to calculate moves and so on.\n  const [boardSquares, setBoardSquares] = useState([]);\n\n  //using ref hooks to have access to the latest values for the two states\n  const isPossibleMoveRef = useRef(isPossibleMove);\n  const boardSquaresRef = useRef(boardSquares);\n\n  //updates the possible move array\n  //if a square is a possible move, it will receive a circle indicating you can move there\n  const updateIsPossibleMove = (key, value) => {\n    //we are updating the state based on the previous state to resolve the issue with pending state and queuen in React\n    setIsPossibleMove(prevState => prevState.map(item =>\n    //if the current item's key matches the key we're looking for\n    //copy all properties of the object in a new object using the spread syntax (...)\n    //modify the value property to whatever value we're using\n    //copy the original item if no modifications are needed\n    item.key === key ? {\n      ...item,\n      value: value\n    } : item));\n  };\n\n  //update the reference to the IsPossibleMove array whenever we set a new value to the array\n  useEffect(() => {\n    isPossibleMoveRef.current = isPossibleMove;\n    fenParser(false);\n  }, [isPossibleMove]);\n\n  //called when the page loads\n  //removes all circles from squares indicating that they can be clicked to move a piece there\n  //we parse the FEN to fill in the board\n  useEffect(() => {\n    resetPossibleMoves();\n    fenParser();\n  }, []);\n\n  //parse the FEN and fill in the board with the new position when the FEN updates\n  useEffect(() => {\n    fenParser();\n  }, [fen]);\n\n  //update the reference to the BoardSquares array whenever we set a new value to the array\n  useEffect(() => {\n    boardSquaresRef.current = boardSquares;\n  }, [boardSquares]);\n\n  /**\r\n  * Resets possible moves highlighting.\r\n  */\n  function resetPossibleMoves() {\n    const initialIsPossibleMove = [];\n    for (let i = 0; i < DIM; i++) {\n      for (let j = 0; j < DIM; j++) {\n        initialIsPossibleMove.push({\n          key: `${i}-${j}`,\n          value: false\n        });\n      }\n    }\n    setIsPossibleMove(initialIsPossibleMove);\n  }\n\n  /**\r\n   * Generates a new FEN string based on the current board state.\r\n   */\n  //TODO: ensure everything gets parsed correctly\n  //TODO: refactor the code\n  function generateANewFen() {\n    let fenString = '';\n    for (let i = 0; i < BoardPosition.length; i++) {\n      let row = BoardPosition[i];\n      for (let j = 0; j < row.length; j++) {\n        let column = row[j];\n        if (column == ' ') {\n          if (fenString && HelperMethods.IsDigit(fenString[fenString.length - 1])) {\n            let lastChar = fenString.slice(-1);\n            fenString = fenString.substring(0, fenString.length - 1);\n            fenString += Number(lastChar) + 1;\n          } else {\n            fenString += '1';\n          }\n        } else {\n          fenString += column;\n        }\n      }\n      fenString += '/';\n    }\n    fenString = fenString.substring(0, fenString.length - 1); //removes the last slash\n\n    fenString += IsWhiteToMove ? ' w' : ' b';\n    let castlingRules = '';\n    castlingRules += CastlingRights.whiteShortCastle ? 'K' : '';\n    castlingRules += CastlingRights.whiteLongCastle ? 'Q' : '';\n    castlingRules += CastlingRights.blackShortCastle ? 'k' : '';\n    castlingRules += CastlingRights.blackLongCastle ? 'q' : '';\n    fenString += castlingRules.length == 0 ? ' -' : ' ' + castlingRules;\n    fenString += EnPassant.isPossible ? ' ' + convertLocationToCoordinates(EnPassant.x, EnPassant.y) : ' -';\n    fenString += ' ' + HalfMoves;\n    fenString += ' ' + FullMoves;\n    setFen(fenString);\n  }\n\n  /**\r\n   * Parses the FEN string to update the board state.\r\n   * @param {boolean} updateBoardPosition - Whether to update the board position.\r\n   */\n  //TODO: refactor\n  function fenParser(updateBoardPosition = true) {\n    //parses the FEN string to variables\n    const {\n      fenBoard,\n      fenTurn,\n      fenCastling,\n      fenEnPassant,\n      fenHalfMoves,\n      fenFullMoves\n    } = HelperMethods.ParseFEN(fen);\n    const fenRows = fenBoard.split('/');\n    let arr = [];\n\n    //splits all rows and creates a matrix for the board\n    for (let row of fenRows) {\n      const tokens = row.split('');\n      let r = [];\n      for (let i = 0; i < tokens.length; i++) {\n        if (Number(tokens[i])) {\n          for (let j = 0; j < Number(tokens[i]); j++) {\n            r.push(' ');\n          }\n        } else {\n          r.push(tokens[i]);\n        }\n      }\n      arr.push(r);\n    }\n\n    //generates a Square component for each element in the matrix created above\n    let squareColorIsWhite = true;\n    let squares = [];\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0; j < arr[i].length; j++) {\n        let color = squareColorIsWhite ? \"\" : \"dark\";\n        const possibleMoveStatus = isPossibleMoveRef.current.find(item => item.key === `${i}-${j}`);\n\n        //boardSquares.push(\n        squares.push( /*#__PURE__*/_jsxDEV(Square, {\n          getPossibleMoves: getPossibleMoves,\n          x: i,\n          y: j,\n          piece: HelperMethods.ConvertFENPieceToPiece(arr[i][j]),\n          color: color,\n          movePiece: movePiece,\n          isPossibleMove: possibleMoveStatus ? possibleMoveStatus.value : false,\n          resetPossibleMoves: resetPossibleMoves\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 21\n        }, this));\n        squareColorIsWhite = !squareColorIsWhite;\n      }\n      squareColorIsWhite = !squareColorIsWhite;\n    }\n    setBoardSquares(squares);\n\n    // BoardSquares.splice(0, BoardSquares.length);\n    // BoardSquares.push(...squares)\n    // console.log(BoardSquares)\n\n    if (fenCastling.includes('K')) {\n      CastlingRights.whiteShortCastle = true;\n    }\n    if (fenCastling.includes('Q')) {\n      CastlingRights.whiteLongCastle = true;\n    }\n    if (fenCastling.includes('k')) {\n      CastlingRights.blackShortCastle = true;\n    }\n    if (fenCastling.includes('q')) {\n      CastlingRights.blackLongCastle = true;\n    }\n    fenTurn == 'w' ? updateIsWhiteToMove(true) : updateIsWhiteToMove(false);\n    updateHalfMoves(fenHalfMoves);\n    updateFullMoves(fenFullMoves);\n    if (updateBoardPosition) {\n      BoardPosition.splice(0, BoardPosition.length, ...arr);\n    }\n    if (!fenEnPassant.includes(PIECE_DELIMITER)) {\n      let location = HelperMethods.convertCoordinatesToLocation(fenEnPassant);\n      EnPassant.isPossible = true;\n      EnPassant.x = location.x;\n      EnPassant.y = location.y;\n    }\n  }\n\n  //determines if the white king is in check\n  //determines if making a move will put the white king in check (pseudo)\n  //determines if a certain move will be allowed and not put the white king in check (currentSquare && pseudo)\n  //TODO: refactor\n  //TODO: combine both isWhiteInCheck and isBlackInCheck into one function\n  function isWhiteInCheck(square, pseudo, currentSquare = null) {\n    let squares = boardSquaresRef.current;\n    if (pseudo) {\n      const updatedSquares = squares.map(s => {\n        if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\n          // Return a new Square component with the updated piece\n          return /*#__PURE__*/React.cloneElement(s, {\n            piece: pseudo.props.piece\n          });\n        } else if (currentSquare && s.props.x === currentSquare.props.x && s.props.y === currentSquare.props.y) {\n          return /*#__PURE__*/React.cloneElement(s, {\n            piece: ''\n          });\n        } else {\n          // For other squares, return the original Square component\n          return s;\n        }\n      });\n\n      // if (pseudo && currentSquare) {\n      //     if (pseudo.props.x == 4 && pseudo.props.y == 4 && currentSquare.props.x == 5 && currentSquare.props.y == 2) {\n      //         console.log(`Squares: ${JSON.stringify(squares)}, UpdatedSquares: ${JSON.stringify(updatedSquares)}`)\n      //     }\n      // }\n\n      squares = updatedSquares;\n    }\n\n    //check for attackers in front of the white king\n    for (let i = square.props.x - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from behind\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers behind the white king\n    for (let i = square.props.x + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the front\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the left of the white king\n    for (let i = square.props.y - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the left\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the right of the white king\n    for (let i = square.props.y + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the right\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == -1) {\n                //console.log(\"in check from top half of counterclockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from top half of counterclockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == 1) {\n                //console.log(\"in check from top half of clockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from top half of clockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for knights check\n    let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1);\n    let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1);\n    let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1);\n    let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1);\n    let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2);\n    let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2);\n    let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2);\n    let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2);\n    if (knight1) {\n      if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight1.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 1\")\n          return true;\n        }\n      }\n    }\n    if (knight2) {\n      if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight2.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 2\")\n          return true;\n        }\n      }\n    }\n    if (knight3) {\n      if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight3.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 3\")\n          return true;\n        }\n      }\n    }\n    if (knight4) {\n      if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight4.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 4\")\n          return true;\n        }\n      }\n    }\n    if (knight5) {\n      if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight5.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 5\")\n          return true;\n        }\n      }\n    }\n    if (knight6) {\n      if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight6.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 6\")\n          return true;\n        }\n      }\n    }\n    if (knight7) {\n      if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight7.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 7\")\n          return true;\n        }\n      }\n    }\n    if (knight8) {\n      if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight8.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 8\")\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  //determines if the black king is in check\n  //determines if making a move will put the black king in check (pseudo)\n  //determines if a certain move will be allowed and not put the black king in check (currentSquare && pseudo)\n  //TODO: refactor\n  //TODO: combine both isWhiteInCheck and isBlackInCheck into one function\n  function isBlackInCheck(square, pseudo, currentSquare = null) {\n    let squares = boardSquaresRef.current;\n    if (pseudo) {\n      const updatedSquares = squares.map(s => {\n        if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\n          // Return a new Square component with the updated piece\n          return /*#__PURE__*/React.cloneElement(s, {\n            piece: pseudo.props.piece\n          });\n        } else if (currentSquare && s.props.x === currentSquare.props.x && s.props.y === currentSquare.props.y) {\n          return /*#__PURE__*/React.cloneElement(s, {\n            piece: ''\n          });\n        } else {\n          // For other squares, return the original Square component\n          return s;\n        }\n      });\n      squares = updatedSquares;\n    }\n\n    //check for attackers behind the black king\n    for (let i = square.props.x - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from behind\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers in front of the black king\n    for (let i = square.props.x + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the front\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the left of the black king\n    for (let i = square.props.y - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the left\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the right of the black king\n    for (let i = square.props.y + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the right\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            //console.log(\"in check from top half of counterclockwise diagonal\")\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == 1) {\n                //console.log(\"in check from bottom half of counterclockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from bottom half of counterclockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            //console.log(\"in check from top half of clockwise diagonal\")\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == -1) {\n                //console.log(\"in check from bottom half of clockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from bottom half of clockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for knights check\n    let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1);\n    let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1);\n    let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1);\n    let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1);\n    let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2);\n    let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2);\n    let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2);\n    let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2);\n    if (knight1) {\n      if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight1.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 1\")\n          return true;\n        }\n      }\n    }\n    if (knight2) {\n      if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight2.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 2\")\n          return true;\n        }\n      }\n    }\n    if (knight3) {\n      if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight3.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 3\")\n          return true;\n        }\n      }\n    }\n    if (knight4) {\n      if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight4.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 4\")\n          return true;\n        }\n      }\n    }\n    if (knight5) {\n      if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight5.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 5\")\n          return true;\n        }\n      }\n    }\n    if (knight6) {\n      if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight6.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 6\")\n          return true;\n        }\n      }\n    }\n    if (knight7) {\n      if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight7.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 7\")\n          return true;\n        }\n      }\n    }\n    if (knight8) {\n      if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight8.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 8\")\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  //makes a move, moves a piece from one square to another\n  //updates the boardPosition\n  //TODO: refactor\n  function movePiece(x, y) {\n    let squares = boardSquares;\n    let position = BoardPosition;\n    let targetSquare = HelperMethods.getATargetSquareByLocation(x, y, boardSquaresRef.current);\n    let square = squares.find(s => s.props.x == CurrentSquareSelection.x && s.props.y == CurrentSquareSelection.y);\n    let color = HelperMethods.getPieceColor(square);\n    let piece = HelperMethods.getPiece(square);\n\n    //disable castling if the king moves\n    if (piece == PIECES.KING) {\n      if (isColorWhite(color)) {\n        CastlingRights.whiteLongCastle = false;\n        CastlingRights.whiteShortCastle = false;\n      } else {\n        CastlingRights.blackLongCastle = false;\n        CastlingRights.blackShortCastle = false;\n      }\n    }\n\n    //disable castling if the rook moves\n    if (piece == PIECES.ROOK) {\n      if (square.props.x == 7 && square.props.y == 7) {\n        CastlingRights.whiteShortCastle = false;\n      }\n      if (square.props.x == 0 && square.props.y == 7) {\n        CastlingRights.blackShortCastle = false;\n      }\n      if (square.props.x == 7 && square.props.y == 0) {\n        CastlingRights.whiteLongCastle = false;\n      }\n      if (square.props.x == 0 && square.props.y == 0) {\n        CastlingRights.blackLongCastle = false;\n      }\n    }\n    let p = HelperMethods.UpdatePosition(square, targetSquare, position);\n\n    //capturing enPassant\n    // if (EnPassant.isPossible) {\n    //     let enPassantTargetSquare = color == COLORS.WHITE ? squares.find(s => s.props.x == x + 1 && s.props.y == y) : squares.find(s => s.props.x == x - 1 && s.props.y == y)\n    //     let enPassantSquare = <Square x={square.props.x} y={square.props.y} piece={\"\"} />\n\n    //     p = UpdatePosition(enPassantSquare, enPassantTargetSquare, p)\n    // }\n\n    //TODO: ensure p matches the new board Position format\n    //setBoardPosition(p)\n    const updatedBoardPosition = p.map(row => [...row]);\n    BoardPosition.splice(0, BoardPosition.length, ...updatedBoardPosition);\n    PossibleMoves.splice(0, PossibleMoves.length);\n    updateIsWhiteToMove(!IsWhiteToMove);\n\n    //enabling en passant\n    if (piece == PIECES.PAWN) {\n      if (Math.abs(square.props.x - targetSquare.props.x) == 2) {\n        if (square.props.piece.split(PIECE_DELIMITER)[0] == COLORS.WHITE) {\n          EnPassant.isPossible = true;\n          EnPassant.x = square.props.x - 1;\n          EnPassant.y = square.props.y;\n        } else {\n          EnPassant.isPossible = true;\n          EnPassant.x = square.props.x + 1;\n          EnPassant.y = square.props.y;\n        }\n\n        // let enPassant1 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y - 1)\n        // let enPassant2 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y + 1)\n\n        // if (enPassant1) {\n        //     if (enPassant1.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\n        //         if (enPassant1.props.piece.split(PIECE_DELIMITER)[0] != color) {\n        //             EnPassant.isPossible = true\n        //             EnPassant.x = targetSquare.props.x\n        //             EnPassant.y = targetSquare.props.y\n        //             return\n        //         }\n        //     }\n        // }\n\n        // if (enPassant2) {\n        //     if (enPassant2.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\n        //         if (enPassant2.props.piece.split(PIECE_DELIMITER)[0] != color) {\n        //             EnPassant.isPossible = true\n        //             EnPassant.x = targetSquare.props.x\n        //             EnPassant.y = targetSquare.props.y\n        //             return\n        //         }\n        //     }\n        // }\n      } else {\n        EnPassant.isPossible = false;\n        EnPassant.x = -1;\n        EnPassant.y = -1;\n      }\n    } else {\n      EnPassant.isPossible = false;\n      EnPassant.x = -1;\n      EnPassant.y = -1;\n    }\n    updateFullMoves(FullMoves + 1);\n    generateANewFen();\n  }\n\n  //removes moves that do not deal with a check\n  //TODO: Refactor\n  function filterMovesIfInCheck(possibleMoves) {\n    let blackKing = getATargetSquareByPiece(KINGS.BLACK_KING, boardSquaresRef.current); //get the black king\n    let whiteKing = getATargetSquareByPiece(KINGS.WHITE_KING, boardSquaresRef.current); //get the white king\n\n    for (let i = 0; i < possibleMoves.length; i++) {\n      for (let j = 0; j < possibleMoves[i].moves.length; j++) {\n        if (possibleMoves[i].piece.props.piece == KINGS.BLACK_KING) {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].moves[j].props.x,\n            y: possibleMoves[i].moves[j].props.y,\n            piece: \"black-king\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 921,\n            columnNumber: 32\n          }, this);\n          let pseudo = /*#__PURE__*/_jsxDEV(Square, {\n            x: blackKing.props.x,\n            y: blackKing.props.y,\n            piece: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 922,\n            columnNumber: 34\n          }, this);\n          let isInCheck = isBlackInCheck(move, pseudo);\n          if (isInCheck) {\n            possibleMoves[i].moves.splice(j, 1);\n            j--;\n          }\n        } else if (possibleMoves[i].piece.props.piece == KINGS.WHITE_KING) {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].moves[j].props.x,\n            y: possibleMoves[i].moves[j].props.y,\n            piece: \"white-king\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 930,\n            columnNumber: 32\n          }, this);\n          let pseudo = /*#__PURE__*/_jsxDEV(Square, {\n            x: whiteKing.props.x,\n            y: whiteKing.props.y,\n            piece: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 931,\n            columnNumber: 34\n          }, this);\n          let isInCheck = isWhiteInCheck(move, pseudo);\n          if (isInCheck) {\n            possibleMoves[i].moves.splice(j, 1);\n            j--;\n          }\n        } else {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].moves[j].props.x,\n            y: possibleMoves[i].moves[j].props.y,\n            piece: possibleMoves[i].piece.props.piece\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 939,\n            columnNumber: 32\n          }, this);\n          let isBlackKingInCheck = isBlackInCheck(blackKing, move, possibleMoves[i].piece);\n          let isWhiteKingInCheck = isWhiteInCheck(whiteKing, move, possibleMoves[i].piece);\n          if (isBlackKingInCheck && !IsWhiteToMove) {\n            possibleMoves[i].moves.splice(j, 1);\n            j--;\n          }\n          if (isWhiteKingInCheck && IsWhiteToMove) {\n            possibleMoves[i].moves.splice(j, 1);\n            j--;\n          }\n        }\n      }\n    }\n    return possibleMoves;\n  }\n\n  //removes moves that allow illegal castling (castles through check for example)\n  //TODO: Refactor\n  function filterMovesThatAllowIllegalCastling(possibleMoves) {\n    let blackKing = getATargetSquareByPiece(KINGS.BLACK_KING, boardSquaresRef.current); //get the black king\n    let whiteKing = getATargetSquareByPiece(KINGS.WHITE_KING, boardSquaresRef.current); //get the white king\n\n    for (let i = 0; i < possibleMoves.length; i++) {\n      let whiteCastle1 = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 6); //sqaure where king will be after short castle (white)\n      let whiteCastle2 = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 2); //sqaure where king will be after long castle (white)\n      let blackCastle1 = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 6); //square where king will be after shot castle (black)\n      let blackCastle2 = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 2); //square where king will be after long castle (black)\n\n      if (possibleMoves[i].piece == blackKing || possibleMoves[i].piece == whiteKing) {\n        if (whiteCastle1) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 5);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n        if (whiteCastle2) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 3);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n        if (blackCastle1) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 5);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n        if (blackCastle2) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 3);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n      }\n\n      //prevents black to castle if in check\n      if (isBlackInCheck(blackKing)) {\n        if (blackCastle1) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(blackCastle1), 1);\n        }\n        if (blackCastle2) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(blackCastle2), 1);\n        }\n      }\n\n      //prevents white to castle if in check\n      if (isWhiteInCheck(whiteKing)) {\n        if (whiteCastle1) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(whiteCastle1), 1);\n        }\n        if (whiteCastle2) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(whiteCastle2), 1);\n        }\n      }\n    }\n    return possibleMoves;\n  }\n\n  //removes empty/undefined values for generated moves\n  function removeEmptyMoves(possibleMoves) {\n    for (let i = 0; i < possibleMoves.length; i++) {\n      //remove undefined elements if the possible moves array contains any\n      if (!possibleMoves[i]) {\n        possibleMoves.splice(i, 1);\n        i--;\n        continue;\n      }\n\n      //remove any elements if the possible moves array contains elements with no possible moves\n      if (possibleMoves[i].moves.length == 0) {\n        possibleMoves.splice(i, 1);\n        i--;\n        continue;\n      }\n\n      //remove undefined possible moves if the element has any such moves\n      for (let j = 0; j < possibleMoves[i].moves.length; j++) {\n        if (!possibleMoves[i].moves[j]) {\n          possibleMoves[i].moves.splice(j, 1);\n          j--;\n        }\n      }\n    }\n    return possibleMoves;\n  }\n\n  //updates the isPossibleMove array based on the possibleMoves array and forces a component update of the square to visually the circles indicating a move is possible\n  function updatePossibleMovesVisually() {\n    for (let i = 0; i < PossibleMoves.length; i++) {\n      if (checkIfAMoveIsEqualToTheCurrentSelectedSquare(PossibleMoves[i].piece)) {\n        for (let j = 0; j < PossibleMoves[i].moves.length; j++) {\n          updateIsPossibleMove(`${PossibleMoves[i].moves[j].props.x}-${PossibleMoves[i].moves[j].props.y}`, true);\n        }\n      }\n    }\n  }\n\n  //gets all possible/legal moves\n  //TODO: check if can be refactored further\n  function getPossibleMoves() {\n    //let square = getATargetSquareByLocation(x, y)\n    let possiblePieceMoves = [];\n    let squares = boardSquares;\n    for (let i = 0; i < squares.length; i++) {\n      let square = squares[i];\n\n      //if the square has a piece\n      if (square.props.piece) {\n        let color = getPieceColor(square); //get the piece color\n\n        //don't collect possible moves if it's black to move and you're trying to move a white piece\n        if (isColorWhite(color) && !IsWhiteToMove) {\n          //console.log(`Skipping because it's black to move and you're moving a white piece, x: ${square.props.x}, y: ${square.props.y}`)\n          continue;\n        }\n\n        //don't collect possible moves if it's white to move and you're trying to move a black piece\n        if (isColorBlack(color) && IsWhiteToMove) {\n          //console.log(`Skipping because it's white to move and you're moving a black piece, x: ${square.props.x}, y: ${square.props.y}`)\n          continue;\n        }\n\n        //console.log(`Getting possible moves, x: ${square.props.x}, y: ${square.props.y}`)\n        //get all possible moves for each piece\n        possiblePieceMoves.push(getPawnsPossibleMoves(square));\n        possiblePieceMoves.push(getRooksPossibleMoves(square));\n        possiblePieceMoves.push(getBishopPossibleMoves(square));\n        possiblePieceMoves.push(getKnightPossibleMoves(square));\n        possiblePieceMoves.push(getKingPossibleMoves(square));\n        possiblePieceMoves.push(getQueenPossibleMoves(square));\n\n        //filter empty moves\n        possiblePieceMoves = removeEmptyMoves(possiblePieceMoves);\n\n        //filter possible moves\n        possiblePieceMoves = filterMovesIfInCheck(possiblePieceMoves);\n        possiblePieceMoves = filterMovesThatAllowIllegalCastling(possiblePieceMoves);\n      }\n    }\n    console.log(\"Possible Moves:\", possiblePieceMoves);\n    console.log('Moves count', possiblePieceMoves.reduce((sum, pieceMove) => sum + pieceMove.moves.length, 0));\n    PossibleMoves.splice(0, PossibleMoves.length, ...possiblePieceMoves);\n    updatePossibleMovesVisually();\n  }\n\n  //renders the board\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessGrid\",\n      children: boardSquares.map(sqr => sqr)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1120,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Board, \"IVJugR7YzpxWBiVdY41x4HwgqNQ=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Square","HelperMethods","GlobalVariables","jsxDEV","_jsxDEV","Fragment","_Fragment","Board","_s","fen","setFen","isPossibleMove","setIsPossibleMove","boardSquares","setBoardSquares","isPossibleMoveRef","boardSquaresRef","updateIsPossibleMove","key","value","prevState","map","item","current","fenParser","resetPossibleMoves","initialIsPossibleMove","i","DIM","j","push","generateANewFen","fenString","BoardPosition","length","row","column","IsDigit","lastChar","slice","substring","Number","IsWhiteToMove","castlingRules","CastlingRights","whiteShortCastle","whiteLongCastle","blackShortCastle","blackLongCastle","EnPassant","isPossible","convertLocationToCoordinates","x","y","HalfMoves","FullMoves","updateBoardPosition","fenBoard","fenTurn","fenCastling","fenEnPassant","fenHalfMoves","fenFullMoves","ParseFEN","fenRows","split","arr","tokens","r","squareColorIsWhite","squares","color","possibleMoveStatus","find","getPossibleMoves","piece","ConvertFENPieceToPiece","movePiece","fileName","_jsxFileName","lineNumber","columnNumber","includes","updateIsWhiteToMove","updateHalfMoves","updateFullMoves","splice","PIECE_DELIMITER","location","convertCoordinatesToLocation","isWhiteInCheck","square","pseudo","currentSquare","updatedSquares","s","props","cloneElement","knight1","knight2","knight3","knight4","knight5","knight6","knight7","knight8","isBlackInCheck","position","targetSquare","getATargetSquareByLocation","CurrentSquareSelection","getPieceColor","getPiece","PIECES","KING","isColorWhite","ROOK","p","UpdatePosition","updatedBoardPosition","PossibleMoves","PAWN","Math","abs","COLORS","WHITE","filterMovesIfInCheck","possibleMoves","blackKing","getATargetSquareByPiece","KINGS","BLACK_KING","whiteKing","WHITE_KING","moves","move","isInCheck","isBlackKingInCheck","isWhiteKingInCheck","filterMovesThatAllowIllegalCastling","whiteCastle1","m","whiteCastle2","blackCastle1","blackCastle2","pieceAcross","indexOf","removeEmptyMoves","updatePossibleMovesVisually","checkIfAMoveIsEqualToTheCurrentSelectedSquare","possiblePieceMoves","isColorBlack","getPawnsPossibleMoves","getRooksPossibleMoves","getBishopPossibleMoves","getKnightPossibleMoves","getKingPossibleMoves","getQueenPossibleMoves","console","log","reduce","sum","pieceMove","children","className","sqr","_c","$RefreshReg$"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/Chess-React.js-/src/Board.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport Square from \"./Square.js\"\r\nimport * as HelperMethods from \"./HelperMethods.js\";\r\nimport * as GlobalVariables from \"./globalVariables.js\"\r\n\r\n\r\n/*\r\nTODO:\r\nCode Reusability: refactor some of the repeated code and generate new functions if needed\r\nConsistency and Naming: Have better and more consistent names for variables and functions\r\nDocumentation: add more comments to understand what is going on\r\nTesting: add unit tests\r\nImplementations: add promotions, implement endgames (mate, stalemate, draws repetition, 50 moves rule)\r\nBugs: Fix bugs (if any)\r\n*/\r\n\r\nfunction Board() {\r\n    //<summary>\r\n    //FEN - Forsyth-Edwards Notation\r\n    //small letters - black pieces\r\n    //capital letters - white pieces\r\n    //numbers - empty board squares\r\n    //(/) - separates each board row\r\n    //first letter after the board indicates whose turn it is to move (w - white, b - black)\r\n    //next letters indicate castling rights, k - king-side, q - queen-side, (-) - no castling allowed for any side\r\n    //en passant square - when a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square\r\n    //the number of half turns (white moves, then black moves = 2 half moves) that were made without a pawn move or a capture of a piece (50-move rule when reaches 100)\r\n    //the number of full moves (white moves, then black moves = 1 full move); increase after every black half move\r\n    //</summary>\r\n    //starting position\r\n    //'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\r\n    //r1bqk2r/pppp1ppp/2n5/8/1bBPn3/2N2N2/PP3PPP/R1BQK2R w KQkq - 0 8\r\n    //r1bqk2r/pppp1ppp/2n2n2/2b5/2BPP3/5N2/PP3PPP/RNBQK2R b KQkq - 0 6\r\n    //r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21\r\n    const [fen, setFen] = useState('r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21')\r\n    //tracks if we can move to a square and adds a circle to the square if we can\r\n    const [isPossibleMove, setIsPossibleMove] = useState([])\r\n    //keeps track of all square components that are visualized on the page; used to calculate moves and so on.\r\n    const [boardSquares, setBoardSquares] = useState([])\r\n\r\n    //using ref hooks to have access to the latest values for the two states\r\n    const isPossibleMoveRef = useRef(isPossibleMove)\r\n    const boardSquaresRef = useRef(boardSquares)\r\n\r\n    //updates the possible move array\r\n    //if a square is a possible move, it will receive a circle indicating you can move there\r\n    const updateIsPossibleMove = (key, value) => {\r\n        //we are updating the state based on the previous state to resolve the issue with pending state and queuen in React\r\n        setIsPossibleMove(prevState =>\r\n            prevState.map(item =>\r\n                //if the current item's key matches the key we're looking for\r\n                //copy all properties of the object in a new object using the spread syntax (...)\r\n                //modify the value property to whatever value we're using\r\n                //copy the original item if no modifications are needed\r\n                item.key === key ? { ...item, value: value } : item\r\n            )\r\n        );\r\n    };\r\n\r\n    //update the reference to the IsPossibleMove array whenever we set a new value to the array\r\n    useEffect(() => {\r\n        isPossibleMoveRef.current = isPossibleMove;\r\n        fenParser(false);\r\n    }, [isPossibleMove])\r\n\r\n    //called when the page loads\r\n    //removes all circles from squares indicating that they can be clicked to move a piece there\r\n    //we parse the FEN to fill in the board\r\n    useEffect(() => {\r\n        resetPossibleMoves()\r\n        fenParser()\r\n    }, [])\r\n\r\n    //parse the FEN and fill in the board with the new position when the FEN updates\r\n    useEffect(() => {\r\n        fenParser()\r\n    }, [fen])\r\n\r\n    //update the reference to the BoardSquares array whenever we set a new value to the array\r\n    useEffect(() => {\r\n        boardSquaresRef.current = boardSquares\r\n    }, [boardSquares])\r\n\r\n    /**\r\n    * Resets possible moves highlighting.\r\n    */\r\n    function resetPossibleMoves() {\r\n        const initialIsPossibleMove = [];\r\n        for (let i = 0; i < DIM; i++) {\r\n            for (let j = 0; j < DIM; j++) {\r\n                initialIsPossibleMove.push({ key: `${i}-${j}`, value: false });\r\n            }\r\n        }\r\n        setIsPossibleMove(initialIsPossibleMove);\r\n    }\r\n\r\n    /**\r\n     * Generates a new FEN string based on the current board state.\r\n     */\r\n    //TODO: ensure everything gets parsed correctly\r\n    //TODO: refactor the code\r\n    function generateANewFen() {\r\n        let fenString = ''\r\n\r\n        for (let i = 0; i < BoardPosition.length; i++) {\r\n            let row = BoardPosition[i]\r\n            for (let j = 0; j < row.length; j++) {\r\n                let column = row[j]\r\n\r\n                if (column == ' ') {\r\n                    if (fenString && HelperMethods.IsDigit(fenString[fenString.length - 1])) {\r\n                        let lastChar = fenString.slice(-1)\r\n                        fenString = fenString.substring(0, fenString.length - 1)\r\n                        fenString += Number(lastChar) + 1\r\n                    } else {\r\n                        fenString += '1'\r\n                    }\r\n                } else {\r\n                    fenString += column\r\n                }\r\n            }\r\n            fenString += '/'\r\n        }\r\n\r\n        fenString = fenString.substring(0, fenString.length - 1) //removes the last slash\r\n\r\n        fenString += IsWhiteToMove ? ' w' : ' b'\r\n\r\n        let castlingRules = ''\r\n\r\n        castlingRules += CastlingRights.whiteShortCastle ? 'K' : ''\r\n        castlingRules += CastlingRights.whiteLongCastle ? 'Q' : ''\r\n        castlingRules += CastlingRights.blackShortCastle ? 'k' : ''\r\n        castlingRules += CastlingRights.blackLongCastle ? 'q' : ''\r\n\r\n        fenString += castlingRules.length == 0 ? ' -' : ' ' + castlingRules\r\n\r\n        fenString += EnPassant.isPossible ? ' ' + convertLocationToCoordinates(EnPassant.x, EnPassant.y) : ' -'\r\n\r\n        fenString += ' ' + HalfMoves\r\n        fenString += ' ' + FullMoves\r\n\r\n        setFen(fenString)\r\n    }\r\n\r\n    /**\r\n     * Parses the FEN string to update the board state.\r\n     * @param {boolean} updateBoardPosition - Whether to update the board position.\r\n     */\r\n    //TODO: refactor\r\n    function fenParser(updateBoardPosition = true) {\r\n        //parses the FEN string to variables\r\n        const { fenBoard, fenTurn, fenCastling, fenEnPassant, fenHalfMoves, fenFullMoves } = HelperMethods.ParseFEN(fen)\r\n\r\n        const fenRows = fenBoard.split('/')\r\n\r\n        let arr = [];\r\n\r\n        //splits all rows and creates a matrix for the board\r\n        for (let row of fenRows) {\r\n            const tokens = row.split('')\r\n\r\n            let r = []\r\n\r\n            for (let i = 0; i < tokens.length; i++) {\r\n                if (Number(tokens[i])) {\r\n                    for (let j = 0; j < Number(tokens[i]); j++) {\r\n                        r.push(' ')\r\n                    }\r\n                } else {\r\n                    r.push(tokens[i])\r\n                }\r\n            }\r\n\r\n            arr.push(r)\r\n        }\r\n\r\n        //generates a Square component for each element in the matrix created above\r\n        let squareColorIsWhite = true;\r\n        let squares = []\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            for (let j = 0; j < arr[i].length; j++) {\r\n                let color = squareColorIsWhite ? \"\" : \"dark\";\r\n                const possibleMoveStatus = isPossibleMoveRef.current.find(item => item.key === `${i}-${j}`);\r\n\r\n                //boardSquares.push(\r\n                squares.push(\r\n                    <Square\r\n                        getPossibleMoves={getPossibleMoves}\r\n                        key={`${i}-${j}`}\r\n                        x={i}\r\n                        y={j}\r\n                        piece={HelperMethods.ConvertFENPieceToPiece(arr[i][j])}\r\n                        color={color}\r\n                        movePiece={movePiece}\r\n                        isPossibleMove={possibleMoveStatus ? possibleMoveStatus.value : false}\r\n                        resetPossibleMoves={resetPossibleMoves}\r\n                    />\r\n                )\r\n                squareColorIsWhite = !squareColorIsWhite;\r\n            }\r\n            squareColorIsWhite = !squareColorIsWhite;\r\n        }\r\n\r\n        setBoardSquares(squares)\r\n\r\n        // BoardSquares.splice(0, BoardSquares.length);\r\n        // BoardSquares.push(...squares)\r\n        // console.log(BoardSquares)\r\n\r\n        if (fenCastling.includes('K')) {\r\n            CastlingRights.whiteShortCastle = true;\r\n        }\r\n        if (fenCastling.includes('Q')) {\r\n            CastlingRights.whiteLongCastle = true;\r\n        }\r\n        if (fenCastling.includes('k')) {\r\n            CastlingRights.blackShortCastle = true;\r\n        }\r\n        if (fenCastling.includes('q')) {\r\n            CastlingRights.blackLongCastle = true;\r\n        }\r\n\r\n        fenTurn == 'w' ? updateIsWhiteToMove(true) : updateIsWhiteToMove(false)\r\n        updateHalfMoves(fenHalfMoves)\r\n        updateFullMoves(fenFullMoves)\r\n\r\n        if (updateBoardPosition) {\r\n            BoardPosition.splice(0, BoardPosition.length, ...arr)\r\n        }\r\n\r\n        if (!fenEnPassant.includes(PIECE_DELIMITER)) {\r\n            let location = HelperMethods.convertCoordinatesToLocation(fenEnPassant)\r\n\r\n            EnPassant.isPossible = true\r\n            EnPassant.x = location.x\r\n            EnPassant.y = location.y\r\n        }\r\n    }\r\n\r\n    //determines if the white king is in check\r\n    //determines if making a move will put the white king in check (pseudo)\r\n    //determines if a certain move will be allowed and not put the white king in check (currentSquare && pseudo)\r\n    //TODO: refactor\r\n    //TODO: combine both isWhiteInCheck and isBlackInCheck into one function\r\n    function isWhiteInCheck(square, pseudo, currentSquare = null) {\r\n        let squares = boardSquaresRef.current\r\n\r\n        if (pseudo) {\r\n            const updatedSquares = squares.map(s => {\r\n                if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\r\n                    // Return a new Square component with the updated piece\r\n                    return React.cloneElement(s, { piece: pseudo.props.piece });\r\n                } else if (currentSquare && s.props.x === currentSquare.props.x && s.props.y === currentSquare.props.y) {\r\n                    return React.cloneElement(s, { piece: '' });\r\n                }\r\n                else {\r\n                    // For other squares, return the original Square component\r\n                    return s;\r\n                }\r\n            });\r\n\r\n            // if (pseudo && currentSquare) {\r\n            //     if (pseudo.props.x == 4 && pseudo.props.y == 4 && currentSquare.props.x == 5 && currentSquare.props.y == 2) {\r\n            //         console.log(`Squares: ${JSON.stringify(squares)}, UpdatedSquares: ${JSON.stringify(updatedSquares)}`)\r\n            //     }\r\n            // }\r\n\r\n            squares = updatedSquares;\r\n        }\r\n\r\n        //check for attackers in front of the white king\r\n        for (let i = square.props.x - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from behind\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers behind the white king\r\n        for (let i = square.props.x + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the front\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the left of the white king\r\n        for (let i = square.props.y - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the left\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the right of the white king\r\n        for (let i = square.props.y + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the right\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == -1) {\r\n                                //console.log(\"in check from top half of counterclockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from top half of counterclockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        return true\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == 1) {\r\n                                //console.log(\"in check from top half of clockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from top half of clockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        return true;\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for knights check\r\n        let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1)\r\n        let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1)\r\n        let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1)\r\n        let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1)\r\n        let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2)\r\n        let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2)\r\n        let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2)\r\n        let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2)\r\n\r\n        if (knight1) {\r\n            if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight1.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 1\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight2) {\r\n            if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight2.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 2\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight3) {\r\n            if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight3.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 3\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight4) {\r\n            if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight4.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 4\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight5) {\r\n            if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight5.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 5\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight6) {\r\n            if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight6.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 6\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight7) {\r\n            if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight7.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 7\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight8) {\r\n            if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight8.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 8\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    //determines if the black king is in check\r\n    //determines if making a move will put the black king in check (pseudo)\r\n    //determines if a certain move will be allowed and not put the black king in check (currentSquare && pseudo)\r\n    //TODO: refactor\r\n    //TODO: combine both isWhiteInCheck and isBlackInCheck into one function\r\n    function isBlackInCheck(square, pseudo, currentSquare = null) {\r\n        let squares = boardSquaresRef.current\r\n\r\n        if (pseudo) {\r\n            const updatedSquares = squares.map(s => {\r\n                if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\r\n                    // Return a new Square component with the updated piece\r\n                    return React.cloneElement(s, { piece: pseudo.props.piece });\r\n                } else if (currentSquare && s.props.x === currentSquare.props.x && s.props.y === currentSquare.props.y) {\r\n                    return React.cloneElement(s, { piece: '' });\r\n                }\r\n                else {\r\n                    // For other squares, return the original Square component\r\n                    return s;\r\n                }\r\n            });\r\n\r\n            squares = updatedSquares;\r\n        }\r\n\r\n        //check for attackers behind the black king\r\n        for (let i = square.props.x - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from behind\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers in front of the black king\r\n        for (let i = square.props.x + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the front\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the left of the black king\r\n        for (let i = square.props.y - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the left\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the right of the black king\r\n        for (let i = square.props.y + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the right\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        //console.log(\"in check from top half of counterclockwise diagonal\")\r\n                        return true\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == 1) {\r\n                                //console.log(\"in check from bottom half of counterclockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from bottom half of counterclockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        //console.log(\"in check from top half of clockwise diagonal\")\r\n                        return true\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == -1) {\r\n                                //console.log(\"in check from bottom half of clockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from bottom half of clockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for knights check\r\n        let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1)\r\n        let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1)\r\n        let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1)\r\n        let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1)\r\n        let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2)\r\n        let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2)\r\n        let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2)\r\n        let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2)\r\n\r\n        if (knight1) {\r\n            if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight1.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 1\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight2) {\r\n            if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight2.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 2\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight3) {\r\n            if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight3.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 3\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight4) {\r\n            if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight4.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 4\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight5) {\r\n            if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight5.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 5\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight6) {\r\n            if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight6.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 6\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight7) {\r\n            if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight7.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 7\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight8) {\r\n            if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight8.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 8\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    //makes a move, moves a piece from one square to another\r\n    //updates the boardPosition\r\n    //TODO: refactor\r\n    function movePiece(x, y) {\r\n        let squares = boardSquares\r\n        let position = BoardPosition\r\n\r\n        let targetSquare = HelperMethods.getATargetSquareByLocation(x, y, boardSquaresRef.current)\r\n        let square = squares.find(s => s.props.x == CurrentSquareSelection.x && s.props.y == CurrentSquareSelection.y)\r\n\r\n        let color = HelperMethods.getPieceColor(square)\r\n        let piece = HelperMethods.getPiece(square)\r\n\r\n        //disable castling if the king moves\r\n        if (piece == PIECES.KING) {\r\n            if (isColorWhite(color)) {\r\n                CastlingRights.whiteLongCastle = false\r\n                CastlingRights.whiteShortCastle = false\r\n            } else {\r\n                CastlingRights.blackLongCastle = false\r\n                CastlingRights.blackShortCastle = false\r\n            }\r\n        }\r\n\r\n        //disable castling if the rook moves\r\n        if (piece == PIECES.ROOK) {\r\n            if (square.props.x == 7 && square.props.y == 7) {\r\n                CastlingRights.whiteShortCastle = false\r\n            }\r\n\r\n            if (square.props.x == 0 && square.props.y == 7) {\r\n                CastlingRights.blackShortCastle = false\r\n            }\r\n\r\n            if (square.props.x == 7 && square.props.y == 0) {\r\n                CastlingRights.whiteLongCastle = false\r\n            }\r\n\r\n            if (square.props.x == 0 && square.props.y == 0) {\r\n                CastlingRights.blackLongCastle = false\r\n            }\r\n        }\r\n\r\n        let p = HelperMethods.UpdatePosition(square, targetSquare, position)\r\n\r\n        //capturing enPassant\r\n        // if (EnPassant.isPossible) {\r\n        //     let enPassantTargetSquare = color == COLORS.WHITE ? squares.find(s => s.props.x == x + 1 && s.props.y == y) : squares.find(s => s.props.x == x - 1 && s.props.y == y)\r\n        //     let enPassantSquare = <Square x={square.props.x} y={square.props.y} piece={\"\"} />\r\n\r\n        //     p = UpdatePosition(enPassantSquare, enPassantTargetSquare, p)\r\n        // }\r\n\r\n        //TODO: ensure p matches the new board Position format\r\n        //setBoardPosition(p)\r\n        const updatedBoardPosition = p.map(row => [...row]);\r\n        BoardPosition.splice(0, BoardPosition.length, ...updatedBoardPosition);\r\n\r\n        PossibleMoves.splice(0, PossibleMoves.length);\r\n        updateIsWhiteToMove(!IsWhiteToMove)\r\n\r\n        //enabling en passant\r\n        if (piece == PIECES.PAWN) {\r\n            if (Math.abs(square.props.x - targetSquare.props.x) == 2) {\r\n                if (square.props.piece.split(PIECE_DELIMITER)[0] == COLORS.WHITE) {\r\n                    EnPassant.isPossible = true\r\n                    EnPassant.x = square.props.x - 1\r\n                    EnPassant.y = square.props.y\r\n                } else {\r\n                    EnPassant.isPossible = true\r\n                    EnPassant.x = square.props.x + 1\r\n                    EnPassant.y = square.props.y\r\n                }\r\n\r\n                // let enPassant1 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y - 1)\r\n                // let enPassant2 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y + 1)\r\n\r\n                // if (enPassant1) {\r\n                //     if (enPassant1.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\r\n                //         if (enPassant1.props.piece.split(PIECE_DELIMITER)[0] != color) {\r\n                //             EnPassant.isPossible = true\r\n                //             EnPassant.x = targetSquare.props.x\r\n                //             EnPassant.y = targetSquare.props.y\r\n                //             return\r\n                //         }\r\n                //     }\r\n                // }\r\n\r\n                // if (enPassant2) {\r\n                //     if (enPassant2.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\r\n                //         if (enPassant2.props.piece.split(PIECE_DELIMITER)[0] != color) {\r\n                //             EnPassant.isPossible = true\r\n                //             EnPassant.x = targetSquare.props.x\r\n                //             EnPassant.y = targetSquare.props.y\r\n                //             return\r\n                //         }\r\n                //     }\r\n                // }\r\n            } else {\r\n                EnPassant.isPossible = false\r\n                EnPassant.x = -1\r\n                EnPassant.y = -1\r\n            }\r\n        } else {\r\n            EnPassant.isPossible = false\r\n            EnPassant.x = -1\r\n            EnPassant.y = -1\r\n        }\r\n\r\n        updateFullMoves(FullMoves + 1)\r\n\r\n        generateANewFen()\r\n    }\r\n\r\n    //removes moves that do not deal with a check\r\n    //TODO: Refactor\r\n    function filterMovesIfInCheck(possibleMoves) {\r\n        let blackKing = getATargetSquareByPiece(KINGS.BLACK_KING, boardSquaresRef.current) //get the black king\r\n        let whiteKing = getATargetSquareByPiece(KINGS.WHITE_KING, boardSquaresRef.current) //get the white king\r\n\r\n        for (let i = 0; i < possibleMoves.length; i++) {\r\n            for (let j = 0; j < possibleMoves[i].moves.length; j++) {\r\n                if (possibleMoves[i].piece.props.piece == KINGS.BLACK_KING) {\r\n                    let move = <Square x={possibleMoves[i].moves[j].props.x} y={possibleMoves[i].moves[j].props.y} piece={\"black-king\"} />\r\n                    let pseudo = <Square x={blackKing.props.x} y={blackKing.props.y} piece={\"\"} />\r\n                    let isInCheck = isBlackInCheck(move, pseudo)\r\n\r\n                    if (isInCheck) {\r\n                        possibleMoves[i].moves.splice(j, 1);\r\n                        j--;\r\n                    }\r\n                } else if (possibleMoves[i].piece.props.piece == KINGS.WHITE_KING) {\r\n                    let move = <Square x={possibleMoves[i].moves[j].props.x} y={possibleMoves[i].moves[j].props.y} piece={\"white-king\"} />\r\n                    let pseudo = <Square x={whiteKing.props.x} y={whiteKing.props.y} piece={\"\"} />\r\n                    let isInCheck = isWhiteInCheck(move, pseudo)\r\n\r\n                    if (isInCheck) {\r\n                        possibleMoves[i].moves.splice(j, 1);\r\n                        j--;\r\n                    }\r\n                } else {\r\n                    let move = <Square x={possibleMoves[i].moves[j].props.x} y={possibleMoves[i].moves[j].props.y} piece={possibleMoves[i].piece.props.piece} />\r\n                    let isBlackKingInCheck = isBlackInCheck(blackKing, move, possibleMoves[i].piece)\r\n                    let isWhiteKingInCheck = isWhiteInCheck(whiteKing, move, possibleMoves[i].piece)\r\n\r\n                    if (isBlackKingInCheck && !IsWhiteToMove) {\r\n                        possibleMoves[i].moves.splice(j, 1);\r\n                        j--;\r\n                    }\r\n\r\n                    if (isWhiteKingInCheck && IsWhiteToMove) {\r\n                        possibleMoves[i].moves.splice(j, 1);\r\n                        j--;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return possibleMoves\r\n    }\r\n\r\n    //removes moves that allow illegal castling (castles through check for example)\r\n    //TODO: Refactor\r\n    function filterMovesThatAllowIllegalCastling(possibleMoves) {\r\n        let blackKing = getATargetSquareByPiece(KINGS.BLACK_KING, boardSquaresRef.current) //get the black king\r\n        let whiteKing = getATargetSquareByPiece(KINGS.WHITE_KING, boardSquaresRef.current) //get the white king\r\n\r\n        for (let i = 0; i < possibleMoves.length; i++) {\r\n            let whiteCastle1 = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 6) //sqaure where king will be after short castle (white)\r\n            let whiteCastle2 = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 2) //sqaure where king will be after long castle (white)\r\n            let blackCastle1 = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 6) //square where king will be after shot castle (black)\r\n            let blackCastle2 = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 2) //square where king will be after long castle (black)\r\n\r\n            if (possibleMoves[i].piece == blackKing || possibleMoves[i].piece == whiteKing) {\r\n                if (whiteCastle1) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 5)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n\r\n                if (whiteCastle2) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 3)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n\r\n                if (blackCastle1) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 5)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n\r\n                if (blackCastle2) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 3)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n            }\r\n\r\n            //prevents black to castle if in check\r\n            if (isBlackInCheck(blackKing)) {\r\n                if (blackCastle1) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(blackCastle1), 1)\r\n                }\r\n\r\n                if (blackCastle2) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(blackCastle2), 1)\r\n                }\r\n            }\r\n\r\n            //prevents white to castle if in check\r\n            if (isWhiteInCheck(whiteKing)) {\r\n                if (whiteCastle1) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(whiteCastle1), 1)\r\n                }\r\n\r\n                if (whiteCastle2) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(whiteCastle2), 1)\r\n                }\r\n            }\r\n        }\r\n\r\n        return possibleMoves\r\n    }\r\n\r\n    //removes empty/undefined values for generated moves\r\n    function removeEmptyMoves(possibleMoves) {\r\n        for (let i = 0; i < possibleMoves.length; i++) {\r\n            //remove undefined elements if the possible moves array contains any\r\n            if (!possibleMoves[i]) {\r\n                possibleMoves.splice(i, 1)\r\n                i--;\r\n                continue;\r\n            }\r\n\r\n            //remove any elements if the possible moves array contains elements with no possible moves\r\n            if (possibleMoves[i].moves.length == 0) {\r\n                possibleMoves.splice(i, 1)\r\n                i--;\r\n                continue;\r\n            }\r\n\r\n            //remove undefined possible moves if the element has any such moves\r\n            for (let j = 0; j < possibleMoves[i].moves.length; j++) {\r\n                if (!possibleMoves[i].moves[j]) {\r\n                    possibleMoves[i].moves.splice(j, 1);\r\n                    j--;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possibleMoves\r\n    }\r\n\r\n    //updates the isPossibleMove array based on the possibleMoves array and forces a component update of the square to visually the circles indicating a move is possible\r\n    function updatePossibleMovesVisually() {\r\n        for (let i = 0; i < PossibleMoves.length; i++) {\r\n            if (checkIfAMoveIsEqualToTheCurrentSelectedSquare(PossibleMoves[i].piece)) {\r\n                for (let j = 0; j < PossibleMoves[i].moves.length; j++) {\r\n                    updateIsPossibleMove(`${PossibleMoves[i].moves[j].props.x}-${PossibleMoves[i].moves[j].props.y}`, true)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //gets all possible/legal moves\r\n    //TODO: check if can be refactored further\r\n    function getPossibleMoves() {\r\n        //let square = getATargetSquareByLocation(x, y)\r\n        let possiblePieceMoves = [];\r\n        let squares = boardSquares\r\n\r\n        for (let i = 0; i < squares.length; i++) {\r\n            let square = squares[i]\r\n\r\n            //if the square has a piece\r\n            if (square.props.piece) {\r\n                let color = getPieceColor(square); //get the piece color\r\n\r\n                //don't collect possible moves if it's black to move and you're trying to move a white piece\r\n                if (isColorWhite(color) && !IsWhiteToMove) {\r\n                    //console.log(`Skipping because it's black to move and you're moving a white piece, x: ${square.props.x}, y: ${square.props.y}`)\r\n                    continue\r\n                }\r\n\r\n                //don't collect possible moves if it's white to move and you're trying to move a black piece\r\n                if (isColorBlack(color) && IsWhiteToMove) {\r\n                    //console.log(`Skipping because it's white to move and you're moving a black piece, x: ${square.props.x}, y: ${square.props.y}`)\r\n                    continue\r\n                }\r\n\r\n                //console.log(`Getting possible moves, x: ${square.props.x}, y: ${square.props.y}`)\r\n                //get all possible moves for each piece\r\n                possiblePieceMoves.push(getPawnsPossibleMoves(square))\r\n                possiblePieceMoves.push(getRooksPossibleMoves(square))\r\n                possiblePieceMoves.push(getBishopPossibleMoves(square))\r\n                possiblePieceMoves.push(getKnightPossibleMoves(square))\r\n                possiblePieceMoves.push(getKingPossibleMoves(square))\r\n                possiblePieceMoves.push(getQueenPossibleMoves(square))\r\n\r\n                //filter empty moves\r\n                possiblePieceMoves = removeEmptyMoves(possiblePieceMoves);\r\n\r\n                //filter possible moves\r\n                possiblePieceMoves = filterMovesIfInCheck(possiblePieceMoves)\r\n                possiblePieceMoves = filterMovesThatAllowIllegalCastling(possiblePieceMoves)\r\n            }\r\n        }\r\n\r\n        console.log(\"Possible Moves:\", possiblePieceMoves);\r\n        console.log('Moves count', possiblePieceMoves.reduce((sum, pieceMove) => sum + pieceMove.moves.length, 0))\r\n        PossibleMoves.splice(0, PossibleMoves.length, ...possiblePieceMoves);\r\n        updatePossibleMovesVisually()\r\n    }\r\n\r\n    //renders the board\r\n    return (\r\n        <>\r\n            <div className=\"chessGrid\">\r\n                {boardSquares.map((sqr) => sqr)}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Board"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}