{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vladi Gotsin\\\\Desktop\\\\react\\\\Chess-React.js-\\\\src\\\\Board.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport React from 'react';\nimport Square from \"./Square.js\";\nimport { ConvertFENPieceToPiece, ConvertFenToString, UpdatePosition, ParseFEN } from \"./HelperMethods.js\";\n\n/*\r\nTODO:\r\nCode Reusability: refactor some of the repeated code and generate new functions if needed\r\nConsistency and Naming: Have better and more consistent names for variables and functions\r\nDocumentation: add more comments to understand what is going on\r\nTesting: add unit tests\r\nImplementations: add promotions, implement endgames (mate, stalemate, draws repeation, 50 moves rule)\r\nBugs: Fix bugs (if any)\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DIM = 8; //8x8 Board\nconst BLACK_KING = 'black-king';\nconst WHITE_KING = 'white-king';\nconst PIECE_DELIMITER = '-';\nconst WHITE = 'white';\nconst BLACK = 'black';\nconst PAWN = 'pawn';\nconst ROOK = 'rook';\nconst KNIGHT = 'knight';\nconst BISHOP = 'bishop';\nconst KING = 'king';\nconst QUEEN = 'queen';\nfunction Board() {\n  _s();\n  //<summary>\n  //FEN - Forsyth-Edwards Notation\n  //small letters - black pieces\n  //capital letters - white pieces\n  //numbers - empty board squares\n  //(/) - separates each board row\n  //first letter after the board indicates whose turn it is to move (w - white, b - black)\n  //next letters indicate castling rights, k - kingside, q - queenside, (-) - no castling allowed for any side\n  //en passant square - when a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square\n  //the number of half turns (white moves, then black moves = 2 half moves) that were made without a pawn move or a capture of a piece (50-move rule when reaches 100)\n  //the number of full moves (white moves, then black moves = 1 full move); increase after every black half move\n  //</summary>\n  //starting position\n  //'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\n  const [fen, setFen] = useState('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0');\n  const [boardPosition, setBoardPosition] = useState([[]]);\n  // const [nextTurn, setNextTurn] = useState('')\n  // const [WCastleK, setWCastleK] = useState(true)\n  // const [WCastleQ, setWCastleQ] = useState(true)\n  // const [BCastleK, setBCastleK] = useState(true)\n  // const [BCastleQ, setBCastleQ] = useState(true)\n  // const [enPassant, setEnPassant] = useState('')\n  // const [halfMoves, setHalfMoves] = useState(0)\n  // const [fullMoves, setFullMoves] = useState(0)\n  const [boardSquare, setBoardSquare] = useState([]);\n  const [possibleMoves, setPossibleMoves] = useState([]);\n  const [selectedSquareX, setSelectedSquareX] = useState('');\n  const [selectedSquareY, setSelectedSquareY] = useState('');\n  // const [canWhiteShortCastle, setCanWhiteShortCastle] = useState(true)\n  // const [canWhiteLongCastle, setCanWhiteLongCastle] = useState(true)\n  // const [canBlackShortCastle, setCanBlackShortCastle] = useState(true)\n  // const [canBlackLongCastle, setCanBlackLongCastle] = useState(true)\n  // const [enPassantPossible, setEnPassantPossible] = useState(false)\n  // const [enPassantX, setEnPassantX] = useState('')\n  // const [enPassantY, setEnPassantY] = useState('')\n  // const [isWhiteToMove, setIsWhiteToMove] = useState(true)\n\n  //called when the page loads.we need to parse the FEN to fill in the board\n  useEffect(() => {\n    fenParser();\n  }, []);\n  useEffect(() => {\n    console.log('Board position updated:', boardPosition);\n    console.log('Board square updated:', boardSquare);\n  }, [boardPosition, boardSquare]);\n\n  //parses the FEN for the initial board state\n  function fenParser() {\n    //parses the FEN string to variables\n    const {\n      fenBoard,\n      fenTurn,\n      fenCastling,\n      fenEnPassant,\n      fenHalfMoves,\n      fenFullMoves\n    } = ParseFEN(fen);\n    const fenRows = fenBoard.split('/');\n    let arr = [];\n\n    //splits all rows and creates a matrix for the board\n    for (let row of fenRows) {\n      const tokens = row.split('');\n      let r = [];\n      for (let i = 0; i < tokens.length; i++) {\n        if (Number(tokens[i])) {\n          for (let j = 0; j < Number(tokens[i]); j++) {\n            r.push(' ');\n          }\n        } else {\n          r.push(tokens[i]);\n        }\n      }\n      arr.push(r);\n    }\n\n    //generates a Square component for each element in the matrix created above\n    let boardSquares = [];\n    let squareColorIsWhite = true;\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0; j < arr[i].length; j++) {\n        let color = squareColorIsWhite ? \"\" : \"dark\";\n        boardSquares.push( /*#__PURE__*/_jsxDEV(Square, {\n          getPossibleMoves: getPossibleMoves,\n          x: i,\n          y: j,\n          piece: ConvertFENPieceToPiece(arr[i][j]),\n          color: color,\n          selectedSquareX: selectedSquareX,\n          setSelectedSquareX: updateSelectedSquareX,\n          selectedSquareY: selectedSquareY,\n          setSelectedSquareY: updateSelectedSquareY,\n          possibleMoves: possibleMoves,\n          updatePossibleMoves: updatePossibleMoves,\n          movePiece: movePiece\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this));\n        squareColorIsWhite = !squareColorIsWhite;\n      }\n      squareColorIsWhite = !squareColorIsWhite;\n    }\n\n    // if (fenCastling.includes('K')) {\n    //     setCanWhiteShortCastle(true);\n    // }\n    // if (fenCastling.includes('Q')) {\n    //     setCanWhiteLongCastle(true);\n    // }\n    // if (fenCastling.includes('k')) {\n    //     setCanBlackShortCastle(true);\n    // }\n    // if (fenCastling.includes('q')) {\n    //     setCanBlackLongCastle(true);\n    // }\n\n    //updates the state\n    setBoardPosition(arr);\n    // setNextTurn(fenTurn)\n    // setEnPassant(fenEnPassant)\n    // setHalfMoves(fenHalfMoves)\n    // setFullMoves(fenFullMoves)\n    setBoardSquare(boardSquares);\n  }\n\n  // function isWhiteInCheck(square, pseudo) {\n  //     let squares = boardSquare\n\n  //     if (pseudo) {\n  //         const updatedSquares = squares.map(s => {\n  //             if (s.x === pseudo.x && s.y === pseudo.y) {\n  //                 // Return a new Square component with the updated piece\n  //                 return React.cloneElement(s, { piece: pseudo.piece });\n  //             } else {\n  //                 // For other squares, return the original Square component\n  //                 return s;\n  //             }\n  //         });\n\n  //         squares = updatedSquares;\n  //     }\n\n  //     //check for attackers in front of the white king\n  //     for (let i = square.x - 1; i >= 0; i--) {\n  //         let piece = squares.find(s => s.x == i && s.y == square.y)\n  //         if (piece.piece.split(\"-\")[0] != \"white\") {\n  //             if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\n  //                 //console.log(\"in check from behind\")\n  //                 return true\n  //             } else {\n  //                 if (piece.piece) {\n  //                     break\n  //                 }\n  //             }\n  //         } else {\n  //             break\n  //         }\n  //     }\n\n  //     //check for attackers behind the white king\n  //     for (let i = square.x + 1; i < DIM; i++) {\n  //         let piece = squares.find(s => s.x == i && s.y == square.y)\n  //         if (piece.piece.split(\"-\")[0] != \"white\") {\n  //             if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\n  //                 //console.log(\"in check from the front\")\n  //                 return true\n  //             } else {\n  //                 if (piece.piece) {\n  //                     break\n  //                 }\n  //             }\n  //         } else {\n  //             break\n  //         }\n  //     }\n\n  //     //check for attackers to the left of the white king\n  //     for (let i = square.y - 1; i >= 0; i--) {\n  //         let piece = squares.find(s => s.x == square.x && s.y == i)\n  //         if (piece.piece.split(\"-\")[0] != \"white\") {\n  //             if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\n  //                 //console.log(\"in check from the left\")\n  //                 return true\n  //             } else {\n  //                 if (piece.piece) {\n  //                     break\n  //                 }\n  //             }\n  //         } else {\n  //             break\n  //         }\n  //     }\n\n  //     //check for attackers to the right of the white king\n  //     for (let i = square.y + 1; i < DIM; i++) {\n  //         let piece = squares.find(s => s.x == square.x && s.y == i)\n  //         if (piece.piece.split(\"-\")[0] != \"white\") {\n  //             if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\n  //                 //console.log(\"in check from the right\")\n  //                 return true\n  //             } else {\n  //                 if (piece.piece) {\n  //                     break\n  //                 }\n  //             }\n  //         } else {\n  //             break\n  //         }\n  //     }\n\n  //     //check for attackers on a half of one of the diagonals (tlted counterclockwise)\n  //     for (let i = 1; i < DIM; i++) {\n  //         let piece = squares.find(s => s.x == square.x - i && s.y == square.y - i)\n\n  //         if (piece) {\n  //             if (piece.piece.split(\"-\")[0] != \"white\") {\n  //                 if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\" || piece.piece.split(\"-\")[1] == \"pawn\") {\n  //                     if (piece.piece.split(\"-\")[1] == \"pawn\") {\n  //                         if (piece.x - square.x == -1 && piece.y - square.y == -1) {\n  //                             //console.log(\"in check from top half of counterclockwise diagonal by a pawn\")\n  //                             return true\n  //                         } else {\n  //                             break\n  //                         }\n  //                     } else {\n  //                         //console.log(\"in check from top half of counterclockwise diagonal\")\n  //                         return true\n  //                     }\n  //                 } else {\n  //                     if (piece.piece) {\n  //                         break\n  //                     }\n  //                 }\n  //             } else {\n  //                 break\n  //             }\n  //         }\n  //     }\n\n  //     //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\n  //     for (let i = 1; i < DIM; i++) {\n  //         let piece = squares.find(s => s.x == square.x + i && s.y == square.y + i)\n\n  //         if (piece) {\n  //             if (piece.piece.split(\"-\")[0] != \"white\") {\n  //                 if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\") {\n  //                     return true\n  //                 } else {\n  //                     if (piece.piece) {\n  //                         break\n  //                     }\n  //                 }\n  //             } else {\n  //                 break\n  //             }\n  //         }\n  //     }\n\n  //     //check for attackers on a half of one of the diagonals (tlted clockwise)\n  //     for (let i = 1; i < DIM; i++) {\n  //         let piece = squares.find(s => s.x == square.x - i && s.y == square.y + i)\n\n  //         if (piece) {\n  //             if (piece.piece.split(\"-\")[0] != \"white\") {\n  //                 if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\" || piece.piece.split(\"-\")[1] == \"pawn\") {\n  //                     if (piece.piece.split(\"-\")[1] == \"pawn\") {\n  //                         if (piece.x - square.x == -1 && piece.y - square.y == 1) {\n  //                             //console.log(\"in check from top half of clockwise diagonal by a pawn\")\n  //                             return true\n  //                         } else {\n  //                             break\n  //                         }\n  //                     } else {\n  //                         //console.log(\"in check from top half of clockwise diagonal\")\n  //                         return true\n  //                     }\n  //                 } else {\n  //                     if (piece.piece) {\n  //                         break\n  //                     }\n  //                 }\n  //             } else {\n  //                 break\n  //             }\n  //         }\n  //     }\n\n  //     //check for attackers on the other half of one of the diagonals (tlted clockwise)\n  //     for (let i = 1; i < DIM; i++) {\n  //         let piece = squares.find(s => s.x == square.x + i && s.y == square.y - i)\n\n  //         if (piece) {\n  //             if (piece.piece.split(\"-\")[0] != \"white\") {\n  //                 if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\") {\n  //                     return true;\n  //                 } else {\n  //                     if (piece.piece) {\n  //                         break\n  //                     }\n  //                 }\n  //             } else {\n  //                 break\n  //             }\n  //         }\n  //     }\n\n  //     //check for knights check\n  //     let knight1 = squares.find(s => s.x == square.x - 2 && s.y == square.y - 1)\n  //     let knight2 = squares.find(s => s.x == square.x - 2 && s.y == square.y + 1)\n  //     let knight3 = squares.find(s => s.x == square.x + 2 && s.y == square.y - 1)\n  //     let knight4 = squares.find(s => s.x == square.x + 2 && s.y == square.y + 1)\n  //     let knight5 = squares.find(s => s.x == square.x - 1 && s.y == square.y + 2)\n  //     let knight6 = squares.find(s => s.x == square.x - 1 && s.y == square.y - 2)\n  //     let knight7 = squares.find(s => s.x == square.x + 1 && s.y == square.y + 2)\n  //     let knight8 = squares.find(s => s.x == square.x + 1 && s.y == square.y - 2)\n\n  //     if (knight1) {\n  //         if (knight1.piece.split(\"-\")[1] == \"knight\") {\n  //             if (knight1.piece.split(\"-\")[0] != \"white\") {\n  //                 //console.log(\"in check by knight 1\")\n  //                 return true\n  //             }\n  //         }\n  //     }\n\n  //     if (knight2) {\n  //         if (knight2.piece.split(\"-\")[1] == \"knight\") {\n  //             if (knight2.piece.split(\"-\")[0] != \"white\") {\n  //                 //console.log(\"in check by knight 2\")\n  //                 return true\n  //             }\n  //         }\n  //     }\n\n  //     if (knight3) {\n  //         if (knight3.piece.split(\"-\")[1] == \"knight\") {\n  //             if (knight3.piece.split(\"-\")[0] != \"white\") {\n  //                 //console.log(\"in check by knight 3\")\n  //                 return true\n  //             }\n  //         }\n  //     }\n\n  //     if (knight4) {\n  //         if (knight4.piece.split(\"-\")[1] == \"knight\") {\n  //             if (knight4.piece.split(\"-\")[0] != \"white\") {\n  //                 //console.log(\"in check by knight 4\")\n  //                 return true\n  //             }\n  //         }\n  //     }\n\n  //     if (knight5) {\n  //         if (knight5.piece.split(\"-\")[1] == \"knight\") {\n  //             if (knight5.piece.split(\"-\")[0] != \"white\") {\n  //                 //console.log(\"in check by knight 5\")\n  //                 return true\n  //             }\n  //         }\n  //     }\n\n  //     if (knight6) {\n  //         if (knight6.piece.split(\"-\")[1] == \"knight\") {\n  //             if (knight6.piece.split(\"-\")[0] != \"white\") {\n  //                 //console.log(\"in check by knight 6\")\n  //                 return true\n  //             }\n  //         }\n  //     }\n\n  //     if (knight7) {\n  //         if (knight7.piece.split(\"-\")[1] == \"knight\") {\n  //             if (knight7.piece.split(\"-\")[0] != \"white\") {\n  //                 //console.log(\"in check by knight 7\")\n  //                 return true\n  //             }\n  //         }\n  //     }\n\n  //     if (knight8) {\n  //         if (knight8.piece.split(\"-\")[1] == \"knight\") {\n  //             if (knight8.piece.split(\"-\")[0] != \"white\") {\n  //                 //console.log(\"in check by knight 8\")\n  //                 return true\n  //             }\n  //         }\n  //     }\n\n  //     return false;\n  // }\n\n  // function isBlackInCheck(square, pseudo) {\n  //     let squares = boardSquare\n\n  //     if (pseudo) {\n  //         const updatedSquares = squares.map(s => {\n  //             if (s.x === pseudo.x && s.y === pseudo.y) {\n  //                 // Return a new Square component with the updated piece\n  //                 return React.cloneElement(s, { piece: pseudo.piece });\n  //             } else {\n  //                 // For other squares, return the original Square component\n  //                 return s;\n  //             }\n  //         });\n\n  //         squares = updatedSquares;\n  //     }\n\n  //     //check for attackers behind the black king\n  //     for (let i = square.x - 1; i >= 0; i--) {\n  //         let piece = squares.find(s => s.x == i && s.y == square.y)\n  //         if (piece.piece.split(\"-\")[0] != \"black\") {\n  //             if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\n  //                 //console.log(\"in check from behind\")\n  //                 return true\n  //             } else {\n  //                 if (piece.piece) {\n  //                     break\n  //                 }\n  //             }\n  //         } else {\n  //             break\n  //         }\n  //     }\n\n  //     //check for attackers in front of the black king\n  //     for (let i = square.x + 1; i < DIM; i++) {\n  //         let piece = squares.find(s => s.x == i && s.y == square.y)\n  //         if (piece.piece.split(\"-\")[0] != \"black\") {\n  //             if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\n  //                 //console.log(\"in check from the front\")\n  //                 return true\n  //             } else {\n  //                 if (piece.piece) {\n  //                     break\n  //                 }\n  //             }\n  //         } else {\n  //             break\n  //         }\n  //     }\n\n  //     //check for attackers to the left of the black king\n  //     for (let i = square.y - 1; i >= 0; i--) {\n  //         let piece = squares.find(s => s.x == square.x && s.y == i)\n  //         if (piece.piece.split(\"-\")[0] != \"black\") {\n  //             if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\n  //                 //console.log(\"in check from the left\")\n  //                 return true\n  //             } else {\n  //                 if (piece.piece) {\n  //                     break\n  //                 }\n  //             }\n  //         } else {\n  //             break\n  //         }\n  //     }\n\n  //     //check for attackers to the right of the black king\n  //     for (let i = square.y + 1; i < DIM; i++) {\n  //         let piece = squares.find(s => s.x == square.x && s.y == i)\n  //         if (piece.piece.split(\"-\")[0] != \"black\") {\n  //             if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\n  //                 //console.log(\"in check from the right\")\n  //                 return true\n  //             } else {\n  //                 if (piece.piece) {\n  //                     break\n  //                 }\n  //             }\n  //         } else {\n  //             break\n  //         }\n  //     }\n\n  //     //check for attackers on a half of one of the diagonals (tlted counterclockwise)\n  //     for (let i = 1; i < DIM; i++) {\n  //         let piece = squares.find(s => s.x == square.x - i && s.y == square.y - i)\n\n  //         if (piece) {\n  //             if (piece.piece.split(\"-\")[0] != \"black\") {\n  //                 if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\") {\n  //                     //console.log(\"in check from top half of counterclockwise diagonal\")\n  //                     return true\n  //                 } else {\n  //                     if (piece.piece) {\n  //                         break\n  //                     }\n  //                 }\n  //             } else {\n  //                 break\n  //             }\n  //         }\n  //     }\n\n  //     //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\n  //     for (let i = 1; i < DIM; i++) {\n  //         let piece = squares.find(s => s.x == square.x + i && s.y == square.y + i)\n\n  //         if (piece) {\n  //             if (piece.piece.split(\"-\")[0] != \"black\") {\n  //                 if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\" || piece.piece.split(\"-\")[1] == \"pawn\") {\n  //                     if (piece.piece.split(\"-\")[1] == \"pawn\") {\n  //                         if (piece.x - square.x == 1 && piece.y - square.y == 1) {\n  //                             //console.log(\"in check from bottom half of counterclockwise diagonal by a pawn\")\n  //                             return true\n  //                         } else {\n  //                             break\n  //                         }\n  //                     } else {\n  //                         //console.log(\"in check from bottom half of counterclockwise diagonal\")\n  //                         return true\n  //                     }\n  //                 } else {\n  //                     if (piece.piece) {\n  //                         break\n  //                     }\n  //                 }\n  //             } else {\n  //                 break\n  //             }\n  //         }\n  //     }\n\n  //     //check for attackers on a half of one of the diagonals (tlted clockwise)\n  //     for (let i = 1; i < DIM; i++) {\n  //         let piece = squares.find(s => s.x == square.x - i && s.y == square.y + i)\n\n  //         if (piece) {\n  //             if (piece.piece.split(\"-\")[0] != \"black\") {\n  //                 if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\") {\n  //                     //console.log(\"in check from top half of clockwise diagonal\")\n  //                     return true\n  //                 } else {\n  //                     if (piece.piece) {\n  //                         break\n  //                     }\n  //                 }\n  //             } else {\n  //                 break\n  //             }\n  //         }\n  //     }\n\n  //     //check for attackers on the other half of one of the diagonals (tlted clockwise)\n  //     for (let i = 1; i < DIM; i++) {\n  //         let piece = squares.find(s => s.x == square.x + i && s.y == square.y - i)\n\n  //         if (piece) {\n  //             if (piece.piece.split(\"-\")[0] != \"black\") {\n  //                 if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\" || piece.piece.split(\"-\")[1] == \"pawn\") {\n  //                     if (piece.piece.split(\"-\")[1] == \"pawn\") {\n  //                         if (piece.x - square.x == 1 && piece.y - square.y == -1) {\n  //                             //console.log(\"in check from bottom half of clockwise diagonal by a pawn\")\n  //                             return true\n  //                         } else {\n  //                             break\n  //                         }\n  //                     } else {\n  //                         //console.log(\"in check from bottom half of clockwise diagonal\")\n  //                         return true\n  //                     }\n  //                 } else {\n  //                     if (piece.piece) {\n  //                         break\n  //                     }\n  //                 }\n  //             } else {\n  //                 break\n  //             }\n  //         }\n  //     }\n\n  //     //check for knights check\n  //     let knight1 = squares.find(s => s.x == square.x - 2 && s.y == square.y - 1)\n  //     let knight2 = squares.find(s => s.x == square.x - 2 && s.y == square.y + 1)\n  //     let knight3 = squares.find(s => s.x == square.x + 2 && s.y == square.y - 1)\n  //     let knight4 = squares.find(s => s.x == square.x + 2 && s.y == square.y + 1)\n  //     let knight5 = squares.find(s => s.x == square.x - 1 && s.y == square.y + 2)\n  //     let knight6 = squares.find(s => s.x == square.x - 1 && s.y == square.y - 2)\n  //     let knight7 = squares.find(s => s.x == square.x + 1 && s.y == square.y + 2)\n  //     let knight8 = squares.find(s => s.x == square.x + 1 && s.y == square.y - 2)\n\n  //     if (knight1) {\n  //         if (knight1.piece.split(\"-\")[1] == \"knight\") {\n  //             if (knight1.piece.split(\"-\")[0] != \"black\") {\n  //                 //console.log(\"in check by knight 1\")\n  //                 return true\n  //             }\n  //         }\n  //     }\n\n  //     if (knight2) {\n  //         if (knight2.piece.split(\"-\")[1] == \"knight\") {\n  //             if (knight2.piece.split(\"-\")[0] != \"black\") {\n  //                 //console.log(\"in check by knight 2\")\n  //                 return true\n  //             }\n  //         }\n  //     }\n\n  //     if (knight3) {\n  //         if (knight3.piece.split(\"-\")[1] == \"knight\") {\n  //             if (knight3.piece.split(\"-\")[0] != \"black\") {\n  //                 //console.log(\"in check by knight 3\")\n  //                 return true\n  //             }\n  //         }\n  //     }\n\n  //     if (knight4) {\n  //         if (knight4.piece.split(\"-\")[1] == \"knight\") {\n  //             if (knight4.piece.split(\"-\")[0] != \"black\") {\n  //                 //console.log(\"in check by knight 4\")\n  //                 return true\n  //             }\n  //         }\n  //     }\n\n  //     if (knight5) {\n  //         if (knight5.piece.split(\"-\")[1] == \"knight\") {\n  //             if (knight5.piece.split(\"-\")[0] != \"black\") {\n  //                 //console.log(\"in check by knight 5\")\n  //                 return true\n  //             }\n  //         }\n  //     }\n\n  //     if (knight6) {\n  //         if (knight6.piece.split(\"-\")[1] == \"knight\") {\n  //             if (knight6.piece.split(\"-\")[0] != \"black\") {\n  //                 //console.log(\"in check by knight 6\")\n  //                 return true\n  //             }\n  //         }\n  //     }\n\n  //     if (knight7) {\n  //         if (knight7.piece.split(\"-\")[1] == \"knight\") {\n  //             if (knight7.piece.split(\"-\")[0] != \"black\") {\n  //                 //console.log(\"in check by knight 7\")\n  //                 return true\n  //             }\n  //         }\n  //     }\n\n  //     if (knight8) {\n  //         if (knight8.piece.split(\"-\")[1] == \"knight\") {\n  //             if (knight8.piece.split(\"-\")[0] != \"black\") {\n  //                 //console.log(\"in check by knight 8\")\n  //                 return true\n  //             }\n  //         }\n  //     }\n\n  //     return false;\n  // }\n\n  function movePiece(x, y) {\n    let squares = boardSquare;\n    let targetSquare = getATargetSquareByLocation(x, y);\n    let square = squares.find(s => s.x == selectedSquareX && s.y == selectedSquareY);\n    let color = getPieceColor(square);\n    let piece = getPiece(square);\n\n    //disable castling if the king moves\n    if (piece == \"king\") {\n      if (isColorWhite(color)) {\n        setCanWhiteLongCastle(false);\n        setCanWhiteShortCastle(false);\n      } else {\n        setCanBlackLongCastle(false);\n        setCanBlackShortCastle(false);\n      }\n    }\n\n    //disable castling if the rook moves\n    if (piece == \"rook\") {\n      if (square.x == 7 && square.y == 7) {\n        setCanWhiteShortCastle(false);\n      }\n      if (square.x == 0 && square.y == 7) {\n        setCanBlackShortCastle(false);\n      }\n      if (square.x == 7 && square.y == 0) {\n        setCanWhiteLongCastle(false);\n      }\n      if (square.x == 0 && square.y == 0) {\n        setCanBlackLongCastle(false);\n      }\n    }\n    let p = UpdatePosition(square, targetSquare, position);\n\n    //capturing enPassant\n    if (enPassantX && enPassantY && enPassantPossible) {\n      let enPassantTargetSquare = color == \"white\" ? squares.find(s => s.x == x + 1 && s.y == y) : squares.find(s => s.x == x - 1 && s.y == y);\n      let enPassantSquare = /*#__PURE__*/_jsxDEV(Square, {\n        x: square.x,\n        y: square.y,\n        piece: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 735,\n        columnNumber: 35\n      }, this);\n      p = UpdatePosition(enPassantSquare, enPassantTargetSquare, p);\n    }\n\n    //TODO: ensure p matches the new board Position format\n    //setBoardPosition(p)\n    setPossibleMoves([]);\n    setIsWhiteToMove(!isWhiteToMove);\n\n    //enabling en passant\n    if (piece == \"pawn\") {\n      if (Math.abs(square.x - targetSquare.x) == 2) {\n        let enPassant1 = squares.find(s => s.x == targetSquare.x && s.y == targetSquare.y - 1);\n        let enPassant2 = squares.find(s => s.x == targetSquare.x && s.y == targetSquare.y + 1);\n        if (enPassant1) {\n          if (enPassant1.piece.split(\"-\")[1] == \"pawn\") {\n            if (enPassant1.piece.split(\"-\")[0] != color) {\n              setEnPassantPossible(true);\n              setEnPassantX(targetSquare.x);\n              setEnPassantY(targetSquare.y);\n              return;\n            }\n          }\n        }\n        if (enPassant2) {\n          if (enPassant2.piece.split(\"-\")[1] == \"pawn\") {\n            if (enPassant2.piece.split(\"-\")[0] != color) {\n              setEnPassantPossible(true);\n              setEnPassantX(targetSquare.x);\n              setEnPassantY(targetSquare.y);\n              return;\n            }\n          }\n        }\n      }\n    }\n    setEnPassantPossible(false);\n    setEnPassantX('');\n    setEnPassantY('');\n  }\n\n  // //updates the state with the possible moves\n  function updatePossibleMoves(moves) {\n    setPossibleMoves(moves);\n  }\n  ;\n\n  // //updates the state with the selectedSquare X coordinates\n  function updateSelectedSquareX(x) {\n    setSelectedSquareX(x);\n  }\n\n  // //updates the state with the selectedSquare Y coordinates\n  function updateSelectedSquareY(y) {\n    setSelectedSquareY(y);\n  }\n\n  // //retrieves a speecific square from the board using x and y coordinates (location)\n  function getATargetSquareByLocation(x, y) {\n    let squares = boardSquare;\n    return squares.find(s => s.x === x && s.y === y);\n  }\n\n  // //retrieves a speecific square from the board that has a certain piece\n  // function getATargetSquareByPiece(piece) {\n  //     let squares = boardSquare\n\n  //     return squares.find(s => s.piece == piece);\n  // }\n\n  // //check if a specific square has a piece assigned to it\n  // function isSquareAvailable(square) {\n  //     return square && !square.piece\n  // }\n\n  // //checks if a pawn is on its starting square and allows a 2-squares move\n  // function isPawnOnStartingSquare(pawn) {\n  //     return isColorWhite(pawn.piece.split(PIECE_DELIMITER)[0]) ? pawn.x == 6 : pawn.x == 1\n  // }\n\n  // //checks if two pieces have the same color\n  // function areSameColor(square1, square2) {\n  //     if (!square1 || !square2) {\n  //         return\n  //     }\n\n  //     let color1 = square1.piece.split(PIECE_DELIMITER)[0];\n  //     let color2 = square2.piece.split(PIECE_DELIMITER)[0];\n\n  //     return color1 == color2\n  // }\n\n  // //checks if a square contains a certain piece\n  // function doesTheSquareHasThePiece(square, piece) {\n  //     let p = getPiece(square)\n\n  //     return p == piece\n  // }\n\n  // //cheks if a pawn is on En Passant square\n  // function isPawnOnEnPassantSquare(pawn) {\n  //     return isColorWhite(pawn.piece.split(PIECE_DELIMITER)[0]) ? pawn.x == 3 : pawn.x == 4\n  // }\n\n  // //checks if a color is white\n  // function isColorWhite(color) {\n  //     return color == WHITE\n  // }\n\n  // //checks if a color is black\n  // function isColorBlack(color) {\n  //     return color == BLACK\n  // }\n\n  // //checks if white is allowed to long castle\n  // function checkIfCanWhiteLongCastle() {\n  //     return canWhiteLongCastle &&\n  //         boardPosition[7][0] == 'R' &&\n  //         boardPosition[7][1] == '' &&\n  //         boardPosition[7][2] == '' &&\n  //         boardPosition[7][3] == '';\n  // }\n\n  // //checks if white is allowed to short castle\n  // function checkIfCanWhiteShortCastle() {\n  //     return canWhiteShortCastle &&\n  //         boardPosition[7][7] == 'R' &&\n  //         boardPosition[7][6] == '' &&\n  //         boardPosition[7][5] == '';\n  // }\n\n  // //checks if black is allowed to long castle\n  // function checkIfCanBlackLongCastle() {\n  //     return canBlackLongCastle &&\n  //         boardPosition[0][0] == 'r' &&\n  //         boardPosition[0][1] == '' &&\n  //         boardPosition[0][2] == '' &&\n  //         boardPosition[0][3] == '';\n  // }\n\n  // //checks if black is allowed to short castle\n  // function checkIfCanBlackShortCastle() {\n  //     return canBlackShortCastle &&\n  //         boardPosition[7][7] == 'r' &&\n  //         boardPosition[7][6] == '' &&\n  //         boardPosition[7][5] == '';\n  // }\n\n  // //converts board coordinates to X and Y position on the board, e.g., a8 = 0, 0\n  // function convertCoordinatesToLocation(coordinates) {\n  //     let tokens = coordinates.split('')\n\n  //     //skip invalid coordinates\n  //     if (tokens.length != 2) {\n  //         return\n  //     }\n\n  //     let letter = tokens[0].toString().toUpperCase()\n  //     let number = tokens[1]\n\n  //     //65 is the ASCII code for capital A which will give us 0 if we have A as a coordinate; A-F will give us 0-7 for x\n  //     //reverse the numbers since we draw the board top down\n  //     return { x: letter.charCodeAt(0) - 65, y: DIM - Number(number) }\n  // }\n\n  // //gets all possible moves for a pawn\n  // function getPawnsPossibleMoves(square) {\n  //     let color = getPieceColor(square) //get the piece color\n\n  //     let moves = []\n\n  //     let position1Offset = 1\n  //     let position2Offset = 2\n\n  //     //flips the direction if the color is white\n  //     if (isColorWhite(color)) {\n  //         position1Offset *= -1\n  //         position2Offset *= -1\n  //     }\n\n  //     //get all forwards moves + the double move at the start\n  //     let targetPiece1 = getATargetSquareByLocation(square.x + position1Offset, square.y) //move pawn 1 square ahead\n  //     let targetPiece2 = getATargetSquareByLocation(square.x + position2Offset, square.y) //move pawn 2 squares ahead\n\n  //     //get potential neighbors to capture\n  //     let neighbor1 = getATargetSquareByLocation(square.x + position1Offset, square.y + position1Offset)\n  //     let neighbor2 = getATargetSquareByLocation(square.x + position1Offset, square.y + (position1Offset * -1))\n\n  //     //get the En Passant coordinates\n  //     let enPassantCordinates = convertCoordinatesToLocation(enPassant)\n  //     let enPassantSquare = enPassantCordinates ? getATargetSquareByLocation(enPassantCordinates.x, enPassantCordinates.y) : ''\n\n  //     let isTheSquareInFrontAvailable = isSquareAvailable(targetPiece1)\n\n  //     //push the one move forward for a pawn\n  //     if (isTheSquareInFrontAvailable) {\n  //         moves.push(targetPiece1)\n  //     }\n\n  //     //two moves are allowed only if the two squares above are free/empty\n  //     //allowed if pawn hasn't moved before\n  //     if (isTheSquareInFrontAvailable && isSquareAvailable(targetPiece2) && isPawnOnStartingSquare(square)) {\n  //         moves.push(targetPiece2)\n  //     }\n\n  //     //push neighbour if there is a piece to capture and it's a different color than the pawn\n  //     if (!isSquareAvailable(neighbor1) && !areSameColor(neighbor1, square)) {\n  //         moves.push(neighbor1)\n  //     }\n\n  //     //push neighbour if there is a piece to capture and it's a different color than the pawn\n  //     if (!isSquareAvailable(neighbor2) && !areSameColor(neighbor2, square)) {\n  //         moves.push(neighbor2)\n  //     }\n\n  //     //add En Passant\n  //     if (enPassantSquare) {\n  //         moves.push(enPassantSquare)\n  //     }\n\n  //     return { piece: square, moves: moves }\n  // }\n\n  // //gets all possible moves for a rook\n  // function getRooksPossibleMoves(square) {\n  //     let moves = []\n\n  //     for (let i = square.x + 1; i < DIM; i++) {\n  //         let targetSquare = getATargetSquareByLocation(i, square.y)\n\n  //         if (isSquareAvailable(targetSquare)) {\n  //             moves.push(targetSquare)\n  //         } else {\n  //             if (!areSameColor(square, targetSquare)) {\n  //                 moves.push(targetSquare)\n  //             }\n  //             break\n  //         }\n  //     }\n\n  //     for (let i = square.x - 1; i >= 0; i--) {\n  //         let targetSquare = getATargetSquareByLocation(i, square.y)\n\n  //         if (isSquareAvailable(targetSquare)) {\n  //             moves.push(targetSquare)\n  //         } else {\n  //             if (!areSameColor(square, targetSquare)) {\n  //                 moves.push(targetSquare)\n  //             }\n  //             break;\n  //         }\n  //     }\n\n  //     for (let i = square.y + 1; i < DIM; i++) {\n  //         let targetSquare = getATargetSquareByLocation(square.x, i)\n\n  //         if (isSquareAvailable(targetSquare)) {\n  //             moves.push(targetSquare)\n  //         } else {\n  //             if (!areSameColor(square, targetSquare)) {\n  //                 moves.push(targetSquare)\n  //             }\n  //             break\n  //         }\n  //     }\n\n  //     for (let i = square.y - 1; i >= 0; i--) {\n  //         let targetSquare = getATargetSquareByLocation(square.x, i)\n\n  //         if (isSquareAvailable(targetSquare)) {\n  //             moves.push(targetSquare)\n  //         } else {\n  //             if (!areSameColor(square, targetSquare)) {\n  //                 moves.push(targetSquare)\n  //             }\n  //             break\n  //         }\n  //     }\n\n  //     return { piece: square, moves: moves }\n  // }\n\n  // //gets all possible moves for a bishop\n  // function getBishopPossibleMoves(square) {\n  //     let moves = []\n\n  //     let counter = 0;\n\n  //     for (let i = 1; i <= DIM; i++) {\n  //         if (counter == 5) {\n  //             break;\n  //         }\n\n  //         let target1 = getATargetSquareByLocation(square.x - i, square.y - i)\n  //         let target2 = getATargetSquareByLocation(square.x - i, square.y + i)\n  //         let target3 = getATargetSquareByLocation(square.x + i, square.y + i)\n  //         let target4 = getATargetSquareByLocation(square.x + i, square.y - i)\n\n  //         if (target1 && isSquareAvailable(target1) && counter < 1) {\n  //             moves.push(target1)\n  //         } else {\n  //             if (!areSameColor(square, target1)) {\n  //                 moves.push(target1)\n  //             }\n  //             counter++;\n  //         }\n\n  //         if (target2 && isSquareAvailable(target2) && counter < 2) {\n  //             moves.push(target2)\n  //         } else {\n  //             if (!areSameColor(square, target2)) {\n  //                 moves.push(target2)\n  //             }\n  //             counter++;\n  //         }\n\n  //         if (target3 && isSquareAvailable(target3) && counter < 3) {\n  //             moves.push(target3)\n  //         } else {\n  //             if (!areSameColor(square, target3)) {\n  //                 moves.push(target3)\n  //             }\n  //             counter++;\n  //         }\n\n  //         if (target4 && isSquareAvailable(target4) && counter < 4) {\n  //             moves.push(target4)\n  //         } else {\n  //             if (!areSameColor(square, target4)) {\n  //                 moves.push(target4)\n  //             }\n  //             counter++;\n  //         }\n  //     }\n\n  //     return { piece: square, moves: moves }\n  // }\n\n  // //gets all possible moves for a knight\n  // function getKnightPossibleMoves(square) {\n  //     let offset = 1;\n  //     let doubleOffset = 2 * offset;\n\n  //     let moves = []\n\n  //     for (let i = 0; i < 8; i++) {\n  //         if (i != 0 && i % 2 == 0) {\n  //             offset *= -1;\n  //         }\n\n  //         let targetX = square.x + offset;\n  //         let targetY = square.y + doubleOffset;\n\n  //         let target = getATargetSquareByLocation(targetX, targetY)\n\n  //         if (target && isSquareAvailable(target)) {\n  //             moves.push(target)\n  //         } else {\n  //             if (!areSameColor(square, target)) {\n  //                 moves.push(target)\n  //             }\n  //         }\n\n  //         doubleOffset *= -1\n\n  //         if (i == 4) {\n  //             offset *= 2\n  //             doubleOffset /= 2\n  //         }\n  //     }\n\n  //     return { piece: square, moves: moves }\n  // }\n\n  // //gets all possible moves for a king\n  // function getKingPossibleMoves(square) {\n  //     let moves = []\n\n  //     let color = getPieceColor(square)\n\n  //     //gets all possible 1-square moves for the king\n  //     for (let i = -1; i < 2; i++) {\n  //         for (let j = -1; j < 2; j++) {\n  //             let targetPiece = getATargetSquareByLocation(square.x + i, square.y + j)\n\n  //             if (targetPiece && isSquareAvailable(targetPiece)) {\n  //                 moves.push(targetPiece)\n  //             } else {\n  //                 if (!areSameColor(square, targetPiece)) {\n  //                     moves.push(targetPiece)\n  //                 }\n  //             }\n  //         }\n  //     }\n\n  //     //Castling logic\n  //     const longCastleSquare = getATargetSquareByLocation(square.x, square.y - 2)\n  //     const shortCastleSquare = getATargetSquareByLocation(square.x, square.y + 2)\n\n  //     if (isColorWhite(color) && checkIfCanWhiteLongCastle()) {\n  //         moves.push(longCastleSquare)\n  //     }\n\n  //     if (isColorWhite(color) && checkIfCanWhiteShortCastle()) {\n  //         moves.push(shortCastleSquare)\n  //     }\n\n  //     if (isColorBlack(color) && checkIfCanBlackLongCastle()) {\n  //         moves.push(longCastleSquare)\n  //     }\n\n  //     if (isColorBlack(color) && checkIfCanBlackShortCastle()) {\n  //         moves.push(shortCastleSquare)\n  //     }\n\n  //     return { piece: square, moves: moves }\n  // }\n\n  // //gets all possible moves for a queen\n  // function getQueenPossibleMoves(square) {\n  //     let moves = []\n\n  //     //a queen has the same moves as a bishop and a rook\n  //     const rookMoves = getRooksPossibleMoves(square).moves;\n  //     const bishopMoves = getBishopPossibleMoves(square).moves;\n\n  //     // Concatenate the arrays of moves\n  //     moves.push(...rookMoves, ...bishopMoves);\n\n  //     return { piece: square, moves: moves }\n  // }\n\n  // //gets the piece color\n  // function getPieceColor(square) {\n  //     return square.piece.split(PIECE_DELIMITER)[0]\n  // }\n\n  // //gets the piece\n  // function getPiece(square) {\n  //     return square.piece.split(PIECE_DELIMITER)[1]\n  // }\n\n  // //removes moves that do not deal with a check\n  // function filterMovesIfInCheck(possibleMoves) {\n  //     let blackKing = getATargetSquareByPiece(BLACK_KING) //get the black king\n  //     let whiteKing = getATargetSquareByPiece(WHITE_KING) //get the white king\n\n  //     for (let i = 0; i < possibleMoves.length; i++) {\n  //         for (let j = 0; j < possibleMoves[i].moves; j++) {\n  //             if (possibleMoves[i].piece.piece == BLACK_KING) {\n  //                 let move = <Square x={possibleMoves[i].moves[j].x} y={possibleMoves[i].moves[j].y} piece={\"black-king\"} />\n  //                 let pseudo = <Square x={blackKing.x} y={blackKing.y} piece={\"\"} />\n  //                 let isInCheck = isBlackInCheck(move, pseudo)\n\n  //                 if (isInCheck) {\n  //                     possibleMoves[i].moves.splice(j, 1);\n  //                     j--;\n  //                 }\n  //             } else if (possibleMoves[i].piece.piece == WHITE_KING) {\n  //                 let move = <Square x={possibleMoves[i].moves[j].x} y={possibleMoves[i].moves[j].y} piece={\"white-king\"} />\n  //                 let pseudo = <Square x={whiteKing.x} y={whiteKing.y} piece={\"\"} />\n  //                 let isInCheck = isWhiteInCheck(move, pseudo)\n\n  //                 if (isInCheck) {\n  //                     possibleMoves[i].moves.splice(j, 1);\n  //                     j--;\n  //                 }\n  //             } else {\n  //                 let move = <Square x={possibleMoves[i].moves[j].x} y={possibleMoves[i].moves[j].y} piece={possibleMoves[i].piece.piece} />\n  //                 let isInCheck = isBlackInCheck(blackKing, move) ? true : isWhiteInCheck(whiteKing, move)\n\n  //                 if (isInCheck) {\n  //                     possibleMoves[i].moves.splice(j, 1);\n  //                     j--;\n  //                 }\n  //             }\n  //         }\n  //     }\n\n  //     return possibleMoves\n  // }\n\n  // //removes moves that allow illigal castling (castles through check for example)\n  // function filterMovesThatAllowIllegalCastling(possibleMoves) {\n  //     let blackKing = getATargetSquareByPiece(BLACK_KING) //get the black king\n  //     let whiteKing = getATargetSquareByPiece(WHITE_KING) //get the white king\n\n  //     for (let i = 0; i < possibleMoves.length; i++) {\n  //         let whiteCastle1 = possibleMoves[i].moves.find(m => m.x == 7 && m.y == 6) //sqaure where king will be after short castle (white)\n  //         let whiteCastle2 = possibleMoves[i].moves.find(m => m.x == 7 && m.y == 2) //sqaure where king will be after long castle (white)\n  //         let blackCastle1 = possibleMoves[i].moves.find(m => m.x == 0 && m.y == 6) //square where king will be after shot castle (black)\n  //         let blackCastle2 = possibleMoves[i].moves.find(m => m.x == 0 && m.y == 2) //square where king will be after long castle (black)\n\n  //         if (possibleMoves[i].piece == blackKing || possibleMoves[i].piece == whiteKing) {\n  //             if (whiteCastle1) {\n  //                 let pieceAcross = possibleMoves[i].moves.find(m => m.x == 7 && m.y == 5)\n  //                 if (!pieceAcross) {\n  //                     possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\n  //                 }\n  //             }\n\n  //             if (whiteCastle2) {\n  //                 let pieceAcross = possibleMoves[i].moves.find(m => m.x == 7 && m.y == 3)\n  //                 if (!pieceAcross) {\n  //                     possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\n  //                 }\n  //             }\n\n  //             if (blackCastle1) {\n  //                 let pieceAcross = possibleMoves[i].moves.find(m => m.x == 0 && m.y == 5)\n  //                 if (!pieceAcross) {\n  //                     possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\n  //                 }\n  //             }\n\n  //             if (blackCastle2) {\n  //                 let pieceAcross = possibleMoves[i].moves.find(m => m.x == 0 && m.y == 3)\n  //                 if (!pieceAcross) {\n  //                     possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\n  //                 }\n  //             }\n  //         }\n\n  //         //prevents black to castle if in check\n  //         if (isBlackInCheck(blackKing)) {\n  //             if (blackCastle1) {\n  //                 possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove), 1)\n  //             }\n\n  //             if (blackCastle2) {\n  //                 possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove2), 1)\n  //             }\n  //         }\n\n  //         //prevents white to castle if in check\n  //         if (isWhiteInCheck(whiteKing)) {\n  //             if (whiteCastle1) {\n  //                 possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove), 1)\n  //             }\n\n  //             if (whiteCastle2) {\n  //                 possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove2), 1)\n  //             }\n  //         }\n  //     }\n\n  //     return possibleMoves\n  // }\n\n  // //removes empty/undefined values for generated moves\n  // function removeEmptyMoves(possibleMoves) {\n  //     for (let i = 0; i < possibleMoves.length; i++) {\n  //         if (possibleMoves[i].moves.length == 0) {\n  //             possibleMoves.splice(i, 1)\n  //             i--;\n  //             continue;\n  //         }\n\n  //         for (let j = 0; j < possibleMoves[i].moves.length; j++) {\n  //             if (!possibleMoves[i].moves[j]) {\n  //                 possibleMoves[i].moves.splice(j, 1);\n  //                 j--;\n  //             }\n  //         }\n  //     }\n\n  //     return possibleMoves\n  // }\n\n  //gets all possible/legal moves\n  function getPossibleMoves(x, y) {\n    let square = getATargetSquareByLocation(x, y);\n    let possiblePieceMoves = [];\n\n    //if the square has a piece\n    if (square.piece) {\n      let color = getPieceColor(square); //get the piece color\n\n      //don't collect possible moves if it's black to move and you're trying to move a white piece\n      if (isColorWhite(color) && !isWhiteToMove) {\n        return;\n      }\n\n      //don't collect possible moves if it's white to move and you're trying to move a black piece\n      if (isColorBlack(color) && isWhiteToMove) {\n        return;\n      }\n\n      //get all possible moves for each piece\n      possiblePieceMoves.push(getPawnsPossibleMoves(square));\n      possiblePieceMoves.push(getRooksPossibleMoves(square));\n      possiblePieceMoves.push(getBishopPossibleMoves(square));\n      possiblePieceMoves.push(getKnightPossibleMoves(square));\n      possiblePieceMoves.push(getKingPossibleMoves(square));\n      possiblePieceMoves.push(getQueenPossibleMoves(square));\n\n      //filter empty moves\n      possiblePieceMoves = removeEmptyMoves(possiblePieceMoves);\n\n      //filter possible moves\n      possiblePieceMoves = filterMovesIfInCheck(possiblePieceMoves);\n      possiblePieceMoves = filterMovesThatAllowIllegalCastling(possiblePieceMoves);\n    }\n    console.log(\"Possible Moves:\", possiblePieceMoves);\n    updatePossibleMoves(possiblePieceMoves);\n  }\n\n  //renders the board\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessGrid\",\n      children: boardSquare.map(sqr => sqr)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1350,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Board, \"mfSLGyMVFcVsDEiVdiVAUtfHtX4=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useState","useEffect","React","Square","ConvertFENPieceToPiece","ConvertFenToString","UpdatePosition","ParseFEN","jsxDEV","_jsxDEV","Fragment","_Fragment","DIM","BLACK_KING","WHITE_KING","PIECE_DELIMITER","WHITE","BLACK","PAWN","ROOK","KNIGHT","BISHOP","KING","QUEEN","Board","_s","fen","setFen","boardPosition","setBoardPosition","boardSquare","setBoardSquare","possibleMoves","setPossibleMoves","selectedSquareX","setSelectedSquareX","selectedSquareY","setSelectedSquareY","fenParser","console","log","fenBoard","fenTurn","fenCastling","fenEnPassant","fenHalfMoves","fenFullMoves","fenRows","split","arr","row","tokens","r","i","length","Number","j","push","boardSquares","squareColorIsWhite","color","getPossibleMoves","x","y","piece","updateSelectedSquareX","updateSelectedSquareY","updatePossibleMoves","movePiece","fileName","_jsxFileName","lineNumber","columnNumber","squares","targetSquare","getATargetSquareByLocation","square","find","s","getPieceColor","getPiece","isColorWhite","setCanWhiteLongCastle","setCanWhiteShortCastle","setCanBlackLongCastle","setCanBlackShortCastle","p","position","enPassantX","enPassantY","enPassantPossible","enPassantTargetSquare","enPassantSquare","setIsWhiteToMove","isWhiteToMove","Math","abs","enPassant1","enPassant2","setEnPassantPossible","setEnPassantX","setEnPassantY","moves","possiblePieceMoves","isColorBlack","getPawnsPossibleMoves","getRooksPossibleMoves","getBishopPossibleMoves","getKnightPossibleMoves","getKingPossibleMoves","getQueenPossibleMoves","removeEmptyMoves","filterMovesIfInCheck","filterMovesThatAllowIllegalCastling","children","className","map","sqr","_c","$RefreshReg$"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/Chess-React.js-/src/Board.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport React from 'react';\r\nimport Square from \"./Square.js\"\r\nimport { ConvertFENPieceToPiece, ConvertFenToString, UpdatePosition, ParseFEN } from \"./HelperMethods.js\";\r\n\r\n\r\n/*\r\nTODO:\r\nCode Reusability: refactor some of the repeated code and generate new functions if needed\r\nConsistency and Naming: Have better and more consistent names for variables and functions\r\nDocumentation: add more comments to understand what is going on\r\nTesting: add unit tests\r\nImplementations: add promotions, implement endgames (mate, stalemate, draws repeation, 50 moves rule)\r\nBugs: Fix bugs (if any)\r\n*/\r\n\r\nconst DIM = 8; //8x8 Board\r\nconst BLACK_KING = 'black-king';\r\nconst WHITE_KING = 'white-king';\r\nconst PIECE_DELIMITER = '-';\r\nconst WHITE = 'white';\r\nconst BLACK = 'black';\r\nconst PAWN = 'pawn';\r\nconst ROOK = 'rook';\r\nconst KNIGHT = 'knight';\r\nconst BISHOP = 'bishop';\r\nconst KING = 'king';\r\nconst QUEEN = 'queen';\r\n\r\nfunction Board() {\r\n    //<summary>\r\n    //FEN - Forsyth-Edwards Notation\r\n    //small letters - black pieces\r\n    //capital letters - white pieces\r\n    //numbers - empty board squares\r\n    //(/) - separates each board row\r\n    //first letter after the board indicates whose turn it is to move (w - white, b - black)\r\n    //next letters indicate castling rights, k - kingside, q - queenside, (-) - no castling allowed for any side\r\n    //en passant square - when a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square\r\n    //the number of half turns (white moves, then black moves = 2 half moves) that were made without a pawn move or a capture of a piece (50-move rule when reaches 100)\r\n    //the number of full moves (white moves, then black moves = 1 full move); increase after every black half move\r\n    //</summary>\r\n    //starting position\r\n    //'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\r\n    const [fen, setFen] = useState('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0')\r\n    const [boardPosition, setBoardPosition] = useState([[]])\r\n    // const [nextTurn, setNextTurn] = useState('')\r\n    // const [WCastleK, setWCastleK] = useState(true)\r\n    // const [WCastleQ, setWCastleQ] = useState(true)\r\n    // const [BCastleK, setBCastleK] = useState(true)\r\n    // const [BCastleQ, setBCastleQ] = useState(true)\r\n    // const [enPassant, setEnPassant] = useState('')\r\n    // const [halfMoves, setHalfMoves] = useState(0)\r\n    // const [fullMoves, setFullMoves] = useState(0)\r\n    const [boardSquare, setBoardSquare] = useState([])\r\n    const [possibleMoves, setPossibleMoves] = useState([])\r\n    const [selectedSquareX, setSelectedSquareX] = useState('')\r\n    const [selectedSquareY, setSelectedSquareY] = useState('')\r\n    // const [canWhiteShortCastle, setCanWhiteShortCastle] = useState(true)\r\n    // const [canWhiteLongCastle, setCanWhiteLongCastle] = useState(true)\r\n    // const [canBlackShortCastle, setCanBlackShortCastle] = useState(true)\r\n    // const [canBlackLongCastle, setCanBlackLongCastle] = useState(true)\r\n    // const [enPassantPossible, setEnPassantPossible] = useState(false)\r\n    // const [enPassantX, setEnPassantX] = useState('')\r\n    // const [enPassantY, setEnPassantY] = useState('')\r\n    // const [isWhiteToMove, setIsWhiteToMove] = useState(true)\r\n\r\n    //called when the page loads.we need to parse the FEN to fill in the board\r\n    useEffect(() => {\r\n        fenParser()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        console.log('Board position updated:', boardPosition);\r\n        console.log('Board square updated:', boardSquare);\r\n    }, [boardPosition, boardSquare])\r\n\r\n    //parses the FEN for the initial board state\r\n    function fenParser() {\r\n        //parses the FEN string to variables\r\n        const { fenBoard, fenTurn, fenCastling, fenEnPassant, fenHalfMoves, fenFullMoves } = ParseFEN(fen)\r\n\r\n        const fenRows = fenBoard.split('/')\r\n\r\n        let arr = [];\r\n\r\n        //splits all rows and creates a matrix for the board\r\n        for (let row of fenRows) {\r\n            const tokens = row.split('')\r\n\r\n            let r = []\r\n\r\n            for (let i = 0; i < tokens.length; i++) {\r\n                if (Number(tokens[i])) {\r\n                    for (let j = 0; j < Number(tokens[i]); j++) {\r\n                        r.push(' ')\r\n                    }\r\n                } else {\r\n                    r.push(tokens[i])\r\n                }\r\n            }\r\n\r\n            arr.push(r)\r\n        }\r\n\r\n        //generates a Square component for each element in the matrix created above\r\n        let boardSquares = [];\r\n        let squareColorIsWhite = true;\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            for (let j = 0; j < arr[i].length; j++) {\r\n                let color = squareColorIsWhite ? \"\" : \"dark\";\r\n                boardSquares.push(\r\n                    <Square\r\n                        getPossibleMoves={getPossibleMoves}\r\n                        key={`${i}-${j}`}\r\n                        x={i}\r\n                        y={j}\r\n                        piece={ConvertFENPieceToPiece(arr[i][j])}\r\n                        color={color}\r\n                        selectedSquareX={selectedSquareX}\r\n                        setSelectedSquareX={updateSelectedSquareX}\r\n                        selectedSquareY={selectedSquareY}\r\n                        setSelectedSquareY={updateSelectedSquareY}\r\n                        possibleMoves={possibleMoves}\r\n                        updatePossibleMoves={updatePossibleMoves}\r\n                        movePiece={movePiece}\r\n                    />\r\n                )\r\n                squareColorIsWhite = !squareColorIsWhite;\r\n            }\r\n            squareColorIsWhite = !squareColorIsWhite;\r\n        }\r\n\r\n        // if (fenCastling.includes('K')) {\r\n        //     setCanWhiteShortCastle(true);\r\n        // }\r\n        // if (fenCastling.includes('Q')) {\r\n        //     setCanWhiteLongCastle(true);\r\n        // }\r\n        // if (fenCastling.includes('k')) {\r\n        //     setCanBlackShortCastle(true);\r\n        // }\r\n        // if (fenCastling.includes('q')) {\r\n        //     setCanBlackLongCastle(true);\r\n        // }\r\n\r\n        //updates the state\r\n        setBoardPosition(arr)\r\n        // setNextTurn(fenTurn)\r\n        // setEnPassant(fenEnPassant)\r\n        // setHalfMoves(fenHalfMoves)\r\n        // setFullMoves(fenFullMoves)\r\n        setBoardSquare(boardSquares)\r\n    }\r\n\r\n    // function isWhiteInCheck(square, pseudo) {\r\n    //     let squares = boardSquare\r\n\r\n    //     if (pseudo) {\r\n    //         const updatedSquares = squares.map(s => {\r\n    //             if (s.x === pseudo.x && s.y === pseudo.y) {\r\n    //                 // Return a new Square component with the updated piece\r\n    //                 return React.cloneElement(s, { piece: pseudo.piece });\r\n    //             } else {\r\n    //                 // For other squares, return the original Square component\r\n    //                 return s;\r\n    //             }\r\n    //         });\r\n\r\n    //         squares = updatedSquares;\r\n    //     }\r\n\r\n    //     //check for attackers in front of the white king\r\n    //     for (let i = square.x - 1; i >= 0; i--) {\r\n    //         let piece = squares.find(s => s.x == i && s.y == square.y)\r\n    //         if (piece.piece.split(\"-\")[0] != \"white\") {\r\n    //             if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\r\n    //                 //console.log(\"in check from behind\")\r\n    //                 return true\r\n    //             } else {\r\n    //                 if (piece.piece) {\r\n    //                     break\r\n    //                 }\r\n    //             }\r\n    //         } else {\r\n    //             break\r\n    //         }\r\n    //     }\r\n\r\n    //     //check for attackers behind the white king\r\n    //     for (let i = square.x + 1; i < DIM; i++) {\r\n    //         let piece = squares.find(s => s.x == i && s.y == square.y)\r\n    //         if (piece.piece.split(\"-\")[0] != \"white\") {\r\n    //             if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\r\n    //                 //console.log(\"in check from the front\")\r\n    //                 return true\r\n    //             } else {\r\n    //                 if (piece.piece) {\r\n    //                     break\r\n    //                 }\r\n    //             }\r\n    //         } else {\r\n    //             break\r\n    //         }\r\n    //     }\r\n\r\n    //     //check for attackers to the left of the white king\r\n    //     for (let i = square.y - 1; i >= 0; i--) {\r\n    //         let piece = squares.find(s => s.x == square.x && s.y == i)\r\n    //         if (piece.piece.split(\"-\")[0] != \"white\") {\r\n    //             if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\r\n    //                 //console.log(\"in check from the left\")\r\n    //                 return true\r\n    //             } else {\r\n    //                 if (piece.piece) {\r\n    //                     break\r\n    //                 }\r\n    //             }\r\n    //         } else {\r\n    //             break\r\n    //         }\r\n    //     }\r\n\r\n    //     //check for attackers to the right of the white king\r\n    //     for (let i = square.y + 1; i < DIM; i++) {\r\n    //         let piece = squares.find(s => s.x == square.x && s.y == i)\r\n    //         if (piece.piece.split(\"-\")[0] != \"white\") {\r\n    //             if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\r\n    //                 //console.log(\"in check from the right\")\r\n    //                 return true\r\n    //             } else {\r\n    //                 if (piece.piece) {\r\n    //                     break\r\n    //                 }\r\n    //             }\r\n    //         } else {\r\n    //             break\r\n    //         }\r\n    //     }\r\n\r\n    //     //check for attackers on a half of one of the diagonals (tlted counterclockwise)\r\n    //     for (let i = 1; i < DIM; i++) {\r\n    //         let piece = squares.find(s => s.x == square.x - i && s.y == square.y - i)\r\n\r\n    //         if (piece) {\r\n    //             if (piece.piece.split(\"-\")[0] != \"white\") {\r\n    //                 if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\" || piece.piece.split(\"-\")[1] == \"pawn\") {\r\n    //                     if (piece.piece.split(\"-\")[1] == \"pawn\") {\r\n    //                         if (piece.x - square.x == -1 && piece.y - square.y == -1) {\r\n    //                             //console.log(\"in check from top half of counterclockwise diagonal by a pawn\")\r\n    //                             return true\r\n    //                         } else {\r\n    //                             break\r\n    //                         }\r\n    //                     } else {\r\n    //                         //console.log(\"in check from top half of counterclockwise diagonal\")\r\n    //                         return true\r\n    //                     }\r\n    //                 } else {\r\n    //                     if (piece.piece) {\r\n    //                         break\r\n    //                     }\r\n    //                 }\r\n    //             } else {\r\n    //                 break\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    //     //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\r\n    //     for (let i = 1; i < DIM; i++) {\r\n    //         let piece = squares.find(s => s.x == square.x + i && s.y == square.y + i)\r\n\r\n    //         if (piece) {\r\n    //             if (piece.piece.split(\"-\")[0] != \"white\") {\r\n    //                 if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\") {\r\n    //                     return true\r\n    //                 } else {\r\n    //                     if (piece.piece) {\r\n    //                         break\r\n    //                     }\r\n    //                 }\r\n    //             } else {\r\n    //                 break\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    //     //check for attackers on a half of one of the diagonals (tlted clockwise)\r\n    //     for (let i = 1; i < DIM; i++) {\r\n    //         let piece = squares.find(s => s.x == square.x - i && s.y == square.y + i)\r\n\r\n    //         if (piece) {\r\n    //             if (piece.piece.split(\"-\")[0] != \"white\") {\r\n    //                 if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\" || piece.piece.split(\"-\")[1] == \"pawn\") {\r\n    //                     if (piece.piece.split(\"-\")[1] == \"pawn\") {\r\n    //                         if (piece.x - square.x == -1 && piece.y - square.y == 1) {\r\n    //                             //console.log(\"in check from top half of clockwise diagonal by a pawn\")\r\n    //                             return true\r\n    //                         } else {\r\n    //                             break\r\n    //                         }\r\n    //                     } else {\r\n    //                         //console.log(\"in check from top half of clockwise diagonal\")\r\n    //                         return true\r\n    //                     }\r\n    //                 } else {\r\n    //                     if (piece.piece) {\r\n    //                         break\r\n    //                     }\r\n    //                 }\r\n    //             } else {\r\n    //                 break\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    //     //check for attackers on the other half of one of the diagonals (tlted clockwise)\r\n    //     for (let i = 1; i < DIM; i++) {\r\n    //         let piece = squares.find(s => s.x == square.x + i && s.y == square.y - i)\r\n\r\n    //         if (piece) {\r\n    //             if (piece.piece.split(\"-\")[0] != \"white\") {\r\n    //                 if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\") {\r\n    //                     return true;\r\n    //                 } else {\r\n    //                     if (piece.piece) {\r\n    //                         break\r\n    //                     }\r\n    //                 }\r\n    //             } else {\r\n    //                 break\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    //     //check for knights check\r\n    //     let knight1 = squares.find(s => s.x == square.x - 2 && s.y == square.y - 1)\r\n    //     let knight2 = squares.find(s => s.x == square.x - 2 && s.y == square.y + 1)\r\n    //     let knight3 = squares.find(s => s.x == square.x + 2 && s.y == square.y - 1)\r\n    //     let knight4 = squares.find(s => s.x == square.x + 2 && s.y == square.y + 1)\r\n    //     let knight5 = squares.find(s => s.x == square.x - 1 && s.y == square.y + 2)\r\n    //     let knight6 = squares.find(s => s.x == square.x - 1 && s.y == square.y - 2)\r\n    //     let knight7 = squares.find(s => s.x == square.x + 1 && s.y == square.y + 2)\r\n    //     let knight8 = squares.find(s => s.x == square.x + 1 && s.y == square.y - 2)\r\n\r\n    //     if (knight1) {\r\n    //         if (knight1.piece.split(\"-\")[1] == \"knight\") {\r\n    //             if (knight1.piece.split(\"-\")[0] != \"white\") {\r\n    //                 //console.log(\"in check by knight 1\")\r\n    //                 return true\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    //     if (knight2) {\r\n    //         if (knight2.piece.split(\"-\")[1] == \"knight\") {\r\n    //             if (knight2.piece.split(\"-\")[0] != \"white\") {\r\n    //                 //console.log(\"in check by knight 2\")\r\n    //                 return true\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    //     if (knight3) {\r\n    //         if (knight3.piece.split(\"-\")[1] == \"knight\") {\r\n    //             if (knight3.piece.split(\"-\")[0] != \"white\") {\r\n    //                 //console.log(\"in check by knight 3\")\r\n    //                 return true\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    //     if (knight4) {\r\n    //         if (knight4.piece.split(\"-\")[1] == \"knight\") {\r\n    //             if (knight4.piece.split(\"-\")[0] != \"white\") {\r\n    //                 //console.log(\"in check by knight 4\")\r\n    //                 return true\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    //     if (knight5) {\r\n    //         if (knight5.piece.split(\"-\")[1] == \"knight\") {\r\n    //             if (knight5.piece.split(\"-\")[0] != \"white\") {\r\n    //                 //console.log(\"in check by knight 5\")\r\n    //                 return true\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    //     if (knight6) {\r\n    //         if (knight6.piece.split(\"-\")[1] == \"knight\") {\r\n    //             if (knight6.piece.split(\"-\")[0] != \"white\") {\r\n    //                 //console.log(\"in check by knight 6\")\r\n    //                 return true\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    //     if (knight7) {\r\n    //         if (knight7.piece.split(\"-\")[1] == \"knight\") {\r\n    //             if (knight7.piece.split(\"-\")[0] != \"white\") {\r\n    //                 //console.log(\"in check by knight 7\")\r\n    //                 return true\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    //     if (knight8) {\r\n    //         if (knight8.piece.split(\"-\")[1] == \"knight\") {\r\n    //             if (knight8.piece.split(\"-\")[0] != \"white\") {\r\n    //                 //console.log(\"in check by knight 8\")\r\n    //                 return true\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    //     return false;\r\n    // }\r\n\r\n    // function isBlackInCheck(square, pseudo) {\r\n    //     let squares = boardSquare\r\n\r\n    //     if (pseudo) {\r\n    //         const updatedSquares = squares.map(s => {\r\n    //             if (s.x === pseudo.x && s.y === pseudo.y) {\r\n    //                 // Return a new Square component with the updated piece\r\n    //                 return React.cloneElement(s, { piece: pseudo.piece });\r\n    //             } else {\r\n    //                 // For other squares, return the original Square component\r\n    //                 return s;\r\n    //             }\r\n    //         });\r\n\r\n    //         squares = updatedSquares;\r\n    //     }\r\n\r\n    //     //check for attackers behind the black king\r\n    //     for (let i = square.x - 1; i >= 0; i--) {\r\n    //         let piece = squares.find(s => s.x == i && s.y == square.y)\r\n    //         if (piece.piece.split(\"-\")[0] != \"black\") {\r\n    //             if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\r\n    //                 //console.log(\"in check from behind\")\r\n    //                 return true\r\n    //             } else {\r\n    //                 if (piece.piece) {\r\n    //                     break\r\n    //                 }\r\n    //             }\r\n    //         } else {\r\n    //             break\r\n    //         }\r\n    //     }\r\n\r\n    //     //check for attackers in front of the black king\r\n    //     for (let i = square.x + 1; i < DIM; i++) {\r\n    //         let piece = squares.find(s => s.x == i && s.y == square.y)\r\n    //         if (piece.piece.split(\"-\")[0] != \"black\") {\r\n    //             if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\r\n    //                 //console.log(\"in check from the front\")\r\n    //                 return true\r\n    //             } else {\r\n    //                 if (piece.piece) {\r\n    //                     break\r\n    //                 }\r\n    //             }\r\n    //         } else {\r\n    //             break\r\n    //         }\r\n    //     }\r\n\r\n    //     //check for attackers to the left of the black king\r\n    //     for (let i = square.y - 1; i >= 0; i--) {\r\n    //         let piece = squares.find(s => s.x == square.x && s.y == i)\r\n    //         if (piece.piece.split(\"-\")[0] != \"black\") {\r\n    //             if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\r\n    //                 //console.log(\"in check from the left\")\r\n    //                 return true\r\n    //             } else {\r\n    //                 if (piece.piece) {\r\n    //                     break\r\n    //                 }\r\n    //             }\r\n    //         } else {\r\n    //             break\r\n    //         }\r\n    //     }\r\n\r\n    //     //check for attackers to the right of the black king\r\n    //     for (let i = square.y + 1; i < DIM; i++) {\r\n    //         let piece = squares.find(s => s.x == square.x && s.y == i)\r\n    //         if (piece.piece.split(\"-\")[0] != \"black\") {\r\n    //             if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\r\n    //                 //console.log(\"in check from the right\")\r\n    //                 return true\r\n    //             } else {\r\n    //                 if (piece.piece) {\r\n    //                     break\r\n    //                 }\r\n    //             }\r\n    //         } else {\r\n    //             break\r\n    //         }\r\n    //     }\r\n\r\n    //     //check for attackers on a half of one of the diagonals (tlted counterclockwise)\r\n    //     for (let i = 1; i < DIM; i++) {\r\n    //         let piece = squares.find(s => s.x == square.x - i && s.y == square.y - i)\r\n\r\n    //         if (piece) {\r\n    //             if (piece.piece.split(\"-\")[0] != \"black\") {\r\n    //                 if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\") {\r\n    //                     //console.log(\"in check from top half of counterclockwise diagonal\")\r\n    //                     return true\r\n    //                 } else {\r\n    //                     if (piece.piece) {\r\n    //                         break\r\n    //                     }\r\n    //                 }\r\n    //             } else {\r\n    //                 break\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    //     //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\r\n    //     for (let i = 1; i < DIM; i++) {\r\n    //         let piece = squares.find(s => s.x == square.x + i && s.y == square.y + i)\r\n\r\n    //         if (piece) {\r\n    //             if (piece.piece.split(\"-\")[0] != \"black\") {\r\n    //                 if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\" || piece.piece.split(\"-\")[1] == \"pawn\") {\r\n    //                     if (piece.piece.split(\"-\")[1] == \"pawn\") {\r\n    //                         if (piece.x - square.x == 1 && piece.y - square.y == 1) {\r\n    //                             //console.log(\"in check from bottom half of counterclockwise diagonal by a pawn\")\r\n    //                             return true\r\n    //                         } else {\r\n    //                             break\r\n    //                         }\r\n    //                     } else {\r\n    //                         //console.log(\"in check from bottom half of counterclockwise diagonal\")\r\n    //                         return true\r\n    //                     }\r\n    //                 } else {\r\n    //                     if (piece.piece) {\r\n    //                         break\r\n    //                     }\r\n    //                 }\r\n    //             } else {\r\n    //                 break\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    //     //check for attackers on a half of one of the diagonals (tlted clockwise)\r\n    //     for (let i = 1; i < DIM; i++) {\r\n    //         let piece = squares.find(s => s.x == square.x - i && s.y == square.y + i)\r\n\r\n    //         if (piece) {\r\n    //             if (piece.piece.split(\"-\")[0] != \"black\") {\r\n    //                 if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\") {\r\n    //                     //console.log(\"in check from top half of clockwise diagonal\")\r\n    //                     return true\r\n    //                 } else {\r\n    //                     if (piece.piece) {\r\n    //                         break\r\n    //                     }\r\n    //                 }\r\n    //             } else {\r\n    //                 break\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    //     //check for attackers on the other half of one of the diagonals (tlted clockwise)\r\n    //     for (let i = 1; i < DIM; i++) {\r\n    //         let piece = squares.find(s => s.x == square.x + i && s.y == square.y - i)\r\n\r\n    //         if (piece) {\r\n    //             if (piece.piece.split(\"-\")[0] != \"black\") {\r\n    //                 if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\" || piece.piece.split(\"-\")[1] == \"pawn\") {\r\n    //                     if (piece.piece.split(\"-\")[1] == \"pawn\") {\r\n    //                         if (piece.x - square.x == 1 && piece.y - square.y == -1) {\r\n    //                             //console.log(\"in check from bottom half of clockwise diagonal by a pawn\")\r\n    //                             return true\r\n    //                         } else {\r\n    //                             break\r\n    //                         }\r\n    //                     } else {\r\n    //                         //console.log(\"in check from bottom half of clockwise diagonal\")\r\n    //                         return true\r\n    //                     }\r\n    //                 } else {\r\n    //                     if (piece.piece) {\r\n    //                         break\r\n    //                     }\r\n    //                 }\r\n    //             } else {\r\n    //                 break\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    //     //check for knights check\r\n    //     let knight1 = squares.find(s => s.x == square.x - 2 && s.y == square.y - 1)\r\n    //     let knight2 = squares.find(s => s.x == square.x - 2 && s.y == square.y + 1)\r\n    //     let knight3 = squares.find(s => s.x == square.x + 2 && s.y == square.y - 1)\r\n    //     let knight4 = squares.find(s => s.x == square.x + 2 && s.y == square.y + 1)\r\n    //     let knight5 = squares.find(s => s.x == square.x - 1 && s.y == square.y + 2)\r\n    //     let knight6 = squares.find(s => s.x == square.x - 1 && s.y == square.y - 2)\r\n    //     let knight7 = squares.find(s => s.x == square.x + 1 && s.y == square.y + 2)\r\n    //     let knight8 = squares.find(s => s.x == square.x + 1 && s.y == square.y - 2)\r\n\r\n    //     if (knight1) {\r\n    //         if (knight1.piece.split(\"-\")[1] == \"knight\") {\r\n    //             if (knight1.piece.split(\"-\")[0] != \"black\") {\r\n    //                 //console.log(\"in check by knight 1\")\r\n    //                 return true\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    //     if (knight2) {\r\n    //         if (knight2.piece.split(\"-\")[1] == \"knight\") {\r\n    //             if (knight2.piece.split(\"-\")[0] != \"black\") {\r\n    //                 //console.log(\"in check by knight 2\")\r\n    //                 return true\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    //     if (knight3) {\r\n    //         if (knight3.piece.split(\"-\")[1] == \"knight\") {\r\n    //             if (knight3.piece.split(\"-\")[0] != \"black\") {\r\n    //                 //console.log(\"in check by knight 3\")\r\n    //                 return true\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    //     if (knight4) {\r\n    //         if (knight4.piece.split(\"-\")[1] == \"knight\") {\r\n    //             if (knight4.piece.split(\"-\")[0] != \"black\") {\r\n    //                 //console.log(\"in check by knight 4\")\r\n    //                 return true\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    //     if (knight5) {\r\n    //         if (knight5.piece.split(\"-\")[1] == \"knight\") {\r\n    //             if (knight5.piece.split(\"-\")[0] != \"black\") {\r\n    //                 //console.log(\"in check by knight 5\")\r\n    //                 return true\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    //     if (knight6) {\r\n    //         if (knight6.piece.split(\"-\")[1] == \"knight\") {\r\n    //             if (knight6.piece.split(\"-\")[0] != \"black\") {\r\n    //                 //console.log(\"in check by knight 6\")\r\n    //                 return true\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    //     if (knight7) {\r\n    //         if (knight7.piece.split(\"-\")[1] == \"knight\") {\r\n    //             if (knight7.piece.split(\"-\")[0] != \"black\") {\r\n    //                 //console.log(\"in check by knight 7\")\r\n    //                 return true\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    //     if (knight8) {\r\n    //         if (knight8.piece.split(\"-\")[1] == \"knight\") {\r\n    //             if (knight8.piece.split(\"-\")[0] != \"black\") {\r\n    //                 //console.log(\"in check by knight 8\")\r\n    //                 return true\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    //     return false;\r\n    // }\r\n\r\n    function movePiece(x, y) {\r\n        let squares = boardSquare;\r\n\r\n        let targetSquare = getATargetSquareByLocation(x, y)\r\n        let square = squares.find(s => s.x == selectedSquareX && s.y == selectedSquareY)\r\n\r\n        let color = getPieceColor(square)\r\n        let piece = getPiece(square)\r\n\r\n        //disable castling if the king moves\r\n        if (piece == \"king\") {\r\n            if (isColorWhite(color)) {\r\n                setCanWhiteLongCastle(false)\r\n                setCanWhiteShortCastle(false)\r\n            } else {\r\n                setCanBlackLongCastle(false)\r\n                setCanBlackShortCastle(false)\r\n            }\r\n        }\r\n\r\n        //disable castling if the rook moves\r\n        if (piece == \"rook\") {\r\n            if (square.x == 7 && square.y == 7) {\r\n                setCanWhiteShortCastle(false)\r\n            }\r\n\r\n            if (square.x == 0 && square.y == 7) {\r\n                setCanBlackShortCastle(false)\r\n            }\r\n\r\n            if (square.x == 7 && square.y == 0) {\r\n                setCanWhiteLongCastle(false)\r\n            }\r\n\r\n            if (square.x == 0 && square.y == 0) {\r\n                setCanBlackLongCastle(false)\r\n            }\r\n        }\r\n\r\n        let p = UpdatePosition(square, targetSquare, position)\r\n\r\n        //capturing enPassant\r\n        if (enPassantX && enPassantY && enPassantPossible) {\r\n            let enPassantTargetSquare = color == \"white\" ? squares.find(s => s.x == x + 1 && s.y == y) : squares.find(s => s.x == x - 1 && s.y == y)\r\n            let enPassantSquare = <Square x={square.x} y={square.y} piece={\"\"} />\r\n\r\n            p = UpdatePosition(enPassantSquare, enPassantTargetSquare, p)\r\n        }\r\n\r\n        //TODO: ensure p matches the new board Position format\r\n        //setBoardPosition(p)\r\n        setPossibleMoves([])\r\n        setIsWhiteToMove(!isWhiteToMove)\r\n\r\n        //enabling en passant\r\n        if (piece == \"pawn\") {\r\n            if (Math.abs(square.x - targetSquare.x) == 2) {\r\n                let enPassant1 = squares.find(s => s.x == targetSquare.x && s.y == targetSquare.y - 1)\r\n                let enPassant2 = squares.find(s => s.x == targetSquare.x && s.y == targetSquare.y + 1)\r\n\r\n                if (enPassant1) {\r\n                    if (enPassant1.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (enPassant1.piece.split(\"-\")[0] != color) {\r\n                            setEnPassantPossible(true)\r\n                            setEnPassantX(targetSquare.x)\r\n                            setEnPassantY(targetSquare.y)\r\n                            return\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (enPassant2) {\r\n                    if (enPassant2.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (enPassant2.piece.split(\"-\")[0] != color) {\r\n                            setEnPassantPossible(true)\r\n                            setEnPassantX(targetSquare.x)\r\n                            setEnPassantY(targetSquare.y)\r\n                            return\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        setEnPassantPossible(false)\r\n        setEnPassantX('')\r\n        setEnPassantY('')\r\n    }\r\n\r\n    // //updates the state with the possible moves\r\n    function updatePossibleMoves(moves) {\r\n        setPossibleMoves(moves)\r\n    };\r\n\r\n    // //updates the state with the selectedSquare X coordinates\r\n    function updateSelectedSquareX(x) {\r\n        setSelectedSquareX(x)\r\n    }\r\n\r\n    // //updates the state with the selectedSquare Y coordinates\r\n    function updateSelectedSquareY(y) {\r\n        setSelectedSquareY(y)\r\n    }\r\n\r\n    // //retrieves a speecific square from the board using x and y coordinates (location)\r\n    function getATargetSquareByLocation(x, y) {\r\n        let squares = boardSquare\r\n\r\n        return squares.find(s => s.x === x && s.y === y);\r\n    }\r\n\r\n    // //retrieves a speecific square from the board that has a certain piece\r\n    // function getATargetSquareByPiece(piece) {\r\n    //     let squares = boardSquare\r\n\r\n    //     return squares.find(s => s.piece == piece);\r\n    // }\r\n\r\n    // //check if a specific square has a piece assigned to it\r\n    // function isSquareAvailable(square) {\r\n    //     return square && !square.piece\r\n    // }\r\n\r\n    // //checks if a pawn is on its starting square and allows a 2-squares move\r\n    // function isPawnOnStartingSquare(pawn) {\r\n    //     return isColorWhite(pawn.piece.split(PIECE_DELIMITER)[0]) ? pawn.x == 6 : pawn.x == 1\r\n    // }\r\n\r\n    // //checks if two pieces have the same color\r\n    // function areSameColor(square1, square2) {\r\n    //     if (!square1 || !square2) {\r\n    //         return\r\n    //     }\r\n\r\n    //     let color1 = square1.piece.split(PIECE_DELIMITER)[0];\r\n    //     let color2 = square2.piece.split(PIECE_DELIMITER)[0];\r\n\r\n    //     return color1 == color2\r\n    // }\r\n\r\n    // //checks if a square contains a certain piece\r\n    // function doesTheSquareHasThePiece(square, piece) {\r\n    //     let p = getPiece(square)\r\n\r\n    //     return p == piece\r\n    // }\r\n\r\n    // //cheks if a pawn is on En Passant square\r\n    // function isPawnOnEnPassantSquare(pawn) {\r\n    //     return isColorWhite(pawn.piece.split(PIECE_DELIMITER)[0]) ? pawn.x == 3 : pawn.x == 4\r\n    // }\r\n\r\n    // //checks if a color is white\r\n    // function isColorWhite(color) {\r\n    //     return color == WHITE\r\n    // }\r\n\r\n    // //checks if a color is black\r\n    // function isColorBlack(color) {\r\n    //     return color == BLACK\r\n    // }\r\n\r\n    // //checks if white is allowed to long castle\r\n    // function checkIfCanWhiteLongCastle() {\r\n    //     return canWhiteLongCastle &&\r\n    //         boardPosition[7][0] == 'R' &&\r\n    //         boardPosition[7][1] == '' &&\r\n    //         boardPosition[7][2] == '' &&\r\n    //         boardPosition[7][3] == '';\r\n    // }\r\n\r\n    // //checks if white is allowed to short castle\r\n    // function checkIfCanWhiteShortCastle() {\r\n    //     return canWhiteShortCastle &&\r\n    //         boardPosition[7][7] == 'R' &&\r\n    //         boardPosition[7][6] == '' &&\r\n    //         boardPosition[7][5] == '';\r\n    // }\r\n\r\n    // //checks if black is allowed to long castle\r\n    // function checkIfCanBlackLongCastle() {\r\n    //     return canBlackLongCastle &&\r\n    //         boardPosition[0][0] == 'r' &&\r\n    //         boardPosition[0][1] == '' &&\r\n    //         boardPosition[0][2] == '' &&\r\n    //         boardPosition[0][3] == '';\r\n    // }\r\n\r\n    // //checks if black is allowed to short castle\r\n    // function checkIfCanBlackShortCastle() {\r\n    //     return canBlackShortCastle &&\r\n    //         boardPosition[7][7] == 'r' &&\r\n    //         boardPosition[7][6] == '' &&\r\n    //         boardPosition[7][5] == '';\r\n    // }\r\n\r\n    // //converts board coordinates to X and Y position on the board, e.g., a8 = 0, 0\r\n    // function convertCoordinatesToLocation(coordinates) {\r\n    //     let tokens = coordinates.split('')\r\n\r\n    //     //skip invalid coordinates\r\n    //     if (tokens.length != 2) {\r\n    //         return\r\n    //     }\r\n\r\n    //     let letter = tokens[0].toString().toUpperCase()\r\n    //     let number = tokens[1]\r\n\r\n    //     //65 is the ASCII code for capital A which will give us 0 if we have A as a coordinate; A-F will give us 0-7 for x\r\n    //     //reverse the numbers since we draw the board top down\r\n    //     return { x: letter.charCodeAt(0) - 65, y: DIM - Number(number) }\r\n    // }\r\n\r\n    // //gets all possible moves for a pawn\r\n    // function getPawnsPossibleMoves(square) {\r\n    //     let color = getPieceColor(square) //get the piece color\r\n\r\n    //     let moves = []\r\n\r\n    //     let position1Offset = 1\r\n    //     let position2Offset = 2\r\n\r\n    //     //flips the direction if the color is white\r\n    //     if (isColorWhite(color)) {\r\n    //         position1Offset *= -1\r\n    //         position2Offset *= -1\r\n    //     }\r\n\r\n    //     //get all forwards moves + the double move at the start\r\n    //     let targetPiece1 = getATargetSquareByLocation(square.x + position1Offset, square.y) //move pawn 1 square ahead\r\n    //     let targetPiece2 = getATargetSquareByLocation(square.x + position2Offset, square.y) //move pawn 2 squares ahead\r\n\r\n    //     //get potential neighbors to capture\r\n    //     let neighbor1 = getATargetSquareByLocation(square.x + position1Offset, square.y + position1Offset)\r\n    //     let neighbor2 = getATargetSquareByLocation(square.x + position1Offset, square.y + (position1Offset * -1))\r\n\r\n    //     //get the En Passant coordinates\r\n    //     let enPassantCordinates = convertCoordinatesToLocation(enPassant)\r\n    //     let enPassantSquare = enPassantCordinates ? getATargetSquareByLocation(enPassantCordinates.x, enPassantCordinates.y) : ''\r\n\r\n    //     let isTheSquareInFrontAvailable = isSquareAvailable(targetPiece1)\r\n\r\n    //     //push the one move forward for a pawn\r\n    //     if (isTheSquareInFrontAvailable) {\r\n    //         moves.push(targetPiece1)\r\n    //     }\r\n\r\n    //     //two moves are allowed only if the two squares above are free/empty\r\n    //     //allowed if pawn hasn't moved before\r\n    //     if (isTheSquareInFrontAvailable && isSquareAvailable(targetPiece2) && isPawnOnStartingSquare(square)) {\r\n    //         moves.push(targetPiece2)\r\n    //     }\r\n\r\n    //     //push neighbour if there is a piece to capture and it's a different color than the pawn\r\n    //     if (!isSquareAvailable(neighbor1) && !areSameColor(neighbor1, square)) {\r\n    //         moves.push(neighbor1)\r\n    //     }\r\n\r\n    //     //push neighbour if there is a piece to capture and it's a different color than the pawn\r\n    //     if (!isSquareAvailable(neighbor2) && !areSameColor(neighbor2, square)) {\r\n    //         moves.push(neighbor2)\r\n    //     }\r\n\r\n    //     //add En Passant\r\n    //     if (enPassantSquare) {\r\n    //         moves.push(enPassantSquare)\r\n    //     }\r\n\r\n    //     return { piece: square, moves: moves }\r\n    // }\r\n\r\n    // //gets all possible moves for a rook\r\n    // function getRooksPossibleMoves(square) {\r\n    //     let moves = []\r\n\r\n    //     for (let i = square.x + 1; i < DIM; i++) {\r\n    //         let targetSquare = getATargetSquareByLocation(i, square.y)\r\n\r\n    //         if (isSquareAvailable(targetSquare)) {\r\n    //             moves.push(targetSquare)\r\n    //         } else {\r\n    //             if (!areSameColor(square, targetSquare)) {\r\n    //                 moves.push(targetSquare)\r\n    //             }\r\n    //             break\r\n    //         }\r\n    //     }\r\n\r\n    //     for (let i = square.x - 1; i >= 0; i--) {\r\n    //         let targetSquare = getATargetSquareByLocation(i, square.y)\r\n\r\n    //         if (isSquareAvailable(targetSquare)) {\r\n    //             moves.push(targetSquare)\r\n    //         } else {\r\n    //             if (!areSameColor(square, targetSquare)) {\r\n    //                 moves.push(targetSquare)\r\n    //             }\r\n    //             break;\r\n    //         }\r\n    //     }\r\n\r\n    //     for (let i = square.y + 1; i < DIM; i++) {\r\n    //         let targetSquare = getATargetSquareByLocation(square.x, i)\r\n\r\n    //         if (isSquareAvailable(targetSquare)) {\r\n    //             moves.push(targetSquare)\r\n    //         } else {\r\n    //             if (!areSameColor(square, targetSquare)) {\r\n    //                 moves.push(targetSquare)\r\n    //             }\r\n    //             break\r\n    //         }\r\n    //     }\r\n\r\n    //     for (let i = square.y - 1; i >= 0; i--) {\r\n    //         let targetSquare = getATargetSquareByLocation(square.x, i)\r\n\r\n    //         if (isSquareAvailable(targetSquare)) {\r\n    //             moves.push(targetSquare)\r\n    //         } else {\r\n    //             if (!areSameColor(square, targetSquare)) {\r\n    //                 moves.push(targetSquare)\r\n    //             }\r\n    //             break\r\n    //         }\r\n    //     }\r\n\r\n    //     return { piece: square, moves: moves }\r\n    // }\r\n\r\n    // //gets all possible moves for a bishop\r\n    // function getBishopPossibleMoves(square) {\r\n    //     let moves = []\r\n\r\n    //     let counter = 0;\r\n\r\n    //     for (let i = 1; i <= DIM; i++) {\r\n    //         if (counter == 5) {\r\n    //             break;\r\n    //         }\r\n\r\n    //         let target1 = getATargetSquareByLocation(square.x - i, square.y - i)\r\n    //         let target2 = getATargetSquareByLocation(square.x - i, square.y + i)\r\n    //         let target3 = getATargetSquareByLocation(square.x + i, square.y + i)\r\n    //         let target4 = getATargetSquareByLocation(square.x + i, square.y - i)\r\n\r\n    //         if (target1 && isSquareAvailable(target1) && counter < 1) {\r\n    //             moves.push(target1)\r\n    //         } else {\r\n    //             if (!areSameColor(square, target1)) {\r\n    //                 moves.push(target1)\r\n    //             }\r\n    //             counter++;\r\n    //         }\r\n\r\n    //         if (target2 && isSquareAvailable(target2) && counter < 2) {\r\n    //             moves.push(target2)\r\n    //         } else {\r\n    //             if (!areSameColor(square, target2)) {\r\n    //                 moves.push(target2)\r\n    //             }\r\n    //             counter++;\r\n    //         }\r\n\r\n    //         if (target3 && isSquareAvailable(target3) && counter < 3) {\r\n    //             moves.push(target3)\r\n    //         } else {\r\n    //             if (!areSameColor(square, target3)) {\r\n    //                 moves.push(target3)\r\n    //             }\r\n    //             counter++;\r\n    //         }\r\n\r\n    //         if (target4 && isSquareAvailable(target4) && counter < 4) {\r\n    //             moves.push(target4)\r\n    //         } else {\r\n    //             if (!areSameColor(square, target4)) {\r\n    //                 moves.push(target4)\r\n    //             }\r\n    //             counter++;\r\n    //         }\r\n    //     }\r\n\r\n    //     return { piece: square, moves: moves }\r\n    // }\r\n\r\n    // //gets all possible moves for a knight\r\n    // function getKnightPossibleMoves(square) {\r\n    //     let offset = 1;\r\n    //     let doubleOffset = 2 * offset;\r\n\r\n    //     let moves = []\r\n\r\n    //     for (let i = 0; i < 8; i++) {\r\n    //         if (i != 0 && i % 2 == 0) {\r\n    //             offset *= -1;\r\n    //         }\r\n\r\n    //         let targetX = square.x + offset;\r\n    //         let targetY = square.y + doubleOffset;\r\n\r\n    //         let target = getATargetSquareByLocation(targetX, targetY)\r\n\r\n    //         if (target && isSquareAvailable(target)) {\r\n    //             moves.push(target)\r\n    //         } else {\r\n    //             if (!areSameColor(square, target)) {\r\n    //                 moves.push(target)\r\n    //             }\r\n    //         }\r\n\r\n    //         doubleOffset *= -1\r\n\r\n    //         if (i == 4) {\r\n    //             offset *= 2\r\n    //             doubleOffset /= 2\r\n    //         }\r\n    //     }\r\n\r\n    //     return { piece: square, moves: moves }\r\n    // }\r\n\r\n    // //gets all possible moves for a king\r\n    // function getKingPossibleMoves(square) {\r\n    //     let moves = []\r\n\r\n    //     let color = getPieceColor(square)\r\n\r\n    //     //gets all possible 1-square moves for the king\r\n    //     for (let i = -1; i < 2; i++) {\r\n    //         for (let j = -1; j < 2; j++) {\r\n    //             let targetPiece = getATargetSquareByLocation(square.x + i, square.y + j)\r\n\r\n    //             if (targetPiece && isSquareAvailable(targetPiece)) {\r\n    //                 moves.push(targetPiece)\r\n    //             } else {\r\n    //                 if (!areSameColor(square, targetPiece)) {\r\n    //                     moves.push(targetPiece)\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    //     //Castling logic\r\n    //     const longCastleSquare = getATargetSquareByLocation(square.x, square.y - 2)\r\n    //     const shortCastleSquare = getATargetSquareByLocation(square.x, square.y + 2)\r\n\r\n    //     if (isColorWhite(color) && checkIfCanWhiteLongCastle()) {\r\n    //         moves.push(longCastleSquare)\r\n    //     }\r\n\r\n    //     if (isColorWhite(color) && checkIfCanWhiteShortCastle()) {\r\n    //         moves.push(shortCastleSquare)\r\n    //     }\r\n\r\n    //     if (isColorBlack(color) && checkIfCanBlackLongCastle()) {\r\n    //         moves.push(longCastleSquare)\r\n    //     }\r\n\r\n    //     if (isColorBlack(color) && checkIfCanBlackShortCastle()) {\r\n    //         moves.push(shortCastleSquare)\r\n    //     }\r\n\r\n    //     return { piece: square, moves: moves }\r\n    // }\r\n\r\n    // //gets all possible moves for a queen\r\n    // function getQueenPossibleMoves(square) {\r\n    //     let moves = []\r\n\r\n    //     //a queen has the same moves as a bishop and a rook\r\n    //     const rookMoves = getRooksPossibleMoves(square).moves;\r\n    //     const bishopMoves = getBishopPossibleMoves(square).moves;\r\n\r\n    //     // Concatenate the arrays of moves\r\n    //     moves.push(...rookMoves, ...bishopMoves);\r\n\r\n    //     return { piece: square, moves: moves }\r\n    // }\r\n\r\n    // //gets the piece color\r\n    // function getPieceColor(square) {\r\n    //     return square.piece.split(PIECE_DELIMITER)[0]\r\n    // }\r\n\r\n    // //gets the piece\r\n    // function getPiece(square) {\r\n    //     return square.piece.split(PIECE_DELIMITER)[1]\r\n    // }\r\n\r\n    // //removes moves that do not deal with a check\r\n    // function filterMovesIfInCheck(possibleMoves) {\r\n    //     let blackKing = getATargetSquareByPiece(BLACK_KING) //get the black king\r\n    //     let whiteKing = getATargetSquareByPiece(WHITE_KING) //get the white king\r\n\r\n    //     for (let i = 0; i < possibleMoves.length; i++) {\r\n    //         for (let j = 0; j < possibleMoves[i].moves; j++) {\r\n    //             if (possibleMoves[i].piece.piece == BLACK_KING) {\r\n    //                 let move = <Square x={possibleMoves[i].moves[j].x} y={possibleMoves[i].moves[j].y} piece={\"black-king\"} />\r\n    //                 let pseudo = <Square x={blackKing.x} y={blackKing.y} piece={\"\"} />\r\n    //                 let isInCheck = isBlackInCheck(move, pseudo)\r\n\r\n    //                 if (isInCheck) {\r\n    //                     possibleMoves[i].moves.splice(j, 1);\r\n    //                     j--;\r\n    //                 }\r\n    //             } else if (possibleMoves[i].piece.piece == WHITE_KING) {\r\n    //                 let move = <Square x={possibleMoves[i].moves[j].x} y={possibleMoves[i].moves[j].y} piece={\"white-king\"} />\r\n    //                 let pseudo = <Square x={whiteKing.x} y={whiteKing.y} piece={\"\"} />\r\n    //                 let isInCheck = isWhiteInCheck(move, pseudo)\r\n\r\n    //                 if (isInCheck) {\r\n    //                     possibleMoves[i].moves.splice(j, 1);\r\n    //                     j--;\r\n    //                 }\r\n    //             } else {\r\n    //                 let move = <Square x={possibleMoves[i].moves[j].x} y={possibleMoves[i].moves[j].y} piece={possibleMoves[i].piece.piece} />\r\n    //                 let isInCheck = isBlackInCheck(blackKing, move) ? true : isWhiteInCheck(whiteKing, move)\r\n\r\n    //                 if (isInCheck) {\r\n    //                     possibleMoves[i].moves.splice(j, 1);\r\n    //                     j--;\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    //     return possibleMoves\r\n    // }\r\n\r\n    // //removes moves that allow illigal castling (castles through check for example)\r\n    // function filterMovesThatAllowIllegalCastling(possibleMoves) {\r\n    //     let blackKing = getATargetSquareByPiece(BLACK_KING) //get the black king\r\n    //     let whiteKing = getATargetSquareByPiece(WHITE_KING) //get the white king\r\n\r\n    //     for (let i = 0; i < possibleMoves.length; i++) {\r\n    //         let whiteCastle1 = possibleMoves[i].moves.find(m => m.x == 7 && m.y == 6) //sqaure where king will be after short castle (white)\r\n    //         let whiteCastle2 = possibleMoves[i].moves.find(m => m.x == 7 && m.y == 2) //sqaure where king will be after long castle (white)\r\n    //         let blackCastle1 = possibleMoves[i].moves.find(m => m.x == 0 && m.y == 6) //square where king will be after shot castle (black)\r\n    //         let blackCastle2 = possibleMoves[i].moves.find(m => m.x == 0 && m.y == 2) //square where king will be after long castle (black)\r\n\r\n    //         if (possibleMoves[i].piece == blackKing || possibleMoves[i].piece == whiteKing) {\r\n    //             if (whiteCastle1) {\r\n    //                 let pieceAcross = possibleMoves[i].moves.find(m => m.x == 7 && m.y == 5)\r\n    //                 if (!pieceAcross) {\r\n    //                     possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n    //                 }\r\n    //             }\r\n\r\n    //             if (whiteCastle2) {\r\n    //                 let pieceAcross = possibleMoves[i].moves.find(m => m.x == 7 && m.y == 3)\r\n    //                 if (!pieceAcross) {\r\n    //                     possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n    //                 }\r\n    //             }\r\n\r\n    //             if (blackCastle1) {\r\n    //                 let pieceAcross = possibleMoves[i].moves.find(m => m.x == 0 && m.y == 5)\r\n    //                 if (!pieceAcross) {\r\n    //                     possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n    //                 }\r\n    //             }\r\n\r\n    //             if (blackCastle2) {\r\n    //                 let pieceAcross = possibleMoves[i].moves.find(m => m.x == 0 && m.y == 3)\r\n    //                 if (!pieceAcross) {\r\n    //                     possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n    //                 }\r\n    //             }\r\n    //         }\r\n\r\n    //         //prevents black to castle if in check\r\n    //         if (isBlackInCheck(blackKing)) {\r\n    //             if (blackCastle1) {\r\n    //                 possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove), 1)\r\n    //             }\r\n\r\n    //             if (blackCastle2) {\r\n    //                 possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove2), 1)\r\n    //             }\r\n    //         }\r\n\r\n    //         //prevents white to castle if in check\r\n    //         if (isWhiteInCheck(whiteKing)) {\r\n    //             if (whiteCastle1) {\r\n    //                 possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove), 1)\r\n    //             }\r\n\r\n    //             if (whiteCastle2) {\r\n    //                 possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove2), 1)\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    //     return possibleMoves\r\n    // }\r\n\r\n    // //removes empty/undefined values for generated moves\r\n    // function removeEmptyMoves(possibleMoves) {\r\n    //     for (let i = 0; i < possibleMoves.length; i++) {\r\n    //         if (possibleMoves[i].moves.length == 0) {\r\n    //             possibleMoves.splice(i, 1)\r\n    //             i--;\r\n    //             continue;\r\n    //         }\r\n\r\n    //         for (let j = 0; j < possibleMoves[i].moves.length; j++) {\r\n    //             if (!possibleMoves[i].moves[j]) {\r\n    //                 possibleMoves[i].moves.splice(j, 1);\r\n    //                 j--;\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    //     return possibleMoves\r\n    // }\r\n\r\n    //gets all possible/legal moves\r\n    function getPossibleMoves(x, y) {\r\n        let square = getATargetSquareByLocation(x, y)\r\n        let possiblePieceMoves = [];\r\n\r\n        //if the square has a piece\r\n        if (square.piece) {\r\n            let color = getPieceColor(square); //get the piece color\r\n\r\n            //don't collect possible moves if it's black to move and you're trying to move a white piece\r\n            if (isColorWhite(color) && !isWhiteToMove) {\r\n                return\r\n            }\r\n\r\n            //don't collect possible moves if it's white to move and you're trying to move a black piece\r\n            if (isColorBlack(color) && isWhiteToMove) {\r\n                return\r\n            }\r\n\r\n            //get all possible moves for each piece\r\n            possiblePieceMoves.push(getPawnsPossibleMoves(square))\r\n            possiblePieceMoves.push(getRooksPossibleMoves(square))\r\n            possiblePieceMoves.push(getBishopPossibleMoves(square))\r\n            possiblePieceMoves.push(getKnightPossibleMoves(square))\r\n            possiblePieceMoves.push(getKingPossibleMoves(square))\r\n            possiblePieceMoves.push(getQueenPossibleMoves(square))\r\n\r\n            //filter empty moves\r\n            possiblePieceMoves = removeEmptyMoves(possiblePieceMoves);\r\n\r\n            //filter possible moves\r\n            possiblePieceMoves = filterMovesIfInCheck(possiblePieceMoves)\r\n            possiblePieceMoves = filterMovesThatAllowIllegalCastling(possiblePieceMoves)\r\n        }\r\n\r\n        console.log(\"Possible Moves:\", possiblePieceMoves);\r\n        updatePossibleMoves(possiblePieceMoves);\r\n    }\r\n\r\n    //renders the board\r\n    return (\r\n        <>\r\n            <div className=\"chessGrid\">\r\n                {boardSquare.map((sqr) => sqr)}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Board"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}