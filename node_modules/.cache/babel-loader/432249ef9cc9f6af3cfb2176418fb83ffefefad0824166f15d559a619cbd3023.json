{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vladi Gotsin\\\\Desktop\\\\react\\\\Chess-React.js-\\\\src\\\\Board.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef, createContext } from \"react\";\nimport React from 'react';\nimport Square from \"./Square.js\";\nimport { ConvertFENPieceToPiece, ConvertFenToString, UpdatePosition, ParseFEN } from \"./HelperMethods.js\";\nimport { DIM, PIECE_DELIMITER, KINGS, COLORS, PIECES, CastlingRights, EnPassant, CurrentSquareSelection, PossibleMoves, HalfMoves, FullMoves, IsWhiteToMove, updateIsWhiteToMove, updateHalfMoves, updateFullMoves, BoardPosition } from \"./globalVariables.js\";\n\n/*\r\nTODO:\r\nCode Reusability: refactor some of the repeated code and generate new functions if needed\r\nConsistency and Naming: Have better and more consistent names for variables and functions\r\nDocumentation: add more comments to understand what is going on\r\nTesting: add unit tests\r\nImplementations: add promotions, implement endgames (mate, stalemate, draws repeation, 50 moves rule)\r\nBugs: Fix bugs (if any)\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Board() {\n  _s();\n  //<summary>\n  //FEN - Forsyth-Edwards Notation\n  //small letters - black pieces\n  //capital letters - white pieces\n  //numbers - empty board squares\n  //(/) - separates each board row\n  //first letter after the board indicates whose turn it is to move (w - white, b - black)\n  //next letters indicate castling rights, k - kingside, q - queenside, (-) - no castling allowed for any side\n  //en passant square - when a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square\n  //the number of half turns (white moves, then black moves = 2 half moves) that were made without a pawn move or a capture of a piece (50-move rule when reaches 100)\n  //the number of full moves (white moves, then black moves = 1 full move); increase after every black half move\n  //</summary>\n  //starting position\n  //'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\n  const [fen, setFen] = useState('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0');\n  const [isPossibleMove, setIsPossibleMove] = useState([]);\n  const [boardSquares, setBoardSquares] = useState([]);\n  const isPossibleMoveRef = useRef(isPossibleMove);\n  const updateIsPossibleMove = (key, value) => {\n    setIsPossibleMove(prevState => prevState.map(item => item.key === key ? {\n      ...item,\n      value: value\n    } : item));\n  };\n  useEffect(() => {\n    isPossibleMoveRef.current = isPossibleMove;\n    fenParser();\n  }, [isPossibleMove]);\n\n  //called when the page loads.we need to parse the FEN to fill in the board\n  useEffect(() => {\n    resetPossibleMoves();\n    fenParser();\n  }, []);\n  function resetPossibleMoves() {\n    const initialIsPossibleMove = [];\n    for (let i = 0; i < DIM; i++) {\n      for (let j = 0; j < DIM; j++) {\n        initialIsPossibleMove.push({\n          key: `${i}-${j}`,\n          value: false\n        });\n      }\n    }\n    setIsPossibleMove(initialIsPossibleMove);\n  }\n\n  //parses the FEN for the initial board state\n  function fenParser() {\n    //parses the FEN string to variables\n    const {\n      fenBoard,\n      fenTurn,\n      fenCastling,\n      fenEnPassant,\n      fenHalfMoves,\n      fenFullMoves\n    } = ParseFEN(fen);\n    const fenRows = fenBoard.split('/');\n    let arr = [];\n\n    //splits all rows and creates a matrix for the board\n    for (let row of fenRows) {\n      const tokens = row.split('');\n      let r = [];\n      for (let i = 0; i < tokens.length; i++) {\n        if (Number(tokens[i])) {\n          for (let j = 0; j < Number(tokens[i]); j++) {\n            r.push(' ');\n          }\n        } else {\n          r.push(tokens[i]);\n        }\n      }\n      arr.push(r);\n    }\n\n    //generates a Square component for each element in the matrix created above\n    let squareColorIsWhite = true;\n    let squares = [];\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0; j < arr[i].length; j++) {\n        let color = squareColorIsWhite ? \"\" : \"dark\";\n        const possibleMoveStatus = isPossibleMoveRef.current.find(item => item.key === `${i}-${j}`);\n\n        //boardSquares.push(\n        squares.push( /*#__PURE__*/_jsxDEV(Square, {\n          getPossibleMoves: getPossibleMoves,\n          x: i,\n          y: j,\n          piece: ConvertFENPieceToPiece(arr[i][j]),\n          color: color,\n          movePiece: movePiece,\n          isPossibleMove: possibleMoveStatus ? possibleMoveStatus.value : false,\n          resetPossibleMoves: resetPossibleMoves\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this));\n        squareColorIsWhite = !squareColorIsWhite;\n      }\n      squareColorIsWhite = !squareColorIsWhite;\n    }\n    setBoardSquares(squares);\n\n    // BoardSquares.splice(0, BoardSquares.length);\n    // BoardSquares.push(...squares)\n    // console.log(BoardSquares)\n\n    if (fenCastling.includes('K')) {\n      CastlingRights.whiteShortCastle = true;\n    }\n    if (fenCastling.includes('Q')) {\n      CastlingRights.whiteLongCastle = true;\n    }\n    if (fenCastling.includes('k')) {\n      CastlingRights.blackShortCastle = true;\n    }\n    if (fenCastling.includes('q')) {\n      CastlingRights.blackLongCastle = true;\n    }\n    fenTurn == 'w' ? updateIsWhiteToMove(true) : updateIsWhiteToMove(false);\n    updateHalfMoves(fenHalfMoves);\n    updateFullMoves(fenFullMoves);\n    BoardPosition.splice(0, BoardPosition.length, ...arr);\n    if (!fenEnPassant.includes(PIECE_DELIMITER)) {\n      let location = convertCoordinatesToLocation(fenEnPassant);\n      EnPassant.isPossible = true;\n      EnPassant.x = location.x;\n      EnPassant.y = location.y;\n    }\n  }\n  function isWhiteInCheck(square, pseudo) {\n    let squares = boardSquares;\n    if (pseudo) {\n      const updatedSquares = squares.map(s => {\n        if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\n          // Return a new Square component with the updated piece\n          return /*#__PURE__*/React.cloneElement(s, {\n            piece: pseudo.props.piece\n          });\n        } else {\n          // For other squares, return the original Square component\n          return s;\n        }\n      });\n      squares = updatedSquares;\n    }\n\n    //check for attackers in front of the white king\n    for (let i = square.props.x - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from behind\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers behind the white king\n    for (let i = square.props.x + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the front\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the left of the white king\n    for (let i = square.props.y - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the left\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the right of the white king\n    for (let i = square.props.y + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the right\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == -1) {\n                //console.log(\"in check from top half of counterclockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from top half of counterclockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == 1) {\n                //console.log(\"in check from top half of clockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from top half of clockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for knights check\n    let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1);\n    let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1);\n    let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1);\n    let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1);\n    let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2);\n    let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2);\n    let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2);\n    let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2);\n    if (knight1) {\n      if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight1.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 1\")\n          return true;\n        }\n      }\n    }\n    if (knight2) {\n      if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight2.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 2\")\n          return true;\n        }\n      }\n    }\n    if (knight3) {\n      if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight3.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 3\")\n          return true;\n        }\n      }\n    }\n    if (knight4) {\n      if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight4.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 4\")\n          return true;\n        }\n      }\n    }\n    if (knight5) {\n      if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight5.props.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 5\")\n          return true;\n        }\n      }\n    }\n    if (knight6) {\n      if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight6.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 6\")\n          return true;\n        }\n      }\n    }\n    if (knight7) {\n      if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight7.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 7\")\n          return true;\n        }\n      }\n    }\n    if (knight8) {\n      if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight8.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 8\")\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  function isBlackInCheck(square, pseudo) {\n    let squares = boardSquares;\n    if (pseudo) {\n      const updatedSquares = squares.map(s => {\n        if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\n          // Return a new Square component with the updated piece\n          return /*#__PURE__*/React.cloneElement(s, {\n            piece: pseudo.props.piece\n          });\n        } else {\n          // For other squares, return the original Square component\n          return s;\n        }\n      });\n      squares = updatedSquares;\n    }\n\n    //check for attackers behind the black king\n    for (let i = square.props.x - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from behind\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers in front of the black king\n    for (let i = square.props.x + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the front\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the left of the black king\n    for (let i = square.props.y - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the left\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the right of the black king\n    for (let i = square.props.y + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the right\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            //console.log(\"in check from top half of counterclockwise diagonal\")\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == 1) {\n                //console.log(\"in check from bottom half of counterclockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from bottom half of counterclockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            //console.log(\"in check from top half of clockwise diagonal\")\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == -1) {\n                //console.log(\"in check from bottom half of clockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from bottom half of clockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for knights check\n    let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1);\n    let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1);\n    let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1);\n    let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1);\n    let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2);\n    let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2);\n    let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2);\n    let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2);\n    if (knight1) {\n      if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight1.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 1\")\n          return true;\n        }\n      }\n    }\n    if (knight2) {\n      if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight2.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 2\")\n          return true;\n        }\n      }\n    }\n    if (knight3) {\n      if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight3.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 3\")\n          return true;\n        }\n      }\n    }\n    if (knight4) {\n      if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight4.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 4\")\n          return true;\n        }\n      }\n    }\n    if (knight5) {\n      if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight5.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 5\")\n          return true;\n        }\n      }\n    }\n    if (knight6) {\n      if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight6.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 6\")\n          return true;\n        }\n      }\n    }\n    if (knight7) {\n      if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight7.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 7\")\n          return true;\n        }\n      }\n    }\n    if (knight8) {\n      if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight8.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 8\")\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  function movePiece(x, y) {\n    let squares = boardSquares;\n    let position = BoardPosition;\n    let targetSquare = getATargetSquareByLocation(x, y);\n    let square = squares.find(s => s.props.x == CurrentSquareSelection.x && s.props.y == CurrentSquareSelection.y);\n    let color = getPieceColor(square);\n    let piece = getPiece(square);\n\n    //disable castling if the king moves\n    if (piece == PIECES.KING) {\n      if (isColorWhite(color)) {\n        CastlingRights.whiteLongCastle = false;\n        CastlingRights.whiteShortCastle = false;\n      } else {\n        CastlingRights.blackLongCastle = false;\n        CastlingRights.blackShortCastle = false;\n      }\n    }\n\n    //disable castling if the rook moves\n    if (piece == PIECES.ROOK) {\n      if (square.props.x == 7 && square.props.y == 7) {\n        CastlingRights.whiteShortCastle = false;\n      }\n      if (square.props.x == 0 && square.props.y == 7) {\n        CastlingRights.blackShortCastle = false;\n      }\n      if (square.props.x == 7 && square.props.y == 0) {\n        CastlingRights.whiteLongCastle = false;\n      }\n      if (square.props.x == 0 && square.props.y == 0) {\n        CastlingRights.blackLongCastle = false;\n      }\n    }\n    console.log('Before piece move', JSON.stringify(BoardPosition));\n    let p = UpdatePosition(square, targetSquare, position);\n\n    //capturing enPassant\n    if (EnPassant.isPossible) {\n      let enPassantTargetSquare = color == COLORS.WHITE ? squares.find(s => s.props.x == x + 1 && s.props.y == y) : squares.find(s => s.props.x == x - 1 && s.props.y == y);\n      let enPassantSquare = /*#__PURE__*/_jsxDEV(Square, {\n        x: square.props.x,\n        y: square.props.y,\n        piece: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 743,\n        columnNumber: 35\n      }, this);\n      p = UpdatePosition(enPassantSquare, enPassantTargetSquare, p);\n    }\n\n    //TODO: ensure p matches the new board Position format\n    //setBoardPosition(p)\n    BoardPosition.splice(0, BoardPosition.length, ...p);\n    console.log('After piece move', JSON.stringify(p));\n    console.log('After piece move', JSON.stringify(BoardPosition));\n    PossibleMoves.splice(0, PossibleMoves.length);\n    updateIsWhiteToMove(!IsWhiteToMove);\n\n    //enabling en passant\n    if (piece == PIECES.PAWN) {\n      if (Math.abs(square.props.x - targetSquare.props.x) == 2) {\n        let enPassant1 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y - 1);\n        let enPassant2 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y + 1);\n        if (enPassant1) {\n          if (enPassant1.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\n            if (enPassant1.props.piece.split(PIECE_DELIMITER)[0] != color) {\n              EnPassant.isPossible = true;\n              EnPassant.x = targetSquare.props.x;\n              EnPassant.y = targetSquare.props.y;\n              return;\n            }\n          }\n        }\n        if (enPassant2) {\n          if (enPassant2.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\n            if (enPassant2.props.piece.split(PIECE_DELIMITER)[0] != color) {\n              EnPassant.isPossible = true;\n              EnPassant.x = targetSquare.props.x;\n              EnPassant.y = targetSquare.props.y;\n              return;\n            }\n          }\n        }\n      }\n    }\n    EnPassant.isPossible = false;\n    EnPassant.x = -1;\n    EnPassant.y = -1;\n  }\n\n  //updates the state with the selectedSquare X coordinates\n  function updateSelectedSquareX(x) {\n    setSelectedSquareX(x);\n  }\n\n  //updates the state with the selectedSquare Y coordinates\n  function updateSelectedSquareY(y) {\n    setSelectedSquareY(y);\n  }\n\n  //retrieves a speecific square from the board using x and y coordinates (location)\n  function getATargetSquareByLocation(x, y) {\n    return boardSquares.find(s => s.props.x === x && s.props.y === y);\n  }\n\n  //retrieves a speecific square from the board that has a certain piece\n  function getATargetSquareByPiece(piece) {\n    return boardSquares.find(s => s.props.piece == piece);\n  }\n\n  //check if a specific square has a piece assigned to it\n  function isSquareAvailable(square) {\n    return square && !square.props.piece;\n  }\n\n  //checks if a pawn is on its starting square and allows a 2-squares move\n  function isPawnOnStartingSquare(pawn) {\n    return isColorWhite(pawn.props.piece.split(PIECE_DELIMITER)[0]) ? pawn.props.x == 6 : pawn.props.x == 1;\n  }\n\n  //checks if two pieces have the same color\n  function areSameColor(square1, square2) {\n    if (!square1 || !square2) {\n      return;\n    }\n    let color1 = square1.props.piece.split(PIECE_DELIMITER)[0];\n    let color2 = square2.props.piece.split(PIECE_DELIMITER)[0];\n    return color1 == color2;\n  }\n\n  //checks if a square contains a certain piece\n  function doesTheSquareHasThePiece(square, piece) {\n    let p = getPiece(square);\n    return p == piece;\n  }\n\n  //cheks if a pawn is on En Passant square\n  function isPawnOnEnPassantSquare(pawn) {\n    return isColorWhite(pawn.props.piece.split(PIECE_DELIMITER)[0]) ? pawn.props.x == 3 : pawn.props.x == 4;\n  }\n\n  //checks if a color is white\n  function isColorWhite(color) {\n    return color == COLORS.WHITE;\n  }\n\n  //checks if a color is black\n  function isColorBlack(color) {\n    return color == COLORS.BLACK;\n  }\n\n  //checks if white is allowed to long castle\n  function checkIfCanWhiteLongCastle() {\n    return CastlingRights.whiteLongCastle && BoardPosition[7][0] == 'R' && BoardPosition[7][1] == '' && BoardPosition[7][2] == '' && BoardPosition[7][3] == '';\n  }\n\n  //checks if white is allowed to short castle\n  function checkIfCanWhiteShortCastle() {\n    return CastlingRights.whiteShortCastle && BoardPosition[7][7] == 'R' && BoardPosition[7][6] == '' && BoardPosition[7][5] == '';\n  }\n\n  //checks if black is allowed to long castle\n  function checkIfCanBlackLongCastle() {\n    return CastlingRights.blackLongCastle && BoardPosition[0][0] == 'r' && BoardPosition[0][1] == '' && BoardPosition[0][2] == '' && BoardPosition[0][3] == '';\n  }\n\n  //checks if black is allowed to short castle\n  function checkIfCanBlackShortCastle() {\n    return CastlingRights.blackShortCastle && BoardPosition[7][7] == 'r' && BoardPosition[7][6] == '' && BoardPosition[7][5] == '';\n  }\n\n  //converts board coordinates to X and Y position on the board, e.g., a8 = 0, 0\n  function convertCoordinatesToLocation(coordinates) {\n    let tokens = coordinates.split('');\n\n    //skip invalid coordinates\n    if (tokens.length != 2) {\n      return;\n    }\n    let letter = tokens[0].toString().toUpperCase();\n    let number = tokens[1];\n\n    //65 is the ASCII code for capital A which will give us 0 if we have A as a coordinate; A-F will give us 0-7 for x\n    //reverse the numbers since we draw the board top down\n    return {\n      x: letter.charCodeAt(0) - 65,\n      y: DIM - Number(number)\n    };\n  }\n\n  //gets all possible moves for a pawn\n  function getPawnsPossibleMoves(square) {\n    if (!doesTheSquareHasThePiece(square, PIECES.PAWN)) {\n      return;\n    }\n    let color = getPieceColor(square); //get the piece color\n\n    let moves = [];\n    let position1Offset = 1;\n    let position2Offset = 2;\n\n    //flips the direction if the color is white\n    if (isColorWhite(color)) {\n      position1Offset *= -1;\n      position2Offset *= -1;\n    }\n\n    //get all forwards moves + the double move at the start\n    let targetPiece1 = getATargetSquareByLocation(square.props.x + position1Offset, square.props.y); //move pawn 1 square ahead\n    let targetPiece2 = getATargetSquareByLocation(square.props.x + position2Offset, square.props.y); //move pawn 2 squares ahead\n\n    //get potential neighbors to capture\n    let neighbor1 = getATargetSquareByLocation(square.props.x + position1Offset, square.props.y + position1Offset);\n    let neighbor2 = getATargetSquareByLocation(square.props.x + position1Offset, square.props.y + position1Offset * -1);\n\n    //get the En Passant coordinates\n    let enPassantSquare = EnPassant.isPossible ? getATargetSquareByLocation(EnPassant.x, EnPassant.y) : '';\n    let isTheSquareInFrontAvailable = isSquareAvailable(targetPiece1);\n\n    //push the one move forward for a pawn\n    if (isTheSquareInFrontAvailable) {\n      moves.push(targetPiece1);\n    }\n\n    //two moves are allowed only if the two squares above are free/empty\n    //allowed if pawn hasn't moved before\n    if (isTheSquareInFrontAvailable && isSquareAvailable(targetPiece2) && isPawnOnStartingSquare(square)) {\n      moves.push(targetPiece2);\n    }\n\n    //push neighbour if there is a piece to capture and it's a different color than the pawn\n    if (!isSquareAvailable(neighbor1) && !areSameColor(neighbor1, square)) {\n      moves.push(neighbor1);\n    }\n\n    //push neighbour if there is a piece to capture and it's a different color than the pawn\n    if (!isSquareAvailable(neighbor2) && !areSameColor(neighbor2, square)) {\n      moves.push(neighbor2);\n    }\n\n    //add En Passant\n    if (enPassantSquare) {\n      moves.push(enPassantSquare);\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a rook\n  function getRooksPossibleMoves(square, skip = true) {\n    if (!doesTheSquareHasThePiece(square, PIECES.ROOK) && skip) {\n      return;\n    }\n    let moves = [];\n    for (let i = square.props.x + 1; i < DIM; i++) {\n      let targetSquare = getATargetSquareByLocation(i, square.props.y);\n      if (isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    for (let i = square.props.x - 1; i >= 0; i--) {\n      let targetSquare = getATargetSquareByLocation(i, square.props.y);\n      if (isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    for (let i = square.props.y + 1; i < DIM; i++) {\n      let targetSquare = getATargetSquareByLocation(square.props.x, i);\n      if (isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    for (let i = square.props.y - 1; i >= 0; i--) {\n      let targetSquare = getATargetSquareByLocation(square.props.x, i);\n      if (isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a bishop\n  function getBishopPossibleMoves(square, skip = true) {\n    if (!doesTheSquareHasThePiece(square, PIECES.BISHOP) && skip) {\n      return;\n    }\n    let moves = [];\n    let counter = 0;\n    for (let i = 1; i <= DIM; i++) {\n      if (counter == 4) {\n        break;\n      }\n      let target1 = getATargetSquareByLocation(square.props.x - i, square.props.y - i);\n      let target2 = getATargetSquareByLocation(square.props.x - i, square.props.y + i);\n      let target3 = getATargetSquareByLocation(square.props.x + i, square.props.y + i);\n      let target4 = getATargetSquareByLocation(square.props.x + i, square.props.y - i);\n      if (target1 && isSquareAvailable(target1) && counter < 1) {\n        moves.push(target1);\n      } else {\n        if (!areSameColor(square, target1)) {\n          moves.push(target1);\n        }\n        counter++;\n      }\n      if (target2 && isSquareAvailable(target2) && counter < 2) {\n        moves.push(target2);\n      } else {\n        if (!areSameColor(square, target2)) {\n          moves.push(target2);\n        }\n        counter++;\n      }\n      if (target3 && isSquareAvailable(target3) && counter < 3) {\n        moves.push(target3);\n      } else {\n        if (!areSameColor(square, target3)) {\n          moves.push(target3);\n        }\n        counter++;\n      }\n      if (target4 && isSquareAvailable(target4) && counter < 4) {\n        moves.push(target4);\n      } else {\n        if (!areSameColor(square, target4)) {\n          moves.push(target4);\n        }\n        counter++;\n      }\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a knight\n  function getKnightPossibleMoves(square) {\n    if (!doesTheSquareHasThePiece(square, PIECES.KNIGHT)) {\n      return;\n    }\n    let offset = 1;\n    let doubleOffset = 2 * offset;\n    let moves = [];\n    for (let i = 0; i < 8; i++) {\n      if (i != 0 && i % 2 == 0) {\n        offset *= -1;\n      }\n      let targetX = square.props.x + offset;\n      let targetY = square.props.y + doubleOffset;\n      let target = getATargetSquareByLocation(targetX, targetY);\n      if (target && isSquareAvailable(target)) {\n        moves.push(target);\n      } else {\n        if (!areSameColor(square, target)) {\n          moves.push(target);\n        }\n      }\n      doubleOffset *= -1;\n      if (i == 4) {\n        offset *= 2;\n        doubleOffset /= 2;\n      }\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a king\n  function getKingPossibleMoves(square) {\n    if (!doesTheSquareHasThePiece(square, PIECES.KING)) {\n      return;\n    }\n    let moves = [];\n    let color = getPieceColor(square);\n\n    //gets all possible 1-square moves for the king\n    for (let i = -1; i < 2; i++) {\n      for (let j = -1; j < 2; j++) {\n        let targetPiece = getATargetSquareByLocation(square.props.x + i, square.props.y + j);\n        if (targetPiece && isSquareAvailable(targetPiece)) {\n          moves.push(targetPiece);\n        } else {\n          if (!areSameColor(square, targetPiece)) {\n            moves.push(targetPiece);\n          }\n        }\n      }\n    }\n\n    //Castling logic\n    const longCastleSquare = getATargetSquareByLocation(square.props.x, square.props.y - 2);\n    const shortCastleSquare = getATargetSquareByLocation(square.props.x, square.props.y + 2);\n    if (isColorWhite(color) && checkIfCanWhiteLongCastle()) {\n      moves.push(longCastleSquare);\n    }\n    if (isColorWhite(color) && checkIfCanWhiteShortCastle()) {\n      moves.push(shortCastleSquare);\n    }\n    if (isColorBlack(color) && checkIfCanBlackLongCastle()) {\n      moves.push(longCastleSquare);\n    }\n    if (isColorBlack(color) && checkIfCanBlackShortCastle()) {\n      moves.push(shortCastleSquare);\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a queen\n  function getQueenPossibleMoves(square) {\n    if (!doesTheSquareHasThePiece(square, PIECES.QUEEN)) {\n      return;\n    }\n    let moves = [];\n\n    //a queen has the same moves as a bishop and a rook\n    const rookMoves = getRooksPossibleMoves(square, false).moves;\n    const bishopMoves = getBishopPossibleMoves(square, false).moves;\n\n    // Concatenate the arrays of moves\n    moves.push(...rookMoves, ...bishopMoves);\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets the piece color\n  function getPieceColor(square) {\n    return square.props.piece.split(PIECE_DELIMITER)[0];\n  }\n\n  //gets the piece\n  function getPiece(square) {\n    return square.props.piece.split(PIECE_DELIMITER)[1];\n  }\n\n  //removes moves that do not deal with a check\n  function filterMovesIfInCheck(possibleMoves) {\n    let blackKing = getATargetSquareByPiece(KINGS.BLACK_KING); //get the black king\n    let whiteKing = getATargetSquareByPiece(KINGS.WHITE_KING); //get the white king\n\n    for (let i = 0; i < possibleMoves.length; i++) {\n      for (let j = 0; j < possibleMoves[i].moves; j++) {\n        if (possibleMoves[i].piece.props.piece == KINGS.BLACK_KING) {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].moves[j].props.x,\n            y: possibleMoves[i].moves[j].props.y,\n            piece: \"black-king\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1215,\n            columnNumber: 32\n          }, this);\n          let pseudo = /*#__PURE__*/_jsxDEV(Square, {\n            x: blackKing.props.x,\n            y: blackKing.props.y,\n            piece: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1216,\n            columnNumber: 34\n          }, this);\n          let isInCheck = isBlackInCheck(move, pseudo);\n          if (isInCheck) {\n            possibleMoves[i].moves.splice(j, 1);\n            j--;\n          }\n        } else if (possibleMoves[i].piece.props.piece == KINGS.WHITE_KING) {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].moves[j].props.x,\n            y: possibleMoves[i].moves[j].props.y,\n            piece: \"white-king\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1224,\n            columnNumber: 32\n          }, this);\n          let pseudo = /*#__PURE__*/_jsxDEV(Square, {\n            x: whiteKing.props.x,\n            y: whiteKing.props.y,\n            piece: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1225,\n            columnNumber: 34\n          }, this);\n          let isInCheck = isWhiteInCheck(move, pseudo);\n          if (isInCheck) {\n            possibleMoves[i].moves.splice(j, 1);\n            j--;\n          }\n        } else {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].moves[j].props.x,\n            y: possibleMoves[i].moves[j].props.y,\n            piece: possibleMoves[i].piece.props.piece\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1233,\n            columnNumber: 32\n          }, this);\n          let isInCheck = isBlackInCheck(blackKing, move) ? true : isWhiteInCheck(whiteKing, move);\n          if (isInCheck) {\n            possibleMoves[i].moves.splice(j, 1);\n            j--;\n          }\n        }\n      }\n    }\n    return possibleMoves;\n  }\n\n  //removes moves that allow illigal castling (castles through check for example)\n  function filterMovesThatAllowIllegalCastling(possibleMoves) {\n    let blackKing = getATargetSquareByPiece(KINGS.BLACK_KING); //get the black king\n    let whiteKing = getATargetSquareByPiece(KINGS.WHITE_KING); //get the white king\n\n    for (let i = 0; i < possibleMoves.length; i++) {\n      let whiteCastle1 = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 6); //sqaure where king will be after short castle (white)\n      let whiteCastle2 = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 2); //sqaure where king will be after long castle (white)\n      let blackCastle1 = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 6); //square where king will be after shot castle (black)\n      let blackCastle2 = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 2); //square where king will be after long castle (black)\n\n      if (possibleMoves[i].piece == blackKing || possibleMoves[i].piece == whiteKing) {\n        if (whiteCastle1) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 5);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n        if (whiteCastle2) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 3);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n        if (blackCastle1) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 5);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n        if (blackCastle2) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 3);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n      }\n\n      //prevents black to castle if in check\n      if (isBlackInCheck(blackKing)) {\n        if (blackCastle1) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove), 1);\n        }\n        if (blackCastle2) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove2), 1);\n        }\n      }\n\n      //prevents white to castle if in check\n      if (isWhiteInCheck(whiteKing)) {\n        if (whiteCastle1) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove), 1);\n        }\n        if (whiteCastle2) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove2), 1);\n        }\n      }\n    }\n    return possibleMoves;\n  }\n\n  //removes empty/undefined values for generated moves\n  function removeEmptyMoves(possibleMoves) {\n    for (let i = 0; i < possibleMoves.length; i++) {\n      if (!possibleMoves[i]) {\n        possibleMoves.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (possibleMoves[i].moves.length == 0) {\n        possibleMoves.splice(i, 1);\n        i--;\n        continue;\n      }\n      for (let j = 0; j < possibleMoves[i].moves.length; j++) {\n        if (!possibleMoves[i].moves[j]) {\n          possibleMoves[i].moves.splice(j, 1);\n          j--;\n        }\n      }\n    }\n    return possibleMoves;\n  }\n  function updatePossibleMovesVisually() {\n    for (let i = 0; i < PossibleMoves.length; i++) {\n      if (PossibleMoves[i].piece.props.x == CurrentSquareSelection.x && PossibleMoves[i].piece.props.y == CurrentSquareSelection.y) {\n        for (let j = 0; j < PossibleMoves[i].moves.length; j++) {\n          updateIsPossibleMove(`${PossibleMoves[i].moves[j].props.x}-${PossibleMoves[i].moves[j].props.y}`, true);\n        }\n      }\n    }\n  }\n\n  //gets all possible/legal moves\n  function getPossibleMoves() {\n    //let square = getATargetSquareByLocation(x, y)\n    let possiblePieceMoves = [];\n    let squares = boardSquares;\n    for (let i = 0; i < squares.length; i++) {\n      let square = squares[i];\n\n      //if the square has a piece\n      if (square.props.piece) {\n        let color = getPieceColor(square); //get the piece color\n\n        //don't collect possible moves if it's black to move and you're trying to move a white piece\n        if (isColorWhite(color) && !IsWhiteToMove) {\n          //console.log(`Skipping because it's black to move and you're moving a white piece, x: ${square.props.x}, y: ${square.props.y}`)\n          continue;\n        }\n\n        //don't collect possible moves if it's white to move and you're trying to move a black piece\n        if (isColorBlack(color) && IsWhiteToMove) {\n          //console.log(`Skipping because it's white to move and you're moving a black piece, x: ${square.props.x}, y: ${square.props.y}`)\n          continue;\n        }\n\n        //console.log(`Getting possible moves, x: ${square.props.x}, y: ${square.props.y}`)\n        //get all possible moves for each piece\n        possiblePieceMoves.push(getPawnsPossibleMoves(square));\n        possiblePieceMoves.push(getRooksPossibleMoves(square));\n        possiblePieceMoves.push(getBishopPossibleMoves(square));\n        possiblePieceMoves.push(getKnightPossibleMoves(square));\n        possiblePieceMoves.push(getKingPossibleMoves(square));\n        possiblePieceMoves.push(getQueenPossibleMoves(square));\n\n        //filter empty moves\n        possiblePieceMoves = removeEmptyMoves(possiblePieceMoves);\n\n        //filter possible moves\n        possiblePieceMoves = filterMovesIfInCheck(possiblePieceMoves);\n        possiblePieceMoves = filterMovesThatAllowIllegalCastling(possiblePieceMoves);\n      }\n    }\n    console.log(\"Possible Moves:\", possiblePieceMoves);\n    console.log('Moves count', possiblePieceMoves.reduce((sum, pieceMove) => sum + pieceMove.moves.length, 0));\n    PossibleMoves.splice(0, PossibleMoves.length, ...possiblePieceMoves);\n    updatePossibleMovesVisually();\n  }\n\n  //renders the board\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessGrid\",\n      children: boardSquares.map(sqr => sqr)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1402,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Board, \"BRt3fVMOj6prri2F4hSBbV5eKds=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useState","useEffect","useRef","createContext","React","Square","ConvertFENPieceToPiece","ConvertFenToString","UpdatePosition","ParseFEN","DIM","PIECE_DELIMITER","KINGS","COLORS","PIECES","CastlingRights","EnPassant","CurrentSquareSelection","PossibleMoves","HalfMoves","FullMoves","IsWhiteToMove","updateIsWhiteToMove","updateHalfMoves","updateFullMoves","BoardPosition","jsxDEV","_jsxDEV","Fragment","_Fragment","Board","_s","fen","setFen","isPossibleMove","setIsPossibleMove","boardSquares","setBoardSquares","isPossibleMoveRef","updateIsPossibleMove","key","value","prevState","map","item","current","fenParser","resetPossibleMoves","initialIsPossibleMove","i","j","push","fenBoard","fenTurn","fenCastling","fenEnPassant","fenHalfMoves","fenFullMoves","fenRows","split","arr","row","tokens","r","length","Number","squareColorIsWhite","squares","color","possibleMoveStatus","find","getPossibleMoves","x","y","piece","movePiece","fileName","_jsxFileName","lineNumber","columnNumber","includes","whiteShortCastle","whiteLongCastle","blackShortCastle","blackLongCastle","splice","location","convertCoordinatesToLocation","isPossible","isWhiteInCheck","square","pseudo","updatedSquares","s","props","cloneElement","knight1","knight2","knight3","knight4","knight5","knight6","knight7","knight8","isBlackInCheck","position","targetSquare","getATargetSquareByLocation","getPieceColor","getPiece","KING","isColorWhite","ROOK","console","log","JSON","stringify","p","enPassantTargetSquare","WHITE","enPassantSquare","PAWN","Math","abs","enPassant1","enPassant2","updateSelectedSquareX","setSelectedSquareX","updateSelectedSquareY","setSelectedSquareY","getATargetSquareByPiece","isSquareAvailable","isPawnOnStartingSquare","pawn","areSameColor","square1","square2","color1","color2","doesTheSquareHasThePiece","isPawnOnEnPassantSquare","isColorBlack","BLACK","checkIfCanWhiteLongCastle","checkIfCanWhiteShortCastle","checkIfCanBlackLongCastle","checkIfCanBlackShortCastle","coordinates","letter","toString","toUpperCase","number","charCodeAt","getPawnsPossibleMoves","moves","position1Offset","position2Offset","targetPiece1","targetPiece2","neighbor1","neighbor2","isTheSquareInFrontAvailable","getRooksPossibleMoves","skip","getBishopPossibleMoves","BISHOP","counter","target1","target2","target3","target4","getKnightPossibleMoves","KNIGHT","offset","doubleOffset","targetX","targetY","target","getKingPossibleMoves","targetPiece","longCastleSquare","shortCastleSquare","getQueenPossibleMoves","QUEEN","rookMoves","bishopMoves","filterMovesIfInCheck","possibleMoves","blackKing","BLACK_KING","whiteKing","WHITE_KING","move","isInCheck","filterMovesThatAllowIllegalCastling","whiteCastle1","m","whiteCastle2","blackCastle1","blackCastle2","pieceAcross","indexOf","castleMove","castleMove2","removeEmptyMoves","updatePossibleMovesVisually","possiblePieceMoves","reduce","sum","pieceMove","children","className","sqr","_c","$RefreshReg$"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/Chess-React.js-/src/Board.js"],"sourcesContent":["import { useState, useEffect, useRef, createContext } from \"react\";\r\nimport React from 'react';\r\nimport Square from \"./Square.js\"\r\nimport { ConvertFENPieceToPiece, ConvertFenToString, UpdatePosition, ParseFEN } from \"./HelperMethods.js\";\r\nimport {\r\n    DIM, PIECE_DELIMITER, KINGS, COLORS, PIECES,\r\n    CastlingRights, EnPassant, CurrentSquareSelection, PossibleMoves,\r\n    HalfMoves, FullMoves, IsWhiteToMove, updateIsWhiteToMove, updateHalfMoves,\r\n    updateFullMoves, BoardPosition\r\n} from \"./globalVariables.js\"\r\n\r\n\r\n/*\r\nTODO:\r\nCode Reusability: refactor some of the repeated code and generate new functions if needed\r\nConsistency and Naming: Have better and more consistent names for variables and functions\r\nDocumentation: add more comments to understand what is going on\r\nTesting: add unit tests\r\nImplementations: add promotions, implement endgames (mate, stalemate, draws repeation, 50 moves rule)\r\nBugs: Fix bugs (if any)\r\n*/\r\n\r\nfunction Board() {\r\n    //<summary>\r\n    //FEN - Forsyth-Edwards Notation\r\n    //small letters - black pieces\r\n    //capital letters - white pieces\r\n    //numbers - empty board squares\r\n    //(/) - separates each board row\r\n    //first letter after the board indicates whose turn it is to move (w - white, b - black)\r\n    //next letters indicate castling rights, k - kingside, q - queenside, (-) - no castling allowed for any side\r\n    //en passant square - when a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square\r\n    //the number of half turns (white moves, then black moves = 2 half moves) that were made without a pawn move or a capture of a piece (50-move rule when reaches 100)\r\n    //the number of full moves (white moves, then black moves = 1 full move); increase after every black half move\r\n    //</summary>\r\n    //starting position\r\n    //'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\r\n    const [fen, setFen] = useState('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0')\r\n    const [isPossibleMove, setIsPossibleMove] = useState([])\r\n    const [boardSquares, setBoardSquares] = useState([])\r\n\r\n    const isPossibleMoveRef = useRef(isPossibleMove)\r\n\r\n    const updateIsPossibleMove = (key, value) => {\r\n        setIsPossibleMove(prevState =>\r\n            prevState.map(item =>\r\n                item.key === key ? { ...item, value: value } : item\r\n            )\r\n        );\r\n    };\r\n\r\n    useEffect(() => {\r\n        isPossibleMoveRef.current = isPossibleMove;\r\n        fenParser();\r\n    }, [isPossibleMove])\r\n\r\n    //called when the page loads.we need to parse the FEN to fill in the board\r\n    useEffect(() => {\r\n        resetPossibleMoves()\r\n        fenParser()\r\n    }, [])\r\n\r\n    function resetPossibleMoves() {\r\n        const initialIsPossibleMove = [];\r\n        for (let i = 0; i < DIM; i++) {\r\n            for (let j = 0; j < DIM; j++) {\r\n                initialIsPossibleMove.push({ key: `${i}-${j}`, value: false });\r\n            }\r\n        }\r\n        setIsPossibleMove(initialIsPossibleMove);\r\n    }\r\n\r\n    //parses the FEN for the initial board state\r\n    function fenParser() {\r\n        //parses the FEN string to variables\r\n        const { fenBoard, fenTurn, fenCastling, fenEnPassant, fenHalfMoves, fenFullMoves } = ParseFEN(fen)\r\n\r\n        const fenRows = fenBoard.split('/')\r\n\r\n        let arr = [];\r\n\r\n        //splits all rows and creates a matrix for the board\r\n        for (let row of fenRows) {\r\n            const tokens = row.split('')\r\n\r\n            let r = []\r\n\r\n            for (let i = 0; i < tokens.length; i++) {\r\n                if (Number(tokens[i])) {\r\n                    for (let j = 0; j < Number(tokens[i]); j++) {\r\n                        r.push(' ')\r\n                    }\r\n                } else {\r\n                    r.push(tokens[i])\r\n                }\r\n            }\r\n\r\n            arr.push(r)\r\n        }\r\n\r\n        //generates a Square component for each element in the matrix created above\r\n        let squareColorIsWhite = true;\r\n        let squares = []\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            for (let j = 0; j < arr[i].length; j++) {\r\n                let color = squareColorIsWhite ? \"\" : \"dark\";\r\n                const possibleMoveStatus = isPossibleMoveRef.current.find(item => item.key === `${i}-${j}`);\r\n\r\n                //boardSquares.push(\r\n                squares.push(\r\n                    <Square\r\n                        getPossibleMoves={getPossibleMoves}\r\n                        key={`${i}-${j}`}\r\n                        x={i}\r\n                        y={j}\r\n                        piece={ConvertFENPieceToPiece(arr[i][j])}\r\n                        color={color}\r\n                        movePiece={movePiece}\r\n                        isPossibleMove={possibleMoveStatus ? possibleMoveStatus.value : false}\r\n                        resetPossibleMoves={resetPossibleMoves}\r\n                    />\r\n                )\r\n                squareColorIsWhite = !squareColorIsWhite;\r\n            }\r\n            squareColorIsWhite = !squareColorIsWhite;\r\n        }\r\n\r\n        setBoardSquares(squares)\r\n\r\n        // BoardSquares.splice(0, BoardSquares.length);\r\n        // BoardSquares.push(...squares)\r\n        // console.log(BoardSquares)\r\n\r\n        if (fenCastling.includes('K')) {\r\n            CastlingRights.whiteShortCastle = true;\r\n        }\r\n        if (fenCastling.includes('Q')) {\r\n            CastlingRights.whiteLongCastle = true;\r\n        }\r\n        if (fenCastling.includes('k')) {\r\n            CastlingRights.blackShortCastle = true;\r\n        }\r\n        if (fenCastling.includes('q')) {\r\n            CastlingRights.blackLongCastle = true;\r\n        }\r\n\r\n        fenTurn == 'w' ? updateIsWhiteToMove(true) : updateIsWhiteToMove(false)\r\n        updateHalfMoves(fenHalfMoves)\r\n        updateFullMoves(fenFullMoves)\r\n\r\n        BoardPosition.splice(0, BoardPosition.length, ...arr)\r\n\r\n        if (!fenEnPassant.includes(PIECE_DELIMITER)) {\r\n            let location = convertCoordinatesToLocation(fenEnPassant)\r\n\r\n            EnPassant.isPossible = true\r\n            EnPassant.x = location.x\r\n            EnPassant.y = location.y\r\n        }\r\n    }\r\n\r\n    function isWhiteInCheck(square, pseudo) {\r\n        let squares = boardSquares\r\n\r\n        if (pseudo) {\r\n            const updatedSquares = squares.map(s => {\r\n                if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\r\n                    // Return a new Square component with the updated piece\r\n                    return React.cloneElement(s, { piece: pseudo.props.piece });\r\n                } else {\r\n                    // For other squares, return the original Square component\r\n                    return s;\r\n                }\r\n            });\r\n\r\n            squares = updatedSquares;\r\n        }\r\n\r\n        //check for attackers in front of the white king\r\n        for (let i = square.props.x - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from behind\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers behind the white king\r\n        for (let i = square.props.x + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the front\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the left of the white king\r\n        for (let i = square.props.y - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the left\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the right of the white king\r\n        for (let i = square.props.y + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the right\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == -1) {\r\n                                //console.log(\"in check from top half of counterclockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from top half of counterclockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        return true\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == 1) {\r\n                                //console.log(\"in check from top half of clockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from top half of clockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        return true;\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for knights check\r\n        let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1)\r\n        let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1)\r\n        let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1)\r\n        let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1)\r\n        let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2)\r\n        let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2)\r\n        let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2)\r\n        let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2)\r\n\r\n        if (knight1) {\r\n            if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight1.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 1\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight2) {\r\n            if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight2.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 2\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight3) {\r\n            if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight3.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 3\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight4) {\r\n            if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight4.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 4\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight5) {\r\n            if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight5.props.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 5\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight6) {\r\n            if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight6.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 6\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight7) {\r\n            if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight7.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 7\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight8) {\r\n            if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight8.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 8\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function isBlackInCheck(square, pseudo) {\r\n        let squares = boardSquares\r\n\r\n        if (pseudo) {\r\n            const updatedSquares = squares.map(s => {\r\n                if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\r\n                    // Return a new Square component with the updated piece\r\n                    return React.cloneElement(s, { piece: pseudo.props.piece });\r\n                } else {\r\n                    // For other squares, return the original Square component\r\n                    return s;\r\n                }\r\n            });\r\n\r\n            squares = updatedSquares;\r\n        }\r\n\r\n        //check for attackers behind the black king\r\n        for (let i = square.props.x - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from behind\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers in front of the black king\r\n        for (let i = square.props.x + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the front\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the left of the black king\r\n        for (let i = square.props.y - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the left\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the right of the black king\r\n        for (let i = square.props.y + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the right\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        //console.log(\"in check from top half of counterclockwise diagonal\")\r\n                        return true\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == 1) {\r\n                                //console.log(\"in check from bottom half of counterclockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from bottom half of counterclockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        //console.log(\"in check from top half of clockwise diagonal\")\r\n                        return true\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == -1) {\r\n                                //console.log(\"in check from bottom half of clockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from bottom half of clockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for knights check\r\n        let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1)\r\n        let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1)\r\n        let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1)\r\n        let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1)\r\n        let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2)\r\n        let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2)\r\n        let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2)\r\n        let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2)\r\n\r\n        if (knight1) {\r\n            if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight1.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 1\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight2) {\r\n            if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight2.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 2\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight3) {\r\n            if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight3.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 3\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight4) {\r\n            if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight4.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 4\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight5) {\r\n            if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight5.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 5\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight6) {\r\n            if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight6.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 6\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight7) {\r\n            if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight7.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 7\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight8) {\r\n            if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight8.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 8\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function movePiece(x, y) {\r\n        let squares = boardSquares\r\n        let position = BoardPosition\r\n\r\n        let targetSquare = getATargetSquareByLocation(x, y)\r\n        let square = squares.find(s => s.props.x == CurrentSquareSelection.x && s.props.y == CurrentSquareSelection.y)\r\n\r\n        let color = getPieceColor(square)\r\n        let piece = getPiece(square)\r\n\r\n        //disable castling if the king moves\r\n        if (piece == PIECES.KING) {\r\n            if (isColorWhite(color)) {\r\n                CastlingRights.whiteLongCastle = false\r\n                CastlingRights.whiteShortCastle = false\r\n            } else {\r\n                CastlingRights.blackLongCastle = false\r\n                CastlingRights.blackShortCastle = false\r\n            }\r\n        }\r\n\r\n        //disable castling if the rook moves\r\n        if (piece == PIECES.ROOK) {\r\n            if (square.props.x == 7 && square.props.y == 7) {\r\n                CastlingRights.whiteShortCastle = false\r\n            }\r\n\r\n            if (square.props.x == 0 && square.props.y == 7) {\r\n                CastlingRights.blackShortCastle = false\r\n            }\r\n\r\n            if (square.props.x == 7 && square.props.y == 0) {\r\n                CastlingRights.whiteLongCastle = false\r\n            }\r\n\r\n            if (square.props.x == 0 && square.props.y == 0) {\r\n                CastlingRights.blackLongCastle = false\r\n            }\r\n        }\r\n\r\n        console.log('Before piece move', JSON.stringify(BoardPosition))\r\n        let p = UpdatePosition(square, targetSquare, position)\r\n\r\n        //capturing enPassant\r\n        if (EnPassant.isPossible) {\r\n            let enPassantTargetSquare = color == COLORS.WHITE ? squares.find(s => s.props.x == x + 1 && s.props.y == y) : squares.find(s => s.props.x == x - 1 && s.props.y == y)\r\n            let enPassantSquare = <Square x={square.props.x} y={square.props.y} piece={\"\"} />\r\n\r\n            p = UpdatePosition(enPassantSquare, enPassantTargetSquare, p)\r\n        }\r\n\r\n        //TODO: ensure p matches the new board Position format\r\n        //setBoardPosition(p)\r\n        BoardPosition.splice(0, BoardPosition.length, ...p)\r\n        console.log('After piece move', JSON.stringify(p))\r\n        console.log('After piece move', JSON.stringify(BoardPosition))\r\n\r\n        PossibleMoves.splice(0, PossibleMoves.length);\r\n        updateIsWhiteToMove(!IsWhiteToMove)\r\n\r\n        //enabling en passant\r\n        if (piece == PIECES.PAWN) {\r\n            if (Math.abs(square.props.x - targetSquare.props.x) == 2) {\r\n                let enPassant1 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y - 1)\r\n                let enPassant2 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y + 1)\r\n\r\n                if (enPassant1) {\r\n                    if (enPassant1.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\r\n                        if (enPassant1.props.piece.split(PIECE_DELIMITER)[0] != color) {\r\n                            EnPassant.isPossible = true\r\n                            EnPassant.x = targetSquare.props.x\r\n                            EnPassant.y = targetSquare.props.y\r\n                            return\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (enPassant2) {\r\n                    if (enPassant2.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\r\n                        if (enPassant2.props.piece.split(PIECE_DELIMITER)[0] != color) {\r\n                            EnPassant.isPossible = true\r\n                            EnPassant.x = targetSquare.props.x\r\n                            EnPassant.y = targetSquare.props.y\r\n                            return\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        EnPassant.isPossible = false\r\n        EnPassant.x = -1\r\n        EnPassant.y = -1\r\n    }\r\n\r\n    //updates the state with the selectedSquare X coordinates\r\n    function updateSelectedSquareX(x) {\r\n        setSelectedSquareX(x)\r\n    }\r\n\r\n    //updates the state with the selectedSquare Y coordinates\r\n    function updateSelectedSquareY(y) {\r\n        setSelectedSquareY(y)\r\n    }\r\n\r\n    //retrieves a speecific square from the board using x and y coordinates (location)\r\n    function getATargetSquareByLocation(x, y) {\r\n        return boardSquares.find(s => s.props.x === x && s.props.y === y);\r\n    }\r\n\r\n    //retrieves a speecific square from the board that has a certain piece\r\n    function getATargetSquareByPiece(piece) {\r\n        return boardSquares.find(s => s.props.piece == piece);\r\n    }\r\n\r\n    //check if a specific square has a piece assigned to it\r\n    function isSquareAvailable(square) {\r\n        return square && !square.props.piece\r\n    }\r\n\r\n    //checks if a pawn is on its starting square and allows a 2-squares move\r\n    function isPawnOnStartingSquare(pawn) {\r\n        return isColorWhite(pawn.props.piece.split(PIECE_DELIMITER)[0]) ? pawn.props.x == 6 : pawn.props.x == 1\r\n    }\r\n\r\n    //checks if two pieces have the same color\r\n    function areSameColor(square1, square2) {\r\n        if (!square1 || !square2) {\r\n            return\r\n        }\r\n\r\n        let color1 = square1.props.piece.split(PIECE_DELIMITER)[0];\r\n        let color2 = square2.props.piece.split(PIECE_DELIMITER)[0];\r\n\r\n        return color1 == color2\r\n    }\r\n\r\n    //checks if a square contains a certain piece\r\n    function doesTheSquareHasThePiece(square, piece) {\r\n        let p = getPiece(square)\r\n\r\n        return p == piece\r\n    }\r\n\r\n    //cheks if a pawn is on En Passant square\r\n    function isPawnOnEnPassantSquare(pawn) {\r\n        return isColorWhite(pawn.props.piece.split(PIECE_DELIMITER)[0]) ? pawn.props.x == 3 : pawn.props.x == 4\r\n    }\r\n\r\n    //checks if a color is white\r\n    function isColorWhite(color) {\r\n        return color == COLORS.WHITE\r\n    }\r\n\r\n    //checks if a color is black\r\n    function isColorBlack(color) {\r\n        return color == COLORS.BLACK\r\n    }\r\n\r\n    //checks if white is allowed to long castle\r\n    function checkIfCanWhiteLongCastle() {\r\n        return CastlingRights.whiteLongCastle &&\r\n            BoardPosition[7][0] == 'R' &&\r\n            BoardPosition[7][1] == '' &&\r\n            BoardPosition[7][2] == '' &&\r\n            BoardPosition[7][3] == '';\r\n    }\r\n\r\n    //checks if white is allowed to short castle\r\n    function checkIfCanWhiteShortCastle() {\r\n        return CastlingRights.whiteShortCastle &&\r\n            BoardPosition[7][7] == 'R' &&\r\n            BoardPosition[7][6] == '' &&\r\n            BoardPosition[7][5] == '';\r\n    }\r\n\r\n    //checks if black is allowed to long castle\r\n    function checkIfCanBlackLongCastle() {\r\n        return CastlingRights.blackLongCastle &&\r\n            BoardPosition[0][0] == 'r' &&\r\n            BoardPosition[0][1] == '' &&\r\n            BoardPosition[0][2] == '' &&\r\n            BoardPosition[0][3] == '';\r\n    }\r\n\r\n    //checks if black is allowed to short castle\r\n    function checkIfCanBlackShortCastle() {\r\n        return CastlingRights.blackShortCastle &&\r\n            BoardPosition[7][7] == 'r' &&\r\n            BoardPosition[7][6] == '' &&\r\n            BoardPosition[7][5] == '';\r\n    }\r\n\r\n    //converts board coordinates to X and Y position on the board, e.g., a8 = 0, 0\r\n    function convertCoordinatesToLocation(coordinates) {\r\n        let tokens = coordinates.split('')\r\n\r\n        //skip invalid coordinates\r\n        if (tokens.length != 2) {\r\n            return\r\n        }\r\n\r\n        let letter = tokens[0].toString().toUpperCase()\r\n        let number = tokens[1]\r\n\r\n        //65 is the ASCII code for capital A which will give us 0 if we have A as a coordinate; A-F will give us 0-7 for x\r\n        //reverse the numbers since we draw the board top down\r\n        return { x: letter.charCodeAt(0) - 65, y: DIM - Number(number) }\r\n    }\r\n\r\n    //gets all possible moves for a pawn\r\n    function getPawnsPossibleMoves(square) {\r\n        if (!doesTheSquareHasThePiece(square, PIECES.PAWN)) {\r\n            return\r\n        }\r\n\r\n        let color = getPieceColor(square) //get the piece color\r\n\r\n        let moves = []\r\n\r\n        let position1Offset = 1\r\n        let position2Offset = 2\r\n\r\n        //flips the direction if the color is white\r\n        if (isColorWhite(color)) {\r\n            position1Offset *= -1\r\n            position2Offset *= -1\r\n        }\r\n\r\n        //get all forwards moves + the double move at the start\r\n        let targetPiece1 = getATargetSquareByLocation(square.props.x + position1Offset, square.props.y) //move pawn 1 square ahead\r\n        let targetPiece2 = getATargetSquareByLocation(square.props.x + position2Offset, square.props.y) //move pawn 2 squares ahead\r\n\r\n        //get potential neighbors to capture\r\n        let neighbor1 = getATargetSquareByLocation(square.props.x + position1Offset, square.props.y + position1Offset)\r\n        let neighbor2 = getATargetSquareByLocation(square.props.x + position1Offset, square.props.y + (position1Offset * -1))\r\n\r\n        //get the En Passant coordinates\r\n        let enPassantSquare = EnPassant.isPossible ? getATargetSquareByLocation(EnPassant.x, EnPassant.y) : ''\r\n\r\n        let isTheSquareInFrontAvailable = isSquareAvailable(targetPiece1)\r\n\r\n        //push the one move forward for a pawn\r\n        if (isTheSquareInFrontAvailable) {\r\n            moves.push(targetPiece1)\r\n        }\r\n\r\n        //two moves are allowed only if the two squares above are free/empty\r\n        //allowed if pawn hasn't moved before\r\n        if (isTheSquareInFrontAvailable && isSquareAvailable(targetPiece2) && isPawnOnStartingSquare(square)) {\r\n            moves.push(targetPiece2)\r\n        }\r\n\r\n        //push neighbour if there is a piece to capture and it's a different color than the pawn\r\n        if (!isSquareAvailable(neighbor1) && !areSameColor(neighbor1, square)) {\r\n            moves.push(neighbor1)\r\n        }\r\n\r\n        //push neighbour if there is a piece to capture and it's a different color than the pawn\r\n        if (!isSquareAvailable(neighbor2) && !areSameColor(neighbor2, square)) {\r\n            moves.push(neighbor2)\r\n        }\r\n\r\n        //add En Passant\r\n        if (enPassantSquare) {\r\n            moves.push(enPassantSquare)\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a rook\r\n    function getRooksPossibleMoves(square, skip = true) {\r\n        if (!doesTheSquareHasThePiece(square, PIECES.ROOK) && skip) {\r\n            return\r\n        }\r\n\r\n        let moves = []\r\n\r\n        for (let i = square.props.x + 1; i < DIM; i++) {\r\n            let targetSquare = getATargetSquareByLocation(i, square.props.y)\r\n\r\n            if (isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break\r\n            }\r\n        }\r\n\r\n        for (let i = square.props.x - 1; i >= 0; i--) {\r\n            let targetSquare = getATargetSquareByLocation(i, square.props.y)\r\n\r\n            if (isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = square.props.y + 1; i < DIM; i++) {\r\n            let targetSquare = getATargetSquareByLocation(square.props.x, i)\r\n\r\n            if (isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break\r\n            }\r\n        }\r\n\r\n        for (let i = square.props.y - 1; i >= 0; i--) {\r\n            let targetSquare = getATargetSquareByLocation(square.props.x, i)\r\n\r\n            if (isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break\r\n            }\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a bishop\r\n    function getBishopPossibleMoves(square, skip = true) {\r\n        if (!doesTheSquareHasThePiece(square, PIECES.BISHOP) && skip) {\r\n            return\r\n        }\r\n\r\n        let moves = []\r\n\r\n        let counter = 0;\r\n\r\n        for (let i = 1; i <= DIM; i++) {\r\n            if (counter == 4) {\r\n                break;\r\n            }\r\n\r\n            let target1 = getATargetSquareByLocation(square.props.x - i, square.props.y - i)\r\n            let target2 = getATargetSquareByLocation(square.props.x - i, square.props.y + i)\r\n            let target3 = getATargetSquareByLocation(square.props.x + i, square.props.y + i)\r\n            let target4 = getATargetSquareByLocation(square.props.x + i, square.props.y - i)\r\n\r\n            if (target1 && isSquareAvailable(target1) && counter < 1) {\r\n                moves.push(target1)\r\n            } else {\r\n                if (!areSameColor(square, target1)) {\r\n                    moves.push(target1)\r\n                }\r\n                counter++;\r\n            }\r\n\r\n            if (target2 && isSquareAvailable(target2) && counter < 2) {\r\n                moves.push(target2)\r\n            } else {\r\n                if (!areSameColor(square, target2)) {\r\n                    moves.push(target2)\r\n                }\r\n                counter++;\r\n            }\r\n\r\n            if (target3 && isSquareAvailable(target3) && counter < 3) {\r\n                moves.push(target3)\r\n            } else {\r\n                if (!areSameColor(square, target3)) {\r\n                    moves.push(target3)\r\n                }\r\n                counter++;\r\n            }\r\n\r\n            if (target4 && isSquareAvailable(target4) && counter < 4) {\r\n                moves.push(target4)\r\n            } else {\r\n                if (!areSameColor(square, target4)) {\r\n                    moves.push(target4)\r\n                }\r\n                counter++;\r\n            }\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a knight\r\n    function getKnightPossibleMoves(square) {\r\n        if (!doesTheSquareHasThePiece(square, PIECES.KNIGHT)) {\r\n            return\r\n        }\r\n\r\n        let offset = 1;\r\n        let doubleOffset = 2 * offset;\r\n\r\n        let moves = []\r\n\r\n        for (let i = 0; i < 8; i++) {\r\n            if (i != 0 && i % 2 == 0) {\r\n                offset *= -1;\r\n            }\r\n\r\n            let targetX = square.props.x + offset;\r\n            let targetY = square.props.y + doubleOffset;\r\n\r\n            let target = getATargetSquareByLocation(targetX, targetY)\r\n\r\n            if (target && isSquareAvailable(target)) {\r\n                moves.push(target)\r\n            } else {\r\n                if (!areSameColor(square, target)) {\r\n                    moves.push(target)\r\n                }\r\n            }\r\n\r\n            doubleOffset *= -1\r\n\r\n            if (i == 4) {\r\n                offset *= 2\r\n                doubleOffset /= 2\r\n            }\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a king\r\n    function getKingPossibleMoves(square) {\r\n        if (!doesTheSquareHasThePiece(square, PIECES.KING)) {\r\n            return\r\n        }\r\n\r\n        let moves = []\r\n\r\n        let color = getPieceColor(square)\r\n\r\n        //gets all possible 1-square moves for the king\r\n        for (let i = -1; i < 2; i++) {\r\n            for (let j = -1; j < 2; j++) {\r\n                let targetPiece = getATargetSquareByLocation(square.props.x + i, square.props.y + j)\r\n\r\n                if (targetPiece && isSquareAvailable(targetPiece)) {\r\n                    moves.push(targetPiece)\r\n                } else {\r\n                    if (!areSameColor(square, targetPiece)) {\r\n                        moves.push(targetPiece)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //Castling logic\r\n        const longCastleSquare = getATargetSquareByLocation(square.props.x, square.props.y - 2)\r\n        const shortCastleSquare = getATargetSquareByLocation(square.props.x, square.props.y + 2)\r\n\r\n        if (isColorWhite(color) && checkIfCanWhiteLongCastle()) {\r\n            moves.push(longCastleSquare)\r\n        }\r\n\r\n        if (isColorWhite(color) && checkIfCanWhiteShortCastle()) {\r\n            moves.push(shortCastleSquare)\r\n        }\r\n\r\n        if (isColorBlack(color) && checkIfCanBlackLongCastle()) {\r\n            moves.push(longCastleSquare)\r\n        }\r\n\r\n        if (isColorBlack(color) && checkIfCanBlackShortCastle()) {\r\n            moves.push(shortCastleSquare)\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a queen\r\n    function getQueenPossibleMoves(square) {\r\n        if (!doesTheSquareHasThePiece(square, PIECES.QUEEN)) {\r\n            return\r\n        }\r\n\r\n        let moves = []\r\n\r\n        //a queen has the same moves as a bishop and a rook\r\n        const rookMoves = getRooksPossibleMoves(square, false).moves;\r\n        const bishopMoves = getBishopPossibleMoves(square, false).moves;\r\n\r\n        // Concatenate the arrays of moves\r\n        moves.push(...rookMoves, ...bishopMoves);\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets the piece color\r\n    function getPieceColor(square) {\r\n        return square.props.piece.split(PIECE_DELIMITER)[0]\r\n    }\r\n\r\n    //gets the piece\r\n    function getPiece(square) {\r\n        return square.props.piece.split(PIECE_DELIMITER)[1]\r\n    }\r\n\r\n    //removes moves that do not deal with a check\r\n    function filterMovesIfInCheck(possibleMoves) {\r\n        let blackKing = getATargetSquareByPiece(KINGS.BLACK_KING) //get the black king\r\n        let whiteKing = getATargetSquareByPiece(KINGS.WHITE_KING) //get the white king\r\n\r\n        for (let i = 0; i < possibleMoves.length; i++) {\r\n            for (let j = 0; j < possibleMoves[i].moves; j++) {\r\n                if (possibleMoves[i].piece.props.piece == KINGS.BLACK_KING) {\r\n                    let move = <Square x={possibleMoves[i].moves[j].props.x} y={possibleMoves[i].moves[j].props.y} piece={\"black-king\"} />\r\n                    let pseudo = <Square x={blackKing.props.x} y={blackKing.props.y} piece={\"\"} />\r\n                    let isInCheck = isBlackInCheck(move, pseudo)\r\n\r\n                    if (isInCheck) {\r\n                        possibleMoves[i].moves.splice(j, 1);\r\n                        j--;\r\n                    }\r\n                } else if (possibleMoves[i].piece.props.piece == KINGS.WHITE_KING) {\r\n                    let move = <Square x={possibleMoves[i].moves[j].props.x} y={possibleMoves[i].moves[j].props.y} piece={\"white-king\"} />\r\n                    let pseudo = <Square x={whiteKing.props.x} y={whiteKing.props.y} piece={\"\"} />\r\n                    let isInCheck = isWhiteInCheck(move, pseudo)\r\n\r\n                    if (isInCheck) {\r\n                        possibleMoves[i].moves.splice(j, 1);\r\n                        j--;\r\n                    }\r\n                } else {\r\n                    let move = <Square x={possibleMoves[i].moves[j].props.x} y={possibleMoves[i].moves[j].props.y} piece={possibleMoves[i].piece.props.piece} />\r\n                    let isInCheck = isBlackInCheck(blackKing, move) ? true : isWhiteInCheck(whiteKing, move)\r\n\r\n                    if (isInCheck) {\r\n                        possibleMoves[i].moves.splice(j, 1);\r\n                        j--;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return possibleMoves\r\n    }\r\n\r\n    //removes moves that allow illigal castling (castles through check for example)\r\n    function filterMovesThatAllowIllegalCastling(possibleMoves) {\r\n        let blackKing = getATargetSquareByPiece(KINGS.BLACK_KING) //get the black king\r\n        let whiteKing = getATargetSquareByPiece(KINGS.WHITE_KING) //get the white king\r\n\r\n        for (let i = 0; i < possibleMoves.length; i++) {\r\n            let whiteCastle1 = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 6) //sqaure where king will be after short castle (white)\r\n            let whiteCastle2 = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 2) //sqaure where king will be after long castle (white)\r\n            let blackCastle1 = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 6) //square where king will be after shot castle (black)\r\n            let blackCastle2 = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 2) //square where king will be after long castle (black)\r\n\r\n            if (possibleMoves[i].piece == blackKing || possibleMoves[i].piece == whiteKing) {\r\n                if (whiteCastle1) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 5)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n\r\n                if (whiteCastle2) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 3)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n\r\n                if (blackCastle1) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 5)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n\r\n                if (blackCastle2) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 3)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n            }\r\n\r\n            //prevents black to castle if in check\r\n            if (isBlackInCheck(blackKing)) {\r\n                if (blackCastle1) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove), 1)\r\n                }\r\n\r\n                if (blackCastle2) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove2), 1)\r\n                }\r\n            }\r\n\r\n            //prevents white to castle if in check\r\n            if (isWhiteInCheck(whiteKing)) {\r\n                if (whiteCastle1) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove), 1)\r\n                }\r\n\r\n                if (whiteCastle2) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove2), 1)\r\n                }\r\n            }\r\n        }\r\n\r\n        return possibleMoves\r\n    }\r\n\r\n    //removes empty/undefined values for generated moves\r\n    function removeEmptyMoves(possibleMoves) {\r\n        for (let i = 0; i < possibleMoves.length; i++) {\r\n            if (!possibleMoves[i]) {\r\n                possibleMoves.splice(i, 1)\r\n                i--;\r\n                continue;\r\n            }\r\n\r\n            if (possibleMoves[i].moves.length == 0) {\r\n                possibleMoves.splice(i, 1)\r\n                i--;\r\n                continue;\r\n            }\r\n\r\n            for (let j = 0; j < possibleMoves[i].moves.length; j++) {\r\n                if (!possibleMoves[i].moves[j]) {\r\n                    possibleMoves[i].moves.splice(j, 1);\r\n                    j--;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possibleMoves\r\n    }\r\n\r\n    function updatePossibleMovesVisually() {\r\n        for (let i = 0; i < PossibleMoves.length; i++) {\r\n            if (PossibleMoves[i].piece.props.x == CurrentSquareSelection.x && PossibleMoves[i].piece.props.y == CurrentSquareSelection.y) {\r\n                for (let j = 0; j < PossibleMoves[i].moves.length; j++) {\r\n                    updateIsPossibleMove(`${PossibleMoves[i].moves[j].props.x}-${PossibleMoves[i].moves[j].props.y}`, true)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //gets all possible/legal moves\r\n    function getPossibleMoves() {\r\n        //let square = getATargetSquareByLocation(x, y)\r\n        let possiblePieceMoves = [];\r\n        let squares = boardSquares\r\n\r\n        for (let i = 0; i < squares.length; i++) {\r\n            let square = squares[i]\r\n\r\n            //if the square has a piece\r\n            if (square.props.piece) {\r\n                let color = getPieceColor(square); //get the piece color\r\n\r\n                //don't collect possible moves if it's black to move and you're trying to move a white piece\r\n                if (isColorWhite(color) && !IsWhiteToMove) {\r\n                    //console.log(`Skipping because it's black to move and you're moving a white piece, x: ${square.props.x}, y: ${square.props.y}`)\r\n                    continue\r\n                }\r\n\r\n                //don't collect possible moves if it's white to move and you're trying to move a black piece\r\n                if (isColorBlack(color) && IsWhiteToMove) {\r\n                    //console.log(`Skipping because it's white to move and you're moving a black piece, x: ${square.props.x}, y: ${square.props.y}`)\r\n                    continue\r\n                }\r\n\r\n                //console.log(`Getting possible moves, x: ${square.props.x}, y: ${square.props.y}`)\r\n                //get all possible moves for each piece\r\n                possiblePieceMoves.push(getPawnsPossibleMoves(square))\r\n                possiblePieceMoves.push(getRooksPossibleMoves(square))\r\n                possiblePieceMoves.push(getBishopPossibleMoves(square))\r\n                possiblePieceMoves.push(getKnightPossibleMoves(square))\r\n                possiblePieceMoves.push(getKingPossibleMoves(square))\r\n                possiblePieceMoves.push(getQueenPossibleMoves(square))\r\n\r\n                //filter empty moves\r\n                possiblePieceMoves = removeEmptyMoves(possiblePieceMoves);\r\n\r\n                //filter possible moves\r\n                possiblePieceMoves = filterMovesIfInCheck(possiblePieceMoves)\r\n                possiblePieceMoves = filterMovesThatAllowIllegalCastling(possiblePieceMoves)\r\n            }\r\n        }\r\n\r\n        console.log(\"Possible Moves:\", possiblePieceMoves);\r\n        console.log('Moves count', possiblePieceMoves.reduce((sum, pieceMove) => sum + pieceMove.moves.length, 0))\r\n        PossibleMoves.splice(0, PossibleMoves.length, ...possiblePieceMoves);\r\n        updatePossibleMovesVisually()\r\n    }\r\n\r\n    //renders the board\r\n    return (\r\n        <>\r\n            <div className=\"chessGrid\">\r\n                {boardSquares.map((sqr) => sqr)}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Board"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}