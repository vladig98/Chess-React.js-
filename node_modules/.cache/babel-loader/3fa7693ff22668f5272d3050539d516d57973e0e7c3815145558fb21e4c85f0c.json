{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vladi Gotsin\\\\Desktop\\\\react\\\\Chess-React.js-\\\\src\\\\Board.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef, createContext } from \"react\";\nimport React from 'react';\nimport Square from \"./Square.js\";\nimport { ConvertFENPieceToPiece, ConvertFenToString, UpdatePosition, ParseFEN, IsDigit } from \"./HelperMethods.js\";\nimport { DIM, PIECE_DELIMITER, KINGS, COLORS, PIECES, CastlingRights, EnPassant, CurrentSquareSelection, PossibleMoves, HalfMoves, FullMoves, IsWhiteToMove, updateIsWhiteToMove, updateHalfMoves, updateFullMoves, BoardPosition } from \"./globalVariables.js\";\n\n/*\r\nTODO:\r\nCode Reusability: refactor some of the repeated code and generate new functions if needed\r\nConsistency and Naming: Have better and more consistent names for variables and functions\r\nDocumentation: add more comments to understand what is going on\r\nTesting: add unit tests\r\nImplementations: add promotions, implement endgames (mate, stalemate, draws repeation, 50 moves rule)\r\nBugs: Fix bugs (if any)\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Board() {\n  _s();\n  //<summary>\n  //FEN - Forsyth-Edwards Notation\n  //small letters - black pieces\n  //capital letters - white pieces\n  //numbers - empty board squares\n  //(/) - separates each board row\n  //first letter after the board indicates whose turn it is to move (w - white, b - black)\n  //next letters indicate castling rights, k - kingside, q - queenside, (-) - no castling allowed for any side\n  //en passant square - when a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square\n  //the number of half turns (white moves, then black moves = 2 half moves) that were made without a pawn move or a capture of a piece (50-move rule when reaches 100)\n  //the number of full moves (white moves, then black moves = 1 full move); increase after every black half move\n  //</summary>\n  //starting position\n  //'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\n  //r1bqk2r/pppp1ppp/2n5/8/1bBPn3/2N2N2/PP3PPP/R1BQK2R w KQkq - 0 8\n  //r1bqk2r/pppp1ppp/2n2n2/2b5/2BPP3/5N2/PP3PPP/RNBQK2R b KQkq - 0 6\n  const [fen, setFen] = useState('r1bqk2r/pppp1ppp/2n2n2/2b5/2BPP3/5N2/PP3PPP/RNBQK2R b KQkq - 0 6');\n  const [isPossibleMove, setIsPossibleMove] = useState([]);\n  const [boardSquares, setBoardSquares] = useState([]);\n  const isPossibleMoveRef = useRef(isPossibleMove);\n  const boardSquaresRef = useRef(boardSquares);\n  const updateIsPossibleMove = (key, value) => {\n    setIsPossibleMove(prevState => prevState.map(item => item.key === key ? {\n      ...item,\n      value: value\n    } : item));\n  };\n  useEffect(() => {\n    isPossibleMoveRef.current = isPossibleMove;\n    fenParser(false);\n  }, [isPossibleMove]);\n\n  //called when the page loads.we need to parse the FEN to fill in the board\n  useEffect(() => {\n    resetPossibleMoves();\n    fenParser();\n  }, []);\n  useEffect(() => {\n    fenParser();\n  }, [fen]);\n  useEffect(() => {\n    boardSquaresRef.current = boardSquares;\n  }, [boardSquares]);\n  function resetPossibleMoves() {\n    const initialIsPossibleMove = [];\n    for (let i = 0; i < DIM; i++) {\n      for (let j = 0; j < DIM; j++) {\n        initialIsPossibleMove.push({\n          key: `${i}-${j}`,\n          value: false\n        });\n      }\n    }\n    setIsPossibleMove(initialIsPossibleMove);\n  }\n  function generateANewFen() {\n    let fenString = '';\n    for (let i = 0; i < BoardPosition.length; i++) {\n      let row = BoardPosition[i];\n      for (let j = 0; j < row.length; j++) {\n        let column = row[j];\n        if (column == ' ') {\n          if (IsDigit(fenString[fenString.length - 1])) {\n            let lastChar = fenString.slice(-1);\n            fenString = fenString.substring(0, fenString.length - 1);\n            fenString += Number(lastChar) + 1;\n          } else {\n            fenString += '1';\n          }\n        } else {\n          fenString += column;\n        }\n      }\n      fenString += '/';\n    }\n    fenString = fenString.substring(0, fenString.length - 1); //removes the last slash\n\n    fenString += IsWhiteToMove ? ' w' : ' b';\n    let castlingRules = '';\n    castlingRules += CastlingRights.whiteShortCastle ? 'K' : '';\n    castlingRules += CastlingRights.whiteLongCastle ? 'Q' : '';\n    castlingRules += CastlingRights.blackShortCastle ? 'k' : '';\n    castlingRules += CastlingRights.blackLongCastle ? 'q' : '';\n    fenString += castlingRules.length == 0 ? ' -' : ' ' + castlingRules;\n    fenString += EnPassant.isPossible ? ' ' + convertLocationToCoordinates(EnPassant.x, EnPassant.y) : ' -';\n    fenString += ' ' + HalfMoves;\n    fenString += ' ' + FullMoves;\n    setFen(fenString);\n  }\n\n  //parses the FEN for the initial board state\n  function fenParser(updateBoardPosition = true) {\n    //parses the FEN string to variables\n    const {\n      fenBoard,\n      fenTurn,\n      fenCastling,\n      fenEnPassant,\n      fenHalfMoves,\n      fenFullMoves\n    } = ParseFEN(fen);\n    const fenRows = fenBoard.split('/');\n    let arr = [];\n\n    //splits all rows and creates a matrix for the board\n    for (let row of fenRows) {\n      const tokens = row.split('');\n      let r = [];\n      for (let i = 0; i < tokens.length; i++) {\n        if (Number(tokens[i])) {\n          for (let j = 0; j < Number(tokens[i]); j++) {\n            r.push(' ');\n          }\n        } else {\n          r.push(tokens[i]);\n        }\n      }\n      arr.push(r);\n    }\n\n    //generates a Square component for each element in the matrix created above\n    let squareColorIsWhite = true;\n    let squares = [];\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0; j < arr[i].length; j++) {\n        let color = squareColorIsWhite ? \"\" : \"dark\";\n        const possibleMoveStatus = isPossibleMoveRef.current.find(item => item.key === `${i}-${j}`);\n\n        //boardSquares.push(\n        squares.push( /*#__PURE__*/_jsxDEV(Square, {\n          getPossibleMoves: getPossibleMoves,\n          x: i,\n          y: j,\n          piece: ConvertFENPieceToPiece(arr[i][j]),\n          color: color,\n          movePiece: movePiece,\n          isPossibleMove: possibleMoveStatus ? possibleMoveStatus.value : false,\n          resetPossibleMoves: resetPossibleMoves\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this));\n        squareColorIsWhite = !squareColorIsWhite;\n      }\n      squareColorIsWhite = !squareColorIsWhite;\n    }\n    setBoardSquares(squares);\n\n    // BoardSquares.splice(0, BoardSquares.length);\n    // BoardSquares.push(...squares)\n    // console.log(BoardSquares)\n\n    if (fenCastling.includes('K')) {\n      CastlingRights.whiteShortCastle = true;\n    }\n    if (fenCastling.includes('Q')) {\n      CastlingRights.whiteLongCastle = true;\n    }\n    if (fenCastling.includes('k')) {\n      CastlingRights.blackShortCastle = true;\n    }\n    if (fenCastling.includes('q')) {\n      CastlingRights.blackLongCastle = true;\n    }\n    fenTurn == 'w' ? updateIsWhiteToMove(true) : updateIsWhiteToMove(false);\n    updateHalfMoves(fenHalfMoves);\n    updateFullMoves(fenFullMoves);\n    if (updateBoardPosition) {\n      BoardPosition.splice(0, BoardPosition.length, ...arr);\n    }\n    if (!fenEnPassant.includes(PIECE_DELIMITER)) {\n      let location = convertCoordinatesToLocation(fenEnPassant);\n      EnPassant.isPossible = true;\n      EnPassant.x = location.x;\n      EnPassant.y = location.y;\n    }\n  }\n  function isWhiteInCheck(square, pseudo, currentSquare = null) {\n    let squares = boardSquaresRef.current;\n    if (pseudo) {\n      const updatedSquares = squares.map(s => {\n        if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\n          // Return a new Square component with the updated piece\n          return /*#__PURE__*/React.cloneElement(s, {\n            piece: pseudo.props.piece\n          });\n        } else if (currentSquare && s.props.x === currentSquare.props.x && s.props.y === currentSquare.props.y) {\n          return /*#__PURE__*/React.cloneElement(s, {\n            piece: ''\n          });\n        } else {\n          // For other squares, return the original Square component\n          return s;\n        }\n      });\n\n      // if (pseudo && currentSquare) {\n      //     if (pseudo.props.x == 4 && pseudo.props.y == 4 && currentSquare.props.x == 5 && currentSquare.props.y == 2) {\n      //         console.log(`Squares: ${JSON.stringify(squares)}, UpdatedSquares: ${JSON.stringify(updatedSquares)}`)\n      //     }\n      // }\n\n      squares = updatedSquares;\n    }\n\n    //check for attackers in front of the white king\n    for (let i = square.props.x - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from behind\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers behind the white king\n    for (let i = square.props.x + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the front\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the left of the white king\n    for (let i = square.props.y - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the left\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the right of the white king\n    for (let i = square.props.y + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the right\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == -1) {\n                //console.log(\"in check from top half of counterclockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from top half of counterclockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == 1) {\n                //console.log(\"in check from top half of clockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from top half of clockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for knights check\n    let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1);\n    let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1);\n    let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1);\n    let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1);\n    let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2);\n    let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2);\n    let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2);\n    let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2);\n    if (knight1) {\n      if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight1.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 1\")\n          return true;\n        }\n      }\n    }\n    if (knight2) {\n      if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight2.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 2\")\n          return true;\n        }\n      }\n    }\n    if (knight3) {\n      if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight3.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 3\")\n          return true;\n        }\n      }\n    }\n    if (knight4) {\n      if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight4.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 4\")\n          return true;\n        }\n      }\n    }\n    if (knight5) {\n      if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight5.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 5\")\n          return true;\n        }\n      }\n    }\n    if (knight6) {\n      if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight6.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 6\")\n          return true;\n        }\n      }\n    }\n    if (knight7) {\n      if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight7.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 7\")\n          return true;\n        }\n      }\n    }\n    if (knight8) {\n      if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight8.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 8\")\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  function isBlackInCheck(square, pseudo, currentSquare = null) {\n    let squares = boardSquaresRef.current;\n    if (pseudo) {\n      const updatedSquares = squares.map(s => {\n        if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\n          // Return a new Square component with the updated piece\n          return /*#__PURE__*/React.cloneElement(s, {\n            piece: pseudo.props.piece\n          });\n        } else if (currentSquare && s.props.x === currentSquare.props.x && s.props.y === currentSquare.props.y) {\n          return /*#__PURE__*/React.cloneElement(s, {\n            piece: ''\n          });\n        } else {\n          // For other squares, return the original Square component\n          return s;\n        }\n      });\n      squares = updatedSquares;\n    }\n\n    //check for attackers behind the black king\n    for (let i = square.props.x - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from behind\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers in front of the black king\n    for (let i = square.props.x + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the front\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the left of the black king\n    for (let i = square.props.y - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the left\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the right of the black king\n    for (let i = square.props.y + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the right\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            //console.log(\"in check from top half of counterclockwise diagonal\")\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == 1) {\n                //console.log(\"in check from bottom half of counterclockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from bottom half of counterclockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            //console.log(\"in check from top half of clockwise diagonal\")\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == -1) {\n                //console.log(\"in check from bottom half of clockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from bottom half of clockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for knights check\n    let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1);\n    let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1);\n    let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1);\n    let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1);\n    let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2);\n    let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2);\n    let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2);\n    let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2);\n    if (knight1) {\n      if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight1.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 1\")\n          return true;\n        }\n      }\n    }\n    if (knight2) {\n      if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight2.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 2\")\n          return true;\n        }\n      }\n    }\n    if (knight3) {\n      if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight3.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 3\")\n          return true;\n        }\n      }\n    }\n    if (knight4) {\n      if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight4.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 4\")\n          return true;\n        }\n      }\n    }\n    if (knight5) {\n      if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight5.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 5\")\n          return true;\n        }\n      }\n    }\n    if (knight6) {\n      if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight6.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 6\")\n          return true;\n        }\n      }\n    }\n    if (knight7) {\n      if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight7.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 7\")\n          return true;\n        }\n      }\n    }\n    if (knight8) {\n      if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight8.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 8\")\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  function movePiece(x, y) {\n    let squares = boardSquares;\n    let position = BoardPosition;\n    let targetSquare = getATargetSquareByLocation(x, y);\n    let square = squares.find(s => s.props.x == CurrentSquareSelection.x && s.props.y == CurrentSquareSelection.y);\n    let color = getPieceColor(square);\n    let piece = getPiece(square);\n\n    //disable castling if the king moves\n    if (piece == PIECES.KING) {\n      if (isColorWhite(color)) {\n        CastlingRights.whiteLongCastle = false;\n        CastlingRights.whiteShortCastle = false;\n      } else {\n        CastlingRights.blackLongCastle = false;\n        CastlingRights.blackShortCastle = false;\n      }\n    }\n\n    //disable castling if the rook moves\n    if (piece == PIECES.ROOK) {\n      if (square.props.x == 7 && square.props.y == 7) {\n        CastlingRights.whiteShortCastle = false;\n      }\n      if (square.props.x == 0 && square.props.y == 7) {\n        CastlingRights.blackShortCastle = false;\n      }\n      if (square.props.x == 7 && square.props.y == 0) {\n        CastlingRights.whiteLongCastle = false;\n      }\n      if (square.props.x == 0 && square.props.y == 0) {\n        CastlingRights.blackLongCastle = false;\n      }\n    }\n    let p = UpdatePosition(square, targetSquare, position);\n\n    //capturing enPassant\n    // if (EnPassant.isPossible) {\n    //     let enPassantTargetSquare = color == COLORS.WHITE ? squares.find(s => s.props.x == x + 1 && s.props.y == y) : squares.find(s => s.props.x == x - 1 && s.props.y == y)\n    //     let enPassantSquare = <Square x={square.props.x} y={square.props.y} piece={\"\"} />\n\n    //     p = UpdatePosition(enPassantSquare, enPassantTargetSquare, p)\n    // }\n\n    //TODO: ensure p matches the new board Position format\n    //setBoardPosition(p)\n    const updatedBoardPosition = p.map(row => [...row]);\n    BoardPosition.splice(0, BoardPosition.length, ...updatedBoardPosition);\n    PossibleMoves.splice(0, PossibleMoves.length);\n    updateIsWhiteToMove(!IsWhiteToMove);\n\n    //enabling en passant\n    if (piece == PIECES.PAWN) {\n      if (Math.abs(square.props.x - targetSquare.props.x) == 2) {\n        if (square.props.piece.split(PIECE_DELIMITER)[0] == COLORS.WHITE) {\n          EnPassant.isPossible = true;\n          EnPassant.x = square.props.x - 1;\n          EnPassant.y = square.props.y;\n        } else {\n          EnPassant.isPossible = true;\n          EnPassant.x = square.props.x + 1;\n          EnPassant.y = square.props.y;\n        }\n\n        // let enPassant1 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y - 1)\n        // let enPassant2 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y + 1)\n\n        // if (enPassant1) {\n        //     if (enPassant1.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\n        //         if (enPassant1.props.piece.split(PIECE_DELIMITER)[0] != color) {\n        //             EnPassant.isPossible = true\n        //             EnPassant.x = targetSquare.props.x\n        //             EnPassant.y = targetSquare.props.y\n        //             return\n        //         }\n        //     }\n        // }\n\n        // if (enPassant2) {\n        //     if (enPassant2.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\n        //         if (enPassant2.props.piece.split(PIECE_DELIMITER)[0] != color) {\n        //             EnPassant.isPossible = true\n        //             EnPassant.x = targetSquare.props.x\n        //             EnPassant.y = targetSquare.props.y\n        //             return\n        //         }\n        //     }\n        // }\n      } else {\n        EnPassant.isPossible = false;\n        EnPassant.x = -1;\n        EnPassant.y = -1;\n      }\n    } else {\n      EnPassant.isPossible = false;\n      EnPassant.x = -1;\n      EnPassant.y = -1;\n    }\n    updateFullMoves(FullMoves + 1);\n    generateANewFen();\n  }\n\n  //updates the state with the selectedSquare X coordinates\n  function updateSelectedSquareX(x) {\n    setSelectedSquareX(x);\n  }\n\n  //updates the state with the selectedSquare Y coordinates\n  function updateSelectedSquareY(y) {\n    setSelectedSquareY(y);\n  }\n\n  //retrieves a speecific square from the board using x and y coordinates (location)\n  function getATargetSquareByLocation(x, y) {\n    return boardSquaresRef.current.find(s => s.props.x === x && s.props.y === y);\n  }\n\n  //retrieves a speecific square from the board that has a certain piece\n  function getATargetSquareByPiece(piece) {\n    return boardSquaresRef.current.find(s => s.props.piece == piece);\n  }\n\n  //check if a specific square has a piece assigned to it\n  function isSquareAvailable(square) {\n    return square && !square.props.piece;\n  }\n\n  //checks if a pawn is on its starting square and allows a 2-squares move\n  function isPawnOnStartingSquare(pawn) {\n    return isColorWhite(pawn.props.piece.split(PIECE_DELIMITER)[0]) ? pawn.props.x == 6 : pawn.props.x == 1;\n  }\n\n  //checks if two pieces have the same color\n  function areSameColor(square1, square2) {\n    if (!square1 || !square2) {\n      return;\n    }\n    let color1 = square1.props.piece.split(PIECE_DELIMITER)[0];\n    let color2 = square2.props.piece.split(PIECE_DELIMITER)[0];\n    return color1 == color2;\n  }\n\n  //checks if a square contains a certain piece\n  function doesTheSquareHasThePiece(square, piece) {\n    let p = getPiece(square);\n    return p == piece;\n  }\n\n  //cheks if a pawn is on En Passant square\n  function isPawnOnEnPassantSquare(pawn) {\n    return isColorWhite(pawn.props.piece.split(PIECE_DELIMITER)[0]) ? pawn.props.x == 3 : pawn.props.x == 4;\n  }\n\n  //checks if a color is white\n  function isColorWhite(color) {\n    return color == COLORS.WHITE;\n  }\n\n  //checks if a color is black\n  function isColorBlack(color) {\n    return color == COLORS.BLACK;\n  }\n\n  //checks if white is allowed to long castle\n  function checkIfCanWhiteLongCastle() {\n    return CastlingRights.whiteLongCastle && BoardPosition[7][0] == 'R' && BoardPosition[7][1] == ' ' && BoardPosition[7][2] == ' ' && BoardPosition[7][3] == ' ';\n  }\n\n  //checks if white is allowed to short castle\n  function checkIfCanWhiteShortCastle() {\n    return CastlingRights.whiteShortCastle && BoardPosition[7][7] == 'R' && BoardPosition[7][6] == ' ' && BoardPosition[7][5] == ' ';\n  }\n\n  //checks if black is allowed to long castle\n  function checkIfCanBlackLongCastle() {\n    return CastlingRights.blackLongCastle && BoardPosition[0][0] == 'r' && BoardPosition[0][1] == ' ' && BoardPosition[0][2] == ' ' && BoardPosition[0][3] == ' ';\n  }\n\n  //checks if black is allowed to short castle\n  function checkIfCanBlackShortCastle() {\n    return CastlingRights.blackShortCastle && BoardPosition[7][7] == 'r' && BoardPosition[7][6] == ' ' && BoardPosition[7][5] == ' ';\n  }\n\n  //converts board coordinates to X and Y position on the board, e.g., a8 = 0, 0\n  function convertCoordinatesToLocation(coordinates) {\n    let tokens = coordinates.split('');\n\n    //skip invalid coordinates\n    if (tokens.length != 2) {\n      return;\n    }\n    let letter = tokens[0].toString().toUpperCase();\n    let number = tokens[1];\n\n    //65 is the ASCII code for capital A which will give us 0 if we have A as a coordinate; A-F will give us 0-7 for x\n    //reverse the numbers since we draw the board top down\n    return {\n      x: DIM - Number(number),\n      y: letter.charCodeAt(0) - 65\n    };\n  }\n  function convertLocationToCoordinates(x, y) {\n    return `${String.fromCharCode(y + 65)}${DIM - x}`.toLowerCase();\n  }\n  function compareIfTwoSquaresAreTheSame(square1, square2) {\n    if (!square1 || !square2) {\n      return false;\n    }\n    return square1.props.x == square2.props.x && square1.props.y == square2.props.y;\n  }\n\n  //gets all possible moves for a pawn\n  function getPawnsPossibleMoves(square) {\n    if (!doesTheSquareHasThePiece(square, PIECES.PAWN)) {\n      return;\n    }\n    let color = getPieceColor(square); //get the piece color\n\n    let moves = [];\n    let position1Offset = 1;\n    let position2Offset = 2;\n\n    //flips the direction if the color is white\n    if (isColorWhite(color)) {\n      position1Offset *= -1;\n      position2Offset *= -1;\n    }\n\n    //get all forwards moves + the double move at the start\n    let targetPiece1 = getATargetSquareByLocation(square.props.x + position1Offset, square.props.y); //move pawn 1 square ahead\n    let targetPiece2 = getATargetSquareByLocation(square.props.x + position2Offset, square.props.y); //move pawn 2 squares ahead\n\n    //get potential neighbors to capture\n    let neighbor1 = getATargetSquareByLocation(square.props.x + position1Offset, square.props.y + position1Offset);\n    let neighbor2 = getATargetSquareByLocation(square.props.x + position1Offset, square.props.y + position1Offset * -1);\n\n    //get the En Passant coordinates\n    let enPassantSquare = EnPassant.isPossible ? getATargetSquareByLocation(EnPassant.x, EnPassant.y) : '';\n    let isTheSquareInFrontAvailable = isSquareAvailable(targetPiece1);\n\n    //push the one move forward for a pawn\n    if (isTheSquareInFrontAvailable) {\n      moves.push(targetPiece1);\n    }\n\n    //two moves are allowed only if the two squares above are free/empty\n    //allowed if pawn hasn't moved before\n    if (isTheSquareInFrontAvailable && isSquareAvailable(targetPiece2) && isPawnOnStartingSquare(square)) {\n      moves.push(targetPiece2);\n    }\n\n    //push neighbour if there is a piece to capture and it's a different color than the pawn\n    if (!isSquareAvailable(neighbor1) && !areSameColor(neighbor1, square)) {\n      moves.push(neighbor1);\n    }\n\n    //push neighbour if there is a piece to capture and it's a different color than the pawn\n    if (!isSquareAvailable(neighbor2) && !areSameColor(neighbor2, square)) {\n      moves.push(neighbor2);\n    }\n\n    //add En Passant\n    if (enPassantSquare && (compareIfTwoSquaresAreTheSame(enPassantSquare, neighbor1) || compareIfTwoSquaresAreTheSame(enPassantSquare, neighbor2))) {\n      moves.push(enPassantSquare);\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a rook\n  function getRooksPossibleMoves(square, skip = true) {\n    if (!doesTheSquareHasThePiece(square, PIECES.ROOK) && skip) {\n      return;\n    }\n    let moves = [];\n    for (let i = square.props.x + 1; i < DIM; i++) {\n      let targetSquare = getATargetSquareByLocation(i, square.props.y);\n      if (isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    for (let i = square.props.x - 1; i >= 0; i--) {\n      let targetSquare = getATargetSquareByLocation(i, square.props.y);\n      if (isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    for (let i = square.props.y + 1; i < DIM; i++) {\n      let targetSquare = getATargetSquareByLocation(square.props.x, i);\n      if (isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    for (let i = square.props.y - 1; i >= 0; i--) {\n      let targetSquare = getATargetSquareByLocation(square.props.x, i);\n      if (isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a bishop\n  function getBishopPossibleMoves(square, skip = true) {\n    if (!doesTheSquareHasThePiece(square, PIECES.BISHOP) && skip) {\n      return;\n    }\n    let moves = [];\n    let counter = 0;\n    let conside1 = true;\n    let conside2 = true;\n    let conside3 = true;\n    let conside4 = true;\n    for (let i = 1; i <= DIM; i++) {\n      if (!conside1 && !conside2 && !conside3 && !conside4) {\n        break;\n      }\n      let target1 = conside1 ? getATargetSquareByLocation(square.props.x - i, square.props.y - i) : null;\n      let target2 = conside2 ? getATargetSquareByLocation(square.props.x - i, square.props.y + i) : null;\n      let target3 = conside3 ? getATargetSquareByLocation(square.props.x + i, square.props.y + i) : null;\n      let target4 = conside4 ? getATargetSquareByLocation(square.props.x + i, square.props.y - i) : null;\n      if (target1 && isSquareAvailable(target1)) {\n        moves.push(target1);\n      } else {\n        if (!areSameColor(square, target1)) {\n          moves.push(target1);\n        }\n        conside1 = false;\n      }\n      if (target2 && isSquareAvailable(target2)) {\n        moves.push(target2);\n      } else {\n        if (!areSameColor(square, target2)) {\n          moves.push(target2);\n        }\n        conside2 = false;\n      }\n      if (target3 && isSquareAvailable(target3)) {\n        moves.push(target3);\n      } else {\n        if (!areSameColor(square, target3)) {\n          moves.push(target3);\n        }\n        conside3 = false;\n      }\n      if (target4 && isSquareAvailable(target4)) {\n        moves.push(target4);\n      } else {\n        if (!areSameColor(square, target4)) {\n          moves.push(target4);\n        }\n        conside4 = false;\n      }\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a knight\n  function getKnightPossibleMoves(square) {\n    if (!doesTheSquareHasThePiece(square, PIECES.KNIGHT)) {\n      return;\n    }\n    let offset = 1;\n    let doubleOffset = 2 * offset;\n    let moves = [];\n    for (let i = 0; i < 8; i++) {\n      if (i != 0 && i % 2 == 0) {\n        offset *= -1;\n      }\n      let targetX = square.props.x + offset;\n      let targetY = square.props.y + doubleOffset;\n      let target = getATargetSquareByLocation(targetX, targetY);\n      if (target && isSquareAvailable(target)) {\n        moves.push(target);\n      } else {\n        if (!areSameColor(square, target)) {\n          moves.push(target);\n        }\n      }\n      doubleOffset *= -1;\n      if (i == 3) {\n        offset *= 2;\n        doubleOffset /= 2;\n      }\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a king\n  function getKingPossibleMoves(square) {\n    if (!doesTheSquareHasThePiece(square, PIECES.KING)) {\n      return;\n    }\n    let moves = [];\n    let color = getPieceColor(square);\n\n    //gets all possible 1-square moves for the king\n    for (let i = -1; i < 2; i++) {\n      for (let j = -1; j < 2; j++) {\n        let targetPiece = getATargetSquareByLocation(square.props.x + i, square.props.y + j);\n        if (targetPiece && isSquareAvailable(targetPiece)) {\n          moves.push(targetPiece);\n        } else {\n          if (!areSameColor(square, targetPiece)) {\n            moves.push(targetPiece);\n          }\n        }\n      }\n    }\n\n    //Castling logic\n    const longCastleSquare = getATargetSquareByLocation(square.props.x, square.props.y - 2);\n    const shortCastleSquare = getATargetSquareByLocation(square.props.x, square.props.y + 2);\n    if (isColorWhite(color) && checkIfCanWhiteLongCastle()) {\n      moves.push(longCastleSquare);\n    }\n    if (isColorWhite(color) && checkIfCanWhiteShortCastle()) {\n      moves.push(shortCastleSquare);\n    }\n    if (isColorBlack(color) && checkIfCanBlackLongCastle()) {\n      moves.push(longCastleSquare);\n    }\n    if (isColorBlack(color) && checkIfCanBlackShortCastle()) {\n      moves.push(shortCastleSquare);\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a queen\n  function getQueenPossibleMoves(square) {\n    if (!doesTheSquareHasThePiece(square, PIECES.QUEEN)) {\n      return;\n    }\n    let moves = [];\n\n    //a queen has the same moves as a bishop and a rook\n    const rookMoves = getRooksPossibleMoves(square, false).moves;\n    const bishopMoves = getBishopPossibleMoves(square, false).moves;\n\n    // Concatenate the arrays of moves\n    moves.push(...rookMoves, ...bishopMoves);\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets the piece color\n  function getPieceColor(square) {\n    return square.props.piece.split(PIECE_DELIMITER)[0];\n  }\n\n  //gets the piece\n  function getPiece(square) {\n    return square.props.piece.split(PIECE_DELIMITER)[1];\n  }\n\n  //removes moves that do not deal with a check\n  function filterMovesIfInCheck(possibleMoves) {\n    let blackKing = getATargetSquareByPiece(KINGS.BLACK_KING); //get the black king\n    let whiteKing = getATargetSquareByPiece(KINGS.WHITE_KING); //get the white king\n\n    for (let i = 0; i < possibleMoves.length; i++) {\n      for (let j = 0; j < possibleMoves[i].moves.length; j++) {\n        if (possibleMoves[i].piece.props.piece == KINGS.BLACK_KING) {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].moves[j].props.x,\n            y: possibleMoves[i].moves[j].props.y,\n            piece: \"black-king\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1317,\n            columnNumber: 32\n          }, this);\n          let pseudo = /*#__PURE__*/_jsxDEV(Square, {\n            x: blackKing.props.x,\n            y: blackKing.props.y,\n            piece: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1318,\n            columnNumber: 34\n          }, this);\n          let isInCheck = isBlackInCheck(move, pseudo);\n          if (isInCheck) {\n            possibleMoves[i].moves.splice(j, 1);\n            j--;\n          }\n        } else if (possibleMoves[i].piece.props.piece == KINGS.WHITE_KING) {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].moves[j].props.x,\n            y: possibleMoves[i].moves[j].props.y,\n            piece: \"white-king\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1326,\n            columnNumber: 32\n          }, this);\n          let pseudo = /*#__PURE__*/_jsxDEV(Square, {\n            x: whiteKing.props.x,\n            y: whiteKing.props.y,\n            piece: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1327,\n            columnNumber: 34\n          }, this);\n          let isInCheck = isWhiteInCheck(move, pseudo);\n          if (isInCheck) {\n            possibleMoves[i].moves.splice(j, 1);\n            j--;\n          }\n        } else {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].moves[j].props.x,\n            y: possibleMoves[i].moves[j].props.y,\n            piece: possibleMoves[i].piece.props.piece\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1335,\n            columnNumber: 32\n          }, this);\n          let isBlackInCheck = isBlackInCheck(blackKing, move, possibleMoves[i].piece);\n          let isWhitteInCheck = isWhiteInCheck(whiteKing, move, possibleMoves[i].piece);\n          let isBlackCurrenttlyInCheck = isBlackInCheck(blackKing, null);\n          let isWhiteCurrentlyInCheck = isWhiteInCheck(whiteKing, null);\n          if (isBlackInCheck && isBlackCurrenttlyInCheck) {\n            possibleMoves[i].moves.splice(j, 1);\n            j--;\n          }\n          if (isBlackInCheck && isBlackCurrenttlyInCheck) {\n            possibleMoves[i].moves.splice(j, 1);\n            j--;\n          }\n        }\n      }\n    }\n    return possibleMoves;\n  }\n\n  //removes moves that allow illigal castling (castles through check for example)\n  function filterMovesThatAllowIllegalCastling(possibleMoves) {\n    let blackKing = getATargetSquareByPiece(KINGS.BLACK_KING); //get the black king\n    let whiteKing = getATargetSquareByPiece(KINGS.WHITE_KING); //get the white king\n\n    for (let i = 0; i < possibleMoves.length; i++) {\n      let whiteCastle1 = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 6); //sqaure where king will be after short castle (white)\n      let whiteCastle2 = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 2); //sqaure where king will be after long castle (white)\n      let blackCastle1 = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 6); //square where king will be after shot castle (black)\n      let blackCastle2 = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 2); //square where king will be after long castle (black)\n\n      if (possibleMoves[i].piece == blackKing || possibleMoves[i].piece == whiteKing) {\n        if (whiteCastle1) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 5);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n        if (whiteCastle2) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 3);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n        if (blackCastle1) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 5);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n        if (blackCastle2) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 3);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n      }\n\n      //prevents black to castle if in check\n      if (isBlackInCheck(blackKing)) {\n        if (blackCastle1) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(blackCastle1), 1);\n        }\n        if (blackCastle2) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(blackCastle2), 1);\n        }\n      }\n\n      //prevents white to castle if in check\n      if (isWhiteInCheck(whiteKing)) {\n        if (whiteCastle1) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(whiteCastle1), 1);\n        }\n        if (whiteCastle2) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(whiteCastle2), 1);\n        }\n      }\n    }\n    return possibleMoves;\n  }\n\n  //removes empty/undefined values for generated moves\n  function removeEmptyMoves(possibleMoves) {\n    for (let i = 0; i < possibleMoves.length; i++) {\n      if (!possibleMoves[i]) {\n        possibleMoves.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (possibleMoves[i].moves.length == 0) {\n        possibleMoves.splice(i, 1);\n        i--;\n        continue;\n      }\n      for (let j = 0; j < possibleMoves[i].moves.length; j++) {\n        if (!possibleMoves[i].moves[j]) {\n          possibleMoves[i].moves.splice(j, 1);\n          j--;\n        }\n      }\n    }\n    return possibleMoves;\n  }\n  function updatePossibleMovesVisually() {\n    for (let i = 0; i < PossibleMoves.length; i++) {\n      if (PossibleMoves[i].piece.props.x == CurrentSquareSelection.x && PossibleMoves[i].piece.props.y == CurrentSquareSelection.y) {\n        for (let j = 0; j < PossibleMoves[i].moves.length; j++) {\n          updateIsPossibleMove(`${PossibleMoves[i].moves[j].props.x}-${PossibleMoves[i].moves[j].props.y}`, true);\n        }\n      }\n    }\n  }\n\n  //gets all possible/legal moves\n  function getPossibleMoves() {\n    //let square = getATargetSquareByLocation(x, y)\n    let possiblePieceMoves = [];\n    let squares = boardSquares;\n    for (let i = 0; i < squares.length; i++) {\n      let square = squares[i];\n\n      //if the square has a piece\n      if (square.props.piece) {\n        let color = getPieceColor(square); //get the piece color\n\n        //don't collect possible moves if it's black to move and you're trying to move a white piece\n        if (isColorWhite(color) && !IsWhiteToMove) {\n          //console.log(`Skipping because it's black to move and you're moving a white piece, x: ${square.props.x}, y: ${square.props.y}`)\n          continue;\n        }\n\n        //don't collect possible moves if it's white to move and you're trying to move a black piece\n        if (isColorBlack(color) && IsWhiteToMove) {\n          //console.log(`Skipping because it's white to move and you're moving a black piece, x: ${square.props.x}, y: ${square.props.y}`)\n          continue;\n        }\n\n        //console.log(`Getting possible moves, x: ${square.props.x}, y: ${square.props.y}`)\n        //get all possible moves for each piece\n        possiblePieceMoves.push(getPawnsPossibleMoves(square));\n        possiblePieceMoves.push(getRooksPossibleMoves(square));\n        possiblePieceMoves.push(getBishopPossibleMoves(square));\n        possiblePieceMoves.push(getKnightPossibleMoves(square));\n        possiblePieceMoves.push(getKingPossibleMoves(square));\n        possiblePieceMoves.push(getQueenPossibleMoves(square));\n\n        //filter empty moves\n        possiblePieceMoves = removeEmptyMoves(possiblePieceMoves);\n\n        //filter possible moves\n        possiblePieceMoves = filterMovesIfInCheck(possiblePieceMoves);\n        possiblePieceMoves = filterMovesThatAllowIllegalCastling(possiblePieceMoves);\n      }\n    }\n    console.log(\"Possible Moves:\", possiblePieceMoves);\n    console.log('Moves count', possiblePieceMoves.reduce((sum, pieceMove) => sum + pieceMove.moves.length, 0));\n    PossibleMoves.splice(0, PossibleMoves.length, ...possiblePieceMoves);\n    updatePossibleMovesVisually();\n  }\n\n  //renders the board\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessGrid\",\n      children: boardSquares.map(sqr => sqr)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1512,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Board, \"X6JVgLFbGV5KQVH0Jy1cjP5axRo=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useState","useEffect","useRef","createContext","React","Square","ConvertFENPieceToPiece","ConvertFenToString","UpdatePosition","ParseFEN","IsDigit","DIM","PIECE_DELIMITER","KINGS","COLORS","PIECES","CastlingRights","EnPassant","CurrentSquareSelection","PossibleMoves","HalfMoves","FullMoves","IsWhiteToMove","updateIsWhiteToMove","updateHalfMoves","updateFullMoves","BoardPosition","jsxDEV","_jsxDEV","Fragment","_Fragment","Board","_s","fen","setFen","isPossibleMove","setIsPossibleMove","boardSquares","setBoardSquares","isPossibleMoveRef","boardSquaresRef","updateIsPossibleMove","key","value","prevState","map","item","current","fenParser","resetPossibleMoves","initialIsPossibleMove","i","j","push","generateANewFen","fenString","length","row","column","lastChar","slice","substring","Number","castlingRules","whiteShortCastle","whiteLongCastle","blackShortCastle","blackLongCastle","isPossible","convertLocationToCoordinates","x","y","updateBoardPosition","fenBoard","fenTurn","fenCastling","fenEnPassant","fenHalfMoves","fenFullMoves","fenRows","split","arr","tokens","r","squareColorIsWhite","squares","color","possibleMoveStatus","find","getPossibleMoves","piece","movePiece","fileName","_jsxFileName","lineNumber","columnNumber","includes","splice","location","convertCoordinatesToLocation","isWhiteInCheck","square","pseudo","currentSquare","updatedSquares","s","props","cloneElement","knight1","knight2","knight3","knight4","knight5","knight6","knight7","knight8","isBlackInCheck","position","targetSquare","getATargetSquareByLocation","getPieceColor","getPiece","KING","isColorWhite","ROOK","p","updatedBoardPosition","PAWN","Math","abs","WHITE","updateSelectedSquareX","setSelectedSquareX","updateSelectedSquareY","setSelectedSquareY","getATargetSquareByPiece","isSquareAvailable","isPawnOnStartingSquare","pawn","areSameColor","square1","square2","color1","color2","doesTheSquareHasThePiece","isPawnOnEnPassantSquare","isColorBlack","BLACK","checkIfCanWhiteLongCastle","checkIfCanWhiteShortCastle","checkIfCanBlackLongCastle","checkIfCanBlackShortCastle","coordinates","letter","toString","toUpperCase","number","charCodeAt","String","fromCharCode","toLowerCase","compareIfTwoSquaresAreTheSame","getPawnsPossibleMoves","moves","position1Offset","position2Offset","targetPiece1","targetPiece2","neighbor1","neighbor2","enPassantSquare","isTheSquareInFrontAvailable","getRooksPossibleMoves","skip","getBishopPossibleMoves","BISHOP","counter","conside1","conside2","conside3","conside4","target1","target2","target3","target4","getKnightPossibleMoves","KNIGHT","offset","doubleOffset","targetX","targetY","target","getKingPossibleMoves","targetPiece","longCastleSquare","shortCastleSquare","getQueenPossibleMoves","QUEEN","rookMoves","bishopMoves","filterMovesIfInCheck","possibleMoves","blackKing","BLACK_KING","whiteKing","WHITE_KING","move","isInCheck","isWhitteInCheck","isBlackCurrenttlyInCheck","isWhiteCurrentlyInCheck","filterMovesThatAllowIllegalCastling","whiteCastle1","m","whiteCastle2","blackCastle1","blackCastle2","pieceAcross","indexOf","removeEmptyMoves","updatePossibleMovesVisually","possiblePieceMoves","console","log","reduce","sum","pieceMove","children","className","sqr","_c","$RefreshReg$"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/Chess-React.js-/src/Board.js"],"sourcesContent":["import { useState, useEffect, useRef, createContext } from \"react\";\r\nimport React from 'react';\r\nimport Square from \"./Square.js\"\r\nimport { ConvertFENPieceToPiece, ConvertFenToString, UpdatePosition, ParseFEN, IsDigit } from \"./HelperMethods.js\";\r\nimport {\r\n    DIM, PIECE_DELIMITER, KINGS, COLORS, PIECES,\r\n    CastlingRights, EnPassant, CurrentSquareSelection, PossibleMoves,\r\n    HalfMoves, FullMoves, IsWhiteToMove, updateIsWhiteToMove, updateHalfMoves,\r\n    updateFullMoves, BoardPosition\r\n} from \"./globalVariables.js\"\r\n\r\n\r\n/*\r\nTODO:\r\nCode Reusability: refactor some of the repeated code and generate new functions if needed\r\nConsistency and Naming: Have better and more consistent names for variables and functions\r\nDocumentation: add more comments to understand what is going on\r\nTesting: add unit tests\r\nImplementations: add promotions, implement endgames (mate, stalemate, draws repeation, 50 moves rule)\r\nBugs: Fix bugs (if any)\r\n*/\r\n\r\nfunction Board() {\r\n    //<summary>\r\n    //FEN - Forsyth-Edwards Notation\r\n    //small letters - black pieces\r\n    //capital letters - white pieces\r\n    //numbers - empty board squares\r\n    //(/) - separates each board row\r\n    //first letter after the board indicates whose turn it is to move (w - white, b - black)\r\n    //next letters indicate castling rights, k - kingside, q - queenside, (-) - no castling allowed for any side\r\n    //en passant square - when a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square\r\n    //the number of half turns (white moves, then black moves = 2 half moves) that were made without a pawn move or a capture of a piece (50-move rule when reaches 100)\r\n    //the number of full moves (white moves, then black moves = 1 full move); increase after every black half move\r\n    //</summary>\r\n    //starting position\r\n    //'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\r\n    //r1bqk2r/pppp1ppp/2n5/8/1bBPn3/2N2N2/PP3PPP/R1BQK2R w KQkq - 0 8\r\n    //r1bqk2r/pppp1ppp/2n2n2/2b5/2BPP3/5N2/PP3PPP/RNBQK2R b KQkq - 0 6\r\n    const [fen, setFen] = useState('r1bqk2r/pppp1ppp/2n2n2/2b5/2BPP3/5N2/PP3PPP/RNBQK2R b KQkq - 0 6')\r\n    const [isPossibleMove, setIsPossibleMove] = useState([])\r\n    const [boardSquares, setBoardSquares] = useState([])\r\n\r\n    const isPossibleMoveRef = useRef(isPossibleMove)\r\n    const boardSquaresRef = useRef(boardSquares)\r\n\r\n    const updateIsPossibleMove = (key, value) => {\r\n        setIsPossibleMove(prevState =>\r\n            prevState.map(item =>\r\n                item.key === key ? { ...item, value: value } : item\r\n            )\r\n        );\r\n    };\r\n\r\n    useEffect(() => {\r\n        isPossibleMoveRef.current = isPossibleMove;\r\n        fenParser(false);\r\n    }, [isPossibleMove])\r\n\r\n    //called when the page loads.we need to parse the FEN to fill in the board\r\n    useEffect(() => {\r\n        resetPossibleMoves()\r\n        fenParser()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        fenParser()\r\n    }, [fen])\r\n\r\n    useEffect(() => {\r\n        boardSquaresRef.current = boardSquares\r\n    }, [boardSquares])\r\n\r\n    function resetPossibleMoves() {\r\n        const initialIsPossibleMove = [];\r\n        for (let i = 0; i < DIM; i++) {\r\n            for (let j = 0; j < DIM; j++) {\r\n                initialIsPossibleMove.push({ key: `${i}-${j}`, value: false });\r\n            }\r\n        }\r\n        setIsPossibleMove(initialIsPossibleMove);\r\n    }\r\n\r\n    function generateANewFen() {\r\n        let fenString = ''\r\n\r\n        for (let i = 0; i < BoardPosition.length; i++) {\r\n            let row = BoardPosition[i]\r\n            for (let j = 0; j < row.length; j++) {\r\n                let column = row[j]\r\n\r\n                if (column == ' ') {\r\n                    if (IsDigit(fenString[fenString.length - 1])) {\r\n                        let lastChar = fenString.slice(-1)\r\n                        fenString = fenString.substring(0, fenString.length - 1)\r\n                        fenString += Number(lastChar) + 1\r\n                    } else {\r\n                        fenString += '1'\r\n                    }\r\n                } else {\r\n                    fenString += column\r\n                }\r\n            }\r\n            fenString += '/'\r\n        }\r\n\r\n        fenString = fenString.substring(0, fenString.length - 1) //removes the last slash\r\n\r\n        fenString += IsWhiteToMove ? ' w' : ' b'\r\n\r\n        let castlingRules = ''\r\n\r\n        castlingRules += CastlingRights.whiteShortCastle ? 'K' : ''\r\n        castlingRules += CastlingRights.whiteLongCastle ? 'Q' : ''\r\n        castlingRules += CastlingRights.blackShortCastle ? 'k' : ''\r\n        castlingRules += CastlingRights.blackLongCastle ? 'q' : ''\r\n\r\n        fenString += castlingRules.length == 0 ? ' -' : ' ' + castlingRules\r\n\r\n        fenString += EnPassant.isPossible ? ' ' + convertLocationToCoordinates(EnPassant.x, EnPassant.y) : ' -'\r\n\r\n        fenString += ' ' + HalfMoves\r\n        fenString += ' ' + FullMoves\r\n\r\n        setFen(fenString)\r\n    }\r\n\r\n    //parses the FEN for the initial board state\r\n    function fenParser(updateBoardPosition = true) {\r\n        //parses the FEN string to variables\r\n        const { fenBoard, fenTurn, fenCastling, fenEnPassant, fenHalfMoves, fenFullMoves } = ParseFEN(fen)\r\n\r\n        const fenRows = fenBoard.split('/')\r\n\r\n        let arr = [];\r\n\r\n        //splits all rows and creates a matrix for the board\r\n        for (let row of fenRows) {\r\n            const tokens = row.split('')\r\n\r\n            let r = []\r\n\r\n            for (let i = 0; i < tokens.length; i++) {\r\n                if (Number(tokens[i])) {\r\n                    for (let j = 0; j < Number(tokens[i]); j++) {\r\n                        r.push(' ')\r\n                    }\r\n                } else {\r\n                    r.push(tokens[i])\r\n                }\r\n            }\r\n\r\n            arr.push(r)\r\n        }\r\n\r\n        //generates a Square component for each element in the matrix created above\r\n        let squareColorIsWhite = true;\r\n        let squares = []\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            for (let j = 0; j < arr[i].length; j++) {\r\n                let color = squareColorIsWhite ? \"\" : \"dark\";\r\n                const possibleMoveStatus = isPossibleMoveRef.current.find(item => item.key === `${i}-${j}`);\r\n\r\n                //boardSquares.push(\r\n                squares.push(\r\n                    <Square\r\n                        getPossibleMoves={getPossibleMoves}\r\n                        key={`${i}-${j}`}\r\n                        x={i}\r\n                        y={j}\r\n                        piece={ConvertFENPieceToPiece(arr[i][j])}\r\n                        color={color}\r\n                        movePiece={movePiece}\r\n                        isPossibleMove={possibleMoveStatus ? possibleMoveStatus.value : false}\r\n                        resetPossibleMoves={resetPossibleMoves}\r\n                    />\r\n                )\r\n                squareColorIsWhite = !squareColorIsWhite;\r\n            }\r\n            squareColorIsWhite = !squareColorIsWhite;\r\n        }\r\n\r\n        setBoardSquares(squares)\r\n\r\n        // BoardSquares.splice(0, BoardSquares.length);\r\n        // BoardSquares.push(...squares)\r\n        // console.log(BoardSquares)\r\n\r\n        if (fenCastling.includes('K')) {\r\n            CastlingRights.whiteShortCastle = true;\r\n        }\r\n        if (fenCastling.includes('Q')) {\r\n            CastlingRights.whiteLongCastle = true;\r\n        }\r\n        if (fenCastling.includes('k')) {\r\n            CastlingRights.blackShortCastle = true;\r\n        }\r\n        if (fenCastling.includes('q')) {\r\n            CastlingRights.blackLongCastle = true;\r\n        }\r\n\r\n        fenTurn == 'w' ? updateIsWhiteToMove(true) : updateIsWhiteToMove(false)\r\n        updateHalfMoves(fenHalfMoves)\r\n        updateFullMoves(fenFullMoves)\r\n\r\n        if (updateBoardPosition) {\r\n            BoardPosition.splice(0, BoardPosition.length, ...arr)\r\n        }\r\n\r\n        if (!fenEnPassant.includes(PIECE_DELIMITER)) {\r\n            let location = convertCoordinatesToLocation(fenEnPassant)\r\n\r\n            EnPassant.isPossible = true\r\n            EnPassant.x = location.x\r\n            EnPassant.y = location.y\r\n        }\r\n    }\r\n\r\n    function isWhiteInCheck(square, pseudo, currentSquare = null) {\r\n        let squares = boardSquaresRef.current\r\n\r\n        if (pseudo) {\r\n            const updatedSquares = squares.map(s => {\r\n                if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\r\n                    // Return a new Square component with the updated piece\r\n                    return React.cloneElement(s, { piece: pseudo.props.piece });\r\n                } else if (currentSquare && s.props.x === currentSquare.props.x && s.props.y === currentSquare.props.y) {\r\n                    return React.cloneElement(s, { piece: '' });\r\n                }\r\n                else {\r\n                    // For other squares, return the original Square component\r\n                    return s;\r\n                }\r\n            });\r\n\r\n            // if (pseudo && currentSquare) {\r\n            //     if (pseudo.props.x == 4 && pseudo.props.y == 4 && currentSquare.props.x == 5 && currentSquare.props.y == 2) {\r\n            //         console.log(`Squares: ${JSON.stringify(squares)}, UpdatedSquares: ${JSON.stringify(updatedSquares)}`)\r\n            //     }\r\n            // }\r\n\r\n            squares = updatedSquares;\r\n        }\r\n\r\n        //check for attackers in front of the white king\r\n        for (let i = square.props.x - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from behind\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers behind the white king\r\n        for (let i = square.props.x + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the front\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the left of the white king\r\n        for (let i = square.props.y - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the left\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the right of the white king\r\n        for (let i = square.props.y + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the right\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == -1) {\r\n                                //console.log(\"in check from top half of counterclockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from top half of counterclockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        return true\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == 1) {\r\n                                //console.log(\"in check from top half of clockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from top half of clockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        return true;\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for knights check\r\n        let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1)\r\n        let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1)\r\n        let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1)\r\n        let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1)\r\n        let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2)\r\n        let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2)\r\n        let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2)\r\n        let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2)\r\n\r\n        if (knight1) {\r\n            if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight1.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 1\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight2) {\r\n            if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight2.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 2\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight3) {\r\n            if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight3.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 3\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight4) {\r\n            if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight4.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 4\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight5) {\r\n            if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight5.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 5\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight6) {\r\n            if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight6.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 6\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight7) {\r\n            if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight7.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 7\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight8) {\r\n            if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight8.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 8\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function isBlackInCheck(square, pseudo, currentSquare = null) {\r\n        let squares = boardSquaresRef.current\r\n\r\n        if (pseudo) {\r\n            const updatedSquares = squares.map(s => {\r\n                if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\r\n                    // Return a new Square component with the updated piece\r\n                    return React.cloneElement(s, { piece: pseudo.props.piece });\r\n                } else if (currentSquare && s.props.x === currentSquare.props.x && s.props.y === currentSquare.props.y) {\r\n                    return React.cloneElement(s, { piece: '' });\r\n                }\r\n                else {\r\n                    // For other squares, return the original Square component\r\n                    return s;\r\n                }\r\n            });\r\n\r\n            squares = updatedSquares;\r\n        }\r\n\r\n        //check for attackers behind the black king\r\n        for (let i = square.props.x - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from behind\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers in front of the black king\r\n        for (let i = square.props.x + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the front\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the left of the black king\r\n        for (let i = square.props.y - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the left\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the right of the black king\r\n        for (let i = square.props.y + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the right\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        //console.log(\"in check from top half of counterclockwise diagonal\")\r\n                        return true\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == 1) {\r\n                                //console.log(\"in check from bottom half of counterclockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from bottom half of counterclockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        //console.log(\"in check from top half of clockwise diagonal\")\r\n                        return true\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == -1) {\r\n                                //console.log(\"in check from bottom half of clockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from bottom half of clockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for knights check\r\n        let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1)\r\n        let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1)\r\n        let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1)\r\n        let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1)\r\n        let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2)\r\n        let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2)\r\n        let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2)\r\n        let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2)\r\n\r\n        if (knight1) {\r\n            if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight1.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 1\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight2) {\r\n            if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight2.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 2\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight3) {\r\n            if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight3.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 3\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight4) {\r\n            if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight4.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 4\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight5) {\r\n            if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight5.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 5\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight6) {\r\n            if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight6.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 6\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight7) {\r\n            if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight7.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 7\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight8) {\r\n            if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight8.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 8\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function movePiece(x, y) {\r\n        let squares = boardSquares\r\n        let position = BoardPosition\r\n\r\n        let targetSquare = getATargetSquareByLocation(x, y)\r\n        let square = squares.find(s => s.props.x == CurrentSquareSelection.x && s.props.y == CurrentSquareSelection.y)\r\n\r\n        let color = getPieceColor(square)\r\n        let piece = getPiece(square)\r\n\r\n        //disable castling if the king moves\r\n        if (piece == PIECES.KING) {\r\n            if (isColorWhite(color)) {\r\n                CastlingRights.whiteLongCastle = false\r\n                CastlingRights.whiteShortCastle = false\r\n            } else {\r\n                CastlingRights.blackLongCastle = false\r\n                CastlingRights.blackShortCastle = false\r\n            }\r\n        }\r\n\r\n        //disable castling if the rook moves\r\n        if (piece == PIECES.ROOK) {\r\n            if (square.props.x == 7 && square.props.y == 7) {\r\n                CastlingRights.whiteShortCastle = false\r\n            }\r\n\r\n            if (square.props.x == 0 && square.props.y == 7) {\r\n                CastlingRights.blackShortCastle = false\r\n            }\r\n\r\n            if (square.props.x == 7 && square.props.y == 0) {\r\n                CastlingRights.whiteLongCastle = false\r\n            }\r\n\r\n            if (square.props.x == 0 && square.props.y == 0) {\r\n                CastlingRights.blackLongCastle = false\r\n            }\r\n        }\r\n\r\n        let p = UpdatePosition(square, targetSquare, position)\r\n\r\n        //capturing enPassant\r\n        // if (EnPassant.isPossible) {\r\n        //     let enPassantTargetSquare = color == COLORS.WHITE ? squares.find(s => s.props.x == x + 1 && s.props.y == y) : squares.find(s => s.props.x == x - 1 && s.props.y == y)\r\n        //     let enPassantSquare = <Square x={square.props.x} y={square.props.y} piece={\"\"} />\r\n\r\n        //     p = UpdatePosition(enPassantSquare, enPassantTargetSquare, p)\r\n        // }\r\n\r\n        //TODO: ensure p matches the new board Position format\r\n        //setBoardPosition(p)\r\n        const updatedBoardPosition = p.map(row => [...row]);\r\n        BoardPosition.splice(0, BoardPosition.length, ...updatedBoardPosition);\r\n\r\n        PossibleMoves.splice(0, PossibleMoves.length);\r\n        updateIsWhiteToMove(!IsWhiteToMove)\r\n\r\n        //enabling en passant\r\n        if (piece == PIECES.PAWN) {\r\n            if (Math.abs(square.props.x - targetSquare.props.x) == 2) {\r\n                if (square.props.piece.split(PIECE_DELIMITER)[0] == COLORS.WHITE) {\r\n                    EnPassant.isPossible = true\r\n                    EnPassant.x = square.props.x - 1\r\n                    EnPassant.y = square.props.y\r\n                } else {\r\n                    EnPassant.isPossible = true\r\n                    EnPassant.x = square.props.x + 1\r\n                    EnPassant.y = square.props.y\r\n                }\r\n\r\n                // let enPassant1 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y - 1)\r\n                // let enPassant2 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y + 1)\r\n\r\n                // if (enPassant1) {\r\n                //     if (enPassant1.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\r\n                //         if (enPassant1.props.piece.split(PIECE_DELIMITER)[0] != color) {\r\n                //             EnPassant.isPossible = true\r\n                //             EnPassant.x = targetSquare.props.x\r\n                //             EnPassant.y = targetSquare.props.y\r\n                //             return\r\n                //         }\r\n                //     }\r\n                // }\r\n\r\n                // if (enPassant2) {\r\n                //     if (enPassant2.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\r\n                //         if (enPassant2.props.piece.split(PIECE_DELIMITER)[0] != color) {\r\n                //             EnPassant.isPossible = true\r\n                //             EnPassant.x = targetSquare.props.x\r\n                //             EnPassant.y = targetSquare.props.y\r\n                //             return\r\n                //         }\r\n                //     }\r\n                // }\r\n            } else {\r\n                EnPassant.isPossible = false\r\n                EnPassant.x = -1\r\n                EnPassant.y = -1\r\n            }\r\n        } else {\r\n            EnPassant.isPossible = false\r\n            EnPassant.x = -1\r\n            EnPassant.y = -1\r\n        }\r\n\r\n        updateFullMoves(FullMoves + 1)\r\n\r\n        generateANewFen()\r\n    }\r\n\r\n    //updates the state with the selectedSquare X coordinates\r\n    function updateSelectedSquareX(x) {\r\n        setSelectedSquareX(x)\r\n    }\r\n\r\n    //updates the state with the selectedSquare Y coordinates\r\n    function updateSelectedSquareY(y) {\r\n        setSelectedSquareY(y)\r\n    }\r\n\r\n    //retrieves a speecific square from the board using x and y coordinates (location)\r\n    function getATargetSquareByLocation(x, y) {\r\n        return boardSquaresRef.current.find(s => s.props.x === x && s.props.y === y);\r\n    }\r\n\r\n    //retrieves a speecific square from the board that has a certain piece\r\n    function getATargetSquareByPiece(piece) {\r\n        return boardSquaresRef.current.find(s => s.props.piece == piece);\r\n    }\r\n\r\n    //check if a specific square has a piece assigned to it\r\n    function isSquareAvailable(square) {\r\n        return square && !square.props.piece\r\n    }\r\n\r\n    //checks if a pawn is on its starting square and allows a 2-squares move\r\n    function isPawnOnStartingSquare(pawn) {\r\n        return isColorWhite(pawn.props.piece.split(PIECE_DELIMITER)[0]) ? pawn.props.x == 6 : pawn.props.x == 1\r\n    }\r\n\r\n    //checks if two pieces have the same color\r\n    function areSameColor(square1, square2) {\r\n        if (!square1 || !square2) {\r\n            return\r\n        }\r\n\r\n        let color1 = square1.props.piece.split(PIECE_DELIMITER)[0];\r\n        let color2 = square2.props.piece.split(PIECE_DELIMITER)[0];\r\n\r\n        return color1 == color2\r\n    }\r\n\r\n    //checks if a square contains a certain piece\r\n    function doesTheSquareHasThePiece(square, piece) {\r\n        let p = getPiece(square)\r\n\r\n        return p == piece\r\n    }\r\n\r\n    //cheks if a pawn is on En Passant square\r\n    function isPawnOnEnPassantSquare(pawn) {\r\n        return isColorWhite(pawn.props.piece.split(PIECE_DELIMITER)[0]) ? pawn.props.x == 3 : pawn.props.x == 4\r\n    }\r\n\r\n    //checks if a color is white\r\n    function isColorWhite(color) {\r\n        return color == COLORS.WHITE\r\n    }\r\n\r\n    //checks if a color is black\r\n    function isColorBlack(color) {\r\n        return color == COLORS.BLACK\r\n    }\r\n\r\n    //checks if white is allowed to long castle\r\n    function checkIfCanWhiteLongCastle() {\r\n        return CastlingRights.whiteLongCastle &&\r\n            BoardPosition[7][0] == 'R' &&\r\n            BoardPosition[7][1] == ' ' &&\r\n            BoardPosition[7][2] == ' ' &&\r\n            BoardPosition[7][3] == ' ';\r\n    }\r\n\r\n    //checks if white is allowed to short castle\r\n    function checkIfCanWhiteShortCastle() {\r\n        return CastlingRights.whiteShortCastle &&\r\n            BoardPosition[7][7] == 'R' &&\r\n            BoardPosition[7][6] == ' ' &&\r\n            BoardPosition[7][5] == ' ';\r\n    }\r\n\r\n    //checks if black is allowed to long castle\r\n    function checkIfCanBlackLongCastle() {\r\n        return CastlingRights.blackLongCastle &&\r\n            BoardPosition[0][0] == 'r' &&\r\n            BoardPosition[0][1] == ' ' &&\r\n            BoardPosition[0][2] == ' ' &&\r\n            BoardPosition[0][3] == ' ';\r\n    }\r\n\r\n    //checks if black is allowed to short castle\r\n    function checkIfCanBlackShortCastle() {\r\n        return CastlingRights.blackShortCastle &&\r\n            BoardPosition[7][7] == 'r' &&\r\n            BoardPosition[7][6] == ' ' &&\r\n            BoardPosition[7][5] == ' ';\r\n    }\r\n\r\n    //converts board coordinates to X and Y position on the board, e.g., a8 = 0, 0\r\n    function convertCoordinatesToLocation(coordinates) {\r\n        let tokens = coordinates.split('')\r\n\r\n        //skip invalid coordinates\r\n        if (tokens.length != 2) {\r\n            return\r\n        }\r\n\r\n        let letter = tokens[0].toString().toUpperCase()\r\n        let number = tokens[1]\r\n\r\n        //65 is the ASCII code for capital A which will give us 0 if we have A as a coordinate; A-F will give us 0-7 for x\r\n        //reverse the numbers since we draw the board top down\r\n        return { x: DIM - Number(number), y: letter.charCodeAt(0) - 65 }\r\n    }\r\n\r\n    function convertLocationToCoordinates(x, y) {\r\n        return `${String.fromCharCode(y + 65)}${DIM - x}`.toLowerCase()\r\n    }\r\n\r\n    function compareIfTwoSquaresAreTheSame(square1, square2) {\r\n        if (!square1 || !square2) {\r\n            return false\r\n        }\r\n\r\n        return square1.props.x == square2.props.x && square1.props.y == square2.props.y\r\n    }\r\n\r\n    //gets all possible moves for a pawn\r\n    function getPawnsPossibleMoves(square) {\r\n        if (!doesTheSquareHasThePiece(square, PIECES.PAWN)) {\r\n            return\r\n        }\r\n\r\n        let color = getPieceColor(square) //get the piece color\r\n\r\n        let moves = []\r\n\r\n        let position1Offset = 1\r\n        let position2Offset = 2\r\n\r\n        //flips the direction if the color is white\r\n        if (isColorWhite(color)) {\r\n            position1Offset *= -1\r\n            position2Offset *= -1\r\n        }\r\n\r\n        //get all forwards moves + the double move at the start\r\n        let targetPiece1 = getATargetSquareByLocation(square.props.x + position1Offset, square.props.y) //move pawn 1 square ahead\r\n        let targetPiece2 = getATargetSquareByLocation(square.props.x + position2Offset, square.props.y) //move pawn 2 squares ahead\r\n\r\n        //get potential neighbors to capture\r\n        let neighbor1 = getATargetSquareByLocation(square.props.x + position1Offset, square.props.y + position1Offset)\r\n        let neighbor2 = getATargetSquareByLocation(square.props.x + position1Offset, square.props.y + (position1Offset * -1))\r\n\r\n        //get the En Passant coordinates\r\n        let enPassantSquare = EnPassant.isPossible ? getATargetSquareByLocation(EnPassant.x, EnPassant.y) : ''\r\n\r\n        let isTheSquareInFrontAvailable = isSquareAvailable(targetPiece1)\r\n\r\n        //push the one move forward for a pawn\r\n        if (isTheSquareInFrontAvailable) {\r\n            moves.push(targetPiece1)\r\n        }\r\n\r\n        //two moves are allowed only if the two squares above are free/empty\r\n        //allowed if pawn hasn't moved before\r\n        if (isTheSquareInFrontAvailable && isSquareAvailable(targetPiece2) && isPawnOnStartingSquare(square)) {\r\n            moves.push(targetPiece2)\r\n        }\r\n\r\n        //push neighbour if there is a piece to capture and it's a different color than the pawn\r\n        if (!isSquareAvailable(neighbor1) && !areSameColor(neighbor1, square)) {\r\n            moves.push(neighbor1)\r\n        }\r\n\r\n        //push neighbour if there is a piece to capture and it's a different color than the pawn\r\n        if (!isSquareAvailable(neighbor2) && !areSameColor(neighbor2, square)) {\r\n            moves.push(neighbor2)\r\n        }\r\n\r\n        //add En Passant\r\n        if (enPassantSquare && (compareIfTwoSquaresAreTheSame(enPassantSquare, neighbor1) || compareIfTwoSquaresAreTheSame(enPassantSquare, neighbor2))) {\r\n            moves.push(enPassantSquare)\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a rook\r\n    function getRooksPossibleMoves(square, skip = true) {\r\n        if (!doesTheSquareHasThePiece(square, PIECES.ROOK) && skip) {\r\n            return\r\n        }\r\n\r\n        let moves = []\r\n\r\n        for (let i = square.props.x + 1; i < DIM; i++) {\r\n            let targetSquare = getATargetSquareByLocation(i, square.props.y)\r\n\r\n            if (isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break\r\n            }\r\n        }\r\n\r\n        for (let i = square.props.x - 1; i >= 0; i--) {\r\n            let targetSquare = getATargetSquareByLocation(i, square.props.y)\r\n\r\n            if (isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = square.props.y + 1; i < DIM; i++) {\r\n            let targetSquare = getATargetSquareByLocation(square.props.x, i)\r\n\r\n            if (isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break\r\n            }\r\n        }\r\n\r\n        for (let i = square.props.y - 1; i >= 0; i--) {\r\n            let targetSquare = getATargetSquareByLocation(square.props.x, i)\r\n\r\n            if (isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break\r\n            }\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a bishop\r\n    function getBishopPossibleMoves(square, skip = true) {\r\n        if (!doesTheSquareHasThePiece(square, PIECES.BISHOP) && skip) {\r\n            return\r\n        }\r\n\r\n        let moves = []\r\n\r\n        let counter = 0;\r\n\r\n        let conside1 = true;\r\n        let conside2 = true;\r\n        let conside3 = true;\r\n        let conside4 = true;\r\n\r\n        for (let i = 1; i <= DIM; i++) {\r\n            if (!conside1 && !conside2 && !conside3 && !conside4) {\r\n                break;\r\n            }\r\n\r\n            let target1 = conside1 ? getATargetSquareByLocation(square.props.x - i, square.props.y - i) : null\r\n            let target2 = conside2 ? getATargetSquareByLocation(square.props.x - i, square.props.y + i) : null\r\n            let target3 = conside3 ? getATargetSquareByLocation(square.props.x + i, square.props.y + i) : null\r\n            let target4 = conside4 ? getATargetSquareByLocation(square.props.x + i, square.props.y - i) : null\r\n\r\n            if (target1 && isSquareAvailable(target1)) {\r\n                moves.push(target1)\r\n            } else {\r\n                if (!areSameColor(square, target1)) {\r\n                    moves.push(target1)\r\n                }\r\n                conside1 = false\r\n            }\r\n\r\n            if (target2 && isSquareAvailable(target2)) {\r\n                moves.push(target2)\r\n            } else {\r\n                if (!areSameColor(square, target2)) {\r\n                    moves.push(target2)\r\n                }\r\n                conside2 = false\r\n            }\r\n\r\n            if (target3 && isSquareAvailable(target3)) {\r\n                moves.push(target3)\r\n            } else {\r\n                if (!areSameColor(square, target3)) {\r\n                    moves.push(target3)\r\n                }\r\n                conside3 = false\r\n            }\r\n\r\n            if (target4 && isSquareAvailable(target4)) {\r\n                moves.push(target4)\r\n            } else {\r\n                if (!areSameColor(square, target4)) {\r\n                    moves.push(target4)\r\n                }\r\n                conside4 = false\r\n            }\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a knight\r\n    function getKnightPossibleMoves(square) {\r\n        if (!doesTheSquareHasThePiece(square, PIECES.KNIGHT)) {\r\n            return\r\n        }\r\n\r\n        let offset = 1;\r\n        let doubleOffset = 2 * offset;\r\n\r\n        let moves = []\r\n\r\n        for (let i = 0; i < 8; i++) {\r\n            if (i != 0 && i % 2 == 0) {\r\n                offset *= -1;\r\n            }\r\n\r\n            let targetX = square.props.x + offset;\r\n            let targetY = square.props.y + doubleOffset;\r\n\r\n            let target = getATargetSquareByLocation(targetX, targetY)\r\n\r\n            if (target && isSquareAvailable(target)) {\r\n                moves.push(target)\r\n            } else {\r\n                if (!areSameColor(square, target)) {\r\n                    moves.push(target)\r\n                }\r\n            }\r\n\r\n            doubleOffset *= -1\r\n\r\n            if (i == 3) {\r\n                offset *= 2\r\n                doubleOffset /= 2\r\n            }\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a king\r\n    function getKingPossibleMoves(square) {\r\n        if (!doesTheSquareHasThePiece(square, PIECES.KING)) {\r\n            return\r\n        }\r\n\r\n        let moves = []\r\n\r\n        let color = getPieceColor(square)\r\n\r\n        //gets all possible 1-square moves for the king\r\n        for (let i = -1; i < 2; i++) {\r\n            for (let j = -1; j < 2; j++) {\r\n                let targetPiece = getATargetSquareByLocation(square.props.x + i, square.props.y + j)\r\n\r\n                if (targetPiece && isSquareAvailable(targetPiece)) {\r\n                    moves.push(targetPiece)\r\n                } else {\r\n                    if (!areSameColor(square, targetPiece)) {\r\n                        moves.push(targetPiece)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //Castling logic\r\n        const longCastleSquare = getATargetSquareByLocation(square.props.x, square.props.y - 2)\r\n        const shortCastleSquare = getATargetSquareByLocation(square.props.x, square.props.y + 2)\r\n\r\n        if (isColorWhite(color) && checkIfCanWhiteLongCastle()) {\r\n            moves.push(longCastleSquare)\r\n        }\r\n\r\n        if (isColorWhite(color) && checkIfCanWhiteShortCastle()) {\r\n            moves.push(shortCastleSquare)\r\n        }\r\n\r\n        if (isColorBlack(color) && checkIfCanBlackLongCastle()) {\r\n            moves.push(longCastleSquare)\r\n        }\r\n\r\n        if (isColorBlack(color) && checkIfCanBlackShortCastle()) {\r\n            moves.push(shortCastleSquare)\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a queen\r\n    function getQueenPossibleMoves(square) {\r\n        if (!doesTheSquareHasThePiece(square, PIECES.QUEEN)) {\r\n            return\r\n        }\r\n\r\n        let moves = []\r\n\r\n        //a queen has the same moves as a bishop and a rook\r\n        const rookMoves = getRooksPossibleMoves(square, false).moves;\r\n        const bishopMoves = getBishopPossibleMoves(square, false).moves;\r\n\r\n        // Concatenate the arrays of moves\r\n        moves.push(...rookMoves, ...bishopMoves);\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets the piece color\r\n    function getPieceColor(square) {\r\n        return square.props.piece.split(PIECE_DELIMITER)[0]\r\n    }\r\n\r\n    //gets the piece\r\n    function getPiece(square) {\r\n        return square.props.piece.split(PIECE_DELIMITER)[1]\r\n    }\r\n\r\n    //removes moves that do not deal with a check\r\n    function filterMovesIfInCheck(possibleMoves) {\r\n        let blackKing = getATargetSquareByPiece(KINGS.BLACK_KING) //get the black king\r\n        let whiteKing = getATargetSquareByPiece(KINGS.WHITE_KING) //get the white king\r\n\r\n        for (let i = 0; i < possibleMoves.length; i++) {\r\n            for (let j = 0; j < possibleMoves[i].moves.length; j++) {\r\n                if (possibleMoves[i].piece.props.piece == KINGS.BLACK_KING) {\r\n                    let move = <Square x={possibleMoves[i].moves[j].props.x} y={possibleMoves[i].moves[j].props.y} piece={\"black-king\"} />\r\n                    let pseudo = <Square x={blackKing.props.x} y={blackKing.props.y} piece={\"\"} />\r\n                    let isInCheck = isBlackInCheck(move, pseudo)\r\n\r\n                    if (isInCheck) {\r\n                        possibleMoves[i].moves.splice(j, 1);\r\n                        j--;\r\n                    }\r\n                } else if (possibleMoves[i].piece.props.piece == KINGS.WHITE_KING) {\r\n                    let move = <Square x={possibleMoves[i].moves[j].props.x} y={possibleMoves[i].moves[j].props.y} piece={\"white-king\"} />\r\n                    let pseudo = <Square x={whiteKing.props.x} y={whiteKing.props.y} piece={\"\"} />\r\n                    let isInCheck = isWhiteInCheck(move, pseudo)\r\n\r\n                    if (isInCheck) {\r\n                        possibleMoves[i].moves.splice(j, 1);\r\n                        j--;\r\n                    }\r\n                } else {\r\n                    let move = <Square x={possibleMoves[i].moves[j].props.x} y={possibleMoves[i].moves[j].props.y} piece={possibleMoves[i].piece.props.piece} />\r\n                    let isBlackInCheck = isBlackInCheck(blackKing, move, possibleMoves[i].piece)\r\n                    let isWhitteInCheck = isWhiteInCheck(whiteKing, move, possibleMoves[i].piece)\r\n                    let isBlackCurrenttlyInCheck = isBlackInCheck(blackKing, null)\r\n                    let isWhiteCurrentlyInCheck = isWhiteInCheck(whiteKing, null)\r\n\r\n                    if (isBlackInCheck && isBlackCurrenttlyInCheck) {\r\n                        possibleMoves[i].moves.splice(j, 1);\r\n                        j--;\r\n                    }\r\n\r\n                    if (isBlackInCheck && isBlackCurrenttlyInCheck) {\r\n                        possibleMoves[i].moves.splice(j, 1);\r\n                        j--;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return possibleMoves\r\n    }\r\n\r\n    //removes moves that allow illigal castling (castles through check for example)\r\n    function filterMovesThatAllowIllegalCastling(possibleMoves) {\r\n        let blackKing = getATargetSquareByPiece(KINGS.BLACK_KING) //get the black king\r\n        let whiteKing = getATargetSquareByPiece(KINGS.WHITE_KING) //get the white king\r\n\r\n        for (let i = 0; i < possibleMoves.length; i++) {\r\n            let whiteCastle1 = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 6) //sqaure where king will be after short castle (white)\r\n            let whiteCastle2 = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 2) //sqaure where king will be after long castle (white)\r\n            let blackCastle1 = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 6) //square where king will be after shot castle (black)\r\n            let blackCastle2 = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 2) //square where king will be after long castle (black)\r\n\r\n            if (possibleMoves[i].piece == blackKing || possibleMoves[i].piece == whiteKing) {\r\n                if (whiteCastle1) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 5)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n\r\n                if (whiteCastle2) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 3)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n\r\n                if (blackCastle1) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 5)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n\r\n                if (blackCastle2) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 3)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n            }\r\n\r\n            //prevents black to castle if in check\r\n            if (isBlackInCheck(blackKing)) {\r\n                if (blackCastle1) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(blackCastle1), 1)\r\n                }\r\n\r\n                if (blackCastle2) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(blackCastle2), 1)\r\n                }\r\n            }\r\n\r\n            //prevents white to castle if in check\r\n            if (isWhiteInCheck(whiteKing)) {\r\n                if (whiteCastle1) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(whiteCastle1), 1)\r\n                }\r\n\r\n                if (whiteCastle2) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(whiteCastle2), 1)\r\n                }\r\n            }\r\n        }\r\n\r\n        return possibleMoves\r\n    }\r\n\r\n    //removes empty/undefined values for generated moves\r\n    function removeEmptyMoves(possibleMoves) {\r\n        for (let i = 0; i < possibleMoves.length; i++) {\r\n            if (!possibleMoves[i]) {\r\n                possibleMoves.splice(i, 1)\r\n                i--;\r\n                continue;\r\n            }\r\n\r\n            if (possibleMoves[i].moves.length == 0) {\r\n                possibleMoves.splice(i, 1)\r\n                i--;\r\n                continue;\r\n            }\r\n\r\n            for (let j = 0; j < possibleMoves[i].moves.length; j++) {\r\n                if (!possibleMoves[i].moves[j]) {\r\n                    possibleMoves[i].moves.splice(j, 1);\r\n                    j--;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possibleMoves\r\n    }\r\n\r\n    function updatePossibleMovesVisually() {\r\n        for (let i = 0; i < PossibleMoves.length; i++) {\r\n            if (PossibleMoves[i].piece.props.x == CurrentSquareSelection.x && PossibleMoves[i].piece.props.y == CurrentSquareSelection.y) {\r\n                for (let j = 0; j < PossibleMoves[i].moves.length; j++) {\r\n                    updateIsPossibleMove(`${PossibleMoves[i].moves[j].props.x}-${PossibleMoves[i].moves[j].props.y}`, true)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //gets all possible/legal moves\r\n    function getPossibleMoves() {\r\n        //let square = getATargetSquareByLocation(x, y)\r\n        let possiblePieceMoves = [];\r\n        let squares = boardSquares\r\n\r\n        for (let i = 0; i < squares.length; i++) {\r\n            let square = squares[i]\r\n\r\n            //if the square has a piece\r\n            if (square.props.piece) {\r\n                let color = getPieceColor(square); //get the piece color\r\n\r\n                //don't collect possible moves if it's black to move and you're trying to move a white piece\r\n                if (isColorWhite(color) && !IsWhiteToMove) {\r\n                    //console.log(`Skipping because it's black to move and you're moving a white piece, x: ${square.props.x}, y: ${square.props.y}`)\r\n                    continue\r\n                }\r\n\r\n                //don't collect possible moves if it's white to move and you're trying to move a black piece\r\n                if (isColorBlack(color) && IsWhiteToMove) {\r\n                    //console.log(`Skipping because it's white to move and you're moving a black piece, x: ${square.props.x}, y: ${square.props.y}`)\r\n                    continue\r\n                }\r\n\r\n                //console.log(`Getting possible moves, x: ${square.props.x}, y: ${square.props.y}`)\r\n                //get all possible moves for each piece\r\n                possiblePieceMoves.push(getPawnsPossibleMoves(square))\r\n                possiblePieceMoves.push(getRooksPossibleMoves(square))\r\n                possiblePieceMoves.push(getBishopPossibleMoves(square))\r\n                possiblePieceMoves.push(getKnightPossibleMoves(square))\r\n                possiblePieceMoves.push(getKingPossibleMoves(square))\r\n                possiblePieceMoves.push(getQueenPossibleMoves(square))\r\n\r\n                //filter empty moves\r\n                possiblePieceMoves = removeEmptyMoves(possiblePieceMoves);\r\n\r\n                //filter possible moves\r\n                possiblePieceMoves = filterMovesIfInCheck(possiblePieceMoves)\r\n                possiblePieceMoves = filterMovesThatAllowIllegalCastling(possiblePieceMoves)\r\n            }\r\n        }\r\n\r\n        console.log(\"Possible Moves:\", possiblePieceMoves);\r\n        console.log('Moves count', possiblePieceMoves.reduce((sum, pieceMove) => sum + pieceMove.moves.length, 0))\r\n        PossibleMoves.splice(0, PossibleMoves.length, ...possiblePieceMoves);\r\n        updatePossibleMovesVisually()\r\n    }\r\n\r\n    //renders the board\r\n    return (\r\n        <>\r\n            <div className=\"chessGrid\">\r\n                {boardSquares.map((sqr) => sqr)}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Board"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,aAAa,QAAQ,OAAO;AAClE,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,aAAa;AAChC,SAASC,sBAAsB,EAAEC,kBAAkB,EAAEC,cAAc,EAAEC,QAAQ,EAAEC,OAAO,QAAQ,oBAAoB;AAClH,SACIC,GAAG,EAAEC,eAAe,EAAEC,KAAK,EAAEC,MAAM,EAAEC,MAAM,EAC3CC,cAAc,EAAEC,SAAS,EAAEC,sBAAsB,EAAEC,aAAa,EAChEC,SAAS,EAAEC,SAAS,EAAEC,aAAa,EAAEC,mBAAmB,EAAEC,eAAe,EACzEC,eAAe,EAAEC,aAAa,QAC3B,sBAAsB;;AAG7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAUA,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGlC,QAAQ,CAAC,kEAAkE,CAAC;EAClG,MAAM,CAACmC,cAAc,EAAEC,iBAAiB,CAAC,GAAGpC,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACqC,YAAY,EAAEC,eAAe,CAAC,GAAGtC,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAMuC,iBAAiB,GAAGrC,MAAM,CAACiC,cAAc,CAAC;EAChD,MAAMK,eAAe,GAAGtC,MAAM,CAACmC,YAAY,CAAC;EAE5C,MAAMI,oBAAoB,GAAGA,CAACC,GAAG,EAAEC,KAAK,KAAK;IACzCP,iBAAiB,CAACQ,SAAS,IACvBA,SAAS,CAACC,GAAG,CAACC,IAAI,IACdA,IAAI,CAACJ,GAAG,KAAKA,GAAG,GAAG;MAAE,GAAGI,IAAI;MAAEH,KAAK,EAAEA;IAAM,CAAC,GAAGG,IACnD,CACJ,CAAC;EACL,CAAC;EAED7C,SAAS,CAAC,MAAM;IACZsC,iBAAiB,CAACQ,OAAO,GAAGZ,cAAc;IAC1Ca,SAAS,CAAC,KAAK,CAAC;EACpB,CAAC,EAAE,CAACb,cAAc,CAAC,CAAC;;EAEpB;EACAlC,SAAS,CAAC,MAAM;IACZgD,kBAAkB,CAAC,CAAC;IACpBD,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN/C,SAAS,CAAC,MAAM;IACZ+C,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,CAACf,GAAG,CAAC,CAAC;EAEThC,SAAS,CAAC,MAAM;IACZuC,eAAe,CAACO,OAAO,GAAGV,YAAY;EAC1C,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAElB,SAASY,kBAAkBA,CAAA,EAAG;IAC1B,MAAMC,qBAAqB,GAAG,EAAE;IAChC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxC,GAAG,EAAEwC,CAAC,EAAE,EAAE;MAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGzC,GAAG,EAAEyC,CAAC,EAAE,EAAE;QAC1BF,qBAAqB,CAACG,IAAI,CAAC;UAAEX,GAAG,EAAG,GAAES,CAAE,IAAGC,CAAE,EAAC;UAAET,KAAK,EAAE;QAAM,CAAC,CAAC;MAClE;IACJ;IACAP,iBAAiB,CAACc,qBAAqB,CAAC;EAC5C;EAEA,SAASI,eAAeA,CAAA,EAAG;IACvB,IAAIC,SAAS,GAAG,EAAE;IAElB,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGzB,aAAa,CAAC8B,MAAM,EAAEL,CAAC,EAAE,EAAE;MAC3C,IAAIM,GAAG,GAAG/B,aAAa,CAACyB,CAAC,CAAC;MAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGK,GAAG,CAACD,MAAM,EAAEJ,CAAC,EAAE,EAAE;QACjC,IAAIM,MAAM,GAAGD,GAAG,CAACL,CAAC,CAAC;QAEnB,IAAIM,MAAM,IAAI,GAAG,EAAE;UACf,IAAIhD,OAAO,CAAC6C,SAAS,CAACA,SAAS,CAACC,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE;YAC1C,IAAIG,QAAQ,GAAGJ,SAAS,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC;YAClCL,SAAS,GAAGA,SAAS,CAACM,SAAS,CAAC,CAAC,EAAEN,SAAS,CAACC,MAAM,GAAG,CAAC,CAAC;YACxDD,SAAS,IAAIO,MAAM,CAACH,QAAQ,CAAC,GAAG,CAAC;UACrC,CAAC,MAAM;YACHJ,SAAS,IAAI,GAAG;UACpB;QACJ,CAAC,MAAM;UACHA,SAAS,IAAIG,MAAM;QACvB;MACJ;MACAH,SAAS,IAAI,GAAG;IACpB;IAEAA,SAAS,GAAGA,SAAS,CAACM,SAAS,CAAC,CAAC,EAAEN,SAAS,CAACC,MAAM,GAAG,CAAC,CAAC,EAAC;;IAEzDD,SAAS,IAAIjC,aAAa,GAAG,IAAI,GAAG,IAAI;IAExC,IAAIyC,aAAa,GAAG,EAAE;IAEtBA,aAAa,IAAI/C,cAAc,CAACgD,gBAAgB,GAAG,GAAG,GAAG,EAAE;IAC3DD,aAAa,IAAI/C,cAAc,CAACiD,eAAe,GAAG,GAAG,GAAG,EAAE;IAC1DF,aAAa,IAAI/C,cAAc,CAACkD,gBAAgB,GAAG,GAAG,GAAG,EAAE;IAC3DH,aAAa,IAAI/C,cAAc,CAACmD,eAAe,GAAG,GAAG,GAAG,EAAE;IAE1DZ,SAAS,IAAIQ,aAAa,CAACP,MAAM,IAAI,CAAC,GAAG,IAAI,GAAG,GAAG,GAAGO,aAAa;IAEnER,SAAS,IAAItC,SAAS,CAACmD,UAAU,GAAG,GAAG,GAAGC,4BAA4B,CAACpD,SAAS,CAACqD,CAAC,EAAErD,SAAS,CAACsD,CAAC,CAAC,GAAG,IAAI;IAEvGhB,SAAS,IAAI,GAAG,GAAGnC,SAAS;IAC5BmC,SAAS,IAAI,GAAG,GAAGlC,SAAS;IAE5Ba,MAAM,CAACqB,SAAS,CAAC;EACrB;;EAEA;EACA,SAASP,SAASA,CAACwB,mBAAmB,GAAG,IAAI,EAAE;IAC3C;IACA,MAAM;MAAEC,QAAQ;MAAEC,OAAO;MAAEC,WAAW;MAAEC,YAAY;MAAEC,YAAY;MAAEC;IAAa,CAAC,GAAGrE,QAAQ,CAACwB,GAAG,CAAC;IAElG,MAAM8C,OAAO,GAAGN,QAAQ,CAACO,KAAK,CAAC,GAAG,CAAC;IAEnC,IAAIC,GAAG,GAAG,EAAE;;IAEZ;IACA,KAAK,IAAIxB,GAAG,IAAIsB,OAAO,EAAE;MACrB,MAAMG,MAAM,GAAGzB,GAAG,CAACuB,KAAK,CAAC,EAAE,CAAC;MAE5B,IAAIG,CAAC,GAAG,EAAE;MAEV,KAAK,IAAIhC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAAC1B,MAAM,EAAEL,CAAC,EAAE,EAAE;QACpC,IAAIW,MAAM,CAACoB,MAAM,CAAC/B,CAAC,CAAC,CAAC,EAAE;UACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGU,MAAM,CAACoB,MAAM,CAAC/B,CAAC,CAAC,CAAC,EAAEC,CAAC,EAAE,EAAE;YACxC+B,CAAC,CAAC9B,IAAI,CAAC,GAAG,CAAC;UACf;QACJ,CAAC,MAAM;UACH8B,CAAC,CAAC9B,IAAI,CAAC6B,MAAM,CAAC/B,CAAC,CAAC,CAAC;QACrB;MACJ;MAEA8B,GAAG,CAAC5B,IAAI,CAAC8B,CAAC,CAAC;IACf;;IAEA;IACA,IAAIC,kBAAkB,GAAG,IAAI;IAC7B,IAAIC,OAAO,GAAG,EAAE;IAEhB,KAAK,IAAIlC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8B,GAAG,CAACzB,MAAM,EAAEL,CAAC,EAAE,EAAE;MACjC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6B,GAAG,CAAC9B,CAAC,CAAC,CAACK,MAAM,EAAEJ,CAAC,EAAE,EAAE;QACpC,IAAIkC,KAAK,GAAGF,kBAAkB,GAAG,EAAE,GAAG,MAAM;QAC5C,MAAMG,kBAAkB,GAAGhD,iBAAiB,CAACQ,OAAO,CAACyC,IAAI,CAAC1C,IAAI,IAAIA,IAAI,CAACJ,GAAG,KAAM,GAAES,CAAE,IAAGC,CAAE,EAAC,CAAC;;QAE3F;QACAiC,OAAO,CAAChC,IAAI,eACRzB,OAAA,CAACvB,MAAM;UACHoF,gBAAgB,EAAEA,gBAAiB;UAEnCnB,CAAC,EAAEnB,CAAE;UACLoB,CAAC,EAAEnB,CAAE;UACLsC,KAAK,EAAEpF,sBAAsB,CAAC2E,GAAG,CAAC9B,CAAC,CAAC,CAACC,CAAC,CAAC,CAAE;UACzCkC,KAAK,EAAEA,KAAM;UACbK,SAAS,EAAEA,SAAU;UACrBxD,cAAc,EAAEoD,kBAAkB,GAAGA,kBAAkB,CAAC5C,KAAK,GAAG,KAAM;UACtEM,kBAAkB,EAAEA;QAAmB,GAPjC,GAAEE,CAAE,IAAGC,CAAE,EAAC;UAAAwC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAQnB,CACL,CAAC;QACDX,kBAAkB,GAAG,CAACA,kBAAkB;MAC5C;MACAA,kBAAkB,GAAG,CAACA,kBAAkB;IAC5C;IAEA9C,eAAe,CAAC+C,OAAO,CAAC;;IAExB;IACA;IACA;;IAEA,IAAIV,WAAW,CAACqB,QAAQ,CAAC,GAAG,CAAC,EAAE;MAC3BhF,cAAc,CAACgD,gBAAgB,GAAG,IAAI;IAC1C;IACA,IAAIW,WAAW,CAACqB,QAAQ,CAAC,GAAG,CAAC,EAAE;MAC3BhF,cAAc,CAACiD,eAAe,GAAG,IAAI;IACzC;IACA,IAAIU,WAAW,CAACqB,QAAQ,CAAC,GAAG,CAAC,EAAE;MAC3BhF,cAAc,CAACkD,gBAAgB,GAAG,IAAI;IAC1C;IACA,IAAIS,WAAW,CAACqB,QAAQ,CAAC,GAAG,CAAC,EAAE;MAC3BhF,cAAc,CAACmD,eAAe,GAAG,IAAI;IACzC;IAEAO,OAAO,IAAI,GAAG,GAAGnD,mBAAmB,CAAC,IAAI,CAAC,GAAGA,mBAAmB,CAAC,KAAK,CAAC;IACvEC,eAAe,CAACqD,YAAY,CAAC;IAC7BpD,eAAe,CAACqD,YAAY,CAAC;IAE7B,IAAIN,mBAAmB,EAAE;MACrB9C,aAAa,CAACuE,MAAM,CAAC,CAAC,EAAEvE,aAAa,CAAC8B,MAAM,EAAE,GAAGyB,GAAG,CAAC;IACzD;IAEA,IAAI,CAACL,YAAY,CAACoB,QAAQ,CAACpF,eAAe,CAAC,EAAE;MACzC,IAAIsF,QAAQ,GAAGC,4BAA4B,CAACvB,YAAY,CAAC;MAEzD3D,SAAS,CAACmD,UAAU,GAAG,IAAI;MAC3BnD,SAAS,CAACqD,CAAC,GAAG4B,QAAQ,CAAC5B,CAAC;MACxBrD,SAAS,CAACsD,CAAC,GAAG2B,QAAQ,CAAC3B,CAAC;IAC5B;EACJ;EAEA,SAAS6B,cAAcA,CAACC,MAAM,EAAEC,MAAM,EAAEC,aAAa,GAAG,IAAI,EAAE;IAC1D,IAAIlB,OAAO,GAAG7C,eAAe,CAACO,OAAO;IAErC,IAAIuD,MAAM,EAAE;MACR,MAAME,cAAc,GAAGnB,OAAO,CAACxC,GAAG,CAAC4D,CAAC,IAAI;QACpC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,KAAKgC,MAAM,CAACI,KAAK,CAACpC,CAAC,IAAImC,CAAC,CAACC,KAAK,CAACnC,CAAC,KAAK+B,MAAM,CAACI,KAAK,CAACnC,CAAC,EAAE;UAC9D;UACA,oBAAOnE,KAAK,CAACuG,YAAY,CAACF,CAAC,EAAE;YAAEf,KAAK,EAAEY,MAAM,CAACI,KAAK,CAAChB;UAAM,CAAC,CAAC;QAC/D,CAAC,MAAM,IAAIa,aAAa,IAAIE,CAAC,CAACC,KAAK,CAACpC,CAAC,KAAKiC,aAAa,CAACG,KAAK,CAACpC,CAAC,IAAImC,CAAC,CAACC,KAAK,CAACnC,CAAC,KAAKgC,aAAa,CAACG,KAAK,CAACnC,CAAC,EAAE;UACpG,oBAAOnE,KAAK,CAACuG,YAAY,CAACF,CAAC,EAAE;YAAEf,KAAK,EAAE;UAAG,CAAC,CAAC;QAC/C,CAAC,MACI;UACD;UACA,OAAOe,CAAC;QACZ;MACJ,CAAC,CAAC;;MAEF;MACA;MACA;MACA;MACA;;MAEApB,OAAO,GAAGmB,cAAc;IAC5B;;IAEA;IACA,KAAK,IAAIrD,CAAC,GAAGkD,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAG,CAAC,EAAEnB,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1C,IAAIuC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAInB,CAAC,IAAIsD,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAI8B,MAAM,CAACK,KAAK,CAACnC,CAAC,CAAC;MAC5E,IAAImB,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;QAC5C,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;UACzF;UACA,OAAO,IAAI;QACf,CAAC,MAAM;UACH,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,EAAE;YACnB;UACJ;QACJ;MACJ,CAAC,MAAM;QACH;MACJ;IACJ;;IAEA;IACA,KAAK,IAAIvC,CAAC,GAAGkD,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAG,CAAC,EAAEnB,CAAC,GAAGxC,GAAG,EAAEwC,CAAC,EAAE,EAAE;MAC3C,IAAIuC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAInB,CAAC,IAAIsD,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAI8B,MAAM,CAACK,KAAK,CAACnC,CAAC,CAAC;MAC5E,IAAImB,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;QAC5C,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;UACzF;UACA,OAAO,IAAI;QACf,CAAC,MAAM;UACH,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,EAAE;YACnB;UACJ;QACJ;MACJ,CAAC,MAAM;QACH;MACJ;IACJ;;IAEA;IACA,KAAK,IAAIvC,CAAC,GAAGkD,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAG,CAAC,EAAEpB,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1C,IAAIuC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACpC,CAAC,IAAImC,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAIpB,CAAC,CAAC;MAC5E,IAAIuC,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;QAC5C,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;UACzF;UACA,OAAO,IAAI;QACf,CAAC,MAAM;UACH,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,EAAE;YACnB;UACJ;QACJ;MACJ,CAAC,MAAM;QACH;MACJ;IACJ;;IAEA;IACA,KAAK,IAAIvC,CAAC,GAAGkD,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAG,CAAC,EAAEpB,CAAC,GAAGxC,GAAG,EAAEwC,CAAC,EAAE,EAAE;MAC3C,IAAIuC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACpC,CAAC,IAAImC,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAIpB,CAAC,CAAC;MAC5E,IAAIuC,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;QAC5C,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;UACzF;UACA,OAAO,IAAI;QACf,CAAC,MAAM;UACH,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,EAAE;YACnB;UACJ;QACJ;MACJ,CAAC,MAAM;QACH;MACJ;IACJ;;IAEA;IACA,KAAK,IAAIvC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxC,GAAG,EAAEwC,CAAC,EAAE,EAAE;MAC1B,IAAIuC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAGnB,CAAC,IAAIsD,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAI8B,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAGpB,CAAC,CAAC;MAEjG,IAAIuC,KAAK,EAAE;QACP,IAAIA,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC5C,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;YACxI,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;cAC3C,IAAIU,KAAK,CAACgB,KAAK,CAACpC,CAAC,GAAG+B,MAAM,CAACK,KAAK,CAACpC,CAAC,IAAI,CAAC,CAAC,IAAIoB,KAAK,CAACgB,KAAK,CAACnC,CAAC,GAAG8B,MAAM,CAACK,KAAK,CAACnC,CAAC,IAAI,CAAC,CAAC,EAAE;gBAC9E;gBACA,OAAO,IAAI;cACf,CAAC,MAAM;gBACH;cACJ;YACJ,CAAC,MAAM;cACH;cACA,OAAO,IAAI;YACf;UACJ,CAAC,MAAM;YACH,IAAImB,KAAK,CAACgB,KAAK,CAAChB,KAAK,EAAE;cACnB;YACJ;UACJ;QACJ,CAAC,MAAM;UACH;QACJ;MACJ;IACJ;;IAEA;IACA,KAAK,IAAIvC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxC,GAAG,EAAEwC,CAAC,EAAE,EAAE;MAC1B,IAAIuC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAGnB,CAAC,IAAIsD,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAI8B,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAGpB,CAAC,CAAC;MAEjG,IAAIuC,KAAK,EAAE;QACP,IAAIA,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC5C,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;YAC3F,OAAO,IAAI;UACf,CAAC,MAAM;YACH,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,EAAE;cACnB;YACJ;UACJ;QACJ,CAAC,MAAM;UACH;QACJ;MACJ;IACJ;;IAEA;IACA,KAAK,IAAIvC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxC,GAAG,EAAEwC,CAAC,EAAE,EAAE;MAC1B,IAAIuC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAGnB,CAAC,IAAIsD,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAI8B,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAGpB,CAAC,CAAC;MAEjG,IAAIuC,KAAK,EAAE;QACP,IAAIA,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC5C,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;YACxI,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;cAC3C,IAAIU,KAAK,CAACgB,KAAK,CAACpC,CAAC,GAAG+B,MAAM,CAACK,KAAK,CAACpC,CAAC,IAAI,CAAC,CAAC,IAAIoB,KAAK,CAACgB,KAAK,CAACnC,CAAC,GAAG8B,MAAM,CAACK,KAAK,CAACnC,CAAC,IAAI,CAAC,EAAE;gBAC7E;gBACA,OAAO,IAAI;cACf,CAAC,MAAM;gBACH;cACJ;YACJ,CAAC,MAAM;cACH;cACA,OAAO,IAAI;YACf;UACJ,CAAC,MAAM;YACH,IAAImB,KAAK,CAACgB,KAAK,CAAChB,KAAK,EAAE;cACnB;YACJ;UACJ;QACJ,CAAC,MAAM;UACH;QACJ;MACJ;IACJ;;IAEA;IACA,KAAK,IAAIvC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxC,GAAG,EAAEwC,CAAC,EAAE,EAAE;MAC1B,IAAIuC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAGnB,CAAC,IAAIsD,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAI8B,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAGpB,CAAC,CAAC;MAEjG,IAAIuC,KAAK,EAAE;QACP,IAAIA,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC5C,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;YAC3F,OAAO,IAAI;UACf,CAAC,MAAM;YACH,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,EAAE;cACnB;YACJ;UACJ;QACJ,CAAC,MAAM;UACH;QACJ;MACJ;IACJ;;IAEA;IACA,IAAIkB,OAAO,GAAGvB,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAG,CAAC,IAAImC,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAI8B,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAG,CAAC,CAAC;IACnG,IAAIsC,OAAO,GAAGxB,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAG,CAAC,IAAImC,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAI8B,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAG,CAAC,CAAC;IACnG,IAAIuC,OAAO,GAAGzB,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAG,CAAC,IAAImC,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAI8B,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAG,CAAC,CAAC;IACnG,IAAIwC,OAAO,GAAG1B,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAG,CAAC,IAAImC,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAI8B,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAG,CAAC,CAAC;IACnG,IAAIyC,OAAO,GAAG3B,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAG,CAAC,IAAImC,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAI8B,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAG,CAAC,CAAC;IACnG,IAAI0C,OAAO,GAAG5B,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAG,CAAC,IAAImC,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAI8B,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAG,CAAC,CAAC;IACnG,IAAI2C,OAAO,GAAG7B,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAG,CAAC,IAAImC,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAI8B,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAG,CAAC,CAAC;IACnG,IAAI4C,OAAO,GAAG9B,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAG,CAAC,IAAImC,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAI8B,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAG,CAAC,CAAC;IAEnG,IAAIqC,OAAO,EAAE;MACT,IAAIA,OAAO,CAACF,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAI4B,OAAO,CAACF,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,IAAI6B,OAAO,EAAE;MACT,IAAIA,OAAO,CAACH,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAI6B,OAAO,CAACH,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,IAAI8B,OAAO,EAAE;MACT,IAAIA,OAAO,CAACJ,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAI8B,OAAO,CAACJ,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,IAAI+B,OAAO,EAAE;MACT,IAAIA,OAAO,CAACL,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAI+B,OAAO,CAACL,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,IAAIgC,OAAO,EAAE;MACT,IAAIA,OAAO,CAACN,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAIgC,OAAO,CAACN,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,IAAIiC,OAAO,EAAE;MACT,IAAIA,OAAO,CAACP,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAIiC,OAAO,CAACP,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,IAAIkC,OAAO,EAAE;MACT,IAAIA,OAAO,CAACR,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAIkC,OAAO,CAACR,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,IAAImC,OAAO,EAAE;MACT,IAAIA,OAAO,CAACT,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAImC,OAAO,CAACT,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,OAAO,KAAK;EAChB;EAEA,SAASoC,cAAcA,CAACf,MAAM,EAAEC,MAAM,EAAEC,aAAa,GAAG,IAAI,EAAE;IAC1D,IAAIlB,OAAO,GAAG7C,eAAe,CAACO,OAAO;IAErC,IAAIuD,MAAM,EAAE;MACR,MAAME,cAAc,GAAGnB,OAAO,CAACxC,GAAG,CAAC4D,CAAC,IAAI;QACpC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,KAAKgC,MAAM,CAACI,KAAK,CAACpC,CAAC,IAAImC,CAAC,CAACC,KAAK,CAACnC,CAAC,KAAK+B,MAAM,CAACI,KAAK,CAACnC,CAAC,EAAE;UAC9D;UACA,oBAAOnE,KAAK,CAACuG,YAAY,CAACF,CAAC,EAAE;YAAEf,KAAK,EAAEY,MAAM,CAACI,KAAK,CAAChB;UAAM,CAAC,CAAC;QAC/D,CAAC,MAAM,IAAIa,aAAa,IAAIE,CAAC,CAACC,KAAK,CAACpC,CAAC,KAAKiC,aAAa,CAACG,KAAK,CAACpC,CAAC,IAAImC,CAAC,CAACC,KAAK,CAACnC,CAAC,KAAKgC,aAAa,CAACG,KAAK,CAACnC,CAAC,EAAE;UACpG,oBAAOnE,KAAK,CAACuG,YAAY,CAACF,CAAC,EAAE;YAAEf,KAAK,EAAE;UAAG,CAAC,CAAC;QAC/C,CAAC,MACI;UACD;UACA,OAAOe,CAAC;QACZ;MACJ,CAAC,CAAC;MAEFpB,OAAO,GAAGmB,cAAc;IAC5B;;IAEA;IACA,KAAK,IAAIrD,CAAC,GAAGkD,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAG,CAAC,EAAEnB,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1C,IAAIuC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAInB,CAAC,IAAIsD,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAI8B,MAAM,CAACK,KAAK,CAACnC,CAAC,CAAC;MAC5E,IAAImB,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;QAC5C,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;UACzF;UACA,OAAO,IAAI;QACf,CAAC,MAAM;UACH,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,EAAE;YACnB;UACJ;QACJ;MACJ,CAAC,MAAM;QACH;MACJ;IACJ;;IAEA;IACA,KAAK,IAAIvC,CAAC,GAAGkD,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAG,CAAC,EAAEnB,CAAC,GAAGxC,GAAG,EAAEwC,CAAC,EAAE,EAAE;MAC3C,IAAIuC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAInB,CAAC,IAAIsD,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAI8B,MAAM,CAACK,KAAK,CAACnC,CAAC,CAAC;MAC5E,IAAImB,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;QAC5C,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;UACzF;UACA,OAAO,IAAI;QACf,CAAC,MAAM;UACH,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,EAAE;YACnB;UACJ;QACJ;MACJ,CAAC,MAAM;QACH;MACJ;IACJ;;IAEA;IACA,KAAK,IAAIvC,CAAC,GAAGkD,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAG,CAAC,EAAEpB,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1C,IAAIuC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACpC,CAAC,IAAImC,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAIpB,CAAC,CAAC;MAC5E,IAAIuC,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;QAC5C,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;UACzF;UACA,OAAO,IAAI;QACf,CAAC,MAAM;UACH,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,EAAE;YACnB;UACJ;QACJ;MACJ,CAAC,MAAM;QACH;MACJ;IACJ;;IAEA;IACA,KAAK,IAAIvC,CAAC,GAAGkD,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAG,CAAC,EAAEpB,CAAC,GAAGxC,GAAG,EAAEwC,CAAC,EAAE,EAAE;MAC3C,IAAIuC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACpC,CAAC,IAAImC,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAIpB,CAAC,CAAC;MAC5E,IAAIuC,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;QAC5C,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;UACzF;UACA,OAAO,IAAI;QACf,CAAC,MAAM;UACH,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,EAAE;YACnB;UACJ;QACJ;MACJ,CAAC,MAAM;QACH;MACJ;IACJ;;IAEA;IACA,KAAK,IAAIvC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxC,GAAG,EAAEwC,CAAC,EAAE,EAAE;MAC1B,IAAIuC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAGnB,CAAC,IAAIsD,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAI8B,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAGpB,CAAC,CAAC;MAEjG,IAAIuC,KAAK,EAAE;QACP,IAAIA,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC5C,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;YAC3F;YACA,OAAO,IAAI;UACf,CAAC,MAAM;YACH,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,EAAE;cACnB;YACJ;UACJ;QACJ,CAAC,MAAM;UACH;QACJ;MACJ;IACJ;;IAEA;IACA,KAAK,IAAIvC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxC,GAAG,EAAEwC,CAAC,EAAE,EAAE;MAC1B,IAAIuC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAGnB,CAAC,IAAIsD,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAI8B,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAGpB,CAAC,CAAC;MAEjG,IAAIuC,KAAK,EAAE;QACP,IAAIA,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC5C,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;YACxI,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;cAC3C,IAAIU,KAAK,CAACgB,KAAK,CAACpC,CAAC,GAAG+B,MAAM,CAACK,KAAK,CAACpC,CAAC,IAAI,CAAC,IAAIoB,KAAK,CAACgB,KAAK,CAACnC,CAAC,GAAG8B,MAAM,CAACK,KAAK,CAACnC,CAAC,IAAI,CAAC,EAAE;gBAC5E;gBACA,OAAO,IAAI;cACf,CAAC,MAAM;gBACH;cACJ;YACJ,CAAC,MAAM;cACH;cACA,OAAO,IAAI;YACf;UACJ,CAAC,MAAM;YACH,IAAImB,KAAK,CAACgB,KAAK,CAAChB,KAAK,EAAE;cACnB;YACJ;UACJ;QACJ,CAAC,MAAM;UACH;QACJ;MACJ;IACJ;;IAEA;IACA,KAAK,IAAIvC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxC,GAAG,EAAEwC,CAAC,EAAE,EAAE;MAC1B,IAAIuC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAGnB,CAAC,IAAIsD,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAI8B,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAGpB,CAAC,CAAC;MAEjG,IAAIuC,KAAK,EAAE;QACP,IAAIA,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC5C,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;YAC3F;YACA,OAAO,IAAI;UACf,CAAC,MAAM;YACH,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,EAAE;cACnB;YACJ;UACJ;QACJ,CAAC,MAAM;UACH;QACJ;MACJ;IACJ;;IAEA;IACA,KAAK,IAAIvC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxC,GAAG,EAAEwC,CAAC,EAAE,EAAE;MAC1B,IAAIuC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAGnB,CAAC,IAAIsD,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAI8B,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAGpB,CAAC,CAAC;MAEjG,IAAIuC,KAAK,EAAE;QACP,IAAIA,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC5C,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;YACxI,IAAIU,KAAK,CAACgB,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;cAC3C,IAAIU,KAAK,CAACgB,KAAK,CAACpC,CAAC,GAAG+B,MAAM,CAACK,KAAK,CAACpC,CAAC,IAAI,CAAC,IAAIoB,KAAK,CAACgB,KAAK,CAACnC,CAAC,GAAG8B,MAAM,CAACK,KAAK,CAACnC,CAAC,IAAI,CAAC,CAAC,EAAE;gBAC7E;gBACA,OAAO,IAAI;cACf,CAAC,MAAM;gBACH;cACJ;YACJ,CAAC,MAAM;cACH;cACA,OAAO,IAAI;YACf;UACJ,CAAC,MAAM;YACH,IAAImB,KAAK,CAACgB,KAAK,CAAChB,KAAK,EAAE;cACnB;YACJ;UACJ;QACJ,CAAC,MAAM;UACH;QACJ;MACJ;IACJ;;IAEA;IACA,IAAIkB,OAAO,GAAGvB,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAG,CAAC,IAAImC,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAI8B,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAG,CAAC,CAAC;IACnG,IAAIsC,OAAO,GAAGxB,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAG,CAAC,IAAImC,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAI8B,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAG,CAAC,CAAC;IACnG,IAAIuC,OAAO,GAAGzB,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAG,CAAC,IAAImC,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAI8B,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAG,CAAC,CAAC;IACnG,IAAIwC,OAAO,GAAG1B,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAG,CAAC,IAAImC,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAI8B,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAG,CAAC,CAAC;IACnG,IAAIyC,OAAO,GAAG3B,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAG,CAAC,IAAImC,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAI8B,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAG,CAAC,CAAC;IACnG,IAAI0C,OAAO,GAAG5B,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAG,CAAC,IAAImC,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAI8B,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAG,CAAC,CAAC;IACnG,IAAI2C,OAAO,GAAG7B,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAG,CAAC,IAAImC,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAI8B,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAG,CAAC,CAAC;IACnG,IAAI4C,OAAO,GAAG9B,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAG,CAAC,IAAImC,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAI8B,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAG,CAAC,CAAC;IAEnG,IAAIqC,OAAO,EAAE;MACT,IAAIA,OAAO,CAACF,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAI4B,OAAO,CAACF,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,IAAI6B,OAAO,EAAE;MACT,IAAIA,OAAO,CAACH,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAI6B,OAAO,CAACH,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,IAAI8B,OAAO,EAAE;MACT,IAAIA,OAAO,CAACJ,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAI8B,OAAO,CAACJ,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,IAAI+B,OAAO,EAAE;MACT,IAAIA,OAAO,CAACL,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAI+B,OAAO,CAACL,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,IAAIgC,OAAO,EAAE;MACT,IAAIA,OAAO,CAACN,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAIgC,OAAO,CAACN,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,IAAIiC,OAAO,EAAE;MACT,IAAIA,OAAO,CAACP,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAIiC,OAAO,CAACP,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,IAAIkC,OAAO,EAAE;MACT,IAAIA,OAAO,CAACR,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAIkC,OAAO,CAACR,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,IAAImC,OAAO,EAAE;MACT,IAAIA,OAAO,CAACT,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAImC,OAAO,CAACT,KAAK,CAAChB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,OAAO,KAAK;EAChB;EAEA,SAASW,SAASA,CAACrB,CAAC,EAAEC,CAAC,EAAE;IACrB,IAAIc,OAAO,GAAGhD,YAAY;IAC1B,IAAIgF,QAAQ,GAAG3F,aAAa;IAE5B,IAAI4F,YAAY,GAAGC,0BAA0B,CAACjD,CAAC,EAAEC,CAAC,CAAC;IACnD,IAAI8B,MAAM,GAAGhB,OAAO,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,IAAIpD,sBAAsB,CAACoD,CAAC,IAAImC,CAAC,CAACC,KAAK,CAACnC,CAAC,IAAIrD,sBAAsB,CAACqD,CAAC,CAAC;IAE9G,IAAIe,KAAK,GAAGkC,aAAa,CAACnB,MAAM,CAAC;IACjC,IAAIX,KAAK,GAAG+B,QAAQ,CAACpB,MAAM,CAAC;;IAE5B;IACA,IAAIX,KAAK,IAAI3E,MAAM,CAAC2G,IAAI,EAAE;MACtB,IAAIC,YAAY,CAACrC,KAAK,CAAC,EAAE;QACrBtE,cAAc,CAACiD,eAAe,GAAG,KAAK;QACtCjD,cAAc,CAACgD,gBAAgB,GAAG,KAAK;MAC3C,CAAC,MAAM;QACHhD,cAAc,CAACmD,eAAe,GAAG,KAAK;QACtCnD,cAAc,CAACkD,gBAAgB,GAAG,KAAK;MAC3C;IACJ;;IAEA;IACA,IAAIwB,KAAK,IAAI3E,MAAM,CAAC6G,IAAI,EAAE;MACtB,IAAIvB,MAAM,CAACK,KAAK,CAACpC,CAAC,IAAI,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACnC,CAAC,IAAI,CAAC,EAAE;QAC5CvD,cAAc,CAACgD,gBAAgB,GAAG,KAAK;MAC3C;MAEA,IAAIqC,MAAM,CAACK,KAAK,CAACpC,CAAC,IAAI,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACnC,CAAC,IAAI,CAAC,EAAE;QAC5CvD,cAAc,CAACkD,gBAAgB,GAAG,KAAK;MAC3C;MAEA,IAAImC,MAAM,CAACK,KAAK,CAACpC,CAAC,IAAI,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACnC,CAAC,IAAI,CAAC,EAAE;QAC5CvD,cAAc,CAACiD,eAAe,GAAG,KAAK;MAC1C;MAEA,IAAIoC,MAAM,CAACK,KAAK,CAACpC,CAAC,IAAI,CAAC,IAAI+B,MAAM,CAACK,KAAK,CAACnC,CAAC,IAAI,CAAC,EAAE;QAC5CvD,cAAc,CAACmD,eAAe,GAAG,KAAK;MAC1C;IACJ;IAEA,IAAI0D,CAAC,GAAGrH,cAAc,CAAC6F,MAAM,EAAEiB,YAAY,EAAED,QAAQ,CAAC;;IAEtD;IACA;IACA;IACA;;IAEA;IACA;;IAEA;IACA;IACA,MAAMS,oBAAoB,GAAGD,CAAC,CAAChF,GAAG,CAACY,GAAG,IAAI,CAAC,GAAGA,GAAG,CAAC,CAAC;IACnD/B,aAAa,CAACuE,MAAM,CAAC,CAAC,EAAEvE,aAAa,CAAC8B,MAAM,EAAE,GAAGsE,oBAAoB,CAAC;IAEtE3G,aAAa,CAAC8E,MAAM,CAAC,CAAC,EAAE9E,aAAa,CAACqC,MAAM,CAAC;IAC7CjC,mBAAmB,CAAC,CAACD,aAAa,CAAC;;IAEnC;IACA,IAAIoE,KAAK,IAAI3E,MAAM,CAACgH,IAAI,EAAE;MACtB,IAAIC,IAAI,CAACC,GAAG,CAAC5B,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAGgD,YAAY,CAACZ,KAAK,CAACpC,CAAC,CAAC,IAAI,CAAC,EAAE;QACtD,IAAI+B,MAAM,CAACK,KAAK,CAAChB,KAAK,CAACV,KAAK,CAACpE,eAAe,CAAC,CAAC,CAAC,CAAC,IAAIE,MAAM,CAACoH,KAAK,EAAE;UAC9DjH,SAAS,CAACmD,UAAU,GAAG,IAAI;UAC3BnD,SAAS,CAACqD,CAAC,GAAG+B,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAG,CAAC;UAChCrD,SAAS,CAACsD,CAAC,GAAG8B,MAAM,CAACK,KAAK,CAACnC,CAAC;QAChC,CAAC,MAAM;UACHtD,SAAS,CAACmD,UAAU,GAAG,IAAI;UAC3BnD,SAAS,CAACqD,CAAC,GAAG+B,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAG,CAAC;UAChCrD,SAAS,CAACsD,CAAC,GAAG8B,MAAM,CAACK,KAAK,CAACnC,CAAC;QAChC;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MACJ,CAAC,MAAM;QACHtD,SAAS,CAACmD,UAAU,GAAG,KAAK;QAC5BnD,SAAS,CAACqD,CAAC,GAAG,CAAC,CAAC;QAChBrD,SAAS,CAACsD,CAAC,GAAG,CAAC,CAAC;MACpB;IACJ,CAAC,MAAM;MACHtD,SAAS,CAACmD,UAAU,GAAG,KAAK;MAC5BnD,SAAS,CAACqD,CAAC,GAAG,CAAC,CAAC;MAChBrD,SAAS,CAACsD,CAAC,GAAG,CAAC,CAAC;IACpB;IAEA9C,eAAe,CAACJ,SAAS,GAAG,CAAC,CAAC;IAE9BiC,eAAe,CAAC,CAAC;EACrB;;EAEA;EACA,SAAS6E,qBAAqBA,CAAC7D,CAAC,EAAE;IAC9B8D,kBAAkB,CAAC9D,CAAC,CAAC;EACzB;;EAEA;EACA,SAAS+D,qBAAqBA,CAAC9D,CAAC,EAAE;IAC9B+D,kBAAkB,CAAC/D,CAAC,CAAC;EACzB;;EAEA;EACA,SAASgD,0BAA0BA,CAACjD,CAAC,EAAEC,CAAC,EAAE;IACtC,OAAO/B,eAAe,CAACO,OAAO,CAACyC,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACpC,CAAC,KAAKA,CAAC,IAAImC,CAAC,CAACC,KAAK,CAACnC,CAAC,KAAKA,CAAC,CAAC;EAChF;;EAEA;EACA,SAASgE,uBAAuBA,CAAC7C,KAAK,EAAE;IACpC,OAAOlD,eAAe,CAACO,OAAO,CAACyC,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAAChB,KAAK,IAAIA,KAAK,CAAC;EACpE;;EAEA;EACA,SAAS8C,iBAAiBA,CAACnC,MAAM,EAAE;IAC/B,OAAOA,MAAM,IAAI,CAACA,MAAM,CAACK,KAAK,CAAChB,KAAK;EACxC;;EAEA;EACA,SAAS+C,sBAAsBA,CAACC,IAAI,EAAE;IAClC,OAAOf,YAAY,CAACe,IAAI,CAAChC,KAAK,CAAChB,KAAK,CAACV,KAAK,CAACpE,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG8H,IAAI,CAAChC,KAAK,CAACpC,CAAC,IAAI,CAAC,GAAGoE,IAAI,CAAChC,KAAK,CAACpC,CAAC,IAAI,CAAC;EAC3G;;EAEA;EACA,SAASqE,YAAYA,CAACC,OAAO,EAAEC,OAAO,EAAE;IACpC,IAAI,CAACD,OAAO,IAAI,CAACC,OAAO,EAAE;MACtB;IACJ;IAEA,IAAIC,MAAM,GAAGF,OAAO,CAAClC,KAAK,CAAChB,KAAK,CAACV,KAAK,CAACpE,eAAe,CAAC,CAAC,CAAC,CAAC;IAC1D,IAAImI,MAAM,GAAGF,OAAO,CAACnC,KAAK,CAAChB,KAAK,CAACV,KAAK,CAACpE,eAAe,CAAC,CAAC,CAAC,CAAC;IAE1D,OAAOkI,MAAM,IAAIC,MAAM;EAC3B;;EAEA;EACA,SAASC,wBAAwBA,CAAC3C,MAAM,EAAEX,KAAK,EAAE;IAC7C,IAAImC,CAAC,GAAGJ,QAAQ,CAACpB,MAAM,CAAC;IAExB,OAAOwB,CAAC,IAAInC,KAAK;EACrB;;EAEA;EACA,SAASuD,uBAAuBA,CAACP,IAAI,EAAE;IACnC,OAAOf,YAAY,CAACe,IAAI,CAAChC,KAAK,CAAChB,KAAK,CAACV,KAAK,CAACpE,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG8H,IAAI,CAAChC,KAAK,CAACpC,CAAC,IAAI,CAAC,GAAGoE,IAAI,CAAChC,KAAK,CAACpC,CAAC,IAAI,CAAC;EAC3G;;EAEA;EACA,SAASqD,YAAYA,CAACrC,KAAK,EAAE;IACzB,OAAOA,KAAK,IAAIxE,MAAM,CAACoH,KAAK;EAChC;;EAEA;EACA,SAASgB,YAAYA,CAAC5D,KAAK,EAAE;IACzB,OAAOA,KAAK,IAAIxE,MAAM,CAACqI,KAAK;EAChC;;EAEA;EACA,SAASC,yBAAyBA,CAAA,EAAG;IACjC,OAAOpI,cAAc,CAACiD,eAAe,IACjCvC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,IAC1BA,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,IAC1BA,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,IAC1BA,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG;EAClC;;EAEA;EACA,SAAS2H,0BAA0BA,CAAA,EAAG;IAClC,OAAOrI,cAAc,CAACgD,gBAAgB,IAClCtC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,IAC1BA,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,IAC1BA,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG;EAClC;;EAEA;EACA,SAAS4H,yBAAyBA,CAAA,EAAG;IACjC,OAAOtI,cAAc,CAACmD,eAAe,IACjCzC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,IAC1BA,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,IAC1BA,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,IAC1BA,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG;EAClC;;EAEA;EACA,SAAS6H,0BAA0BA,CAAA,EAAG;IAClC,OAAOvI,cAAc,CAACkD,gBAAgB,IAClCxC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,IAC1BA,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,IAC1BA,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG;EAClC;;EAEA;EACA,SAASyE,4BAA4BA,CAACqD,WAAW,EAAE;IAC/C,IAAItE,MAAM,GAAGsE,WAAW,CAACxE,KAAK,CAAC,EAAE,CAAC;;IAElC;IACA,IAAIE,MAAM,CAAC1B,MAAM,IAAI,CAAC,EAAE;MACpB;IACJ;IAEA,IAAIiG,MAAM,GAAGvE,MAAM,CAAC,CAAC,CAAC,CAACwE,QAAQ,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IAC/C,IAAIC,MAAM,GAAG1E,MAAM,CAAC,CAAC,CAAC;;IAEtB;IACA;IACA,OAAO;MAAEZ,CAAC,EAAE3D,GAAG,GAAGmD,MAAM,CAAC8F,MAAM,CAAC;MAAErF,CAAC,EAAEkF,MAAM,CAACI,UAAU,CAAC,CAAC,CAAC,GAAG;IAAG,CAAC;EACpE;EAEA,SAASxF,4BAA4BA,CAACC,CAAC,EAAEC,CAAC,EAAE;IACxC,OAAQ,GAAEuF,MAAM,CAACC,YAAY,CAACxF,CAAC,GAAG,EAAE,CAAE,GAAE5D,GAAG,GAAG2D,CAAE,EAAC,CAAC0F,WAAW,CAAC,CAAC;EACnE;EAEA,SAASC,6BAA6BA,CAACrB,OAAO,EAAEC,OAAO,EAAE;IACrD,IAAI,CAACD,OAAO,IAAI,CAACC,OAAO,EAAE;MACtB,OAAO,KAAK;IAChB;IAEA,OAAOD,OAAO,CAAClC,KAAK,CAACpC,CAAC,IAAIuE,OAAO,CAACnC,KAAK,CAACpC,CAAC,IAAIsE,OAAO,CAAClC,KAAK,CAACnC,CAAC,IAAIsE,OAAO,CAACnC,KAAK,CAACnC,CAAC;EACnF;;EAEA;EACA,SAAS2F,qBAAqBA,CAAC7D,MAAM,EAAE;IACnC,IAAI,CAAC2C,wBAAwB,CAAC3C,MAAM,EAAEtF,MAAM,CAACgH,IAAI,CAAC,EAAE;MAChD;IACJ;IAEA,IAAIzC,KAAK,GAAGkC,aAAa,CAACnB,MAAM,CAAC,EAAC;;IAElC,IAAI8D,KAAK,GAAG,EAAE;IAEd,IAAIC,eAAe,GAAG,CAAC;IACvB,IAAIC,eAAe,GAAG,CAAC;;IAEvB;IACA,IAAI1C,YAAY,CAACrC,KAAK,CAAC,EAAE;MACrB8E,eAAe,IAAI,CAAC,CAAC;MACrBC,eAAe,IAAI,CAAC,CAAC;IACzB;;IAEA;IACA,IAAIC,YAAY,GAAG/C,0BAA0B,CAAClB,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAG8F,eAAe,EAAE/D,MAAM,CAACK,KAAK,CAACnC,CAAC,CAAC,EAAC;IAChG,IAAIgG,YAAY,GAAGhD,0BAA0B,CAAClB,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAG+F,eAAe,EAAEhE,MAAM,CAACK,KAAK,CAACnC,CAAC,CAAC,EAAC;;IAEhG;IACA,IAAIiG,SAAS,GAAGjD,0BAA0B,CAAClB,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAG8F,eAAe,EAAE/D,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAG6F,eAAe,CAAC;IAC9G,IAAIK,SAAS,GAAGlD,0BAA0B,CAAClB,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAG8F,eAAe,EAAE/D,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAI6F,eAAe,GAAG,CAAC,CAAE,CAAC;;IAErH;IACA,IAAIM,eAAe,GAAGzJ,SAAS,CAACmD,UAAU,GAAGmD,0BAA0B,CAACtG,SAAS,CAACqD,CAAC,EAAErD,SAAS,CAACsD,CAAC,CAAC,GAAG,EAAE;IAEtG,IAAIoG,2BAA2B,GAAGnC,iBAAiB,CAAC8B,YAAY,CAAC;;IAEjE;IACA,IAAIK,2BAA2B,EAAE;MAC7BR,KAAK,CAAC9G,IAAI,CAACiH,YAAY,CAAC;IAC5B;;IAEA;IACA;IACA,IAAIK,2BAA2B,IAAInC,iBAAiB,CAAC+B,YAAY,CAAC,IAAI9B,sBAAsB,CAACpC,MAAM,CAAC,EAAE;MAClG8D,KAAK,CAAC9G,IAAI,CAACkH,YAAY,CAAC;IAC5B;;IAEA;IACA,IAAI,CAAC/B,iBAAiB,CAACgC,SAAS,CAAC,IAAI,CAAC7B,YAAY,CAAC6B,SAAS,EAAEnE,MAAM,CAAC,EAAE;MACnE8D,KAAK,CAAC9G,IAAI,CAACmH,SAAS,CAAC;IACzB;;IAEA;IACA,IAAI,CAAChC,iBAAiB,CAACiC,SAAS,CAAC,IAAI,CAAC9B,YAAY,CAAC8B,SAAS,EAAEpE,MAAM,CAAC,EAAE;MACnE8D,KAAK,CAAC9G,IAAI,CAACoH,SAAS,CAAC;IACzB;;IAEA;IACA,IAAIC,eAAe,KAAKT,6BAA6B,CAACS,eAAe,EAAEF,SAAS,CAAC,IAAIP,6BAA6B,CAACS,eAAe,EAAED,SAAS,CAAC,CAAC,EAAE;MAC7IN,KAAK,CAAC9G,IAAI,CAACqH,eAAe,CAAC;IAC/B;IAEA,OAAO;MAAEhF,KAAK,EAAEW,MAAM;MAAE8D,KAAK,EAAEA;IAAM,CAAC;EAC1C;;EAEA;EACA,SAASS,qBAAqBA,CAACvE,MAAM,EAAEwE,IAAI,GAAG,IAAI,EAAE;IAChD,IAAI,CAAC7B,wBAAwB,CAAC3C,MAAM,EAAEtF,MAAM,CAAC6G,IAAI,CAAC,IAAIiD,IAAI,EAAE;MACxD;IACJ;IAEA,IAAIV,KAAK,GAAG,EAAE;IAEd,KAAK,IAAIhH,CAAC,GAAGkD,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAG,CAAC,EAAEnB,CAAC,GAAGxC,GAAG,EAAEwC,CAAC,EAAE,EAAE;MAC3C,IAAImE,YAAY,GAAGC,0BAA0B,CAACpE,CAAC,EAAEkD,MAAM,CAACK,KAAK,CAACnC,CAAC,CAAC;MAEhE,IAAIiE,iBAAiB,CAAClB,YAAY,CAAC,EAAE;QACjC6C,KAAK,CAAC9G,IAAI,CAACiE,YAAY,CAAC;MAC5B,CAAC,MAAM;QACH,IAAI,CAACqB,YAAY,CAACtC,MAAM,EAAEiB,YAAY,CAAC,EAAE;UACrC6C,KAAK,CAAC9G,IAAI,CAACiE,YAAY,CAAC;QAC5B;QACA;MACJ;IACJ;IAEA,KAAK,IAAInE,CAAC,GAAGkD,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAG,CAAC,EAAEnB,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1C,IAAImE,YAAY,GAAGC,0BAA0B,CAACpE,CAAC,EAAEkD,MAAM,CAACK,KAAK,CAACnC,CAAC,CAAC;MAEhE,IAAIiE,iBAAiB,CAAClB,YAAY,CAAC,EAAE;QACjC6C,KAAK,CAAC9G,IAAI,CAACiE,YAAY,CAAC;MAC5B,CAAC,MAAM;QACH,IAAI,CAACqB,YAAY,CAACtC,MAAM,EAAEiB,YAAY,CAAC,EAAE;UACrC6C,KAAK,CAAC9G,IAAI,CAACiE,YAAY,CAAC;QAC5B;QACA;MACJ;IACJ;IAEA,KAAK,IAAInE,CAAC,GAAGkD,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAG,CAAC,EAAEpB,CAAC,GAAGxC,GAAG,EAAEwC,CAAC,EAAE,EAAE;MAC3C,IAAImE,YAAY,GAAGC,0BAA0B,CAAClB,MAAM,CAACK,KAAK,CAACpC,CAAC,EAAEnB,CAAC,CAAC;MAEhE,IAAIqF,iBAAiB,CAAClB,YAAY,CAAC,EAAE;QACjC6C,KAAK,CAAC9G,IAAI,CAACiE,YAAY,CAAC;MAC5B,CAAC,MAAM;QACH,IAAI,CAACqB,YAAY,CAACtC,MAAM,EAAEiB,YAAY,CAAC,EAAE;UACrC6C,KAAK,CAAC9G,IAAI,CAACiE,YAAY,CAAC;QAC5B;QACA;MACJ;IACJ;IAEA,KAAK,IAAInE,CAAC,GAAGkD,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAG,CAAC,EAAEpB,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1C,IAAImE,YAAY,GAAGC,0BAA0B,CAAClB,MAAM,CAACK,KAAK,CAACpC,CAAC,EAAEnB,CAAC,CAAC;MAEhE,IAAIqF,iBAAiB,CAAClB,YAAY,CAAC,EAAE;QACjC6C,KAAK,CAAC9G,IAAI,CAACiE,YAAY,CAAC;MAC5B,CAAC,MAAM;QACH,IAAI,CAACqB,YAAY,CAACtC,MAAM,EAAEiB,YAAY,CAAC,EAAE;UACrC6C,KAAK,CAAC9G,IAAI,CAACiE,YAAY,CAAC;QAC5B;QACA;MACJ;IACJ;IAEA,OAAO;MAAE5B,KAAK,EAAEW,MAAM;MAAE8D,KAAK,EAAEA;IAAM,CAAC;EAC1C;;EAEA;EACA,SAASW,sBAAsBA,CAACzE,MAAM,EAAEwE,IAAI,GAAG,IAAI,EAAE;IACjD,IAAI,CAAC7B,wBAAwB,CAAC3C,MAAM,EAAEtF,MAAM,CAACgK,MAAM,CAAC,IAAIF,IAAI,EAAE;MAC1D;IACJ;IAEA,IAAIV,KAAK,GAAG,EAAE;IAEd,IAAIa,OAAO,GAAG,CAAC;IAEf,IAAIC,QAAQ,GAAG,IAAI;IACnB,IAAIC,QAAQ,GAAG,IAAI;IACnB,IAAIC,QAAQ,GAAG,IAAI;IACnB,IAAIC,QAAQ,GAAG,IAAI;IAEnB,KAAK,IAAIjI,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIxC,GAAG,EAAEwC,CAAC,EAAE,EAAE;MAC3B,IAAI,CAAC8H,QAAQ,IAAI,CAACC,QAAQ,IAAI,CAACC,QAAQ,IAAI,CAACC,QAAQ,EAAE;QAClD;MACJ;MAEA,IAAIC,OAAO,GAAGJ,QAAQ,GAAG1D,0BAA0B,CAAClB,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAGnB,CAAC,EAAEkD,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAGpB,CAAC,CAAC,GAAG,IAAI;MAClG,IAAImI,OAAO,GAAGJ,QAAQ,GAAG3D,0BAA0B,CAAClB,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAGnB,CAAC,EAAEkD,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAGpB,CAAC,CAAC,GAAG,IAAI;MAClG,IAAIoI,OAAO,GAAGJ,QAAQ,GAAG5D,0BAA0B,CAAClB,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAGnB,CAAC,EAAEkD,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAGpB,CAAC,CAAC,GAAG,IAAI;MAClG,IAAIqI,OAAO,GAAGJ,QAAQ,GAAG7D,0BAA0B,CAAClB,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAGnB,CAAC,EAAEkD,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAGpB,CAAC,CAAC,GAAG,IAAI;MAElG,IAAIkI,OAAO,IAAI7C,iBAAiB,CAAC6C,OAAO,CAAC,EAAE;QACvClB,KAAK,CAAC9G,IAAI,CAACgI,OAAO,CAAC;MACvB,CAAC,MAAM;QACH,IAAI,CAAC1C,YAAY,CAACtC,MAAM,EAAEgF,OAAO,CAAC,EAAE;UAChClB,KAAK,CAAC9G,IAAI,CAACgI,OAAO,CAAC;QACvB;QACAJ,QAAQ,GAAG,KAAK;MACpB;MAEA,IAAIK,OAAO,IAAI9C,iBAAiB,CAAC8C,OAAO,CAAC,EAAE;QACvCnB,KAAK,CAAC9G,IAAI,CAACiI,OAAO,CAAC;MACvB,CAAC,MAAM;QACH,IAAI,CAAC3C,YAAY,CAACtC,MAAM,EAAEiF,OAAO,CAAC,EAAE;UAChCnB,KAAK,CAAC9G,IAAI,CAACiI,OAAO,CAAC;QACvB;QACAJ,QAAQ,GAAG,KAAK;MACpB;MAEA,IAAIK,OAAO,IAAI/C,iBAAiB,CAAC+C,OAAO,CAAC,EAAE;QACvCpB,KAAK,CAAC9G,IAAI,CAACkI,OAAO,CAAC;MACvB,CAAC,MAAM;QACH,IAAI,CAAC5C,YAAY,CAACtC,MAAM,EAAEkF,OAAO,CAAC,EAAE;UAChCpB,KAAK,CAAC9G,IAAI,CAACkI,OAAO,CAAC;QACvB;QACAJ,QAAQ,GAAG,KAAK;MACpB;MAEA,IAAIK,OAAO,IAAIhD,iBAAiB,CAACgD,OAAO,CAAC,EAAE;QACvCrB,KAAK,CAAC9G,IAAI,CAACmI,OAAO,CAAC;MACvB,CAAC,MAAM;QACH,IAAI,CAAC7C,YAAY,CAACtC,MAAM,EAAEmF,OAAO,CAAC,EAAE;UAChCrB,KAAK,CAAC9G,IAAI,CAACmI,OAAO,CAAC;QACvB;QACAJ,QAAQ,GAAG,KAAK;MACpB;IACJ;IAEA,OAAO;MAAE1F,KAAK,EAAEW,MAAM;MAAE8D,KAAK,EAAEA;IAAM,CAAC;EAC1C;;EAEA;EACA,SAASsB,sBAAsBA,CAACpF,MAAM,EAAE;IACpC,IAAI,CAAC2C,wBAAwB,CAAC3C,MAAM,EAAEtF,MAAM,CAAC2K,MAAM,CAAC,EAAE;MAClD;IACJ;IAEA,IAAIC,MAAM,GAAG,CAAC;IACd,IAAIC,YAAY,GAAG,CAAC,GAAGD,MAAM;IAE7B,IAAIxB,KAAK,GAAG,EAAE;IAEd,KAAK,IAAIhH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACxB,IAAIA,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;QACtBwI,MAAM,IAAI,CAAC,CAAC;MAChB;MAEA,IAAIE,OAAO,GAAGxF,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAGqH,MAAM;MACrC,IAAIG,OAAO,GAAGzF,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAGqH,YAAY;MAE3C,IAAIG,MAAM,GAAGxE,0BAA0B,CAACsE,OAAO,EAAEC,OAAO,CAAC;MAEzD,IAAIC,MAAM,IAAIvD,iBAAiB,CAACuD,MAAM,CAAC,EAAE;QACrC5B,KAAK,CAAC9G,IAAI,CAAC0I,MAAM,CAAC;MACtB,CAAC,MAAM;QACH,IAAI,CAACpD,YAAY,CAACtC,MAAM,EAAE0F,MAAM,CAAC,EAAE;UAC/B5B,KAAK,CAAC9G,IAAI,CAAC0I,MAAM,CAAC;QACtB;MACJ;MAEAH,YAAY,IAAI,CAAC,CAAC;MAElB,IAAIzI,CAAC,IAAI,CAAC,EAAE;QACRwI,MAAM,IAAI,CAAC;QACXC,YAAY,IAAI,CAAC;MACrB;IACJ;IAEA,OAAO;MAAElG,KAAK,EAAEW,MAAM;MAAE8D,KAAK,EAAEA;IAAM,CAAC;EAC1C;;EAEA;EACA,SAAS6B,oBAAoBA,CAAC3F,MAAM,EAAE;IAClC,IAAI,CAAC2C,wBAAwB,CAAC3C,MAAM,EAAEtF,MAAM,CAAC2G,IAAI,CAAC,EAAE;MAChD;IACJ;IAEA,IAAIyC,KAAK,GAAG,EAAE;IAEd,IAAI7E,KAAK,GAAGkC,aAAa,CAACnB,MAAM,CAAC;;IAEjC;IACA,KAAK,IAAIlD,CAAC,GAAG,CAAC,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACzB,KAAK,IAAIC,CAAC,GAAG,CAAC,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QACzB,IAAI6I,WAAW,GAAG1E,0BAA0B,CAAClB,MAAM,CAACK,KAAK,CAACpC,CAAC,GAAGnB,CAAC,EAAEkD,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAGnB,CAAC,CAAC;QAEpF,IAAI6I,WAAW,IAAIzD,iBAAiB,CAACyD,WAAW,CAAC,EAAE;UAC/C9B,KAAK,CAAC9G,IAAI,CAAC4I,WAAW,CAAC;QAC3B,CAAC,MAAM;UACH,IAAI,CAACtD,YAAY,CAACtC,MAAM,EAAE4F,WAAW,CAAC,EAAE;YACpC9B,KAAK,CAAC9G,IAAI,CAAC4I,WAAW,CAAC;UAC3B;QACJ;MACJ;IACJ;;IAEA;IACA,MAAMC,gBAAgB,GAAG3E,0BAA0B,CAAClB,MAAM,CAACK,KAAK,CAACpC,CAAC,EAAE+B,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAG,CAAC,CAAC;IACvF,MAAM4H,iBAAiB,GAAG5E,0BAA0B,CAAClB,MAAM,CAACK,KAAK,CAACpC,CAAC,EAAE+B,MAAM,CAACK,KAAK,CAACnC,CAAC,GAAG,CAAC,CAAC;IAExF,IAAIoD,YAAY,CAACrC,KAAK,CAAC,IAAI8D,yBAAyB,CAAC,CAAC,EAAE;MACpDe,KAAK,CAAC9G,IAAI,CAAC6I,gBAAgB,CAAC;IAChC;IAEA,IAAIvE,YAAY,CAACrC,KAAK,CAAC,IAAI+D,0BAA0B,CAAC,CAAC,EAAE;MACrDc,KAAK,CAAC9G,IAAI,CAAC8I,iBAAiB,CAAC;IACjC;IAEA,IAAIjD,YAAY,CAAC5D,KAAK,CAAC,IAAIgE,yBAAyB,CAAC,CAAC,EAAE;MACpDa,KAAK,CAAC9G,IAAI,CAAC6I,gBAAgB,CAAC;IAChC;IAEA,IAAIhD,YAAY,CAAC5D,KAAK,CAAC,IAAIiE,0BAA0B,CAAC,CAAC,EAAE;MACrDY,KAAK,CAAC9G,IAAI,CAAC8I,iBAAiB,CAAC;IACjC;IAEA,OAAO;MAAEzG,KAAK,EAAEW,MAAM;MAAE8D,KAAK,EAAEA;IAAM,CAAC;EAC1C;;EAEA;EACA,SAASiC,qBAAqBA,CAAC/F,MAAM,EAAE;IACnC,IAAI,CAAC2C,wBAAwB,CAAC3C,MAAM,EAAEtF,MAAM,CAACsL,KAAK,CAAC,EAAE;MACjD;IACJ;IAEA,IAAIlC,KAAK,GAAG,EAAE;;IAEd;IACA,MAAMmC,SAAS,GAAG1B,qBAAqB,CAACvE,MAAM,EAAE,KAAK,CAAC,CAAC8D,KAAK;IAC5D,MAAMoC,WAAW,GAAGzB,sBAAsB,CAACzE,MAAM,EAAE,KAAK,CAAC,CAAC8D,KAAK;;IAE/D;IACAA,KAAK,CAAC9G,IAAI,CAAC,GAAGiJ,SAAS,EAAE,GAAGC,WAAW,CAAC;IAExC,OAAO;MAAE7G,KAAK,EAAEW,MAAM;MAAE8D,KAAK,EAAEA;IAAM,CAAC;EAC1C;;EAEA;EACA,SAAS3C,aAAaA,CAACnB,MAAM,EAAE;IAC3B,OAAOA,MAAM,CAACK,KAAK,CAAChB,KAAK,CAACV,KAAK,CAACpE,eAAe,CAAC,CAAC,CAAC,CAAC;EACvD;;EAEA;EACA,SAAS6G,QAAQA,CAACpB,MAAM,EAAE;IACtB,OAAOA,MAAM,CAACK,KAAK,CAAChB,KAAK,CAACV,KAAK,CAACpE,eAAe,CAAC,CAAC,CAAC,CAAC;EACvD;;EAEA;EACA,SAAS4L,oBAAoBA,CAACC,aAAa,EAAE;IACzC,IAAIC,SAAS,GAAGnE,uBAAuB,CAAC1H,KAAK,CAAC8L,UAAU,CAAC,EAAC;IAC1D,IAAIC,SAAS,GAAGrE,uBAAuB,CAAC1H,KAAK,CAACgM,UAAU,CAAC,EAAC;;IAE1D,KAAK,IAAI1J,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsJ,aAAa,CAACjJ,MAAM,EAAEL,CAAC,EAAE,EAAE;MAC3C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqJ,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAAC3G,MAAM,EAAEJ,CAAC,EAAE,EAAE;QACpD,IAAIqJ,aAAa,CAACtJ,CAAC,CAAC,CAACuC,KAAK,CAACgB,KAAK,CAAChB,KAAK,IAAI7E,KAAK,CAAC8L,UAAU,EAAE;UACxD,IAAIG,IAAI,gBAAGlL,OAAA,CAACvB,MAAM;YAACiE,CAAC,EAAEmI,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAAC/G,CAAC,CAAC,CAACsD,KAAK,CAACpC,CAAE;YAACC,CAAC,EAAEkI,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAAC/G,CAAC,CAAC,CAACsD,KAAK,CAACnC,CAAE;YAACmB,KAAK,EAAE;UAAa;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;UACtH,IAAIO,MAAM,gBAAG1E,OAAA,CAACvB,MAAM;YAACiE,CAAC,EAAEoI,SAAS,CAAChG,KAAK,CAACpC,CAAE;YAACC,CAAC,EAAEmI,SAAS,CAAChG,KAAK,CAACnC,CAAE;YAACmB,KAAK,EAAE;UAAG;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;UAC9E,IAAIgH,SAAS,GAAG3F,cAAc,CAAC0F,IAAI,EAAExG,MAAM,CAAC;UAE5C,IAAIyG,SAAS,EAAE;YACXN,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAAClE,MAAM,CAAC7C,CAAC,EAAE,CAAC,CAAC;YACnCA,CAAC,EAAE;UACP;QACJ,CAAC,MAAM,IAAIqJ,aAAa,CAACtJ,CAAC,CAAC,CAACuC,KAAK,CAACgB,KAAK,CAAChB,KAAK,IAAI7E,KAAK,CAACgM,UAAU,EAAE;UAC/D,IAAIC,IAAI,gBAAGlL,OAAA,CAACvB,MAAM;YAACiE,CAAC,EAAEmI,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAAC/G,CAAC,CAAC,CAACsD,KAAK,CAACpC,CAAE;YAACC,CAAC,EAAEkI,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAAC/G,CAAC,CAAC,CAACsD,KAAK,CAACnC,CAAE;YAACmB,KAAK,EAAE;UAAa;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;UACtH,IAAIO,MAAM,gBAAG1E,OAAA,CAACvB,MAAM;YAACiE,CAAC,EAAEsI,SAAS,CAAClG,KAAK,CAACpC,CAAE;YAACC,CAAC,EAAEqI,SAAS,CAAClG,KAAK,CAACnC,CAAE;YAACmB,KAAK,EAAE;UAAG;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;UAC9E,IAAIgH,SAAS,GAAG3G,cAAc,CAAC0G,IAAI,EAAExG,MAAM,CAAC;UAE5C,IAAIyG,SAAS,EAAE;YACXN,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAAClE,MAAM,CAAC7C,CAAC,EAAE,CAAC,CAAC;YACnCA,CAAC,EAAE;UACP;QACJ,CAAC,MAAM;UACH,IAAI0J,IAAI,gBAAGlL,OAAA,CAACvB,MAAM;YAACiE,CAAC,EAAEmI,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAAC/G,CAAC,CAAC,CAACsD,KAAK,CAACpC,CAAE;YAACC,CAAC,EAAEkI,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAAC/G,CAAC,CAAC,CAACsD,KAAK,CAACnC,CAAE;YAACmB,KAAK,EAAE+G,aAAa,CAACtJ,CAAC,CAAC,CAACuC,KAAK,CAACgB,KAAK,CAAChB;UAAM;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;UAC5I,IAAIqB,cAAc,GAAGA,cAAc,CAACsF,SAAS,EAAEI,IAAI,EAAEL,aAAa,CAACtJ,CAAC,CAAC,CAACuC,KAAK,CAAC;UAC5E,IAAIsH,eAAe,GAAG5G,cAAc,CAACwG,SAAS,EAAEE,IAAI,EAAEL,aAAa,CAACtJ,CAAC,CAAC,CAACuC,KAAK,CAAC;UAC7E,IAAIuH,wBAAwB,GAAG7F,cAAc,CAACsF,SAAS,EAAE,IAAI,CAAC;UAC9D,IAAIQ,uBAAuB,GAAG9G,cAAc,CAACwG,SAAS,EAAE,IAAI,CAAC;UAE7D,IAAIxF,cAAc,IAAI6F,wBAAwB,EAAE;YAC5CR,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAAClE,MAAM,CAAC7C,CAAC,EAAE,CAAC,CAAC;YACnCA,CAAC,EAAE;UACP;UAEA,IAAIgE,cAAc,IAAI6F,wBAAwB,EAAE;YAC5CR,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAAClE,MAAM,CAAC7C,CAAC,EAAE,CAAC,CAAC;YACnCA,CAAC,EAAE;UACP;QACJ;MACJ;IACJ;IAEA,OAAOqJ,aAAa;EACxB;;EAEA;EACA,SAASU,mCAAmCA,CAACV,aAAa,EAAE;IACxD,IAAIC,SAAS,GAAGnE,uBAAuB,CAAC1H,KAAK,CAAC8L,UAAU,CAAC,EAAC;IAC1D,IAAIC,SAAS,GAAGrE,uBAAuB,CAAC1H,KAAK,CAACgM,UAAU,CAAC,EAAC;;IAE1D,KAAK,IAAI1J,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsJ,aAAa,CAACjJ,MAAM,EAAEL,CAAC,EAAE,EAAE;MAC3C,IAAIiK,YAAY,GAAGX,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAAC3E,IAAI,CAAC6H,CAAC,IAAIA,CAAC,CAAC3G,KAAK,CAACpC,CAAC,IAAI,CAAC,IAAI+I,CAAC,CAAC3G,KAAK,CAACnC,CAAC,IAAI,CAAC,CAAC,EAAC;MACtF,IAAI+I,YAAY,GAAGb,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAAC3E,IAAI,CAAC6H,CAAC,IAAIA,CAAC,CAAC3G,KAAK,CAACpC,CAAC,IAAI,CAAC,IAAI+I,CAAC,CAAC3G,KAAK,CAACnC,CAAC,IAAI,CAAC,CAAC,EAAC;MACtF,IAAIgJ,YAAY,GAAGd,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAAC3E,IAAI,CAAC6H,CAAC,IAAIA,CAAC,CAAC3G,KAAK,CAACpC,CAAC,IAAI,CAAC,IAAI+I,CAAC,CAAC3G,KAAK,CAACnC,CAAC,IAAI,CAAC,CAAC,EAAC;MACtF,IAAIiJ,YAAY,GAAGf,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAAC3E,IAAI,CAAC6H,CAAC,IAAIA,CAAC,CAAC3G,KAAK,CAACpC,CAAC,IAAI,CAAC,IAAI+I,CAAC,CAAC3G,KAAK,CAACnC,CAAC,IAAI,CAAC,CAAC,EAAC;;MAEtF,IAAIkI,aAAa,CAACtJ,CAAC,CAAC,CAACuC,KAAK,IAAIgH,SAAS,IAAID,aAAa,CAACtJ,CAAC,CAAC,CAACuC,KAAK,IAAIkH,SAAS,EAAE;QAC5E,IAAIQ,YAAY,EAAE;UACd,IAAIK,WAAW,GAAGhB,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAAC3E,IAAI,CAAC6H,CAAC,IAAIA,CAAC,CAAC3G,KAAK,CAACpC,CAAC,IAAI,CAAC,IAAI+I,CAAC,CAAC3G,KAAK,CAACnC,CAAC,IAAI,CAAC,CAAC;UACpF,IAAI,CAACkJ,WAAW,EAAE;YACdhB,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAAClE,MAAM,CAACwG,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAACuD,OAAO,CAACD,WAAW,CAAC,EAAE,CAAC,CAAC;UACjF;QACJ;QAEA,IAAIH,YAAY,EAAE;UACd,IAAIG,WAAW,GAAGhB,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAAC3E,IAAI,CAAC6H,CAAC,IAAIA,CAAC,CAAC3G,KAAK,CAACpC,CAAC,IAAI,CAAC,IAAI+I,CAAC,CAAC3G,KAAK,CAACnC,CAAC,IAAI,CAAC,CAAC;UACpF,IAAI,CAACkJ,WAAW,EAAE;YACdhB,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAAClE,MAAM,CAACwG,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAACuD,OAAO,CAACD,WAAW,CAAC,EAAE,CAAC,CAAC;UACjF;QACJ;QAEA,IAAIF,YAAY,EAAE;UACd,IAAIE,WAAW,GAAGhB,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAAC3E,IAAI,CAAC6H,CAAC,IAAIA,CAAC,CAAC3G,KAAK,CAACpC,CAAC,IAAI,CAAC,IAAI+I,CAAC,CAAC3G,KAAK,CAACnC,CAAC,IAAI,CAAC,CAAC;UACpF,IAAI,CAACkJ,WAAW,EAAE;YACdhB,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAAClE,MAAM,CAACwG,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAACuD,OAAO,CAACD,WAAW,CAAC,EAAE,CAAC,CAAC;UACjF;QACJ;QAEA,IAAID,YAAY,EAAE;UACd,IAAIC,WAAW,GAAGhB,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAAC3E,IAAI,CAAC6H,CAAC,IAAIA,CAAC,CAAC3G,KAAK,CAACpC,CAAC,IAAI,CAAC,IAAI+I,CAAC,CAAC3G,KAAK,CAACnC,CAAC,IAAI,CAAC,CAAC;UACpF,IAAI,CAACkJ,WAAW,EAAE;YACdhB,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAAClE,MAAM,CAACwG,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAACuD,OAAO,CAACD,WAAW,CAAC,EAAE,CAAC,CAAC;UACjF;QACJ;MACJ;;MAEA;MACA,IAAIrG,cAAc,CAACsF,SAAS,CAAC,EAAE;QAC3B,IAAIa,YAAY,EAAE;UACdd,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAAClE,MAAM,CAACwG,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAACuD,OAAO,CAACH,YAAY,CAAC,EAAE,CAAC,CAAC;QAClF;QAEA,IAAIC,YAAY,EAAE;UACdf,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAAClE,MAAM,CAACwG,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAACuD,OAAO,CAACF,YAAY,CAAC,EAAE,CAAC,CAAC;QAClF;MACJ;;MAEA;MACA,IAAIpH,cAAc,CAACwG,SAAS,CAAC,EAAE;QAC3B,IAAIQ,YAAY,EAAE;UACdX,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAAClE,MAAM,CAACwG,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAACuD,OAAO,CAACN,YAAY,CAAC,EAAE,CAAC,CAAC;QAClF;QAEA,IAAIE,YAAY,EAAE;UACdb,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAAClE,MAAM,CAACwG,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAACuD,OAAO,CAACJ,YAAY,CAAC,EAAE,CAAC,CAAC;QAClF;MACJ;IACJ;IAEA,OAAOb,aAAa;EACxB;;EAEA;EACA,SAASkB,gBAAgBA,CAAClB,aAAa,EAAE;IACrC,KAAK,IAAItJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsJ,aAAa,CAACjJ,MAAM,EAAEL,CAAC,EAAE,EAAE;MAC3C,IAAI,CAACsJ,aAAa,CAACtJ,CAAC,CAAC,EAAE;QACnBsJ,aAAa,CAACxG,MAAM,CAAC9C,CAAC,EAAE,CAAC,CAAC;QAC1BA,CAAC,EAAE;QACH;MACJ;MAEA,IAAIsJ,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAAC3G,MAAM,IAAI,CAAC,EAAE;QACpCiJ,aAAa,CAACxG,MAAM,CAAC9C,CAAC,EAAE,CAAC,CAAC;QAC1BA,CAAC,EAAE;QACH;MACJ;MAEA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqJ,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAAC3G,MAAM,EAAEJ,CAAC,EAAE,EAAE;QACpD,IAAI,CAACqJ,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAAC/G,CAAC,CAAC,EAAE;UAC5BqJ,aAAa,CAACtJ,CAAC,CAAC,CAACgH,KAAK,CAAClE,MAAM,CAAC7C,CAAC,EAAE,CAAC,CAAC;UACnCA,CAAC,EAAE;QACP;MACJ;IACJ;IAEA,OAAOqJ,aAAa;EACxB;EAEA,SAASmB,2BAA2BA,CAAA,EAAG;IACnC,KAAK,IAAIzK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhC,aAAa,CAACqC,MAAM,EAAEL,CAAC,EAAE,EAAE;MAC3C,IAAIhC,aAAa,CAACgC,CAAC,CAAC,CAACuC,KAAK,CAACgB,KAAK,CAACpC,CAAC,IAAIpD,sBAAsB,CAACoD,CAAC,IAAInD,aAAa,CAACgC,CAAC,CAAC,CAACuC,KAAK,CAACgB,KAAK,CAACnC,CAAC,IAAIrD,sBAAsB,CAACqD,CAAC,EAAE;QAC1H,KAAK,IAAInB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjC,aAAa,CAACgC,CAAC,CAAC,CAACgH,KAAK,CAAC3G,MAAM,EAAEJ,CAAC,EAAE,EAAE;UACpDX,oBAAoB,CAAE,GAAEtB,aAAa,CAACgC,CAAC,CAAC,CAACgH,KAAK,CAAC/G,CAAC,CAAC,CAACsD,KAAK,CAACpC,CAAE,IAAGnD,aAAa,CAACgC,CAAC,CAAC,CAACgH,KAAK,CAAC/G,CAAC,CAAC,CAACsD,KAAK,CAACnC,CAAE,EAAC,EAAE,IAAI,CAAC;QAC3G;MACJ;IACJ;EACJ;;EAEA;EACA,SAASkB,gBAAgBA,CAAA,EAAG;IACxB;IACA,IAAIoI,kBAAkB,GAAG,EAAE;IAC3B,IAAIxI,OAAO,GAAGhD,YAAY;IAE1B,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkC,OAAO,CAAC7B,MAAM,EAAEL,CAAC,EAAE,EAAE;MACrC,IAAIkD,MAAM,GAAGhB,OAAO,CAAClC,CAAC,CAAC;;MAEvB;MACA,IAAIkD,MAAM,CAACK,KAAK,CAAChB,KAAK,EAAE;QACpB,IAAIJ,KAAK,GAAGkC,aAAa,CAACnB,MAAM,CAAC,CAAC,CAAC;;QAEnC;QACA,IAAIsB,YAAY,CAACrC,KAAK,CAAC,IAAI,CAAChE,aAAa,EAAE;UACvC;UACA;QACJ;;QAEA;QACA,IAAI4H,YAAY,CAAC5D,KAAK,CAAC,IAAIhE,aAAa,EAAE;UACtC;UACA;QACJ;;QAEA;QACA;QACAuM,kBAAkB,CAACxK,IAAI,CAAC6G,qBAAqB,CAAC7D,MAAM,CAAC,CAAC;QACtDwH,kBAAkB,CAACxK,IAAI,CAACuH,qBAAqB,CAACvE,MAAM,CAAC,CAAC;QACtDwH,kBAAkB,CAACxK,IAAI,CAACyH,sBAAsB,CAACzE,MAAM,CAAC,CAAC;QACvDwH,kBAAkB,CAACxK,IAAI,CAACoI,sBAAsB,CAACpF,MAAM,CAAC,CAAC;QACvDwH,kBAAkB,CAACxK,IAAI,CAAC2I,oBAAoB,CAAC3F,MAAM,CAAC,CAAC;QACrDwH,kBAAkB,CAACxK,IAAI,CAAC+I,qBAAqB,CAAC/F,MAAM,CAAC,CAAC;;QAEtD;QACAwH,kBAAkB,GAAGF,gBAAgB,CAACE,kBAAkB,CAAC;;QAEzD;QACAA,kBAAkB,GAAGrB,oBAAoB,CAACqB,kBAAkB,CAAC;QAC7DA,kBAAkB,GAAGV,mCAAmC,CAACU,kBAAkB,CAAC;MAChF;IACJ;IAEAC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,kBAAkB,CAAC;IAClDC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEF,kBAAkB,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,SAAS,KAAKD,GAAG,GAAGC,SAAS,CAAC/D,KAAK,CAAC3G,MAAM,EAAE,CAAC,CAAC,CAAC;IAC1GrC,aAAa,CAAC8E,MAAM,CAAC,CAAC,EAAE9E,aAAa,CAACqC,MAAM,EAAE,GAAGqK,kBAAkB,CAAC;IACpED,2BAA2B,CAAC,CAAC;EACjC;;EAEA;EACA,oBACIhM,OAAA,CAAAE,SAAA;IAAAqM,QAAA,eACIvM,OAAA;MAAKwM,SAAS,EAAC,WAAW;MAAAD,QAAA,EACrB9L,YAAY,CAACQ,GAAG,CAAEwL,GAAG,IAAKA,GAAG;IAAC;MAAAzI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B;EAAC,gBACR,CAAC;AAEX;AAAC/D,EAAA,CAt9CQD,KAAK;AAAAuM,EAAA,GAALvM,KAAK;AAw9Cd,eAAeA,KAAK;AAAA,IAAAuM,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}