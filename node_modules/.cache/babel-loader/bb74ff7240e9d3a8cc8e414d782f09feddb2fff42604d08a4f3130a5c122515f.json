{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vladi Gotsin\\\\Desktop\\\\react\\\\Chess-React.js-\\\\src\\\\Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback, useMemo } from \"react\";\nimport * as HelperMethods from \"./HelperMethods.js\";\nimport * as GlobalVariables from \"./globalVariables.js\";\nimport * as MoveHandling from './MoveHandler.js';\n\n//TODO: Fix the issue with calculating/filtering possible moves. You're not getting the right number\n//TODO: Fix the king having no moves when in check\n//TODD: Fix the castle in check double kings issue\n//TODO: Fix number of possible moves when there is a pinned piece to the king (if you move, you're in check) click on the pinned piece (shows less moves) click on other pieces (counts illegal moves)\n/**\r\n * FEN -> possibleMoves count (Italian game)\r\n * rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1 -> 20\r\n * rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1 -> 20\r\n * rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq e6 0 2 -> 29\r\n * rnbqkbnr/pppp1ppp/8/4p3/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 2 -> 29\r\n * r1bqkbnr/pppp1ppp/2n5/4p3/4P3/5N2/PPPP1PPP/RNBQKB1R w KQkq - 2 3 -> 27\r\n * r1bqkbnr/pppp1ppp/2n5/4p3/2B1P3/5N2/PPPP1PPP/RNBQK2R b KQkq - 3 3 -> 31\r\n * r1bqk1nr/pppp1ppp/2n5/2b1p3/2B1P3/5N2/PPPP1PPP/RNBQK2R w KQkq - 4 4 -> 33\r\n * r1bqk1nr/pppp1ppp/2n5/2b1p3/2B1P3/2P2N2/PP1P1PPP/RNBQK2R b KQkq - 0 4 -> 36\r\n * r1bqk2r/pppp1ppp/2n2n2/2b1p3/2B1P3/2P2N2/PP1P1PPP/RNBQK2R w KQkq - 1 5 -> 34\r\n * r1bqk2r/pppp1ppp/2n2n2/2b1p3/2BPP3/2P2N2/PP3PPP/RNBQK2R b KQkq d3 0 5 -> 35\r\n * r1bqk2r/pppp1ppp/2n2n2/2b5/2BpP3/2P2N2/PP3PPP/RNBQK2R w KQkq - 0 6 -> 45\r\n * r1bqk2r/pppp1ppp/2n2n2/2b5/2BPP3/5N2/PP3PPP/RNBQK2R b KQkq - 0 6 -> 35\r\n * r1bqk2r/pppp1ppp/2n2n2/8/1bBPP3/5N2/PP3PPP/RNBQK2R w KQkq - 1 7 -> 7\r\n * r1bqk2r/pppp1ppp/2n2n2/8/1bBPP3/2N2N2/PP3PPP/R1BQK2R b KQkq - 2 7 -> 34\r\n * r1bqk2r/pppp1ppp/2n5/8/1bBPn3/2N2N2/PP3PPP/R1BQK2R w KQkq - 0 8 -> 39\r\n * r1bqk2r/pppp1ppp/2n5/8/1bBPn3/2N2N2/PP3PPP/R1BQ1RK1 b kq - 1 8 -> 42\r\n * r1bqk2r/pppp1ppp/2n5/8/1bBP4/2n2N2/PP3PPP/R1BQ1RK1 w kq - 0 9 -> 37\r\n * r1bqk2r/pppp1ppp/2n5/8/1bBP4/2P2N2/P4PPP/R1BQ1RK1 b kq - 0 9 -> 34\r\n * r1bqk2r/pppp1ppp/2n5/8/2BP4/2b2N2/P4PPP/R1BQ1RK1 w kq - 0 10 -> 37\r\n * r1bqk2r/pppp1ppp/2n5/8/2BP4/1Qb2N2/P4PPP/R1B2RK1 b kq - 1 10 -> 35\r\n * r1bqk2r/pppp1ppp/2n5/8/2BP4/1Q3N2/P4PPP/b1B2RK1 w kq - 0 11 -> 42\r\n * r1bqk2r/pppp1Bpp/2n5/8/3P4/1Q3N2/P4PPP/b1B2RK1 b kq - 0 11 -> 2\r\n * r1bq1k1r/pppp1Bpp/2n5/8/3P4/1Q3N2/P4PPP/b1B2RK1 w - - 1 12 -> 45\r\n * r1bq1k1r/pppp1Bpp/2n5/8/3P4/1Q3N2/P4PPP/b1B1R1K1 b - - 2 12 -> 26\r\n * r1bq1k1r/ppp2Bpp/2np4/8/3P4/1Q3N2/P4PPP/b1B1R1K1 w - - 0 13 -> 52\r\n * r1bq1k1r/ppp3pp/2np4/7B/3P4/1Q3N2/P4PPP/b1B1R1K1 b - - 1 13 -> 30\r\n * r1b2k1r/pppq2pp/2np4/7B/3P4/1Q3N2/P4PPP/b1B1R1K1 w - - 2 14 -> 51\r\n * r1b2k1r/pppq2pp/2np4/7B/3PR3/1Q3N2/P4PPP/b1B3K1 b - - 3 14 -> 28\r\n * r1b2k1r/pppq2p1/2np3p/7B/3PR3/1Q3N2/P4PPP/b1B3K1 w - - 0 15 -> 53\r\n * r1b2k1r/pppq2p1/2np3p/7B/3PR2N/1Q6/P4PPP/b1B3K1 b - - 1 15 -> 28\r\n * r1b2k1r/pppq4/2np3p/6pB/3PR2N/1Q6/P4PPP/b1B3K1 w - g6 0 16 -> 56\r\n * r1b2k1r/pppqR3/2np3p/6pB/3P3N/1Q6/P4PPP/b1B3K1 b - - 1 16 -> 28\r\n * r1b2k1r/ppp1q3/2np3p/6pB/3P3N/1Q6/P4PPP/b1B3K1 w - - 0 17 -> 47\r\n * r1b2k1r/ppp1q3/2np2Np/6pB/3P4/1Q6/P4PPP/b1B3K1 b - - 1 17 -> 2\r\n * r1b4r/ppp1q1k1/2np2Np/6pB/3P4/1Q6/P4PPP/b1B3K1 w - - 2 18 -> 48\r\n * r1b4r/ppp1N1k1/2np3p/6pB/3P4/1Q6/P4PPP/b1B3K1 b - - 0 18 -> 30\r\n * r1b2r2/ppp1N1k1/2np3p/6pB/3P4/1Q6/P4PPP/b1B3K1 w - - 1 19 -> 51\r\n * r1b2r2/ppp3k1/2Np3p/6pB/3P4/1Q6/P4PPP/b1B3K1 b - - 0 19 -> 29\r\n * r1b2r2/p1p3k1/2pp3p/6pB/3P4/1Q6/P4PPP/b1B3K1 w - - 0 20 -> 46\r\n * r1b2r2/p1p3k1/2pp3p/6pB/3P4/8/P4PPP/bQB3K1 b - - 1 20 -> 29\r\n * r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/bQB3K1 w - - 2 21 -> 38\r\n * r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21 -> 25\r\n * 1rb5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 w - - 1 22 -> 27\r\n * 1rb5/p1p3k1/2pp1r1p/6pB/3P4/2Q5/P4PPP/2B3K1 b - - 2 22 -> 32\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board() {\n  _s();\n  /**\r\n   * State to manage the FEN (Forsyth-Edwards Notation) string representing the board position.\r\n   * This state is used to parse and set the initial board configuration.\r\n   *\r\n   * FEN - Forsyth-Edwards Notation:\r\n   * - Small letters represent black pieces.\r\n   * - Capital letters represent white pieces.\r\n   * - Numbers represent empty board squares.\r\n   * - (/) separates each board row.\r\n   * - The first letter after the board indicates whose turn it is to move (w - white, b - black).\r\n   * - Next letters indicate castling rights:\r\n   *   - k - king-side\r\n   *   - q - queen-side\r\n   *   - (-) - no castling allowed for any side.\r\n   * - En passant square:\r\n   *   - When a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square.\r\n   * - The number of half turns:\r\n   *   - White moves, then black moves = 2 half moves\r\n   *   - Half turns are made without a pawn move or a capture of a piece (50-move rule when reaches 100).\r\n   * - The number of full moves:\r\n   *   - White moves, then black moves = 1 full move\r\n   *   - Increases after every black half move.\r\n   * \r\n   * Starting position:\r\n   * 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\r\n   *\r\n   * Examples of FEN positions:\r\n   * 'r1bqk2r/pppp1ppp/2n5/8/1bBPn3/2N2N2/PP3PPP/R1BQK2R w KQkq - 0 8'\r\n   * 'r1bqk2r/pppp1ppp/2n2n2/2b5/2BPP3/5N2/PP3PPP/RNBQK2R b KQkq - 0 6'\r\n   * 'r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21'\r\n   */\n  const [fen, setFen] = useState('r1b2r2/p1p3k1/2pp3p/6pB/3P4/1Q6/P4PPP/b1B3K1 w - - 0 20');\n\n  /**\r\n   * State to manage possible moves for a piece. \r\n   * This state holds an array of objects indicating which squares are possible moves for the selected piece.\r\n   */\n  const [isPossibleMove, setIsPossibleMove] = useState([]);\n\n  /**\r\n   * State to manage the squares on the board.\r\n   * This state holds an array of square components representing the current board configuration.\r\n   */\n  const [boardSquares, setBoardSquares] = useState([]);\n\n  /**\r\n   * Reference to the `isPossibleMove` state to avoid stale closures.\r\n   * This reference ensures that the latest state is used in functions that rely on it.\r\n   */\n  const isPossibleMoveRef = useRef(isPossibleMove);\n\n  /**\r\n   * Reference to the `boardSquares` state to avoid stale closures.\r\n   * This reference ensures that the latest state is used in functions that rely on it.\r\n   */\n  const boardSquaresRef = useRef(boardSquares);\n  const fenRef = useRef(fen);\n\n  /**\r\n   * Updates the reference to the `isPossibleMove` array whenever the state changes.\r\n   * Additionally, updates the `boardSquares` state by parsing the FEN string.\r\n   */\n  useEffect(() => {\n    isPossibleMoveRef.current = isPossibleMove;\n    setBoardSquares(HelperMethods.fenParser(fen, isPossibleMoveRef.current, getPossibleMoves, movePiece, resetPossibleMoves, false));\n  }, [isPossibleMove]);\n\n  /**\r\n   * Initializes the board state when the component mounts.\r\n   * Parses the FEN string to set up the initial board configuration.\r\n   */\n  useEffect(() => {\n    resetPossibleMoves();\n    setBoardSquares(HelperMethods.fenParser(fen, isPossibleMoveRef.current, getPossibleMoves, movePiece, resetPossibleMoves));\n  }, []);\n\n  /**\r\n   * Updates the `boardSquares` state whenever the FEN string changes.\r\n   * Parses the FEN string to update the board configuration.\r\n   */\n  useEffect(() => {\n    fenRef.current = fen;\n    setBoardSquares(HelperMethods.fenParser(fen, isPossibleMoveRef.current, getPossibleMoves, movePiece, resetPossibleMoves));\n  }, [fen]);\n\n  /**\r\n   * Updates the reference to the `boardSquares` array whenever the state changes.\r\n   * This ensures that functions relying on `boardSquaresRef` have the latest state.\r\n   */\n  useEffect(() => {\n    boardSquaresRef.current = boardSquares;\n  }, [boardSquares]);\n  const fenList = [\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1 -> 20\", \"rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1 -> 20\", \"rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq e6 0 2 -> 29\", \"rnbqkbnr/pppp1ppp/8/4p3/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 2 -> 29\", \"r1bqkbnr/pppp1ppp/2n5/4p3/4P3/5N2/PPPP1PPP/RNBQKB1R w KQkq - 2 3 -> 27\", \"r1bqkbnr/pppp1ppp/2n5/4p3/2B1P3/5N2/PPPP1PPP/RNBQK2R b KQkq - 3 3 -> 31\", \"r1bqk1nr/pppp1ppp/2n5/2b1p3/2B1P3/5N2/PPPP1PPP/RNBQK2R w KQkq - 4 4 -> 33\", \"r1bqk1nr/pppp1ppp/2n5/2b1p3/2B1P3/2P2N2/PP1P1PPP/RNBQK2R b KQkq - 0 4 -> 36\", \"r1bqk2r/pppp1ppp/2n2n2/2b1p3/2B1P3/2P2N2/PP1P1PPP/RNBQK2R w KQkq - 1 5 -> 34\", \"r1bqk2r/pppp1ppp/2n2n2/2b1p3/2BPP3/2P2N2/PP3PPP/RNBQK2R b KQkq d3 0 5 -> 35\", \"r1bqk2r/pppp1ppp/2n2n2/2b5/2BpP3/2P2N2/PP3PPP/RNBQK2R w KQkq - 0 6 -> 45\", \"r1bqk2r/pppp1ppp/2n2n2/2b5/2BPP3/5N2/PP3PPP/RNBQK2R b KQkq - 0 6 -> 35\", \"r1bqk2r/pppp1ppp/2n2n2/8/1bBPP3/5N2/PP3PPP/RNBQK2R w KQkq - 1 7 -> 7\", \"r1bqk2r/pppp1ppp/2n2n2/8/1bBPP3/2N2N2/PP3PPP/R1BQK2R b KQkq - 2 7 -> 34\", \"r1bqk2r/pppp1ppp/2n5/8/1bBPn3/2N2N2/PP3PPP/R1BQK2R w KQkq - 0 8 -> 39\", \"r1bqk2r/pppp1ppp/2n5/8/1bBPn3/2N2N2/PP3PPP/R1BQ1RK1 b kq - 1 8 -> 42\", \"r1bqk2r/pppp1ppp/2n5/8/1bBP4/2n2N2/PP3PPP/R1BQ1RK1 w kq - 0 9 -> 37\", \"r1bqk2r/pppp1ppp/2n5/8/1bBP4/2P2N2/P4PPP/R1BQ1RK1 b kq - 0 9 -> 34\", \"r1bqk2r/pppp1ppp/2n5/8/2BP4/2b2N2/P4PPP/R1BQ1RK1 w kq - 0 10 -> 37\", \"r1bqk2r/pppp1ppp/2n5/8/2BP4/1Qb2N2/P4PPP/R1B2RK1 b kq - 1 10 -> 35\", \"r1bqk2r/pppp1ppp/2n5/8/2BP4/1Q3N2/P4PPP/b1B2RK1 w kq - 0 11 -> 42\", \"r1bqk2r/pppp1Bpp/2n5/8/3P4/1Q3N2/P4PPP/b1B2RK1 b kq - 0 11 -> 2\", \"r1bq1k1r/pppp1Bpp/2n5/8/3P4/1Q3N2/P4PPP/b1B2RK1 w - - 1 12 -> 45\", \"r1bq1k1r/pppp1Bpp/2n5/8/3P4/1Q3N2/P4PPP/b1B1R1K1 b - - 2 12 -> 26\", \"r1bq1k1r/ppp2Bpp/2np4/8/3P4/1Q3N2/P4PPP/b1B1R1K1 w - - 0 13 -> 52\", \"r1bq1k1r/ppp3pp/2np4/7B/3P4/1Q3N2/P4PPP/b1B1R1K1 b - - 1 13 -> 30\", \"r1b2k1r/pppq2pp/2np4/7B/3P4/1Q3N2/P4PPP/b1B1R1K1 w - - 2 14 -> 51\", \"r1b2k1r/pppq2pp/2np4/7B/3PR3/1Q3N2/P4PPP/b1B3K1 b - - 3 14 -> 28\", \"r1b2k1r/pppq2p1/2np3p/7B/3PR3/1Q3N2/P4PPP/b1B3K1 w - - 0 15 -> 53\", \"r1b2k1r/pppq2p1/2np3p/7B/3PR2N/1Q6/P4PPP/b1B3K1 b - - 1 15 -> 28\", \"r1b2k1r/pppq4/2np3p/6pB/3PR2N/1Q6/P4PPP/b1B3K1 w - g6 0 16 -> 56\", \"r1b2k1r/pppqR3/2np3p/6pB/3P3N/1Q6/P4PPP/b1B3K1 b - - 1 16 -> 28\", \"r1b2k1r/ppp1q3/2np3p/6pB/3P3N/1Q6/P4PPP/b1B3K1 w - - 0 17 -> 47\", \"r1b2k1r/ppp1q3/2np2Np/6pB/3P4/1Q6/P4PPP/b1B3K1 b - - 1 17 -> 2\", \"r1b4r/ppp1q1k1/2np2Np/6pB/3P4/1Q6/P4PPP/b1B3K1 w - - 2 18 -> 48\", \"r1b4r/ppp1N1k1/2np3p/6pB/3P4/1Q6/P4PPP/b1B3K1 b - - 0 18 -> 30\", \"r1b2r2/ppp1N1k1/2np3p/6pB/3P4/1Q6/P4PPP/b1B3K1 w - - 1 19 -> 51\", \"r1b2r2/ppp3k1/2Np3p/6pB/3P4/1Q6/P4PPP/b1B3K1 b - - 0 19 -> 29\", \"r1b2r2/p1p3k1/2pp3p/6pB/3P4/1Q6/P4PPP/b1B3K1 w - - 0 20 -> 46\", \"r1b2r2/p1p3k1/2pp3p/6pB/3P4/8/P4PPP/bQB3K1 b - - 1 20 -> 29\", \"r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/bQB3K1 w - - 2 21 -> 38\", \"r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21 -> 25\", \"1rb5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 w - - 1 22 -> 27\", \"1rb5/p1p3k1/2pp1r1p/6pB/3P4/2Q5/P4PPP/2B3K1 b - - 2 22 -> 32\"];\n  function compareFens(currentFen, possibleMoves) {\n    for (let f of fenList) {\n      const tokens = f.split('->');\n      const movesCount = Number(tokens[1].trim());\n      const pos = tokens[0].split(' ')[0];\n      const currentPos = currentFen.split(' ')[0];\n      if (pos === currentPos) {\n        const count = possibleMoves.reduce((sum, value) => sum + value.moves.length, 0);\n        if (count === movesCount) {\n          console.log(`Match for FEN: ${pos}`);\n        } else {\n          console.log(`Doesn't match for FEN: ${pos}. Expected: ${movesCount}, got: ${count}`);\n        }\n      }\n    }\n  }\n\n  /**\r\n   * Updates the possible move state for a specific square.\r\n   * This function modifies the `isPossibleMove` array to indicate which squares can be moved to.\r\n   *\r\n   * @param {string} key - The key of the square to update.\r\n   * @param {boolean} value - The new value indicating whether the move is possible.\r\n   */\n  const updateIsPossibleMove = useCallback((key, value) => {\n    setIsPossibleMove(prevState => prevState.map(item => item.key === key ? {\n      ...item,\n      value: value\n    } : item));\n  }, []);\n\n  /**\r\n  * Resets possible moves highlighting.\r\n  * This function initializes the `isPossibleMove` array to indicate no possible moves.\r\n  */\n  const resetPossibleMoves = useCallback(() => {\n    const initialIsPossibleMove = [];\n    for (let i = 0; i < GlobalVariables.DIM; i++) {\n      for (let j = 0; j < GlobalVariables.DIM; j++) {\n        initialIsPossibleMove.push({\n          key: `${i}${GlobalVariables.PIECE_DELIMITER}${j}`,\n          value: false\n        });\n      }\n    }\n    setIsPossibleMove(initialIsPossibleMove);\n  }, []);\n\n  /**\r\n   * Updates the `isPossibleMove` array based on the `PossibleMoves` array.\r\n   * Forces a component update to visually indicate the possible moves on the board.\r\n   */\n  const updatePossibleMovesVisually = useCallback(() => {\n    for (let i = 0; i < GlobalVariables.PossibleMoves.length; i++) {\n      if (HelperMethods.checkIfAMoveIsEqualToTheCurrentSelectedSquare(GlobalVariables.PossibleMoves[i].piece)) {\n        for (let j = 0; j < GlobalVariables.PossibleMoves[i].moves.length; j++) {\n          updateIsPossibleMove(`${GlobalVariables.PossibleMoves[i].moves[j].props.x}${GlobalVariables.PIECE_DELIMITER}${GlobalVariables.PossibleMoves[i].moves[j].props.y}`, true);\n        }\n      }\n    }\n  }, [updateIsPossibleMove]);\n\n  /**\r\n   * Moves a piece on the board.\r\n   * This function handles all aspects of moving a piece, including updating the board state, \r\n   * handling special moves like en passant and castling, and updating move counters.\r\n   *\r\n   * @param {number} x - The x coordinate of the target square.\r\n   * @param {number} y - The y coordinate of the target square.\r\n   */\n  const movePiece = useCallback((x, y) => {\n    const squares = boardSquaresRef.current;\n    const targetSquare = HelperMethods.getATargetSquareByLocation(x, y, squares);\n    const square = squares.find(s => HelperMethods.checkIfAMoveIsEqualToTheCurrentSelectedSquare(s));\n    HelperMethods.disableCastlingIfKingOrRookMoves(square);\n    let updatedPosition = HelperMethods.updateBoardPosition(square, targetSquare);\n    updatedPosition = HelperMethods.captureEnPassant(square, targetSquare, updatedPosition, squares);\n    HelperMethods.updateBoardState(updatedPosition);\n    HelperMethods.resetPossibleMovesAndToggleTurn();\n    HelperMethods.enableEnPassant(square, targetSquare);\n    HelperMethods.updateMoveCounters();\n    const newFen = HelperMethods.generateANewFen();\n    setFen(newFen);\n  }, [boardSquaresRef]);\n\n  /**\r\n   * Retrieves and updates the possible moves for all pieces on the board.\r\n   * This function collects all possible moves for the current player's pieces\r\n   * and updates the global possible moves state.\r\n   */\n  const getPossibleMoves = useCallback(() => {\n    const squares = boardSquaresRef.current;\n    let possiblePieceMoves = [];\n    squares.forEach(square => {\n      if (square.props.piece) {\n        const color = HelperMethods.getPieceColor(square);\n        if (MoveHandling.isMoveAllowed(color)) {\n          possiblePieceMoves.push(...MoveHandling.collectPossibleMoves(square, squares));\n        }\n      }\n    });\n\n    //console.log(\"Possible Moves:\", possiblePieceMoves);\n    //console.log('Moves count', possiblePieceMoves.reduce((sum, pieceMove) => sum + pieceMove.moves.length, 0));\n    compareFens(fenRef.current, possiblePieceMoves);\n    MoveHandling.updatePossibleMoves(possiblePieceMoves);\n    updatePossibleMovesVisually();\n  }, [updatePossibleMovesVisually]);\n\n  /**\r\n   * Memoizes the rendered board squares to prevent unnecessary re-renders.\r\n   * This useMemo hook ensures that the `renderedBoardSquares` array is only recalculated\r\n   * when the `boardSquares` state changes. This optimization helps to improve performance\r\n   * by avoiding redundant rendering of the board squares when there are no changes to the\r\n   * `boardSquares` array.\r\n   *\r\n   * @returns {Array} - The memoized array of board squares.\r\n   */\n  const renderedBoardSquares = useMemo(() => {\n    return boardSquares.map(sqr => sqr);\n  }, [boardSquares]);\n\n  //renders the board\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chessGrid\",\n    children: renderedBoardSquares\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 332,\n    columnNumber: 9\n  }, this);\n}\n_s(Board, \"gaspe5ZgyGT3RSdtPPCBj71BuUw=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","useMemo","HelperMethods","GlobalVariables","MoveHandling","jsxDEV","_jsxDEV","Board","_s","fen","setFen","isPossibleMove","setIsPossibleMove","boardSquares","setBoardSquares","isPossibleMoveRef","boardSquaresRef","fenRef","current","fenParser","getPossibleMoves","movePiece","resetPossibleMoves","fenList","compareFens","currentFen","possibleMoves","f","tokens","split","movesCount","Number","trim","pos","currentPos","count","reduce","sum","value","moves","length","console","log","updateIsPossibleMove","key","prevState","map","item","initialIsPossibleMove","i","DIM","j","push","PIECE_DELIMITER","updatePossibleMovesVisually","PossibleMoves","checkIfAMoveIsEqualToTheCurrentSelectedSquare","piece","props","x","y","squares","targetSquare","getATargetSquareByLocation","square","find","s","disableCastlingIfKingOrRookMoves","updatedPosition","updateBoardPosition","captureEnPassant","updateBoardState","resetPossibleMovesAndToggleTurn","enableEnPassant","updateMoveCounters","newFen","generateANewFen","possiblePieceMoves","forEach","color","getPieceColor","isMoveAllowed","collectPossibleMoves","updatePossibleMoves","renderedBoardSquares","sqr","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/Chess-React.js-/src/Board.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback, useMemo } from \"react\";\r\nimport * as HelperMethods from \"./HelperMethods.js\";\r\nimport * as GlobalVariables from \"./globalVariables.js\"\r\nimport * as MoveHandling from './MoveHandler.js'\r\n\r\n//TODO: Fix the issue with calculating/filtering possible moves. You're not getting the right number\r\n//TODO: Fix the king having no moves when in check\r\n//TODD: Fix the castle in check double kings issue\r\n//TODO: Fix number of possible moves when there is a pinned piece to the king (if you move, you're in check) click on the pinned piece (shows less moves) click on other pieces (counts illegal moves)\r\n/**\r\n * FEN -> possibleMoves count (Italian game)\r\n * rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1 -> 20\r\n * rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1 -> 20\r\n * rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq e6 0 2 -> 29\r\n * rnbqkbnr/pppp1ppp/8/4p3/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 2 -> 29\r\n * r1bqkbnr/pppp1ppp/2n5/4p3/4P3/5N2/PPPP1PPP/RNBQKB1R w KQkq - 2 3 -> 27\r\n * r1bqkbnr/pppp1ppp/2n5/4p3/2B1P3/5N2/PPPP1PPP/RNBQK2R b KQkq - 3 3 -> 31\r\n * r1bqk1nr/pppp1ppp/2n5/2b1p3/2B1P3/5N2/PPPP1PPP/RNBQK2R w KQkq - 4 4 -> 33\r\n * r1bqk1nr/pppp1ppp/2n5/2b1p3/2B1P3/2P2N2/PP1P1PPP/RNBQK2R b KQkq - 0 4 -> 36\r\n * r1bqk2r/pppp1ppp/2n2n2/2b1p3/2B1P3/2P2N2/PP1P1PPP/RNBQK2R w KQkq - 1 5 -> 34\r\n * r1bqk2r/pppp1ppp/2n2n2/2b1p3/2BPP3/2P2N2/PP3PPP/RNBQK2R b KQkq d3 0 5 -> 35\r\n * r1bqk2r/pppp1ppp/2n2n2/2b5/2BpP3/2P2N2/PP3PPP/RNBQK2R w KQkq - 0 6 -> 45\r\n * r1bqk2r/pppp1ppp/2n2n2/2b5/2BPP3/5N2/PP3PPP/RNBQK2R b KQkq - 0 6 -> 35\r\n * r1bqk2r/pppp1ppp/2n2n2/8/1bBPP3/5N2/PP3PPP/RNBQK2R w KQkq - 1 7 -> 7\r\n * r1bqk2r/pppp1ppp/2n2n2/8/1bBPP3/2N2N2/PP3PPP/R1BQK2R b KQkq - 2 7 -> 34\r\n * r1bqk2r/pppp1ppp/2n5/8/1bBPn3/2N2N2/PP3PPP/R1BQK2R w KQkq - 0 8 -> 39\r\n * r1bqk2r/pppp1ppp/2n5/8/1bBPn3/2N2N2/PP3PPP/R1BQ1RK1 b kq - 1 8 -> 42\r\n * r1bqk2r/pppp1ppp/2n5/8/1bBP4/2n2N2/PP3PPP/R1BQ1RK1 w kq - 0 9 -> 37\r\n * r1bqk2r/pppp1ppp/2n5/8/1bBP4/2P2N2/P4PPP/R1BQ1RK1 b kq - 0 9 -> 34\r\n * r1bqk2r/pppp1ppp/2n5/8/2BP4/2b2N2/P4PPP/R1BQ1RK1 w kq - 0 10 -> 37\r\n * r1bqk2r/pppp1ppp/2n5/8/2BP4/1Qb2N2/P4PPP/R1B2RK1 b kq - 1 10 -> 35\r\n * r1bqk2r/pppp1ppp/2n5/8/2BP4/1Q3N2/P4PPP/b1B2RK1 w kq - 0 11 -> 42\r\n * r1bqk2r/pppp1Bpp/2n5/8/3P4/1Q3N2/P4PPP/b1B2RK1 b kq - 0 11 -> 2\r\n * r1bq1k1r/pppp1Bpp/2n5/8/3P4/1Q3N2/P4PPP/b1B2RK1 w - - 1 12 -> 45\r\n * r1bq1k1r/pppp1Bpp/2n5/8/3P4/1Q3N2/P4PPP/b1B1R1K1 b - - 2 12 -> 26\r\n * r1bq1k1r/ppp2Bpp/2np4/8/3P4/1Q3N2/P4PPP/b1B1R1K1 w - - 0 13 -> 52\r\n * r1bq1k1r/ppp3pp/2np4/7B/3P4/1Q3N2/P4PPP/b1B1R1K1 b - - 1 13 -> 30\r\n * r1b2k1r/pppq2pp/2np4/7B/3P4/1Q3N2/P4PPP/b1B1R1K1 w - - 2 14 -> 51\r\n * r1b2k1r/pppq2pp/2np4/7B/3PR3/1Q3N2/P4PPP/b1B3K1 b - - 3 14 -> 28\r\n * r1b2k1r/pppq2p1/2np3p/7B/3PR3/1Q3N2/P4PPP/b1B3K1 w - - 0 15 -> 53\r\n * r1b2k1r/pppq2p1/2np3p/7B/3PR2N/1Q6/P4PPP/b1B3K1 b - - 1 15 -> 28\r\n * r1b2k1r/pppq4/2np3p/6pB/3PR2N/1Q6/P4PPP/b1B3K1 w - g6 0 16 -> 56\r\n * r1b2k1r/pppqR3/2np3p/6pB/3P3N/1Q6/P4PPP/b1B3K1 b - - 1 16 -> 28\r\n * r1b2k1r/ppp1q3/2np3p/6pB/3P3N/1Q6/P4PPP/b1B3K1 w - - 0 17 -> 47\r\n * r1b2k1r/ppp1q3/2np2Np/6pB/3P4/1Q6/P4PPP/b1B3K1 b - - 1 17 -> 2\r\n * r1b4r/ppp1q1k1/2np2Np/6pB/3P4/1Q6/P4PPP/b1B3K1 w - - 2 18 -> 48\r\n * r1b4r/ppp1N1k1/2np3p/6pB/3P4/1Q6/P4PPP/b1B3K1 b - - 0 18 -> 30\r\n * r1b2r2/ppp1N1k1/2np3p/6pB/3P4/1Q6/P4PPP/b1B3K1 w - - 1 19 -> 51\r\n * r1b2r2/ppp3k1/2Np3p/6pB/3P4/1Q6/P4PPP/b1B3K1 b - - 0 19 -> 29\r\n * r1b2r2/p1p3k1/2pp3p/6pB/3P4/1Q6/P4PPP/b1B3K1 w - - 0 20 -> 46\r\n * r1b2r2/p1p3k1/2pp3p/6pB/3P4/8/P4PPP/bQB3K1 b - - 1 20 -> 29\r\n * r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/bQB3K1 w - - 2 21 -> 38\r\n * r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21 -> 25\r\n * 1rb5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 w - - 1 22 -> 27\r\n * 1rb5/p1p3k1/2pp1r1p/6pB/3P4/2Q5/P4PPP/2B3K1 b - - 2 22 -> 32\r\n */\r\nfunction Board() {\r\n    /**\r\n     * State to manage the FEN (Forsyth-Edwards Notation) string representing the board position.\r\n     * This state is used to parse and set the initial board configuration.\r\n     *\r\n     * FEN - Forsyth-Edwards Notation:\r\n     * - Small letters represent black pieces.\r\n     * - Capital letters represent white pieces.\r\n     * - Numbers represent empty board squares.\r\n     * - (/) separates each board row.\r\n     * - The first letter after the board indicates whose turn it is to move (w - white, b - black).\r\n     * - Next letters indicate castling rights:\r\n     *   - k - king-side\r\n     *   - q - queen-side\r\n     *   - (-) - no castling allowed for any side.\r\n     * - En passant square:\r\n     *   - When a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square.\r\n     * - The number of half turns:\r\n     *   - White moves, then black moves = 2 half moves\r\n     *   - Half turns are made without a pawn move or a capture of a piece (50-move rule when reaches 100).\r\n     * - The number of full moves:\r\n     *   - White moves, then black moves = 1 full move\r\n     *   - Increases after every black half move.\r\n     * \r\n     * Starting position:\r\n     * 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\r\n     *\r\n     * Examples of FEN positions:\r\n     * 'r1bqk2r/pppp1ppp/2n5/8/1bBPn3/2N2N2/PP3PPP/R1BQK2R w KQkq - 0 8'\r\n     * 'r1bqk2r/pppp1ppp/2n2n2/2b5/2BPP3/5N2/PP3PPP/RNBQK2R b KQkq - 0 6'\r\n     * 'r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21'\r\n     */\r\n    const [fen, setFen] = useState('r1b2r2/p1p3k1/2pp3p/6pB/3P4/1Q6/P4PPP/b1B3K1 w - - 0 20');\r\n\r\n    /**\r\n     * State to manage possible moves for a piece. \r\n     * This state holds an array of objects indicating which squares are possible moves for the selected piece.\r\n     */\r\n    const [isPossibleMove, setIsPossibleMove] = useState([]);\r\n\r\n    /**\r\n     * State to manage the squares on the board.\r\n     * This state holds an array of square components representing the current board configuration.\r\n     */\r\n    const [boardSquares, setBoardSquares] = useState([]);\r\n\r\n    /**\r\n     * Reference to the `isPossibleMove` state to avoid stale closures.\r\n     * This reference ensures that the latest state is used in functions that rely on it.\r\n     */\r\n    const isPossibleMoveRef = useRef(isPossibleMove);\r\n\r\n    /**\r\n     * Reference to the `boardSquares` state to avoid stale closures.\r\n     * This reference ensures that the latest state is used in functions that rely on it.\r\n     */\r\n    const boardSquaresRef = useRef(boardSquares);\r\n\r\n    const fenRef = useRef(fen)\r\n\r\n    /**\r\n     * Updates the reference to the `isPossibleMove` array whenever the state changes.\r\n     * Additionally, updates the `boardSquares` state by parsing the FEN string.\r\n     */\r\n    useEffect(() => {\r\n        isPossibleMoveRef.current = isPossibleMove;\r\n        setBoardSquares(HelperMethods.fenParser(fen, isPossibleMoveRef.current, getPossibleMoves, movePiece, resetPossibleMoves, false));\r\n    }, [isPossibleMove]);\r\n\r\n    /**\r\n     * Initializes the board state when the component mounts.\r\n     * Parses the FEN string to set up the initial board configuration.\r\n     */\r\n    useEffect(() => {\r\n        resetPossibleMoves();\r\n        setBoardSquares(HelperMethods.fenParser(fen, isPossibleMoveRef.current, getPossibleMoves, movePiece, resetPossibleMoves));\r\n    }, []);\r\n\r\n    /**\r\n     * Updates the `boardSquares` state whenever the FEN string changes.\r\n     * Parses the FEN string to update the board configuration.\r\n     */\r\n    useEffect(() => {\r\n        fenRef.current = fen\r\n        setBoardSquares(HelperMethods.fenParser(fen, isPossibleMoveRef.current, getPossibleMoves, movePiece, resetPossibleMoves));\r\n    }, [fen]);\r\n\r\n    /**\r\n     * Updates the reference to the `boardSquares` array whenever the state changes.\r\n     * This ensures that functions relying on `boardSquaresRef` have the latest state.\r\n     */\r\n    useEffect(() => {\r\n        boardSquaresRef.current = boardSquares;\r\n    }, [boardSquares]);\r\n\r\n    const fenList = [\r\n        \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1 -> 20\",\r\n        \"rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1 -> 20\",\r\n        \"rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq e6 0 2 -> 29\",\r\n        \"rnbqkbnr/pppp1ppp/8/4p3/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 2 -> 29\",\r\n        \"r1bqkbnr/pppp1ppp/2n5/4p3/4P3/5N2/PPPP1PPP/RNBQKB1R w KQkq - 2 3 -> 27\",\r\n        \"r1bqkbnr/pppp1ppp/2n5/4p3/2B1P3/5N2/PPPP1PPP/RNBQK2R b KQkq - 3 3 -> 31\",\r\n        \"r1bqk1nr/pppp1ppp/2n5/2b1p3/2B1P3/5N2/PPPP1PPP/RNBQK2R w KQkq - 4 4 -> 33\",\r\n        \"r1bqk1nr/pppp1ppp/2n5/2b1p3/2B1P3/2P2N2/PP1P1PPP/RNBQK2R b KQkq - 0 4 -> 36\",\r\n        \"r1bqk2r/pppp1ppp/2n2n2/2b1p3/2B1P3/2P2N2/PP1P1PPP/RNBQK2R w KQkq - 1 5 -> 34\",\r\n        \"r1bqk2r/pppp1ppp/2n2n2/2b1p3/2BPP3/2P2N2/PP3PPP/RNBQK2R b KQkq d3 0 5 -> 35\",\r\n        \"r1bqk2r/pppp1ppp/2n2n2/2b5/2BpP3/2P2N2/PP3PPP/RNBQK2R w KQkq - 0 6 -> 45\",\r\n        \"r1bqk2r/pppp1ppp/2n2n2/2b5/2BPP3/5N2/PP3PPP/RNBQK2R b KQkq - 0 6 -> 35\",\r\n        \"r1bqk2r/pppp1ppp/2n2n2/8/1bBPP3/5N2/PP3PPP/RNBQK2R w KQkq - 1 7 -> 7\",\r\n        \"r1bqk2r/pppp1ppp/2n2n2/8/1bBPP3/2N2N2/PP3PPP/R1BQK2R b KQkq - 2 7 -> 34\",\r\n        \"r1bqk2r/pppp1ppp/2n5/8/1bBPn3/2N2N2/PP3PPP/R1BQK2R w KQkq - 0 8 -> 39\",\r\n        \"r1bqk2r/pppp1ppp/2n5/8/1bBPn3/2N2N2/PP3PPP/R1BQ1RK1 b kq - 1 8 -> 42\",\r\n        \"r1bqk2r/pppp1ppp/2n5/8/1bBP4/2n2N2/PP3PPP/R1BQ1RK1 w kq - 0 9 -> 37\",\r\n        \"r1bqk2r/pppp1ppp/2n5/8/1bBP4/2P2N2/P4PPP/R1BQ1RK1 b kq - 0 9 -> 34\",\r\n        \"r1bqk2r/pppp1ppp/2n5/8/2BP4/2b2N2/P4PPP/R1BQ1RK1 w kq - 0 10 -> 37\",\r\n        \"r1bqk2r/pppp1ppp/2n5/8/2BP4/1Qb2N2/P4PPP/R1B2RK1 b kq - 1 10 -> 35\",\r\n        \"r1bqk2r/pppp1ppp/2n5/8/2BP4/1Q3N2/P4PPP/b1B2RK1 w kq - 0 11 -> 42\",\r\n        \"r1bqk2r/pppp1Bpp/2n5/8/3P4/1Q3N2/P4PPP/b1B2RK1 b kq - 0 11 -> 2\",\r\n        \"r1bq1k1r/pppp1Bpp/2n5/8/3P4/1Q3N2/P4PPP/b1B2RK1 w - - 1 12 -> 45\",\r\n        \"r1bq1k1r/pppp1Bpp/2n5/8/3P4/1Q3N2/P4PPP/b1B1R1K1 b - - 2 12 -> 26\",\r\n        \"r1bq1k1r/ppp2Bpp/2np4/8/3P4/1Q3N2/P4PPP/b1B1R1K1 w - - 0 13 -> 52\",\r\n        \"r1bq1k1r/ppp3pp/2np4/7B/3P4/1Q3N2/P4PPP/b1B1R1K1 b - - 1 13 -> 30\",\r\n        \"r1b2k1r/pppq2pp/2np4/7B/3P4/1Q3N2/P4PPP/b1B1R1K1 w - - 2 14 -> 51\",\r\n        \"r1b2k1r/pppq2pp/2np4/7B/3PR3/1Q3N2/P4PPP/b1B3K1 b - - 3 14 -> 28\",\r\n        \"r1b2k1r/pppq2p1/2np3p/7B/3PR3/1Q3N2/P4PPP/b1B3K1 w - - 0 15 -> 53\",\r\n        \"r1b2k1r/pppq2p1/2np3p/7B/3PR2N/1Q6/P4PPP/b1B3K1 b - - 1 15 -> 28\",\r\n        \"r1b2k1r/pppq4/2np3p/6pB/3PR2N/1Q6/P4PPP/b1B3K1 w - g6 0 16 -> 56\",\r\n        \"r1b2k1r/pppqR3/2np3p/6pB/3P3N/1Q6/P4PPP/b1B3K1 b - - 1 16 -> 28\",\r\n        \"r1b2k1r/ppp1q3/2np3p/6pB/3P3N/1Q6/P4PPP/b1B3K1 w - - 0 17 -> 47\",\r\n        \"r1b2k1r/ppp1q3/2np2Np/6pB/3P4/1Q6/P4PPP/b1B3K1 b - - 1 17 -> 2\",\r\n        \"r1b4r/ppp1q1k1/2np2Np/6pB/3P4/1Q6/P4PPP/b1B3K1 w - - 2 18 -> 48\",\r\n        \"r1b4r/ppp1N1k1/2np3p/6pB/3P4/1Q6/P4PPP/b1B3K1 b - - 0 18 -> 30\",\r\n        \"r1b2r2/ppp1N1k1/2np3p/6pB/3P4/1Q6/P4PPP/b1B3K1 w - - 1 19 -> 51\",\r\n        \"r1b2r2/ppp3k1/2Np3p/6pB/3P4/1Q6/P4PPP/b1B3K1 b - - 0 19 -> 29\",\r\n        \"r1b2r2/p1p3k1/2pp3p/6pB/3P4/1Q6/P4PPP/b1B3K1 w - - 0 20 -> 46\",\r\n        \"r1b2r2/p1p3k1/2pp3p/6pB/3P4/8/P4PPP/bQB3K1 b - - 1 20 -> 29\",\r\n        \"r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/bQB3K1 w - - 2 21 -> 38\",\r\n        \"r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21 -> 25\",\r\n        \"1rb5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 w - - 1 22 -> 27\",\r\n        \"1rb5/p1p3k1/2pp1r1p/6pB/3P4/2Q5/P4PPP/2B3K1 b - - 2 22 -> 32\"\r\n    ]\r\n\r\n    function compareFens(currentFen, possibleMoves) {\r\n        for (let f of fenList) {\r\n            const tokens = f.split('->');\r\n            const movesCount = Number(tokens[1].trim());\r\n            const pos = tokens[0].split(' ')[0];\r\n            const currentPos = currentFen.split(' ')[0];\r\n\r\n            if (pos === currentPos) {\r\n                const count = possibleMoves.reduce((sum, value) => sum + value.moves.length, 0);\r\n\r\n                if (count === movesCount) {\r\n                    console.log(`Match for FEN: ${pos}`);\r\n                } else {\r\n                    console.log(`Doesn't match for FEN: ${pos}. Expected: ${movesCount}, got: ${count}`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the possible move state for a specific square.\r\n     * This function modifies the `isPossibleMove` array to indicate which squares can be moved to.\r\n     *\r\n     * @param {string} key - The key of the square to update.\r\n     * @param {boolean} value - The new value indicating whether the move is possible.\r\n     */\r\n    const updateIsPossibleMove = useCallback((key, value) => {\r\n        setIsPossibleMove(prevState =>\r\n            prevState.map(item =>\r\n                item.key === key ? { ...item, value: value } : item\r\n            )\r\n        );\r\n    }, []);\r\n\r\n    /**\r\n    * Resets possible moves highlighting.\r\n    * This function initializes the `isPossibleMove` array to indicate no possible moves.\r\n    */\r\n    const resetPossibleMoves = useCallback(() => {\r\n        const initialIsPossibleMove = [];\r\n        for (let i = 0; i < GlobalVariables.DIM; i++) {\r\n            for (let j = 0; j < GlobalVariables.DIM; j++) {\r\n                initialIsPossibleMove.push({ key: `${i}${GlobalVariables.PIECE_DELIMITER}${j}`, value: false });\r\n            }\r\n        }\r\n        setIsPossibleMove(initialIsPossibleMove);\r\n    }, []);\r\n\r\n    /**\r\n     * Updates the `isPossibleMove` array based on the `PossibleMoves` array.\r\n     * Forces a component update to visually indicate the possible moves on the board.\r\n     */\r\n    const updatePossibleMovesVisually = useCallback(() => {\r\n        for (let i = 0; i < GlobalVariables.PossibleMoves.length; i++) {\r\n            if (HelperMethods.checkIfAMoveIsEqualToTheCurrentSelectedSquare(GlobalVariables.PossibleMoves[i].piece)) {\r\n                for (let j = 0; j < GlobalVariables.PossibleMoves[i].moves.length; j++) {\r\n                    updateIsPossibleMove(`${GlobalVariables.PossibleMoves[i].moves[j].props.x}${GlobalVariables.PIECE_DELIMITER}${GlobalVariables.PossibleMoves[i].moves[j].props.y}`, true);\r\n                }\r\n            }\r\n        }\r\n    }, [updateIsPossibleMove]);\r\n\r\n    /**\r\n     * Moves a piece on the board.\r\n     * This function handles all aspects of moving a piece, including updating the board state, \r\n     * handling special moves like en passant and castling, and updating move counters.\r\n     *\r\n     * @param {number} x - The x coordinate of the target square.\r\n     * @param {number} y - The y coordinate of the target square.\r\n     */\r\n    const movePiece = useCallback((x, y) => {\r\n        const squares = boardSquaresRef.current;\r\n\r\n        const targetSquare = HelperMethods.getATargetSquareByLocation(x, y, squares);\r\n        const square = squares.find(s => HelperMethods.checkIfAMoveIsEqualToTheCurrentSelectedSquare(s));\r\n\r\n        HelperMethods.disableCastlingIfKingOrRookMoves(square);\r\n\r\n        let updatedPosition = HelperMethods.updateBoardPosition(square, targetSquare);\r\n        updatedPosition = HelperMethods.captureEnPassant(square, targetSquare, updatedPosition, squares);\r\n\r\n        HelperMethods.updateBoardState(updatedPosition);\r\n        HelperMethods.resetPossibleMovesAndToggleTurn();\r\n\r\n        HelperMethods.enableEnPassant(square, targetSquare);\r\n        HelperMethods.updateMoveCounters();\r\n\r\n        const newFen = HelperMethods.generateANewFen();\r\n        setFen(newFen)\r\n    }, [boardSquaresRef]);\r\n\r\n    /**\r\n     * Retrieves and updates the possible moves for all pieces on the board.\r\n     * This function collects all possible moves for the current player's pieces\r\n     * and updates the global possible moves state.\r\n     */\r\n    const getPossibleMoves = useCallback(() => {\r\n        const squares = boardSquaresRef.current;\r\n        let possiblePieceMoves = [];\r\n\r\n        squares.forEach(square => {\r\n            if (square.props.piece) {\r\n                const color = HelperMethods.getPieceColor(square);\r\n\r\n                if (MoveHandling.isMoveAllowed(color)) {\r\n                    possiblePieceMoves.push(...MoveHandling.collectPossibleMoves(square, squares));\r\n                }\r\n            }\r\n        });\r\n\r\n        //console.log(\"Possible Moves:\", possiblePieceMoves);\r\n        //console.log('Moves count', possiblePieceMoves.reduce((sum, pieceMove) => sum + pieceMove.moves.length, 0));\r\n        compareFens(fenRef.current, possiblePieceMoves)\r\n\r\n        MoveHandling.updatePossibleMoves(possiblePieceMoves);\r\n        updatePossibleMovesVisually();\r\n    }, [updatePossibleMovesVisually]);\r\n\r\n    /**\r\n     * Memoizes the rendered board squares to prevent unnecessary re-renders.\r\n     * This useMemo hook ensures that the `renderedBoardSquares` array is only recalculated\r\n     * when the `boardSquares` state changes. This optimization helps to improve performance\r\n     * by avoiding redundant rendering of the board squares when there are no changes to the\r\n     * `boardSquares` array.\r\n     *\r\n     * @returns {Array} - The memoized array of board squares.\r\n     */\r\n    const renderedBoardSquares = useMemo(() => {\r\n        return boardSquares.map((sqr) => sqr);\r\n    }, [boardSquares]);\r\n\r\n    //renders the board\r\n    return (\r\n        <div className=\"chessGrid\">\r\n            {renderedBoardSquares}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}