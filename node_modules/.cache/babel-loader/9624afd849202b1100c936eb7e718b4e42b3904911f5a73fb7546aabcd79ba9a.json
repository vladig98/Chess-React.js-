{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vladi Gotsin\\\\Desktop\\\\react\\\\Chess-React.js-\\\\src\\\\Board.js\";\nimport { Component } from \"react\";\nimport React from 'react';\nimport { Square } from \"./Square.js\";\nimport { ConvertFENPieceToPiece, ConvertFenToString, UpdatePosition, ParseFEN } from \"./HelperMethods.js\";\n\n/*\r\nTODO:\r\nCode Reusability: refactor some of the repeated code and generate new functions if needed\r\nConsistency and Naming: Have better and more consistent names for variables and functions\r\nDocumentation: add more comments to understand what is going on\r\nTesting: add unit tests\r\nImplementations: add promotions, implement endgames (mate, stalemate, draws repeation, 50 moves rule)\r\nBugs: Fix bugs (if any)\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DIM = 8; //8x8 Board\nconst BLACK_KING = 'black-king';\nconst WHITE_KING = 'white-king';\nconst PIECE_DELIMITER = '-';\nconst WHITE = 'white';\nconst BLACK = 'black';\nconst PAWN = 'pawn';\nconst ROOK = 'rook';\nconst KNIGHT = 'knight';\nconst BISHOP = 'bishop';\nconst KING = 'king';\nconst QUEEN = 'queen';\nexport class Board extends Component {\n  constructor(props) {\n    super(props);\n    this.movePiece = (x, y) => {\n      let squares = this.renderSquares();\n      let targetSquare = squares.find(s => s.props.x == x && s.props.y == y);\n      let square = squares.find(s => s.props.x == this.state.selectedSquareX && s.props.y == this.state.selectedSquareY);\n      let color = square.props.piece.split(\"-\")[0];\n      let piece = square.props.piece.split(\"-\")[1];\n\n      //disable castling if the king moves\n      if (piece == \"king\") {\n        if (color == \"white\") {\n          this.setState({\n            canWhiteLongCastle: false,\n            canWhiteShortCastle: false\n          });\n        } else {\n          this.setState({\n            canBlackLongCastle: false,\n            canBlackShortCastle: false\n          });\n        }\n      }\n\n      //disable castling if the rook moves\n      if (piece == \"rook\") {\n        if (square.props.x == 7 && square.props.y == 7) {\n          this.setState({\n            canWhiteShortCastle: false\n          });\n        }\n        if (square.props.x == 0 && square.props.y == 7) {\n          this.setState({\n            canBlackShortCastle: false\n          });\n        }\n        if (square.props.x == 7 && square.props.y == 0) {\n          this.setState({\n            canWhiteLongCastle: false\n          });\n        }\n        if (square.props.x == 0 && square.props.y == 0) {\n          this.setState({\n            canBlackLongCastle: false\n          });\n        }\n      }\n      let p = UpdatePosition(square, targetSquare, this.state.position);\n\n      //capturing enPassant\n      if (this.state.enPassantX && this.state.enPassantY && this.state.enPassantPossible) {\n        let enPassantTargetSquare = color == \"white\" ? squares.find(s => s.props.x == x + 1 && s.props.y == y) : squares.find(s => s.props.x == x - 1 && s.props.y == y);\n        let enPassantSquare = /*#__PURE__*/_jsxDEV(Square, {\n          x: square.props.x,\n          y: square.props.y,\n          piece: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 744,\n          columnNumber: 35\n        }, this);\n        p = UpdatePosition(enPassantSquare, enPassantTargetSquare, p);\n      }\n      this.setState({\n        position: p,\n        possibleMoves: [],\n        isWhiteToMove: !this.state.isWhiteToMove\n      });\n\n      //enabling en passant\n      if (piece == \"pawn\") {\n        if (Math.abs(square.props.x - targetSquare.props.x) == 2) {\n          let enPassant1 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y - 1);\n          let enPassant2 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y + 1);\n          if (enPassant1) {\n            if (enPassant1.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (enPassant1.props.piece.split(\"-\")[0] != color) {\n                this.setState({\n                  enPassantPossible: true,\n                  enPassantX: targetSquare.props.x,\n                  enPassantY: targetSquare.props.y\n                });\n                return;\n              }\n            }\n          }\n          if (enPassant2) {\n            if (enPassant2.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (enPassant2.props.piece.split(\"-\")[0] != color) {\n                this.setState({\n                  enPassantPossible: true,\n                  enPassantX: targetSquare.props.x,\n                  enPassantY: targetSquare.props.y\n                });\n                return;\n              }\n            }\n          }\n        }\n      }\n      this.setState({\n        enPassantPossible: false,\n        enPassantX: \"\",\n        enPassantY: \"\"\n      });\n    };\n    this.updatePossibleMoves = moves => {\n      this.setState({\n        possibleMoves: moves\n      });\n    };\n    this.updateSelectedSquareX = x => {\n      this.setState({\n        selectedSquareX: x\n      });\n    };\n    this.updateSelectedSquareY = y => {\n      this.setState({\n        selectedSquareY: y\n      });\n    };\n    this.state = {\n      //<summary>\n      //FEN - Forsyth-Edwards Notation\n      //small letters - black pieces\n      //capital letters - white pieces\n      //numbers - empty board squares\n      //(/) - separates each board row\n      //first letter after the board indicates whose turn it is to move (w - white, b - black)\n      //next letters indicate castling rights, k - kingside, q - queenside, (-) - no castling allowed for any side\n      //en passant square - when a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square\n      //the number of half turns (white moves, then black moves = 2 half moves) that were made without a pawn move or a capture of a piece (50-move rule when reaches 100)\n      //the number of full moves (white moves, then black moves = 1 full move); increase after every black half move\n      //</summary>\n      //starting position\n      //'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\n      fen: 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0',\n      boardPostition: [],\n      nextTurn: '',\n      WCastleK: true,\n      WCastleQ: true,\n      BCastleK: true,\n      BCastleQ: true,\n      enPassant: '',\n      halfMoves: 0,\n      fullMoves: 0,\n      boardSquare: [],\n      possibleMoves: [],\n      selectedSquareX: \"\",\n      selectedSquareY: \"\",\n      canWhiteShortCastle: false,\n      canWhiteLongCastle: false,\n      canBlackShortCastle: false,\n      canBlackLongCastle: false,\n      enPassantPossible: false,\n      enPassantX: \"\",\n      enPassantY: \"\",\n      isWhiteToMove: true\n    };\n    this.fenParser = this.fenParser.bind(this);\n  }\n\n  //called when the page loads. we need to parse the FEN to fill in the board\n  componentDidMount() {\n    console.log(this.state.canWhiteShortCastle);\n    console.log(this.state.canWhiteShortCastle);\n    console.log(this.state.canWhiteShortCastle);\n    console.log(this.state.canWhiteShortCastle);\n    this.fenParser();\n  }\n  componentDidUpdate() {\n    console.log(this.state.canWhiteShortCastle);\n  }\n\n  //TODO\n  //parses the FEN for the initial board state\n  fenParser() {\n    const {\n      fenBoard,\n      fenTurn,\n      fenCastling,\n      fenEnPassant,\n      fenHalfMoves,\n      fenFullMoves\n    } = ParseFEN(this.state.fen);\n    const fenRows = fenBoard.split('/');\n    let arr = [];\n    for (let row of fenRows) {\n      const tokens = row.split('');\n      let r = [];\n      for (let i = 0; i < tokens.length; i++) {\n        if (Number(tokens[i])) {\n          for (let j = 0; j < Number(tokens[i]); j++) {\n            r.push(' ');\n          }\n        } else {\n          r.push(tokens[i]);\n        }\n      }\n      arr.push(r);\n    }\n    let boardSquares = [];\n    let squareColorIsWhite = true;\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0; j < arr[i].length; j++) {\n        let color = squareColorIsWhite ? \"\" : \"dark\";\n        boardSquares.push( /*#__PURE__*/_jsxDEV(Square, {\n          getPossibleMoves: this.getPossibleMoves.bind(this),\n          x: i,\n          y: j,\n          piece: ConvertFENPieceToPiece(arr[i][j]),\n          color: color,\n          selectedSquareX: this.state.selectedSquareX,\n          setSelectedSquareX: this.updateSelectedSquareX,\n          selectedSquareY: this.state.selectedSquareY,\n          setSelectedSquareY: this.updateSelectedSquareY,\n          possibleMoves: this.state.possibleMoves,\n          updatePossibleMoves: this.updatePossibleMoves,\n          movePiece: this.movePiece\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 35\n        }, this));\n        squareColorIsWhite = !squareColorIsWhite;\n      }\n      squareColorIsWhite = !squareColorIsWhite;\n    }\n    let propsToUpdate = {\n      boardPostition: arr,\n      nextTurn: fenTurn,\n      enPassant: fenEnPassant,\n      halfMoves: fenHalfMoves,\n      fullMoves: fenFullMoves,\n      boardSquare: boardSquares\n    };\n    let castles = fenCastling.split(\"\");\n    for (let i = 0; i < castles.length; i++) {\n      let castling = castles[i];\n      switch (castling) {\n        case \"K\":\n          propsToUpdate.canWhiteShortCastle = true;\n          break;\n        case \"k\":\n          propsToUpdate.canBlackShortCastle = true;\n          break;\n        case \"Q\":\n          propsToUpdate.canWhiteLongCastle = true;\n          break;\n        case \"q\":\n          propsToUpdate.canBlackLongCastle = true;\n          break;\n        default:\n          break;\n      }\n    }\n    this.setState(propsToUpdate);\n  }\n  isWhiteInCheck(square, pseudo) {\n    let squares = this.state.boardSquare;\n    if (pseudo) {\n      const updatedSquares = squares.map(s => {\n        if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\n          // Return a new Square component with the updated piece\n          return /*#__PURE__*/React.cloneElement(s, {\n            piece: pseudo.props.piece\n          });\n        } else {\n          // For other squares, return the original Square component\n          return s;\n        }\n      });\n      squares = updatedSquares;\n    }\n\n    //check for attackers in front of the white king\n    for (let i = square.props.x - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from behind\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers behind the white king\n    for (let i = square.props.x + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the front\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the left of the white king\n    for (let i = square.props.y - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the left\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the right of the white king\n    for (let i = square.props.y + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the right\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == -1) {\n                //console.log(\"in check from top half of counterclockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from top half of counterclockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == 1) {\n                //console.log(\"in check from top half of clockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from top half of clockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for knights check\n    let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1);\n    let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1);\n    let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1);\n    let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1);\n    let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2);\n    let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2);\n    let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2);\n    let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2);\n    if (knight1) {\n      if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight1.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 1\")\n          return true;\n        }\n      }\n    }\n    if (knight2) {\n      if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight2.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 2\")\n          return true;\n        }\n      }\n    }\n    if (knight3) {\n      if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight3.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 3\")\n          return true;\n        }\n      }\n    }\n    if (knight4) {\n      if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight4.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 4\")\n          return true;\n        }\n      }\n    }\n    if (knight5) {\n      if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight5.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 5\")\n          return true;\n        }\n      }\n    }\n    if (knight6) {\n      if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight6.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 6\")\n          return true;\n        }\n      }\n    }\n    if (knight7) {\n      if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight7.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 7\")\n          return true;\n        }\n      }\n    }\n    if (knight8) {\n      if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight8.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 8\")\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  isBlackInCheck(square, pseudo) {\n    let squares = this.state.boardSquare;\n    if (pseudo) {\n      const updatedSquares = squares.map(s => {\n        if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\n          // Return a new Square component with the updated piece\n          return /*#__PURE__*/React.cloneElement(s, {\n            piece: pseudo.props.piece\n          });\n        } else {\n          // For other squares, return the original Square component\n          return s;\n        }\n      });\n      squares = updatedSquares;\n    }\n\n    //check for attackers behind the black king\n    for (let i = square.props.x - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from behind\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers in front of the black king\n    for (let i = square.props.x + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the front\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the left of the black king\n    for (let i = square.props.y - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the left\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the right of the black king\n    for (let i = square.props.y + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the right\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            //console.log(\"in check from top half of counterclockwise diagonal\")\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == 1) {\n                //console.log(\"in check from bottom half of counterclockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from bottom half of counterclockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            //console.log(\"in check from top half of clockwise diagonal\")\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == -1) {\n                //console.log(\"in check from bottom half of clockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from bottom half of clockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for knights check\n    let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1);\n    let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1);\n    let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1);\n    let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1);\n    let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2);\n    let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2);\n    let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2);\n    let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2);\n    if (knight1) {\n      if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight1.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 1\")\n          return true;\n        }\n      }\n    }\n    if (knight2) {\n      if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight2.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 2\")\n          return true;\n        }\n      }\n    }\n    if (knight3) {\n      if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight3.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 3\")\n          return true;\n        }\n      }\n    }\n    if (knight4) {\n      if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight4.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 4\")\n          return true;\n        }\n      }\n    }\n    if (knight5) {\n      if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight5.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 5\")\n          return true;\n        }\n      }\n    }\n    if (knight6) {\n      if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight6.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 6\")\n          return true;\n        }\n      }\n    }\n    if (knight7) {\n      if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight7.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 7\")\n          return true;\n        }\n      }\n    }\n    if (knight8) {\n      if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight8.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 8\")\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  //retrieves a speecific square from the board using x and y coordinates (location)\n  getATargetSquareByLocation(x, y) {\n    let squares = this.state.boardSquare;\n    return squares.find(s => s.props.x === x && s.props.y === y);\n  }\n\n  //retrieves a speecific square from the board that has a certain piece\n  getATargetSquareByPiece(piece) {\n    let squares = this.state.boardSquare;\n    return squares.find(s => s.props.piece == piece);\n  }\n\n  //check if a specific square has a piece assigned to it\n  isSquareAvailable(square) {\n    return square && !square.props.piece;\n  }\n\n  //checks if a pawn is on its starting square and allows a 2-squares move\n  isPawnOnStartingSquare(pawn) {\n    return this.isColorWhite(pawn.props.piece.split(PIECE_DELIMITER)[0]) ? pawn.props.x == 6 : pawn.props.x == 1;\n  }\n\n  //checks if two pieces have the same color\n  areSameColor(square1, square2) {\n    let color1 = square1.props.piece.split(PIECE_DELIMITER)[0];\n    let color2 = square2.props.piece.split(PIECE_DELIMITER)[0];\n    return color1 == color2;\n  }\n\n  //checks if a square contains a certain piece\n  doesTheSquareHasThePiece(square, piece) {\n    let p = square.props.piece.split(PIECE_DELIMITER)[1];\n    return p == piece;\n  }\n\n  //cheks if a pawn is on En Passant square\n  isPawnOnEnPassantSquare(pawn) {\n    return this.isColorWhite(pawn.props.piece.split(PIECE_DELIMITER)[0]) ? pawn.props.x == 3 : pawn.props.x == 4;\n  }\n\n  //checks if a color is white\n  isColorWhite(color) {\n    return color == WHITE;\n  }\n\n  //checks if a color is black\n  isColorBlack(color) {\n    return color == BLACK;\n  }\n\n  //converts board coordinates to X and Y position on the board, e.g., a8 = 0, 0\n  convertCoordinatesToLocation(coordinates) {\n    let tokens = coordinates.split('');\n\n    //skip invalid coordinates\n    if (tokens.length != 2) {\n      return;\n    }\n    let letter = tokens[0].toString().toUpperCase();\n    let number = tokens[1];\n\n    //65 is the ASCII code for capital A which will give us 0 if we have A as a coordinate; A-F will give us 0-7 for x\n    //reverse the numbers since we draw the board top down\n    return {\n      x: letter.charCodeAt(0) - 65,\n      y: DIM - Number(number)\n    };\n  }\n\n  //gets all possible moves for a pawn\n  getPawnsPossibleMoves(square) {\n    let color = square.props.piece.split(PIECE_DELIMITER)[0]; //get the piece color\n\n    //handle only if it's a pawn\n    if (!this.doesTheSquareHasThePiece(square, PAWN)) {\n      return;\n    }\n    let moves = [];\n    let position1Offset = 1;\n    let position2Offset = 2;\n\n    //flips the direction if the color is white\n    if (this.isColorWhite(color)) {\n      position1Offset *= -1;\n      position2Offset *= -1;\n    }\n\n    //get all forwards moves + the double move at the start\n    let targetPiece1 = this.getATargetSquareByLocation(square.props.x + position1Offset, square.props.y); //move pawn 1 square ahead\n    let targetPiece2 = this.getATargetSquareByLocation(square.props.x + position2Offset, square.props.y); //move pawn 2 squares ahead\n\n    //get potential neighbors to capture\n    let neighbor1 = this.getATargetSquareByLocation(square.props.x + position1Offset, square.props.y + position1Offset);\n    let neighbor2 = this.getATargetSquareByLocation(square.props.x + position1Offset, square.props.y + position1Offset * -1);\n\n    //get the En Passant coordinates\n    let enPassantCordinates = this.convertCoordinatesToLocation(this.state.enPassant);\n    let enPassant = enPassantCordinates ? this.getATargetSquareByLocation(enPassantCordinates.x, enPassantCordinates.y) : '';\n    let isTheSquareInFrontAvailable = this.isSquareAvailable(targetPiece1);\n\n    //push the one move forward for a pawn\n    if (isTheSquareInFrontAvailable) {\n      moves.push(targetPiece1);\n    }\n\n    //two moves are allowed only if the two squares above are free/empty\n    //allowed if pawn hasn't moved before\n    if (isTheSquareInFrontAvailable && this.isSquareAvailable(targetPiece2) && this.isPawnOnStartingSquare(square)) {\n      moves.push(targetPiece2);\n    }\n\n    //push neighbour if there is a piece to capture and it's a different color than the pawn\n    if (!this.isSquareAvailable(neighbor1) && !this.areSameColor(neighbor1, square)) {\n      moves.push(neighbor1);\n    }\n\n    //push neighbour if there is a piece to capture and it's a different color than the pawn\n    if (!this.isSquareAvailable(neighbor2) && !this.areSameColor(neighbor2, square)) {\n      moves.push(neighbor2);\n    }\n\n    //add En Passant\n    if (enPassant) {\n      moves.push(enPassant);\n    }\n    return {\n      piece: PAWN,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a rook\n  getRooksPossibleMoves(square) {\n    //don't do anything if not a rook\n    if (!this.doesTheSquareHasThePiece(square, ROOK)) {\n      return;\n    }\n    let moves = [];\n    for (let i = square.props.x + 1; i < DIM; i++) {\n      let targetSquare = this.getATargetSquareByLocation(i, square.props.y);\n      if (this.isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!this.areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    for (let i = square.props.x - 1; i >= 0; i--) {\n      let targetSquare = this.getATargetSquareByLocation(i, square.props.y);\n      if (this.isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!this.areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    for (let i = square.props.y + 1; i < DIM; i++) {\n      let targetSquare = this.getATargetSquareByLocation(square.props.x, i);\n      if (this.isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!this.areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    for (let i = square.props.y - 1; i >= 0; i--) {\n      let targetSquare = this.getATargetSquareByLocation(square.props.x, i);\n      if (this.isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!this.areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    return {\n      piece: PAWN,\n      moves: moves\n    };\n  }\n\n  //TODO\n  getBishopPossibleMoves(square) {\n    for (let i = 1; i <= DIM; i++) {\n      if (square.props.x - i >= 0 && square.props.y - i >= 0) {\n        let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i);\n        if (!targetPiece.props.piece) {\n          possibleMoves.push({\n            x: square.props.x - i,\n            y: square.props.y - i\n          });\n        } else {\n          if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n            possibleMoves.push({\n              x: square.props.x - i,\n              y: square.props.y - i\n            });\n          }\n          break;\n        }\n      }\n    }\n    for (let i = 1; i <= DIM; i++) {\n      if (square.props.x + i < DIM && square.props.y + i < DIM) {\n        let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i);\n        if (!targetPiece.props.piece) {\n          possibleMoves.push({\n            x: square.props.x + i,\n            y: square.props.y + i\n          });\n        } else {\n          if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n            possibleMoves.push({\n              x: square.props.x + i,\n              y: square.props.y + i\n            });\n          }\n          break;\n        }\n      }\n    }\n    for (let i = 1; i <= DIM; i++) {\n      if (square.props.x - i >= 0 && square.props.y + i < DIM) {\n        let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i);\n        if (!targetPiece.props.piece) {\n          possibleMoves.push({\n            x: square.props.x - i,\n            y: square.props.y + i\n          });\n        } else {\n          if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n            possibleMoves.push({\n              x: square.props.x - i,\n              y: square.props.y + i\n            });\n          }\n          break;\n        }\n      }\n    }\n    for (let i = 1; i <= DIM; i++) {\n      if (square.props.x + i < DIM && square.props.y - i >= 0) {\n        let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i);\n        if (!targetPiece.props.piece) {\n          possibleMoves.push({\n            x: square.props.x + i,\n            y: square.props.y - i\n          });\n        } else {\n          if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n            possibleMoves.push({\n              x: square.props.x + i,\n              y: square.props.y - i\n            });\n          }\n          break;\n        }\n      }\n    }\n  }\n\n  //TODO\n  getKnightPossibleMoves(square) {\n    let targetPiece1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1);\n    let targetPiece2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1);\n    let targetPiece3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1);\n    let targetPiece4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1);\n    let targetPiece5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2);\n    let targetPiece6 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2);\n    let targetPiece7 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2);\n    let targetPiece8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2);\n    if (targetPiece1) {\n      if (!targetPiece1.props.piece) {\n        possibleMoves.push({\n          x: targetPiece1.props.x,\n          y: targetPiece1.props.y\n        });\n      } else {\n        if (targetPiece1.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n          possibleMoves.push({\n            x: targetPiece1.props.x,\n            y: targetPiece1.props.y\n          });\n        }\n      }\n    }\n    if (targetPiece2) {\n      if (!targetPiece2.props.piece) {\n        possibleMoves.push({\n          x: targetPiece2.props.x,\n          y: targetPiece2.props.y\n        });\n      } else {\n        if (targetPiece2.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n          possibleMoves.push({\n            x: targetPiece2.props.x,\n            y: targetPiece2.props.y\n          });\n        }\n      }\n    }\n    if (targetPiece3) {\n      if (!targetPiece3.props.piece) {\n        possibleMoves.push({\n          x: targetPiece3.props.x,\n          y: targetPiece3.props.y\n        });\n      } else {\n        if (targetPiece3.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n          possibleMoves.push({\n            x: targetPiece3.props.x,\n            y: targetPiece3.props.y\n          });\n        }\n      }\n    }\n    if (targetPiece4) {\n      if (!targetPiece4.props.piece) {\n        possibleMoves.push({\n          x: targetPiece4.props.x,\n          y: targetPiece4.props.y\n        });\n      } else {\n        if (targetPiece4.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n          possibleMoves.push({\n            x: targetPiece4.props.x,\n            y: targetPiece4.props.y\n          });\n        }\n      }\n    }\n    if (targetPiece5) {\n      if (!targetPiece5.props.piece) {\n        possibleMoves.push({\n          x: targetPiece5.props.x,\n          y: targetPiece5.props.y\n        });\n      } else {\n        if (targetPiece5.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n          possibleMoves.push({\n            x: targetPiece5.props.x,\n            y: targetPiece5.props.y\n          });\n        }\n      }\n    }\n    if (targetPiece6) {\n      if (!targetPiece6.props.piece) {\n        possibleMoves.push({\n          x: targetPiece6.props.x,\n          y: targetPiece6.props.y\n        });\n      } else {\n        if (targetPiece6.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n          possibleMoves.push({\n            x: targetPiece6.props.x,\n            y: targetPiece6.props.y\n          });\n        }\n      }\n    }\n    if (targetPiece7) {\n      if (!targetPiece7.props.piece) {\n        possibleMoves.push({\n          x: targetPiece7.props.x,\n          y: targetPiece7.props.y\n        });\n      } else {\n        if (targetPiece7.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n          possibleMoves.push({\n            x: targetPiece7.props.x,\n            y: targetPiece7.props.y\n          });\n        }\n      }\n    }\n    if (targetPiece8) {\n      if (!targetPiece8.props.piece) {\n        possibleMoves.push({\n          x: targetPiece8.props.x,\n          y: targetPiece8.props.y\n        });\n      } else {\n        if (targetPiece8.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n          possibleMoves.push({\n            x: targetPiece8.props.x,\n            y: targetPiece8.props.y\n          });\n        }\n      }\n    }\n  }\n\n  //TODO\n  getKingPossibleMoves(square) {\n    for (let i = -1; i < 2; i++) {\n      for (let j = -1; j < 2; j++) {\n        let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + j);\n        if (targetPiece) {\n          if (!targetPiece.props.piece) {\n            possibleMoves.push({\n              x: targetPiece.props.x,\n              y: targetPiece.props.y\n            });\n          } else {\n            if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n              possibleMoves.push({\n                x: targetPiece.props.x,\n                y: targetPiece.props.y\n              });\n            }\n          }\n        }\n      }\n    }\n\n    //Castling logic\n    if (color == \"white\") {\n      if (this.state.canWhiteLongCastle) {\n        if (this.state.position[7].charAt(1) == 3 && this.state.position[7].charAt(0) == 'R') {\n          possibleMoves.push({\n            x: square.props.x,\n            y: square.props.y - 2\n          });\n        }\n      }\n      if (this.state.canWhiteShortCastle) {\n        if (this.state.position[7].split(\"\").reverse().join(\"\").charAt(1) == 2 && this.state.position[7].split(\"\").reverse().join(\"\").charAt(0) == 'R') {\n          possibleMoves.push({\n            x: square.props.x,\n            y: square.props.y + 2\n          });\n        }\n      }\n    } else {\n      if (this.state.canBlackLongCastle) {\n        if (this.state.position[0].charAt(1) == 3 && this.state.position[0].charAt(0) == 'r') {\n          possibleMoves.push({\n            x: square.props.x,\n            y: square.props.y - 2\n          });\n        }\n      }\n      if (this.state.canBlackShortCastle) {\n        if (this.state.position[0].split(\"\").reverse().join(\"\").charAt(1) == 2 && this.state.position[0].split(\"\").reverse().join(\"\").charAt(0) == 'r') {\n          possibleMoves.push({\n            x: square.props.x,\n            y: square.props.y + 2\n          });\n        }\n      }\n    }\n  }\n\n  //TODO\n  getQueenPossibleMoves(square) {\n    for (let i = square.props.x - 1; i >= 0; i--) {\n      let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.props.y);\n      if (!targetSquare.props.piece) {\n        possibleMoves.push({\n          x: i,\n          y: square.props.y\n        });\n      } else {\n        if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n          possibleMoves.push({\n            x: i,\n            y: square.props.y\n          });\n        }\n        break;\n      }\n    }\n    for (let i = square.props.y - 1; i >= 0; i--) {\n      let targetSquare = squares.find(s => s.props.x === square.props.x && s.props.y === i);\n      if (!targetSquare.props.piece) {\n        possibleMoves.push({\n          x: square.props.x,\n          y: i\n        });\n      } else {\n        if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n          possibleMoves.push({\n            x: square.props.x,\n            y: i\n          });\n        }\n        break;\n      }\n    }\n    for (let i = square.props.x + 1; i < DIM; i++) {\n      let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.props.y);\n      if (!targetSquare.props.piece) {\n        possibleMoves.push({\n          x: i,\n          y: square.props.y\n        });\n      } else {\n        if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n          possibleMoves.push({\n            x: i,\n            y: square.props.y\n          });\n        }\n        break;\n      }\n    }\n    for (let i = square.props.y + 1; i < DIM; i++) {\n      let targetSquare = squares.find(s => s.props.x === square.props.x && s.props.y === i);\n      if (!targetSquare.props.piece) {\n        possibleMoves.push({\n          x: square.props.x,\n          y: i\n        });\n      } else {\n        if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n          possibleMoves.push({\n            x: square.props.x,\n            y: i\n          });\n        }\n        break;\n      }\n    }\n    for (let i = 1; i <= DIM; i++) {\n      if (square.props.x - i >= 0 && square.props.y - i >= 0) {\n        let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i);\n        if (!targetPiece.props.piece) {\n          possibleMoves.push({\n            x: square.props.x - i,\n            y: square.props.y - i\n          });\n        } else {\n          if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n            possibleMoves.push({\n              x: square.props.x - i,\n              y: square.props.y - i\n            });\n          }\n          break;\n        }\n      }\n    }\n    for (let i = 1; i <= DIM; i++) {\n      if (square.props.x + i < DIM && square.props.y + i < DIM) {\n        let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i);\n        if (!targetPiece.props.piece) {\n          possibleMoves.push({\n            x: square.props.x + i,\n            y: square.props.y + i\n          });\n        } else {\n          if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n            possibleMoves.push({\n              x: square.props.x + i,\n              y: square.props.y + i\n            });\n          }\n          break;\n        }\n      }\n    }\n    for (let i = 1; i <= DIM; i++) {\n      if (square.props.x - i >= 0 && square.props.y + i < DIM) {\n        let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i);\n        if (!targetPiece.props.piece) {\n          possibleMoves.push({\n            x: square.props.x - i,\n            y: square.props.y + i\n          });\n        } else {\n          if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n            possibleMoves.push({\n              x: square.props.x - i,\n              y: square.props.y + i\n            });\n          }\n          break;\n        }\n      }\n    }\n    for (let i = 1; i <= DIM; i++) {\n      if (square.props.x + i < DIM && square.props.y - i >= 0) {\n        let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i);\n        if (!targetPiece.props.piece) {\n          possibleMoves.push({\n            x: square.props.x + i,\n            y: square.props.y - i\n          });\n        } else {\n          if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n            possibleMoves.push({\n              x: square.props.x + i,\n              y: square.props.y - i\n            });\n          }\n          break;\n        }\n      }\n    }\n  }\n\n  //TODO\n  filterMovesIfInCheck(possibleMoves) {\n    let blackKing = this.getATargetSquareByPiece(BLACK_KING); //get the black king\n    let whiteKing = this.getATargetSquareByPiece(WHITE_KING); //get the white king\n\n    //check if black is in check\n    if (square.props.piece.split(\"-\")[0] == \"black\") {\n      if (square.props.piece.split(\"-\")[1] == \"king\") {\n        for (let i = 0; i < possibleMoves.length; i++) {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].x,\n            y: possibleMoves[i].y,\n            piece: \"black-king\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1312,\n            columnNumber: 32\n          }, this);\n          let pseudo = /*#__PURE__*/_jsxDEV(Square, {\n            x: blackKing.props.x,\n            y: blackKing.props.y,\n            piece: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1313,\n            columnNumber: 34\n          }, this);\n          let isInCheck = this.isBlackInCheck(move, pseudo);\n          if (isInCheck) {\n            possibleMoves.splice(i, 1);\n            i--;\n          }\n        }\n      } else {\n        for (let i = 0; i < possibleMoves.length; i++) {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].x,\n            y: possibleMoves[i].y,\n            piece: square.props.piece\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1323,\n            columnNumber: 32\n          }, this);\n          let isInCheck = this.isBlackInCheck(blackKing, move);\n          if (isInCheck) {\n            possibleMoves.splice(i, 1);\n            i--;\n          }\n        }\n      }\n    }\n\n    //check if white is in check\n    if (square.props.piece.split(\"-\")[0] == \"white\") {\n      if (square.props.piece.split(\"-\")[1] == \"king\") {\n        for (let i = 0; i < possibleMoves.length; i++) {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].x,\n            y: possibleMoves[i].y,\n            piece: \"white-king\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1338,\n            columnNumber: 32\n          }, this);\n          let pseudo = /*#__PURE__*/_jsxDEV(Square, {\n            x: whiteKing.props.x,\n            y: whiteKing.props.y,\n            piece: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1339,\n            columnNumber: 34\n          }, this);\n          let isInCheck = this.isWhiteInCheck(move, pseudo);\n          if (isInCheck) {\n            possibleMoves.splice(i, 1);\n            i--;\n          }\n        }\n      } else {\n        for (let i = 0; i < possibleMoves.length; i++) {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].x,\n            y: possibleMoves[i].y,\n            piece: square.props.piece\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1349,\n            columnNumber: 32\n          }, this);\n          let isInCheck = this.isWhiteInCheck(whiteKing, move);\n          if (isInCheck) {\n            possibleMoves.splice(i, 1);\n            i--;\n          }\n        }\n      }\n    }\n  }\n\n  //TODO\n  filterMovesThatAllowIllegalCastling(possibleMoves) {\n    let blackKing = this.getATargetSquareByPiece(BLACK_KING); //get the black king\n    let whiteKing = this.getATargetSquareByPiece(WHITE_KING); //get the white king\n\n    //removes the right to castle if any of the castle squares is under attack\n    if (square.props.piece.split(\"-\")[1] == \"king\") {\n      let whiteCastle1 = possibleMoves.find(m => m.x == 7 && m.y == 6);\n      let whiteCastle2 = possibleMoves.find(m => m.x == 7 && m.y == 2);\n      let blackCastle1 = possibleMoves.find(m => m.x == 0 && m.y == 6);\n      let blackCastle2 = possibleMoves.find(m => m.x == 0 && m.y == 2);\n      if (whiteCastle1) {\n        let pieceAcross = possibleMoves.find(m => m.x == 7 && m.y == 5);\n        if (!pieceAcross) {\n          possibleMoves.splice(possibleMoves.indexOf(pieceAcross), 1);\n        }\n      }\n      if (whiteCastle2) {\n        let pieceAcross = possibleMoves.find(m => m.x == 7 && m.y == 3);\n        if (!pieceAcross) {\n          possibleMoves.splice(possibleMoves.indexOf(pieceAcross), 1);\n        }\n      }\n      if (blackCastle1) {\n        let pieceAcross = possibleMoves.find(m => m.x == 0 && m.y == 5);\n        if (!pieceAcross) {\n          possibleMoves.splice(possibleMoves.indexOf(pieceAcross), 1);\n        }\n      }\n      if (blackCastle2) {\n        let pieceAcross = possibleMoves.find(m => m.x == 0 && m.y == 3);\n        if (!pieceAcross) {\n          possibleMoves.splice(possibleMoves.indexOf(pieceAcross), 1);\n        }\n      }\n    }\n\n    //prevents black to castle if in check\n    if (this.isBlackInCheck(blackKing)) {\n      let castleMove = possibleMoves.find(m => m.x == 0 && m.y == 2);\n      let castleMove2 = possibleMoves.find(m => m.x == 0 && m.y == 6);\n      if (castleMove) {\n        possibleMoves.splice(possibleMoves.indexOf(castleMove), 1);\n      }\n      if (castleMove2) {\n        possibleMoves.splice(possibleMoves.indexOf(castleMove2), 1);\n      }\n    }\n\n    //prevents white to castle if in check\n    if (this.isWhiteInCheck(whiteKing)) {\n      let castleMove = possibleMoves.find(m => m.x == 7 && m.y == 2);\n      let castleMove2 = possibleMoves.find(m => m.x == 7 && m.y == 6);\n      if (castleMove) {\n        possibleMoves.splice(possibleMoves.indexOf(castleMove), 1);\n      }\n      if (castleMove2) {\n        possibleMoves.splice(possibleMoves.indexOf(castleMove2), 1);\n      }\n    }\n  }\n\n  //gets all possible/legal moves\n  getPossibleMoves(square) {\n    let possibleMoves = [];\n\n    //if the square has a piece\n    if (square.props.piece) {\n      let color = square.props.piece.split(PIECE_DELIMITER)[0]; //get the piece color\n\n      //don't collect possible moves if it's black to move and you're trying to move a white piece\n      if (this.isColorWhite(color) && !this.state.isWhiteToMove) {\n        return;\n      }\n\n      //don't collect possible moves if it's white to move and you're trying to move a black piece\n      if (this.isColorBlack(color) && this.state.isWhiteToMove) {\n        return;\n      }\n\n      //get all possible moves for each piece\n      possibleMoves.push(this.getPawnsPossibleMoves(square));\n      possibleMoves.push(this.getRooksPossibleMoves(square));\n      possibleMoves.push(this.getBishopPossibleMoves(square));\n      possibleMoves.push(this.getKnightPossibleMoves(square));\n      possibleMoves.push(this.getKingPossibleMoves(square));\n      possibleMoves.push(this.getQueenPossibleMoves(square));\n\n      //filter possible moves\n      possibleMoves = this.filterMovesIfInCheck(possibleMoves);\n      possibleMoves = this.filterMovesThatAllowIllegalCastling(possibleMoves);\n    }\n    console.log(\"Possible Moves:\", possibleMoves);\n    this.updatePossibleMoves(possibleMoves);\n  }\n\n  //renders the board\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessGrid\",\n      children: this.state.boardSquare.map(sqr => sqr)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1469,\n      columnNumber: 13\n    }, this);\n  }\n}","map":{"version":3,"names":["Component","React","Square","ConvertFENPieceToPiece","ConvertFenToString","UpdatePosition","ParseFEN","jsxDEV","_jsxDEV","DIM","BLACK_KING","WHITE_KING","PIECE_DELIMITER","WHITE","BLACK","PAWN","ROOK","KNIGHT","BISHOP","KING","QUEEN","Board","constructor","props","movePiece","x","y","squares","renderSquares","targetSquare","find","s","square","state","selectedSquareX","selectedSquareY","color","piece","split","setState","canWhiteLongCastle","canWhiteShortCastle","canBlackLongCastle","canBlackShortCastle","p","position","enPassantX","enPassantY","enPassantPossible","enPassantTargetSquare","enPassantSquare","fileName","_jsxFileName","lineNumber","columnNumber","possibleMoves","isWhiteToMove","Math","abs","enPassant1","enPassant2","updatePossibleMoves","moves","updateSelectedSquareX","updateSelectedSquareY","fen","boardPostition","nextTurn","WCastleK","WCastleQ","BCastleK","BCastleQ","enPassant","halfMoves","fullMoves","boardSquare","fenParser","bind","componentDidMount","console","log","componentDidUpdate","fenBoard","fenTurn","fenCastling","fenEnPassant","fenHalfMoves","fenFullMoves","fenRows","arr","row","tokens","r","i","length","Number","j","push","boardSquares","squareColorIsWhite","getPossibleMoves","setSelectedSquareX","setSelectedSquareY","propsToUpdate","castles","castling","isWhiteInCheck","pseudo","updatedSquares","map","cloneElement","knight1","knight2","knight3","knight4","knight5","knight6","knight7","knight8","isBlackInCheck","getATargetSquareByLocation","getATargetSquareByPiece","isSquareAvailable","isPawnOnStartingSquare","pawn","isColorWhite","areSameColor","square1","square2","color1","color2","doesTheSquareHasThePiece","isPawnOnEnPassantSquare","isColorBlack","convertCoordinatesToLocation","coordinates","letter","toString","toUpperCase","number","charCodeAt","getPawnsPossibleMoves","position1Offset","position2Offset","targetPiece1","targetPiece2","neighbor1","neighbor2","enPassantCordinates","isTheSquareInFrontAvailable","getRooksPossibleMoves","getBishopPossibleMoves","targetPiece","getKnightPossibleMoves","targetPiece3","targetPiece4","targetPiece5","targetPiece6","targetPiece7","targetPiece8","getKingPossibleMoves","charAt","reverse","join","getQueenPossibleMoves","filterMovesIfInCheck","blackKing","whiteKing","move","isInCheck","splice","filterMovesThatAllowIllegalCastling","whiteCastle1","m","whiteCastle2","blackCastle1","blackCastle2","pieceAcross","indexOf","castleMove","castleMove2","render","className","children","sqr"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/Chess-React.js-/src/Board.js"],"sourcesContent":["import { Component } from \"react\";\r\nimport React from 'react';\r\nimport { Square } from \"./Square.js\"\r\nimport { ConvertFENPieceToPiece, ConvertFenToString, UpdatePosition, ParseFEN } from \"./HelperMethods.js\";\r\n\r\n\r\n/*\r\nTODO:\r\nCode Reusability: refactor some of the repeated code and generate new functions if needed\r\nConsistency and Naming: Have better and more consistent names for variables and functions\r\nDocumentation: add more comments to understand what is going on\r\nTesting: add unit tests\r\nImplementations: add promotions, implement endgames (mate, stalemate, draws repeation, 50 moves rule)\r\nBugs: Fix bugs (if any)\r\n*/\r\n\r\nconst DIM = 8; //8x8 Board\r\nconst BLACK_KING = 'black-king';\r\nconst WHITE_KING = 'white-king';\r\nconst PIECE_DELIMITER = '-';\r\nconst WHITE = 'white';\r\nconst BLACK = 'black';\r\nconst PAWN = 'pawn';\r\nconst ROOK = 'rook';\r\nconst KNIGHT = 'knight';\r\nconst BISHOP = 'bishop';\r\nconst KING = 'king';\r\nconst QUEEN = 'queen';\r\n\r\nexport class Board extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            //<summary>\r\n            //FEN - Forsyth-Edwards Notation\r\n            //small letters - black pieces\r\n            //capital letters - white pieces\r\n            //numbers - empty board squares\r\n            //(/) - separates each board row\r\n            //first letter after the board indicates whose turn it is to move (w - white, b - black)\r\n            //next letters indicate castling rights, k - kingside, q - queenside, (-) - no castling allowed for any side\r\n            //en passant square - when a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square\r\n            //the number of half turns (white moves, then black moves = 2 half moves) that were made without a pawn move or a capture of a piece (50-move rule when reaches 100)\r\n            //the number of full moves (white moves, then black moves = 1 full move); increase after every black half move\r\n            //</summary>\r\n            //starting position\r\n            //'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\r\n            fen: 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0',\r\n            boardPostition: [],\r\n            nextTurn: '',\r\n            WCastleK: true,\r\n            WCastleQ: true,\r\n            BCastleK: true,\r\n            BCastleQ: true,\r\n            enPassant: '',\r\n            halfMoves: 0,\r\n            fullMoves: 0,\r\n            boardSquare: [],\r\n            possibleMoves: [],\r\n            selectedSquareX: \"\",\r\n            selectedSquareY: \"\",\r\n            canWhiteShortCastle: false,\r\n            canWhiteLongCastle: false,\r\n            canBlackShortCastle: false,\r\n            canBlackLongCastle: false,\r\n            enPassantPossible: false,\r\n            enPassantX: \"\",\r\n            enPassantY: \"\",\r\n            isWhiteToMove: true\r\n        };\r\n        this.fenParser = this.fenParser.bind(this);\r\n    }\r\n\r\n    //called when the page loads. we need to parse the FEN to fill in the board\r\n    componentDidMount() {\r\n        console.log(this.state.canWhiteShortCastle)\r\n        console.log(this.state.canWhiteShortCastle)\r\n        console.log(this.state.canWhiteShortCastle)\r\n        console.log(this.state.canWhiteShortCastle)\r\n        this.fenParser();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        console.log(this.state.canWhiteShortCastle)\r\n    }\r\n\r\n    //TODO\r\n    //parses the FEN for the initial board state\r\n    fenParser() {\r\n        const { fenBoard, fenTurn, fenCastling, fenEnPassant, fenHalfMoves, fenFullMoves } = ParseFEN(this.state.fen)\r\n\r\n        const fenRows = fenBoard.split('/')\r\n\r\n        let arr = [];\r\n\r\n        for (let row of fenRows) {\r\n            const tokens = row.split('')\r\n\r\n            let r = []\r\n\r\n            for (let i = 0; i < tokens.length; i++) {\r\n                if (Number(tokens[i])) {\r\n                    for (let j = 0; j < Number(tokens[i]); j++) {\r\n                        r.push(' ')\r\n                    }\r\n                } else {\r\n                    r.push(tokens[i])\r\n                }\r\n            }\r\n\r\n            arr.push(r)\r\n        }\r\n\r\n        let boardSquares = [];\r\n        let squareColorIsWhite = true;\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            for (let j = 0; j < arr[i].length; j++) {\r\n                let color = squareColorIsWhite ? \"\" : \"dark\";\r\n                boardSquares.push(<Square\r\n                    getPossibleMoves={this.getPossibleMoves.bind(this)}\r\n                    key={`${i}-${j}`}\r\n                    x={i}\r\n                    y={j}\r\n                    piece={ConvertFENPieceToPiece(arr[i][j])}\r\n                    color={color}\r\n                    selectedSquareX={this.state.selectedSquareX}\r\n                    setSelectedSquareX={this.updateSelectedSquareX}\r\n                    selectedSquareY={this.state.selectedSquareY}\r\n                    setSelectedSquareY={this.updateSelectedSquareY}\r\n                    possibleMoves={this.state.possibleMoves}\r\n                    updatePossibleMoves={this.updatePossibleMoves}\r\n                    movePiece={this.movePiece}\r\n                />)\r\n                squareColorIsWhite = !squareColorIsWhite;\r\n            }\r\n            squareColorIsWhite = !squareColorIsWhite;\r\n        }\r\n\r\n        let propsToUpdate = { boardPostition: arr, nextTurn: fenTurn, enPassant: fenEnPassant, halfMoves: fenHalfMoves, fullMoves: fenFullMoves, boardSquare: boardSquares }\r\n\r\n        let castles = fenCastling.split(\"\");\r\n\r\n        for (let i = 0; i < castles.length; i++) {\r\n            let castling = castles[i]\r\n\r\n            switch (castling) {\r\n                case \"K\":\r\n                    propsToUpdate.canWhiteShortCastle = true\r\n                    break;\r\n                case \"k\":\r\n                    propsToUpdate.canBlackShortCastle = true\r\n                    break;\r\n                case \"Q\":\r\n                    propsToUpdate.canWhiteLongCastle = true\r\n                    break;\r\n                case \"q\":\r\n                    propsToUpdate.canBlackLongCastle = true\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        this.setState(propsToUpdate)\r\n    }\r\n\r\n    isWhiteInCheck(square, pseudo) {\r\n        let squares = this.state.boardSquare\r\n\r\n        if (pseudo) {\r\n            const updatedSquares = squares.map(s => {\r\n                if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\r\n                    // Return a new Square component with the updated piece\r\n                    return React.cloneElement(s, { piece: pseudo.props.piece });\r\n                } else {\r\n                    // For other squares, return the original Square component\r\n                    return s;\r\n                }\r\n            });\r\n\r\n            squares = updatedSquares;\r\n        }\r\n\r\n        //check for attackers in front of the white king\r\n        for (let i = square.props.x - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from behind\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers behind the white king\r\n        for (let i = square.props.x + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the front\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the left of the white king\r\n        for (let i = square.props.y - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the left\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the right of the white king\r\n        for (let i = square.props.y + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the right\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == -1) {\r\n                                //console.log(\"in check from top half of counterclockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from top half of counterclockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        return true\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == 1) {\r\n                                //console.log(\"in check from top half of clockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from top half of clockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        return true;\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for knights check\r\n        let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1)\r\n        let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1)\r\n        let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1)\r\n        let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1)\r\n        let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2)\r\n        let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2)\r\n        let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2)\r\n        let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2)\r\n\r\n        if (knight1) {\r\n            if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight1.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 1\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight2) {\r\n            if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight2.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 2\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight3) {\r\n            if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight3.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 3\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight4) {\r\n            if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight4.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 4\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight5) {\r\n            if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight5.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 5\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight6) {\r\n            if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight6.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 6\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight7) {\r\n            if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight7.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 7\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight8) {\r\n            if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight8.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 8\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    isBlackInCheck(square, pseudo) {\r\n        let squares = this.state.boardSquare\r\n\r\n        if (pseudo) {\r\n            const updatedSquares = squares.map(s => {\r\n                if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\r\n                    // Return a new Square component with the updated piece\r\n                    return React.cloneElement(s, { piece: pseudo.props.piece });\r\n                } else {\r\n                    // For other squares, return the original Square component\r\n                    return s;\r\n                }\r\n            });\r\n\r\n            squares = updatedSquares;\r\n        }\r\n\r\n        //check for attackers behind the black king\r\n        for (let i = square.props.x - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from behind\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers in front of the black king\r\n        for (let i = square.props.x + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the front\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the left of the black king\r\n        for (let i = square.props.y - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the left\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the right of the black king\r\n        for (let i = square.props.y + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the right\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        //console.log(\"in check from top half of counterclockwise diagonal\")\r\n                        return true\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == 1) {\r\n                                //console.log(\"in check from bottom half of counterclockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from bottom half of counterclockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        //console.log(\"in check from top half of clockwise diagonal\")\r\n                        return true\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == -1) {\r\n                                //console.log(\"in check from bottom half of clockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from bottom half of clockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for knights check\r\n        let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1)\r\n        let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1)\r\n        let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1)\r\n        let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1)\r\n        let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2)\r\n        let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2)\r\n        let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2)\r\n        let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2)\r\n\r\n        if (knight1) {\r\n            if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight1.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 1\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight2) {\r\n            if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight2.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 2\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight3) {\r\n            if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight3.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 3\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight4) {\r\n            if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight4.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 4\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight5) {\r\n            if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight5.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 5\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight6) {\r\n            if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight6.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 6\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight7) {\r\n            if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight7.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 7\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight8) {\r\n            if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight8.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 8\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    movePiece = (x, y) => {\r\n        let squares = this.renderSquares();\r\n\r\n        let targetSquare = squares.find(s => s.props.x == x && s.props.y == y)\r\n        let square = squares.find(s => s.props.x == this.state.selectedSquareX && s.props.y == this.state.selectedSquareY)\r\n\r\n        let color = square.props.piece.split(\"-\")[0]\r\n        let piece = square.props.piece.split(\"-\")[1]\r\n\r\n        //disable castling if the king moves\r\n        if (piece == \"king\") {\r\n            if (color == \"white\") {\r\n                this.setState({ canWhiteLongCastle: false, canWhiteShortCastle: false })\r\n            } else {\r\n                this.setState({ canBlackLongCastle: false, canBlackShortCastle: false })\r\n            }\r\n        }\r\n\r\n        //disable castling if the rook moves\r\n        if (piece == \"rook\") {\r\n            if (square.props.x == 7 && square.props.y == 7) {\r\n                this.setState({ canWhiteShortCastle: false })\r\n            }\r\n\r\n            if (square.props.x == 0 && square.props.y == 7) {\r\n                this.setState({ canBlackShortCastle: false })\r\n            }\r\n\r\n            if (square.props.x == 7 && square.props.y == 0) {\r\n                this.setState({ canWhiteLongCastle: false })\r\n            }\r\n\r\n            if (square.props.x == 0 && square.props.y == 0) {\r\n                this.setState({ canBlackLongCastle: false })\r\n            }\r\n        }\r\n\r\n        let p = UpdatePosition(square, targetSquare, this.state.position)\r\n\r\n        //capturing enPassant\r\n        if (this.state.enPassantX && this.state.enPassantY && this.state.enPassantPossible) {\r\n            let enPassantTargetSquare = color == \"white\" ? squares.find(s => s.props.x == x + 1 && s.props.y == y) : squares.find(s => s.props.x == x - 1 && s.props.y == y)\r\n            let enPassantSquare = <Square x={square.props.x} y={square.props.y} piece={\"\"} />\r\n\r\n            p = UpdatePosition(enPassantSquare, enPassantTargetSquare, p)\r\n        }\r\n\r\n        this.setState({ position: p, possibleMoves: [], isWhiteToMove: !this.state.isWhiteToMove })\r\n\r\n        //enabling en passant\r\n        if (piece == \"pawn\") {\r\n            if (Math.abs(square.props.x - targetSquare.props.x) == 2) {\r\n                let enPassant1 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y - 1)\r\n                let enPassant2 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y + 1)\r\n\r\n                if (enPassant1) {\r\n                    if (enPassant1.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (enPassant1.props.piece.split(\"-\")[0] != color) {\r\n                            this.setState({ enPassantPossible: true, enPassantX: targetSquare.props.x, enPassantY: targetSquare.props.y })\r\n                            return\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (enPassant2) {\r\n                    if (enPassant2.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (enPassant2.props.piece.split(\"-\")[0] != color) {\r\n                            this.setState({ enPassantPossible: true, enPassantX: targetSquare.props.x, enPassantY: targetSquare.props.y })\r\n                            return\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({ enPassantPossible: false, enPassantX: \"\", enPassantY: \"\" })\r\n    }\r\n\r\n    updatePossibleMoves = (moves) => {\r\n        this.setState({ possibleMoves: moves });\r\n    };\r\n\r\n    updateSelectedSquareX = (x) => {\r\n        this.setState({ selectedSquareX: x })\r\n    }\r\n\r\n    updateSelectedSquareY = (y) => {\r\n        this.setState({ selectedSquareY: y })\r\n    }\r\n\r\n    //retrieves a speecific square from the board using x and y coordinates (location)\r\n    getATargetSquareByLocation(x, y) {\r\n        let squares = this.state.boardSquare\r\n\r\n        return squares.find(s => s.props.x === x && s.props.y === y);\r\n    }\r\n\r\n    //retrieves a speecific square from the board that has a certain piece\r\n    getATargetSquareByPiece(piece) {\r\n        let squares = this.state.boardSquare\r\n\r\n        return squares.find(s => s.props.piece == piece);\r\n    }\r\n\r\n    //check if a specific square has a piece assigned to it\r\n    isSquareAvailable(square) {\r\n        return square && !square.props.piece\r\n    }\r\n\r\n    //checks if a pawn is on its starting square and allows a 2-squares move\r\n    isPawnOnStartingSquare(pawn) {\r\n        return this.isColorWhite(pawn.props.piece.split(PIECE_DELIMITER)[0]) ? pawn.props.x == 6 : pawn.props.x == 1\r\n    }\r\n\r\n    //checks if two pieces have the same color\r\n    areSameColor(square1, square2) {\r\n        let color1 = square1.props.piece.split(PIECE_DELIMITER)[0];\r\n        let color2 = square2.props.piece.split(PIECE_DELIMITER)[0];\r\n\r\n        return color1 == color2\r\n    }\r\n\r\n    //checks if a square contains a certain piece\r\n    doesTheSquareHasThePiece(square, piece) {\r\n        let p = square.props.piece.split(PIECE_DELIMITER)[1];\r\n\r\n        return p == piece\r\n    }\r\n\r\n    //cheks if a pawn is on En Passant square\r\n    isPawnOnEnPassantSquare(pawn) {\r\n        return this.isColorWhite(pawn.props.piece.split(PIECE_DELIMITER)[0]) ? pawn.props.x == 3 : pawn.props.x == 4\r\n    }\r\n\r\n    //checks if a color is white\r\n    isColorWhite(color) {\r\n        return color == WHITE\r\n    }\r\n\r\n    //checks if a color is black\r\n    isColorBlack(color) {\r\n        return color == BLACK\r\n    }\r\n\r\n    //converts board coordinates to X and Y position on the board, e.g., a8 = 0, 0\r\n    convertCoordinatesToLocation(coordinates) {\r\n        let tokens = coordinates.split('')\r\n\r\n        //skip invalid coordinates\r\n        if (tokens.length != 2) {\r\n            return\r\n        }\r\n\r\n        let letter = tokens[0].toString().toUpperCase()\r\n        let number = tokens[1]\r\n\r\n        //65 is the ASCII code for capital A which will give us 0 if we have A as a coordinate; A-F will give us 0-7 for x\r\n        //reverse the numbers since we draw the board top down\r\n        return { x: letter.charCodeAt(0) - 65, y: DIM - Number(number) }\r\n    }\r\n\r\n    //gets all possible moves for a pawn\r\n    getPawnsPossibleMoves(square) {\r\n        let color = square.props.piece.split(PIECE_DELIMITER)[0]; //get the piece color\r\n\r\n        //handle only if it's a pawn\r\n        if (!this.doesTheSquareHasThePiece(square, PAWN)) {\r\n            return\r\n        }\r\n\r\n        let moves = []\r\n\r\n        let position1Offset = 1\r\n        let position2Offset = 2\r\n\r\n        //flips the direction if the color is white\r\n        if (this.isColorWhite(color)) {\r\n            position1Offset *= -1\r\n            position2Offset *= -1\r\n        }\r\n\r\n        //get all forwards moves + the double move at the start\r\n        let targetPiece1 = this.getATargetSquareByLocation(square.props.x + position1Offset, square.props.y) //move pawn 1 square ahead\r\n        let targetPiece2 = this.getATargetSquareByLocation(square.props.x + position2Offset, square.props.y) //move pawn 2 squares ahead\r\n\r\n        //get potential neighbors to capture\r\n        let neighbor1 = this.getATargetSquareByLocation(square.props.x + position1Offset, square.props.y + position1Offset)\r\n        let neighbor2 = this.getATargetSquareByLocation(square.props.x + position1Offset, square.props.y + (position1Offset * -1))\r\n\r\n        //get the En Passant coordinates\r\n        let enPassantCordinates = this.convertCoordinatesToLocation(this.state.enPassant)\r\n        let enPassant = enPassantCordinates ? this.getATargetSquareByLocation(enPassantCordinates.x, enPassantCordinates.y) : ''\r\n\r\n        let isTheSquareInFrontAvailable = this.isSquareAvailable(targetPiece1)\r\n\r\n        //push the one move forward for a pawn\r\n        if (isTheSquareInFrontAvailable) {\r\n            moves.push(targetPiece1)\r\n        }\r\n\r\n        //two moves are allowed only if the two squares above are free/empty\r\n        //allowed if pawn hasn't moved before\r\n        if (isTheSquareInFrontAvailable && this.isSquareAvailable(targetPiece2) && this.isPawnOnStartingSquare(square)) {\r\n            moves.push(targetPiece2)\r\n        }\r\n\r\n        //push neighbour if there is a piece to capture and it's a different color than the pawn\r\n        if (!this.isSquareAvailable(neighbor1) && !this.areSameColor(neighbor1, square)) {\r\n            moves.push(neighbor1)\r\n        }\r\n\r\n        //push neighbour if there is a piece to capture and it's a different color than the pawn\r\n        if (!this.isSquareAvailable(neighbor2) && !this.areSameColor(neighbor2, square)) {\r\n            moves.push(neighbor2)\r\n        }\r\n\r\n        //add En Passant\r\n        if (enPassant) {\r\n            moves.push(enPassant)\r\n        }\r\n\r\n        return { piece: PAWN, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a rook\r\n    getRooksPossibleMoves(square) {\r\n        //don't do anything if not a rook\r\n        if (!this.doesTheSquareHasThePiece(square, ROOK)) {\r\n            return\r\n        }\r\n\r\n        let moves = []\r\n\r\n        for (let i = square.props.x + 1; i < DIM; i++) {\r\n            let targetSquare = this.getATargetSquareByLocation(i, square.props.y)\r\n\r\n            if (this.isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!this.areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break\r\n            }\r\n        }\r\n\r\n        for (let i = square.props.x - 1; i >= 0; i--) {\r\n            let targetSquare = this.getATargetSquareByLocation(i, square.props.y)\r\n\r\n            if (this.isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!this.areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = square.props.y + 1; i < DIM; i++) {\r\n            let targetSquare = this.getATargetSquareByLocation(square.props.x, i)\r\n\r\n            if (this.isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!this.areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break\r\n            }\r\n        }\r\n\r\n        for (let i = square.props.y - 1; i >= 0; i--) {\r\n            let targetSquare = this.getATargetSquareByLocation(square.props.x, i)\r\n\r\n            if (this.isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!this.areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break\r\n            }\r\n        }\r\n\r\n        return { piece: PAWN, moves: moves }\r\n    }\r\n\r\n    //TODO\r\n    getBishopPossibleMoves(square) {\r\n        for (let i = 1; i <= DIM; i++) {\r\n            if (square.props.x - i >= 0 && square.props.y - i >= 0) {\r\n                let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i)\r\n\r\n                if (!targetPiece.props.piece) {\r\n                    possibleMoves.push({ x: square.props.x - i, y: square.props.y - i })\r\n                } else {\r\n                    if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                        possibleMoves.push({ x: square.props.x - i, y: square.props.y - i })\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 1; i <= DIM; i++) {\r\n            if (square.props.x + i < DIM && square.props.y + i < DIM) {\r\n                let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i)\r\n\r\n                if (!targetPiece.props.piece) {\r\n                    possibleMoves.push({ x: square.props.x + i, y: square.props.y + i })\r\n                } else {\r\n                    if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                        possibleMoves.push({ x: square.props.x + i, y: square.props.y + i })\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 1; i <= DIM; i++) {\r\n            if (square.props.x - i >= 0 && square.props.y + i < DIM) {\r\n                let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i)\r\n\r\n                if (!targetPiece.props.piece) {\r\n                    possibleMoves.push({ x: square.props.x - i, y: square.props.y + i })\r\n                } else {\r\n                    if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                        possibleMoves.push({ x: square.props.x - i, y: square.props.y + i })\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 1; i <= DIM; i++) {\r\n            if (square.props.x + i < DIM && square.props.y - i >= 0) {\r\n                let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i)\r\n\r\n                if (!targetPiece.props.piece) {\r\n                    possibleMoves.push({ x: square.props.x + i, y: square.props.y - i })\r\n                } else {\r\n                    if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                        possibleMoves.push({ x: square.props.x + i, y: square.props.y - i })\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //TODO\r\n    getKnightPossibleMoves(square) {\r\n        let targetPiece1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1)\r\n        let targetPiece2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1)\r\n        let targetPiece3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1)\r\n        let targetPiece4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1)\r\n        let targetPiece5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2)\r\n        let targetPiece6 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2)\r\n        let targetPiece7 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2)\r\n        let targetPiece8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2)\r\n\r\n        if (targetPiece1) {\r\n            if (!targetPiece1.props.piece) {\r\n                possibleMoves.push({ x: targetPiece1.props.x, y: targetPiece1.props.y })\r\n            } else {\r\n                if (targetPiece1.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                    possibleMoves.push({ x: targetPiece1.props.x, y: targetPiece1.props.y })\r\n                }\r\n            }\r\n        }\r\n\r\n        if (targetPiece2) {\r\n            if (!targetPiece2.props.piece) {\r\n                possibleMoves.push({ x: targetPiece2.props.x, y: targetPiece2.props.y })\r\n            } else {\r\n                if (targetPiece2.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                    possibleMoves.push({ x: targetPiece2.props.x, y: targetPiece2.props.y })\r\n                }\r\n            }\r\n        }\r\n\r\n        if (targetPiece3) {\r\n            if (!targetPiece3.props.piece) {\r\n                possibleMoves.push({ x: targetPiece3.props.x, y: targetPiece3.props.y })\r\n            } else {\r\n                if (targetPiece3.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                    possibleMoves.push({ x: targetPiece3.props.x, y: targetPiece3.props.y })\r\n                }\r\n            }\r\n        }\r\n\r\n        if (targetPiece4) {\r\n            if (!targetPiece4.props.piece) {\r\n                possibleMoves.push({ x: targetPiece4.props.x, y: targetPiece4.props.y })\r\n            } else {\r\n                if (targetPiece4.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                    possibleMoves.push({ x: targetPiece4.props.x, y: targetPiece4.props.y })\r\n                }\r\n            }\r\n        }\r\n\r\n        if (targetPiece5) {\r\n            if (!targetPiece5.props.piece) {\r\n                possibleMoves.push({ x: targetPiece5.props.x, y: targetPiece5.props.y })\r\n            } else {\r\n                if (targetPiece5.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                    possibleMoves.push({ x: targetPiece5.props.x, y: targetPiece5.props.y })\r\n                }\r\n            }\r\n        }\r\n\r\n        if (targetPiece6) {\r\n            if (!targetPiece6.props.piece) {\r\n                possibleMoves.push({ x: targetPiece6.props.x, y: targetPiece6.props.y })\r\n            } else {\r\n                if (targetPiece6.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                    possibleMoves.push({ x: targetPiece6.props.x, y: targetPiece6.props.y })\r\n                }\r\n            }\r\n        }\r\n\r\n        if (targetPiece7) {\r\n            if (!targetPiece7.props.piece) {\r\n                possibleMoves.push({ x: targetPiece7.props.x, y: targetPiece7.props.y })\r\n            } else {\r\n                if (targetPiece7.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                    possibleMoves.push({ x: targetPiece7.props.x, y: targetPiece7.props.y })\r\n                }\r\n            }\r\n        }\r\n\r\n        if (targetPiece8) {\r\n            if (!targetPiece8.props.piece) {\r\n                possibleMoves.push({ x: targetPiece8.props.x, y: targetPiece8.props.y })\r\n            } else {\r\n                if (targetPiece8.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                    possibleMoves.push({ x: targetPiece8.props.x, y: targetPiece8.props.y })\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //TODO\r\n    getKingPossibleMoves(square) {\r\n        for (let i = -1; i < 2; i++) {\r\n            for (let j = -1; j < 2; j++) {\r\n                let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + j)\r\n\r\n                if (targetPiece) {\r\n                    if (!targetPiece.props.piece) {\r\n                        possibleMoves.push({ x: targetPiece.props.x, y: targetPiece.props.y })\r\n                    } else {\r\n                        if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                            possibleMoves.push({ x: targetPiece.props.x, y: targetPiece.props.y })\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //Castling logic\r\n        if (color == \"white\") {\r\n            if (this.state.canWhiteLongCastle) {\r\n                if (this.state.position[7].charAt(1) == 3 && this.state.position[7].charAt(0) == 'R') {\r\n                    possibleMoves.push({ x: square.props.x, y: square.props.y - 2 })\r\n                }\r\n            }\r\n\r\n            if (this.state.canWhiteShortCastle) {\r\n                if (this.state.position[7].split(\"\").reverse().join(\"\").charAt(1) == 2 && this.state.position[7].split(\"\").reverse().join(\"\").charAt(0) == 'R') {\r\n                    possibleMoves.push({ x: square.props.x, y: square.props.y + 2 })\r\n                }\r\n            }\r\n        } else {\r\n            if (this.state.canBlackLongCastle) {\r\n                if (this.state.position[0].charAt(1) == 3 && this.state.position[0].charAt(0) == 'r') {\r\n                    possibleMoves.push({ x: square.props.x, y: square.props.y - 2 })\r\n                }\r\n            }\r\n\r\n            if (this.state.canBlackShortCastle) {\r\n                if (this.state.position[0].split(\"\").reverse().join(\"\").charAt(1) == 2 && this.state.position[0].split(\"\").reverse().join(\"\").charAt(0) == 'r') {\r\n                    possibleMoves.push({ x: square.props.x, y: square.props.y + 2 })\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //TODO\r\n    getQueenPossibleMoves(square) {\r\n        for (let i = square.props.x - 1; i >= 0; i--) {\r\n            let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.props.y);\r\n\r\n            if (!targetSquare.props.piece) {\r\n                possibleMoves.push({ x: i, y: square.props.y })\r\n            } else {\r\n                if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                    possibleMoves.push({ x: i, y: square.props.y })\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        for (let i = square.props.y - 1; i >= 0; i--) {\r\n            let targetSquare = squares.find(s => s.props.x === square.props.x && s.props.y === i);\r\n\r\n            if (!targetSquare.props.piece) {\r\n                possibleMoves.push({ x: square.props.x, y: i })\r\n            } else {\r\n                if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                    possibleMoves.push({ x: square.props.x, y: i })\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        for (let i = square.props.x + 1; i < DIM; i++) {\r\n            let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.props.y);\r\n\r\n            if (!targetSquare.props.piece) {\r\n                possibleMoves.push({ x: i, y: square.props.y })\r\n            } else {\r\n                if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                    possibleMoves.push({ x: i, y: square.props.y })\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        for (let i = square.props.y + 1; i < DIM; i++) {\r\n            let targetSquare = squares.find(s => s.props.x === square.props.x && s.props.y === i);\r\n\r\n            if (!targetSquare.props.piece) {\r\n                possibleMoves.push({ x: square.props.x, y: i })\r\n            } else {\r\n                if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                    possibleMoves.push({ x: square.props.x, y: i })\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = 1; i <= DIM; i++) {\r\n            if (square.props.x - i >= 0 && square.props.y - i >= 0) {\r\n                let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i)\r\n\r\n                if (!targetPiece.props.piece) {\r\n                    possibleMoves.push({ x: square.props.x - i, y: square.props.y - i })\r\n                } else {\r\n                    if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                        possibleMoves.push({ x: square.props.x - i, y: square.props.y - i })\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 1; i <= DIM; i++) {\r\n            if (square.props.x + i < DIM && square.props.y + i < DIM) {\r\n                let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i)\r\n\r\n                if (!targetPiece.props.piece) {\r\n                    possibleMoves.push({ x: square.props.x + i, y: square.props.y + i })\r\n                } else {\r\n                    if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                        possibleMoves.push({ x: square.props.x + i, y: square.props.y + i })\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 1; i <= DIM; i++) {\r\n            if (square.props.x - i >= 0 && square.props.y + i < DIM) {\r\n                let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i)\r\n\r\n                if (!targetPiece.props.piece) {\r\n                    possibleMoves.push({ x: square.props.x - i, y: square.props.y + i })\r\n                } else {\r\n                    if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                        possibleMoves.push({ x: square.props.x - i, y: square.props.y + i })\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 1; i <= DIM; i++) {\r\n            if (square.props.x + i < DIM && square.props.y - i >= 0) {\r\n                let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i)\r\n\r\n                if (!targetPiece.props.piece) {\r\n                    possibleMoves.push({ x: square.props.x + i, y: square.props.y - i })\r\n                } else {\r\n                    if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                        possibleMoves.push({ x: square.props.x + i, y: square.props.y - i })\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //TODO\r\n    filterMovesIfInCheck(possibleMoves) {\r\n        let blackKing = this.getATargetSquareByPiece(BLACK_KING) //get the black king\r\n        let whiteKing = this.getATargetSquareByPiece(WHITE_KING) //get the white king\r\n\r\n        //check if black is in check\r\n        if (square.props.piece.split(\"-\")[0] == \"black\") {\r\n            if (square.props.piece.split(\"-\")[1] == \"king\") {\r\n                for (let i = 0; i < possibleMoves.length; i++) {\r\n                    let move = <Square x={possibleMoves[i].x} y={possibleMoves[i].y} piece={\"black-king\"} />\r\n                    let pseudo = <Square x={blackKing.props.x} y={blackKing.props.y} piece={\"\"} />\r\n                    let isInCheck = this.isBlackInCheck(move, pseudo)\r\n\r\n                    if (isInCheck) {\r\n                        possibleMoves.splice(i, 1);\r\n                        i--;\r\n                    }\r\n                }\r\n            } else {\r\n                for (let i = 0; i < possibleMoves.length; i++) {\r\n                    let move = <Square x={possibleMoves[i].x} y={possibleMoves[i].y} piece={square.props.piece} />\r\n                    let isInCheck = this.isBlackInCheck(blackKing, move)\r\n\r\n                    if (isInCheck) {\r\n                        possibleMoves.splice(i, 1);\r\n                        i--;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //check if white is in check\r\n        if (square.props.piece.split(\"-\")[0] == \"white\") {\r\n            if (square.props.piece.split(\"-\")[1] == \"king\") {\r\n                for (let i = 0; i < possibleMoves.length; i++) {\r\n                    let move = <Square x={possibleMoves[i].x} y={possibleMoves[i].y} piece={\"white-king\"} />\r\n                    let pseudo = <Square x={whiteKing.props.x} y={whiteKing.props.y} piece={\"\"} />\r\n                    let isInCheck = this.isWhiteInCheck(move, pseudo)\r\n\r\n                    if (isInCheck) {\r\n                        possibleMoves.splice(i, 1);\r\n                        i--;\r\n                    }\r\n                }\r\n            } else {\r\n                for (let i = 0; i < possibleMoves.length; i++) {\r\n                    let move = <Square x={possibleMoves[i].x} y={possibleMoves[i].y} piece={square.props.piece} />\r\n                    let isInCheck = this.isWhiteInCheck(whiteKing, move)\r\n\r\n                    if (isInCheck) {\r\n                        possibleMoves.splice(i, 1);\r\n                        i--;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //TODO\r\n    filterMovesThatAllowIllegalCastling(possibleMoves) {\r\n        let blackKing = this.getATargetSquareByPiece(BLACK_KING) //get the black king\r\n        let whiteKing = this.getATargetSquareByPiece(WHITE_KING) //get the white king\r\n\r\n        //removes the right to castle if any of the castle squares is under attack\r\n        if (square.props.piece.split(\"-\")[1] == \"king\") {\r\n            let whiteCastle1 = possibleMoves.find(m => m.x == 7 && m.y == 6)\r\n            let whiteCastle2 = possibleMoves.find(m => m.x == 7 && m.y == 2)\r\n            let blackCastle1 = possibleMoves.find(m => m.x == 0 && m.y == 6)\r\n            let blackCastle2 = possibleMoves.find(m => m.x == 0 && m.y == 2)\r\n\r\n            if (whiteCastle1) {\r\n                let pieceAcross = possibleMoves.find(m => m.x == 7 && m.y == 5)\r\n                if (!pieceAcross) {\r\n                    possibleMoves.splice(possibleMoves.indexOf(pieceAcross), 1)\r\n                }\r\n            }\r\n\r\n            if (whiteCastle2) {\r\n                let pieceAcross = possibleMoves.find(m => m.x == 7 && m.y == 3)\r\n                if (!pieceAcross) {\r\n                    possibleMoves.splice(possibleMoves.indexOf(pieceAcross), 1)\r\n                }\r\n            }\r\n\r\n            if (blackCastle1) {\r\n                let pieceAcross = possibleMoves.find(m => m.x == 0 && m.y == 5)\r\n                if (!pieceAcross) {\r\n                    possibleMoves.splice(possibleMoves.indexOf(pieceAcross), 1)\r\n                }\r\n            }\r\n\r\n            if (blackCastle2) {\r\n                let pieceAcross = possibleMoves.find(m => m.x == 0 && m.y == 3)\r\n                if (!pieceAcross) {\r\n                    possibleMoves.splice(possibleMoves.indexOf(pieceAcross), 1)\r\n                }\r\n            }\r\n        }\r\n\r\n        //prevents black to castle if in check\r\n        if (this.isBlackInCheck(blackKing)) {\r\n            let castleMove = possibleMoves.find(m => m.x == 0 && m.y == 2)\r\n            let castleMove2 = possibleMoves.find(m => m.x == 0 && m.y == 6)\r\n\r\n            if (castleMove) {\r\n                possibleMoves.splice(possibleMoves.indexOf(castleMove), 1)\r\n            }\r\n\r\n            if (castleMove2) {\r\n                possibleMoves.splice(possibleMoves.indexOf(castleMove2), 1)\r\n            }\r\n        }\r\n\r\n        //prevents white to castle if in check\r\n        if (this.isWhiteInCheck(whiteKing)) {\r\n            let castleMove = possibleMoves.find(m => m.x == 7 && m.y == 2)\r\n            let castleMove2 = possibleMoves.find(m => m.x == 7 && m.y == 6)\r\n\r\n            if (castleMove) {\r\n                possibleMoves.splice(possibleMoves.indexOf(castleMove), 1)\r\n            }\r\n\r\n            if (castleMove2) {\r\n                possibleMoves.splice(possibleMoves.indexOf(castleMove2), 1)\r\n            }\r\n        }\r\n    }\r\n\r\n    //gets all possible/legal moves\r\n    getPossibleMoves(square) {\r\n        let possibleMoves = [];\r\n\r\n        //if the square has a piece\r\n        if (square.props.piece) {\r\n            let color = square.props.piece.split(PIECE_DELIMITER)[0]; //get the piece color\r\n\r\n            //don't collect possible moves if it's black to move and you're trying to move a white piece\r\n            if (this.isColorWhite(color) && !this.state.isWhiteToMove) {\r\n                return\r\n            }\r\n\r\n            //don't collect possible moves if it's white to move and you're trying to move a black piece\r\n            if (this.isColorBlack(color) && this.state.isWhiteToMove) {\r\n                return\r\n            }\r\n\r\n            //get all possible moves for each piece\r\n            possibleMoves.push(this.getPawnsPossibleMoves(square))\r\n            possibleMoves.push(this.getRooksPossibleMoves(square))\r\n            possibleMoves.push(this.getBishopPossibleMoves(square))\r\n            possibleMoves.push(this.getKnightPossibleMoves(square))\r\n            possibleMoves.push(this.getKingPossibleMoves(square))\r\n            possibleMoves.push(this.getQueenPossibleMoves(square))\r\n\r\n            //filter possible moves\r\n            possibleMoves = this.filterMovesIfInCheck(possibleMoves)\r\n            possibleMoves = this.filterMovesThatAllowIllegalCastling(possibleMoves)\r\n        }\r\n\r\n        console.log(\"Possible Moves:\", possibleMoves);\r\n        this.updatePossibleMoves(possibleMoves);\r\n    }\r\n\r\n    //renders the board\r\n    render() {\r\n        return (\r\n            <div className=\"chessGrid\">\r\n                {this.state.boardSquare.map((sqr) => sqr)}\r\n            </div>\r\n        );\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}