{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vladi Gotsin\\\\Desktop\\\\react\\\\Chess-React.js-\\\\src\\\\HelperMethods.js\";\nimport React from 'react';\nimport * as GlobalVariables from './globalVariables';\n\n/**\r\n * Checks if a character is Uppercase using the ASCII table.\r\n * @param {string} value - The character to check.\r\n * @returns {boolean} - True if the character is uppercase, false otherwise.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function IsUpperCase(value) {\n  return value.charCodeAt(0) >= 65 && value.charCodeAt(0) <= 90;\n}\n\n/**\r\n * Checks if a character is Lowercase using the ASCII table.\r\n * @param {string} value - The character to check.\r\n * @returns {boolean} - True if the character is lowercase, false otherwise.\r\n */\n_c = IsUpperCase;\nexport function IsLowerCase(value) {\n  return value.charCodeAt(0) >= 97 && value.charCodeAt(0) <= 122;\n}\n\n/**\r\n * Checks if a character is a Digit using the ASCII table.\r\n * @param {string} value - The character to check.\r\n * @returns {boolean} - True if the character is a digit, false otherwise.\r\n */\n_c2 = IsLowerCase;\nexport function IsDigit(value) {\n  return value.charCodeAt(0) >= 48 && value.charCodeAt(0) <= 57;\n}\n\n/**\r\n * Parses a FEN string and returns its components.\r\n * @param {string} fen - The FEN string to parse.\r\n * @returns {object} - An object containing the FEN components.\r\n */\n_c3 = IsDigit;\nexport function ParseFEN(fen) {\n  const fenParts = fen.split(' ');\n  if (fenParts.length !== 6) {\n    throw new Error('Invalid FEN');\n  }\n  const [fenBoard, fenTurn, fenCastling, fenEnPassant, fenHalfMoves, fenFullMoves] = fenParts;\n  return {\n    fenBoard,\n    fenTurn,\n    fenCastling,\n    fenEnPassant,\n    fenHalfMoves: Number(fenHalfMoves),\n    fenFullMoves: Number(fenFullMoves)\n  };\n}\n\n/**\r\n * Converts FEN piece notation to an actual piece.\r\n * @param {string} letter - The FEN notation of the piece.\r\n * @returns {string} - The actual piece.\r\n */\n_c4 = ParseFEN;\nexport function ConvertFENtoPiece(letter) {\n  const FEN_PIECE_MAP = {\n    [GlobalVariables.FEN_PIECES_BLACK.PAWN]: GlobalVariables.PIECES.PAWN,\n    [GlobalVariables.FEN_PIECES_BLACK.KNIGHT]: GlobalVariables.PIECES.KNIGHT,\n    [GlobalVariables.FEN_PIECES_BLACK.KING]: GlobalVariables.PIECES.KING,\n    [GlobalVariables.FEN_PIECES_BLACK.QUEEN]: GlobalVariables.PIECES.QUEEN,\n    [GlobalVariables.FEN_PIECES_BLACK.ROOK]: GlobalVariables.PIECES.ROOK,\n    [GlobalVariables.FEN_PIECES_BLACK.BISHOP]: GlobalVariables.PIECES.BISHOP\n  };\n  return FEN_PIECE_MAP[letter.toLowerCase()] || \"\";\n}\n\n/**\r\n * Converts the FEN piece notation to a piece that we can use in the square component.\r\n * @param {string} value - The FEN notation of the piece.\r\n * @returns {string} - The piece in {color-piece} format.\r\n */\n_c5 = ConvertFENtoPiece;\nexport function ConvertFENPieceToPiece(value) {\n  if (IsUpperCase(value)) {\n    return `${GlobalVariables.COLORS.WHITE}-${ConvertFENtoPiece(value)}`;\n  }\n  if (IsLowerCase(value)) {\n    return `${GlobalVariables.COLORS.BLACK}-${ConvertFENtoPiece(value)}`;\n  }\n  return \"\";\n}\n\n/**\r\n * Converts a string in FEN format to a normal string.\r\n * @param {string} value - The FEN string.\r\n * @returns {string} - The normal string.\r\n */\n_c6 = ConvertFENPieceToPiece;\nexport function ConvertFenToString(value) {\n  return value.split('').reduce((result, char) => {\n    if (IsDigit(char)) {\n      return result + GlobalVariables.EMPTY_SQUARE_PIECE.repeat(Number(char));\n    }\n    return result + char;\n  }, '');\n}\n\n/**\r\n * Checks if two squares are on the same row.\r\n * @param {object} square1 - The first square.\r\n * @param {object} square2 - The second square.\r\n * @returns {boolean} - True if the squares are on the same row, false otherwise.\r\n */\n_c7 = ConvertFenToString;\nexport function checkIfTwoSquaresAreOnTheSameRow(square1, square2) {\n  return square1.props.x === square2.props.x;\n}\n\n/**\r\n * Checks if the square is on the given row number.\r\n * @param {object} square - The square to check.\r\n * @param {number} rowNumber - The row number.\r\n * @returns {boolean} - True if the square is on the given row, false otherwise.\r\n */\nexport function isSquareOnRow(square, rowNumber) {\n  return square.props.x === rowNumber;\n}\n\n/**\r\n * Gets the piece from a square.\r\n * @param {object} square - The square to get the piece from.\r\n * @returns {string} - The piece.\r\n */\nexport function getPiece(square) {\n  return square.props.piece.split(GlobalVariables.PIECE_DELIMITER)[GlobalVariables.PIECE_PIECE_INDEX];\n}\n\n/**\r\n * Checks if a square has a specific piece.\r\n * @param {object} square - The square to check.\r\n * @param {string} piece - The piece to check for.\r\n * @returns {boolean} - True if the square has the piece, false otherwise.\r\n */\nexport function doesTheSquareHasThePiece(square, piece) {\n  return getPiece(square) === piece;\n}\n\n/**\r\n * Gets the piece color from a square.\r\n * @param {object} square - The square to get the piece color from.\r\n * @returns {string} - The piece color.\r\n */\nexport function getPieceColor(square) {\n  return square.props.piece.split(GlobalVariables.PIECE_DELIMITER)[GlobalVariables.PIECE_COLOR_INDEX];\n}\n\n/**\r\n * Checks if a color is white.\r\n * @param {string} color - The color to check.\r\n * @returns {boolean} - True if the color is white, false otherwise.\r\n */\nexport function isColorWhite(color) {\n  return color === GlobalVariables.COLORS.WHITE;\n}\n\n/**\r\n * Checks if a color is black.\r\n * @param {string} color - The color to check.\r\n * @returns {boolean} - True if the color is black, false otherwise.\r\n */\nexport function isColorBlack(color) {\n  return color === GlobalVariables.COLORS.BLACK;\n}\n\n/**\r\n * Checks if two pieces are of the same color.\r\n * @param {string} piece1 - The first piece.\r\n * @param {string} piece2 - The second piece.\r\n * @returns {boolean} - True if the pieces are of the same color, false otherwise.\r\n */\nexport function areSameColor(piece1, piece2) {\n  const color1 = piece1.split(GlobalVariables.PIECE_DELIMITER)[GlobalVariables.PIECE_COLOR_INDEX];\n  const color2 = piece2.split(GlobalVariables.PIECE_DELIMITER)[GlobalVariables.PIECE_COLOR_INDEX];\n  return color1 === color2;\n}\n\n/**\r\n * Checks if a move is equal to the current selected square.\r\n * @param {object} move - The move to check.\r\n * @returns {boolean} - True if the move is equal to the current selected square, false otherwise.\r\n */\nexport function checkIfAMoveIsEqualToTheCurrentSelectedSquare(move) {\n  return move.props.x === GlobalVariables.CurrentSquareSelection.x && move.props.y === GlobalVariables.CurrentSquareSelection.y;\n}\n\n/**\r\n * Compares if two squares are the same.\r\n * @param {object} square1 - The first square.\r\n * @param {object} square2 - The second square.\r\n * @returns {boolean} - True if the squares are the same, false otherwise.\r\n */\nexport function compareIfTwoSquaresAreTheSame(square1, square2) {\n  return square1.props.x === square2.props.x && square1.props.y === square2.props.y;\n}\n\n/**\r\n * Gets a target square by its location.\r\n * @param {number} x - The x coordinate of the target square.\r\n * @param {number} y - The y coordinate of the target square.\r\n * @returns {object} - The target square.\r\n */\nexport function getATargetSquareByLocation(x, y) {\n  return GlobalVariables.BoardPosition[x][y];\n}\n\n/**\r\n * Gets a target square by its piece.\r\n * @param {string} piece - The piece to search for.\r\n * @returns {object} - The target square.\r\n */\nexport function getATargetSquareByPiece(piece) {\n  for (let row of GlobalVariables.BoardPosition) {\n    for (let square of row) {\n      if (square.props.piece === piece) {\n        return square;\n      }\n    }\n  }\n  return null;\n}\n\n/**\r\n * Checks if castling is possible.\r\n * @param {string} castlingType - The type of castling (long or short).\r\n * @param {boolean} [withWhite=true] - True if checking for white's castling, false otherwise.\r\n * @returns {boolean} - True if castling is possible, false otherwise.\r\n */\nexport function isCastlingPossible(castlingType, withWhite = true) {\n  const row = withWhite ? GlobalVariables.CASTLE_ROW_WHITE : GlobalVariables.CASTLE_ROW_BLACK;\n  const pieces = withWhite ? GlobalVariables.FEN_PIECES_WHITE : GlobalVariables.FEN_PIECES_BLACK;\n  const [rookCol, kingCol, pathCols] = castlingType === GlobalVariables.CASTLING_TYPES.LONG ? [GlobalVariables.CASTLE_ROOK_INITIAL_COL_LONG, GlobalVariables.CASTLE_KING_INITIAL_COL, GlobalVariables.CASTLE_PATH_COLS_LONG] : [GlobalVariables.CASTLE_ROOK_INITIAL_COL_SHORT, GlobalVariables.CASTLE_KING_INITIAL_COL, GlobalVariables.CASTLE_PATH_COLS_SHORT];\n  return GlobalVariables.BoardPosition[row][rookCol] === pieces.ROOK && GlobalVariables.BoardPosition[row][kingCol] === pieces.KING && pathCols.every(col => GlobalVariables.BoardPosition[row][col] === GlobalVariables.EMPTY_SQUARE_PIECE);\n}\n\n/**\r\n * Checks if a pawn is on its starting square.\r\n * @param {object} pawn - The pawn to check.\r\n * @returns {boolean} - True if the pawn is on its starting square, false otherwise.\r\n */\nexport function isPawnOnStartingSquare(pawn) {\n  const isWhite = isColorWhite(getPieceColor(pawn));\n  return isWhite ? pawn.props.x === GlobalVariables.WHITE_PAWN_STARTING_SQUARE : pawn.props.x === GlobalVariables.BLACK_PAWN_STARTING_SQUARE;\n}\n\n/**\r\n * Checks if a pawn is on an en passant square.\r\n * @param {object} pawn - The pawn to check.\r\n * @returns {boolean} - True if the pawn is on an en passant square, false otherwise.\r\n */\nexport function isPawnOnEnPassantSquare(pawn) {\n  const isWhite = isColorWhite(getPieceColor(pawn));\n  return isWhite ? pawn.props.x === GlobalVariables.WHITE_EN_PASSANT_SQUARE : pawn.props.x === GlobalVariables.BLACK_EN_PASSANT_SQUARE;\n}\n\n/**\r\n * Checks if a square is available for a move.\r\n * @param {object} square - The square to check.\r\n * @returns {boolean} - True if the square is available, false otherwise.\r\n */\nexport function isSquareAvailable(square) {\n  return !square.props.piece;\n}\n\n/**\r\n * Updates a column on a row with a new value.\r\n * @param {Array} row - The row to update.\r\n * @param {number} colIndex - The column index.\r\n * @param {string} newValue - The new value.\r\n * @returns {Array} - The updated row.\r\n */\nexport function updateColumnOnARow(row, colIndex, newValue) {\n  row[colIndex] = newValue;\n  return row;\n}\n\n/**\r\n * Removes the current square's piece.\r\n * @param {object} currentSquare - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @param {Array} row - The row to update.\r\n * @returns {Array} - The updated row.\r\n */\nexport function handleSquareOnCurrentRow(currentSquare, targetSquare, row) {\n  return checkIfTwoSquaresAreOnTheSameRow(currentSquare, targetSquare) ? handleSquareAndTargetSquareOnTheSameRow(currentSquare, targetSquare, row) : updateColumnOnARow(row, currentSquare.props.y, GlobalVariables.EMPTY_SQUARE_PIECE);\n}\n\n/**\r\n * Updates the target square with the current square's piece.\r\n * @param {object} currentSquare - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @param {Array} row - The row to update.\r\n * @returns {Array} - The updated row.\r\n */\nexport function handleTargetSquareOnCurrentRow(currentSquare, targetSquare, row) {\n  return updateColumnOnARow(row, targetSquare.props.y, ConvertPieceToFENPiece(currentSquare.props.piece));\n}\n\n/**\r\n * Checks if we're making a move on the same row and performs castling if we want to castle.\r\n * @param {object} currentSquare - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @param {Array} row - The row to update.\r\n * @returns {Array} - The updated row.\r\n */\nexport function handleSquareAndTargetSquareOnTheSameRow(currentSquare, targetSquare, row) {\n  if (doesTheSquareHasThePiece(currentSquare, GlobalVariables.PIECES.KING) && isCastlingPossible(currentSquare, targetSquare)) {\n    return handleCastling(currentSquare, row);\n  }\n  return SidewaysCapture(row, Number(currentSquare.props.y), Number(targetSquare.props.y), currentSquare.props.piece);\n}\n\n/**\r\n * Performs castling by swapping the rook and the king.\r\n * @param {object} square - The square to update.\r\n * @param {Array} row - The row to update.\r\n * @returns {Array} - The updated row.\r\n */\nexport function handleCastling(square, row) {\n  const color = getPieceColor(square);\n  const isWhite = isColorWhite(color);\n  const kingPiece = isWhite ? GlobalVariables.FEN_PIECES_WHITE.KING : GlobalVariables.FEN_PIECES_BLACK.KING;\n  const rookPiece = isWhite ? GlobalVariables.FEN_PIECES_WHITE.ROOK : GlobalVariables.FEN_PIECES_BLACK.ROOK;\n  Object.values(GlobalVariables.CASTLING_TYPES).forEach(type => {\n    if (isCastlingPossible(type, isWhite)) {\n      const [emptySquares, kingFinalCol, rookFinalCol] = type === GlobalVariables.CASTLING_TYPES.LONG ? [GlobalVariables.EMPTY_SQUARES_AFTER_LONG_CASTLE, GlobalVariables.CASTLE_KING_FINAL_COL_LONG, GlobalVariables.CASTLE_ROOK_FINAL_COL_LONG] : [GlobalVariables.EMPTY_SQUARES_AFTER_SHORT_CASTLE, GlobalVariables.CASTLE_KING_FINAL_COL_SHORT, GlobalVariables.CASTLE_ROOK_FINAL_COL_SHORT];\n      emptySquares.forEach(col => row[col] = GlobalVariables.EMPTY_SQUARE_PIECE);\n      row[kingFinalCol] = kingPiece;\n      row[rookFinalCol] = rookPiece;\n    }\n  });\n  return row;\n}\n\n/**\r\n * Updates the board position after making a move.\r\n * @param {object} currentSquare - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @returns {Array} - The updated board position.\r\n */\nexport function updateBoardPosition(currentSquare, targetSquare) {\n  return GlobalVariables.BoardPosition.map((row, rowIndex) => {\n    if (isSquareOnRow(currentSquare, rowIndex)) {\n      row = handleSquareOnCurrentRow(currentSquare, targetSquare, row);\n    }\n    if (isSquareOnRow(targetSquare, rowIndex)) {\n      row = handleTargetSquareOnCurrentRow(currentSquare, targetSquare, row);\n    }\n    return row;\n  });\n}\n\n/**\r\n * Modifies the row to capture pieces sideways.\r\n * @param {Array} row - The row to update.\r\n * @param {number} colIndex - The column index of the current square.\r\n * @param {number} targetColIndex - The column index of the target square.\r\n * @param {string} value - The piece value.\r\n * @returns {Array} - The updated row.\r\n */\nexport function SidewaysCapture(row, colIndex, targetColIndex, value) {\n  return row.map((col, index) => {\n    if (index === colIndex) return GlobalVariables.EMPTY_SQUARE_PIECE;\n    if (index === targetColIndex) return ConvertPieceToFENPiece(value);\n    return col;\n  });\n}\n\n/**\r\n * Converts the piece from {color-piece} format to FEN format (a single letter).\r\n * @param {string} value - The piece value.\r\n * @returns {string} - The FEN notation of the piece.\r\n */\n_c8 = SidewaysCapture;\nexport function ConvertPieceToFENPiece(value) {\n  const [color, piece] = value.split(GlobalVariables.PIECE_DELIMITER);\n  const pieceMapping = {\n    [GlobalVariables.PIECES.PAWN]: GlobalVariables.FEN_PIECES_BLACK.PAWN,\n    [GlobalVariables.PIECES.KNIGHT]: GlobalVariables.FEN_PIECES_BLACK.KNIGHT,\n    [GlobalVariables.PIECES.BISHOP]: GlobalVariables.FEN_PIECES_BLACK.BISHOP,\n    [GlobalVariables.PIECES.ROOK]: GlobalVariables.FEN_PIECES_BLACK.ROOK,\n    [GlobalVariables.PIECES.QUEEN]: GlobalVariables.FEN_PIECES_BLACK.QUEEN,\n    [GlobalVariables.PIECES.KING]: GlobalVariables.FEN_PIECES_BLACK.KING\n  };\n  const fenPiece = pieceMapping[piece];\n  return isColorWhite(color) ? fenPiece.toUpperCase() : fenPiece;\n}\n\n/**\r\n * Generates the square components for the board.\r\n * @param {Array} boardSquares - The current board squares.\r\n * @param {Array} isPossibleMove - The possible moves.\r\n * @param {function} getPossibleMoves - The function to get possible moves.\r\n * @param {function} movePiece - The function to move a piece.\r\n * @param {function} resetPossibleMoves - The function to reset possible moves.\r\n * @returns {Array} - The square components.\r\n */\n_c9 = ConvertPieceToFENPiece;\nexport function generateSquareComponents(boardSquares, isPossibleMove, getPossibleMoves, movePiece, resetPossibleMoves) {\n  return boardSquares.flatMap((row, rowIndex) => row.map((square, colIndex) => /*#__PURE__*/_jsxDEV(Square, {\n    x: rowIndex,\n    y: colIndex,\n    piece: square.piece,\n    color: square.color,\n    getPossibleMoves: getPossibleMoves,\n    movePiece: movePiece,\n    isPossibleMove: isPossibleMove.includes(square),\n    resetPossibleMoves: resetPossibleMoves\n  }, `${rowIndex}-${colIndex}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 413,\n    columnNumber: 13\n  }, this)));\n}\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n$RefreshReg$(_c, \"IsUpperCase\");\n$RefreshReg$(_c2, \"IsLowerCase\");\n$RefreshReg$(_c3, \"IsDigit\");\n$RefreshReg$(_c4, \"ParseFEN\");\n$RefreshReg$(_c5, \"ConvertFENtoPiece\");\n$RefreshReg$(_c6, \"ConvertFENPieceToPiece\");\n$RefreshReg$(_c7, \"ConvertFenToString\");\n$RefreshReg$(_c8, \"SidewaysCapture\");\n$RefreshReg$(_c9, \"ConvertPieceToFENPiece\");","map":{"version":3,"names":["React","GlobalVariables","jsxDEV","_jsxDEV","IsUpperCase","value","charCodeAt","_c","IsLowerCase","_c2","IsDigit","_c3","ParseFEN","fen","fenParts","split","length","Error","fenBoard","fenTurn","fenCastling","fenEnPassant","fenHalfMoves","fenFullMoves","Number","_c4","ConvertFENtoPiece","letter","FEN_PIECE_MAP","FEN_PIECES_BLACK","PAWN","PIECES","KNIGHT","KING","QUEEN","ROOK","BISHOP","toLowerCase","_c5","ConvertFENPieceToPiece","COLORS","WHITE","BLACK","_c6","ConvertFenToString","reduce","result","char","EMPTY_SQUARE_PIECE","repeat","_c7","checkIfTwoSquaresAreOnTheSameRow","square1","square2","props","x","isSquareOnRow","square","rowNumber","getPiece","piece","PIECE_DELIMITER","PIECE_PIECE_INDEX","doesTheSquareHasThePiece","getPieceColor","PIECE_COLOR_INDEX","isColorWhite","color","isColorBlack","areSameColor","piece1","piece2","color1","color2","checkIfAMoveIsEqualToTheCurrentSelectedSquare","move","CurrentSquareSelection","y","compareIfTwoSquaresAreTheSame","getATargetSquareByLocation","BoardPosition","getATargetSquareByPiece","row","isCastlingPossible","castlingType","withWhite","CASTLE_ROW_WHITE","CASTLE_ROW_BLACK","pieces","FEN_PIECES_WHITE","rookCol","kingCol","pathCols","CASTLING_TYPES","LONG","CASTLE_ROOK_INITIAL_COL_LONG","CASTLE_KING_INITIAL_COL","CASTLE_PATH_COLS_LONG","CASTLE_ROOK_INITIAL_COL_SHORT","CASTLE_PATH_COLS_SHORT","every","col","isPawnOnStartingSquare","pawn","isWhite","WHITE_PAWN_STARTING_SQUARE","BLACK_PAWN_STARTING_SQUARE","isPawnOnEnPassantSquare","WHITE_EN_PASSANT_SQUARE","BLACK_EN_PASSANT_SQUARE","isSquareAvailable","updateColumnOnARow","colIndex","newValue","handleSquareOnCurrentRow","currentSquare","targetSquare","handleSquareAndTargetSquareOnTheSameRow","handleTargetSquareOnCurrentRow","ConvertPieceToFENPiece","handleCastling","SidewaysCapture","kingPiece","rookPiece","Object","values","forEach","type","emptySquares","kingFinalCol","rookFinalCol","EMPTY_SQUARES_AFTER_LONG_CASTLE","CASTLE_KING_FINAL_COL_LONG","CASTLE_ROOK_FINAL_COL_LONG","EMPTY_SQUARES_AFTER_SHORT_CASTLE","CASTLE_KING_FINAL_COL_SHORT","CASTLE_ROOK_FINAL_COL_SHORT","updateBoardPosition","map","rowIndex","targetColIndex","index","_c8","pieceMapping","fenPiece","toUpperCase","_c9","generateSquareComponents","boardSquares","isPossibleMove","getPossibleMoves","movePiece","resetPossibleMoves","flatMap","Square","includes","fileName","_jsxFileName","lineNumber","columnNumber","$RefreshReg$"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/Chess-React.js-/src/HelperMethods.js"],"sourcesContent":["import React from 'react';\r\nimport * as GlobalVariables from './globalVariables';\r\n\r\n/**\r\n * Checks if a character is Uppercase using the ASCII table.\r\n * @param {string} value - The character to check.\r\n * @returns {boolean} - True if the character is uppercase, false otherwise.\r\n */\r\nexport function IsUpperCase(value) {\r\n    return value.charCodeAt(0) >= 65 && value.charCodeAt(0) <= 90;\r\n}\r\n\r\n/**\r\n * Checks if a character is Lowercase using the ASCII table.\r\n * @param {string} value - The character to check.\r\n * @returns {boolean} - True if the character is lowercase, false otherwise.\r\n */\r\nexport function IsLowerCase(value) {\r\n    return value.charCodeAt(0) >= 97 && value.charCodeAt(0) <= 122;\r\n}\r\n\r\n/**\r\n * Checks if a character is a Digit using the ASCII table.\r\n * @param {string} value - The character to check.\r\n * @returns {boolean} - True if the character is a digit, false otherwise.\r\n */\r\nexport function IsDigit(value) {\r\n    return value.charCodeAt(0) >= 48 && value.charCodeAt(0) <= 57;\r\n}\r\n\r\n/**\r\n * Parses a FEN string and returns its components.\r\n * @param {string} fen - The FEN string to parse.\r\n * @returns {object} - An object containing the FEN components.\r\n */\r\nexport function ParseFEN(fen) {\r\n    const fenParts = fen.split(' ');\r\n    if (fenParts.length !== 6) {\r\n        throw new Error('Invalid FEN');\r\n    }\r\n    const [fenBoard, fenTurn, fenCastling, fenEnPassant, fenHalfMoves, fenFullMoves] = fenParts;\r\n    return {\r\n        fenBoard,\r\n        fenTurn,\r\n        fenCastling,\r\n        fenEnPassant,\r\n        fenHalfMoves: Number(fenHalfMoves),\r\n        fenFullMoves: Number(fenFullMoves)\r\n    };\r\n}\r\n\r\n/**\r\n * Converts FEN piece notation to an actual piece.\r\n * @param {string} letter - The FEN notation of the piece.\r\n * @returns {string} - The actual piece.\r\n */\r\nexport function ConvertFENtoPiece(letter) {\r\n    const FEN_PIECE_MAP = {\r\n        [GlobalVariables.FEN_PIECES_BLACK.PAWN]: GlobalVariables.PIECES.PAWN,\r\n        [GlobalVariables.FEN_PIECES_BLACK.KNIGHT]: GlobalVariables.PIECES.KNIGHT,\r\n        [GlobalVariables.FEN_PIECES_BLACK.KING]: GlobalVariables.PIECES.KING,\r\n        [GlobalVariables.FEN_PIECES_BLACK.QUEEN]: GlobalVariables.PIECES.QUEEN,\r\n        [GlobalVariables.FEN_PIECES_BLACK.ROOK]: GlobalVariables.PIECES.ROOK,\r\n        [GlobalVariables.FEN_PIECES_BLACK.BISHOP]: GlobalVariables.PIECES.BISHOP,\r\n    };\r\n\r\n    return FEN_PIECE_MAP[letter.toLowerCase()] || \"\";\r\n}\r\n\r\n/**\r\n * Converts the FEN piece notation to a piece that we can use in the square component.\r\n * @param {string} value - The FEN notation of the piece.\r\n * @returns {string} - The piece in {color-piece} format.\r\n */\r\nexport function ConvertFENPieceToPiece(value) {\r\n    if (IsUpperCase(value)) {\r\n        return `${GlobalVariables.COLORS.WHITE}-${ConvertFENtoPiece(value)}`;\r\n    }\r\n\r\n    if (IsLowerCase(value)) {\r\n        return `${GlobalVariables.COLORS.BLACK}-${ConvertFENtoPiece(value)}`;\r\n    }\r\n\r\n    return \"\";\r\n}\r\n\r\n/**\r\n * Converts a string in FEN format to a normal string.\r\n * @param {string} value - The FEN string.\r\n * @returns {string} - The normal string.\r\n */\r\nexport function ConvertFenToString(value) {\r\n    return value.split('').reduce((result, char) => {\r\n        if (IsDigit(char)) {\r\n            return result + GlobalVariables.EMPTY_SQUARE_PIECE.repeat(Number(char));\r\n        }\r\n        return result + char;\r\n    }, '');\r\n}\r\n\r\n/**\r\n * Checks if two squares are on the same row.\r\n * @param {object} square1 - The first square.\r\n * @param {object} square2 - The second square.\r\n * @returns {boolean} - True if the squares are on the same row, false otherwise.\r\n */\r\nexport function checkIfTwoSquaresAreOnTheSameRow(square1, square2) {\r\n    return square1.props.x === square2.props.x;\r\n}\r\n\r\n/**\r\n * Checks if the square is on the given row number.\r\n * @param {object} square - The square to check.\r\n * @param {number} rowNumber - The row number.\r\n * @returns {boolean} - True if the square is on the given row, false otherwise.\r\n */\r\nexport function isSquareOnRow(square, rowNumber) {\r\n    return square.props.x === rowNumber;\r\n}\r\n\r\n/**\r\n * Gets the piece from a square.\r\n * @param {object} square - The square to get the piece from.\r\n * @returns {string} - The piece.\r\n */\r\nexport function getPiece(square) {\r\n    return square.props.piece.split(GlobalVariables.PIECE_DELIMITER)[GlobalVariables.PIECE_PIECE_INDEX];\r\n}\r\n\r\n/**\r\n * Checks if a square has a specific piece.\r\n * @param {object} square - The square to check.\r\n * @param {string} piece - The piece to check for.\r\n * @returns {boolean} - True if the square has the piece, false otherwise.\r\n */\r\nexport function doesTheSquareHasThePiece(square, piece) {\r\n    return getPiece(square) === piece;\r\n}\r\n\r\n/**\r\n * Gets the piece color from a square.\r\n * @param {object} square - The square to get the piece color from.\r\n * @returns {string} - The piece color.\r\n */\r\nexport function getPieceColor(square) {\r\n    return square.props.piece.split(GlobalVariables.PIECE_DELIMITER)[GlobalVariables.PIECE_COLOR_INDEX];\r\n}\r\n\r\n/**\r\n * Checks if a color is white.\r\n * @param {string} color - The color to check.\r\n * @returns {boolean} - True if the color is white, false otherwise.\r\n */\r\nexport function isColorWhite(color) {\r\n    return color === GlobalVariables.COLORS.WHITE;\r\n}\r\n\r\n/**\r\n * Checks if a color is black.\r\n * @param {string} color - The color to check.\r\n * @returns {boolean} - True if the color is black, false otherwise.\r\n */\r\nexport function isColorBlack(color) {\r\n    return color === GlobalVariables.COLORS.BLACK;\r\n}\r\n\r\n/**\r\n * Checks if two pieces are of the same color.\r\n * @param {string} piece1 - The first piece.\r\n * @param {string} piece2 - The second piece.\r\n * @returns {boolean} - True if the pieces are of the same color, false otherwise.\r\n */\r\nexport function areSameColor(piece1, piece2) {\r\n    const color1 = piece1.split(GlobalVariables.PIECE_DELIMITER)[GlobalVariables.PIECE_COLOR_INDEX];\r\n    const color2 = piece2.split(GlobalVariables.PIECE_DELIMITER)[GlobalVariables.PIECE_COLOR_INDEX];\r\n    return color1 === color2;\r\n}\r\n\r\n/**\r\n * Checks if a move is equal to the current selected square.\r\n * @param {object} move - The move to check.\r\n * @returns {boolean} - True if the move is equal to the current selected square, false otherwise.\r\n */\r\nexport function checkIfAMoveIsEqualToTheCurrentSelectedSquare(move) {\r\n    return move.props.x === GlobalVariables.CurrentSquareSelection.x && move.props.y === GlobalVariables.CurrentSquareSelection.y;\r\n}\r\n\r\n/**\r\n * Compares if two squares are the same.\r\n * @param {object} square1 - The first square.\r\n * @param {object} square2 - The second square.\r\n * @returns {boolean} - True if the squares are the same, false otherwise.\r\n */\r\nexport function compareIfTwoSquaresAreTheSame(square1, square2) {\r\n    return square1.props.x === square2.props.x && square1.props.y === square2.props.y;\r\n}\r\n\r\n/**\r\n * Gets a target square by its location.\r\n * @param {number} x - The x coordinate of the target square.\r\n * @param {number} y - The y coordinate of the target square.\r\n * @returns {object} - The target square.\r\n */\r\nexport function getATargetSquareByLocation(x, y) {\r\n    return GlobalVariables.BoardPosition[x][y];\r\n}\r\n\r\n/**\r\n * Gets a target square by its piece.\r\n * @param {string} piece - The piece to search for.\r\n * @returns {object} - The target square.\r\n */\r\nexport function getATargetSquareByPiece(piece) {\r\n    for (let row of GlobalVariables.BoardPosition) {\r\n        for (let square of row) {\r\n            if (square.props.piece === piece) {\r\n                return square;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Checks if castling is possible.\r\n * @param {string} castlingType - The type of castling (long or short).\r\n * @param {boolean} [withWhite=true] - True if checking for white's castling, false otherwise.\r\n * @returns {boolean} - True if castling is possible, false otherwise.\r\n */\r\nexport function isCastlingPossible(castlingType, withWhite = true) {\r\n    const row = withWhite ? GlobalVariables.CASTLE_ROW_WHITE : GlobalVariables.CASTLE_ROW_BLACK;\r\n    const pieces = withWhite ? GlobalVariables.FEN_PIECES_WHITE : GlobalVariables.FEN_PIECES_BLACK;\r\n    const [rookCol, kingCol, pathCols] = castlingType === GlobalVariables.CASTLING_TYPES.LONG ?\r\n        [GlobalVariables.CASTLE_ROOK_INITIAL_COL_LONG, GlobalVariables.CASTLE_KING_INITIAL_COL, GlobalVariables.CASTLE_PATH_COLS_LONG] :\r\n        [GlobalVariables.CASTLE_ROOK_INITIAL_COL_SHORT, GlobalVariables.CASTLE_KING_INITIAL_COL, GlobalVariables.CASTLE_PATH_COLS_SHORT];\r\n\r\n    return GlobalVariables.BoardPosition[row][rookCol] === pieces.ROOK &&\r\n        GlobalVariables.BoardPosition[row][kingCol] === pieces.KING &&\r\n        pathCols.every(col => GlobalVariables.BoardPosition[row][col] === GlobalVariables.EMPTY_SQUARE_PIECE);\r\n}\r\n\r\n/**\r\n * Checks if a pawn is on its starting square.\r\n * @param {object} pawn - The pawn to check.\r\n * @returns {boolean} - True if the pawn is on its starting square, false otherwise.\r\n */\r\nexport function isPawnOnStartingSquare(pawn) {\r\n    const isWhite = isColorWhite(getPieceColor(pawn));\r\n    return isWhite ? pawn.props.x === GlobalVariables.WHITE_PAWN_STARTING_SQUARE : pawn.props.x === GlobalVariables.BLACK_PAWN_STARTING_SQUARE;\r\n}\r\n\r\n/**\r\n * Checks if a pawn is on an en passant square.\r\n * @param {object} pawn - The pawn to check.\r\n * @returns {boolean} - True if the pawn is on an en passant square, false otherwise.\r\n */\r\nexport function isPawnOnEnPassantSquare(pawn) {\r\n    const isWhite = isColorWhite(getPieceColor(pawn));\r\n    return isWhite ? pawn.props.x === GlobalVariables.WHITE_EN_PASSANT_SQUARE : pawn.props.x === GlobalVariables.BLACK_EN_PASSANT_SQUARE;\r\n}\r\n\r\n/**\r\n * Checks if a square is available for a move.\r\n * @param {object} square - The square to check.\r\n * @returns {boolean} - True if the square is available, false otherwise.\r\n */\r\nexport function isSquareAvailable(square) {\r\n    return !square.props.piece;\r\n}\r\n\r\n/**\r\n * Updates a column on a row with a new value.\r\n * @param {Array} row - The row to update.\r\n * @param {number} colIndex - The column index.\r\n * @param {string} newValue - The new value.\r\n * @returns {Array} - The updated row.\r\n */\r\nexport function updateColumnOnARow(row, colIndex, newValue) {\r\n    row[colIndex] = newValue;\r\n    return row;\r\n}\r\n\r\n/**\r\n * Removes the current square's piece.\r\n * @param {object} currentSquare - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @param {Array} row - The row to update.\r\n * @returns {Array} - The updated row.\r\n */\r\nexport function handleSquareOnCurrentRow(currentSquare, targetSquare, row) {\r\n    return checkIfTwoSquaresAreOnTheSameRow(currentSquare, targetSquare) ?\r\n        handleSquareAndTargetSquareOnTheSameRow(currentSquare, targetSquare, row) :\r\n        updateColumnOnARow(row, currentSquare.props.y, GlobalVariables.EMPTY_SQUARE_PIECE);\r\n}\r\n\r\n/**\r\n * Updates the target square with the current square's piece.\r\n * @param {object} currentSquare - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @param {Array} row - The row to update.\r\n * @returns {Array} - The updated row.\r\n */\r\nexport function handleTargetSquareOnCurrentRow(currentSquare, targetSquare, row) {\r\n    return updateColumnOnARow(row, targetSquare.props.y, ConvertPieceToFENPiece(currentSquare.props.piece));\r\n}\r\n\r\n/**\r\n * Checks if we're making a move on the same row and performs castling if we want to castle.\r\n * @param {object} currentSquare - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @param {Array} row - The row to update.\r\n * @returns {Array} - The updated row.\r\n */\r\nexport function handleSquareAndTargetSquareOnTheSameRow(currentSquare, targetSquare, row) {\r\n    if (doesTheSquareHasThePiece(currentSquare, GlobalVariables.PIECES.KING) && isCastlingPossible(currentSquare, targetSquare)) {\r\n        return handleCastling(currentSquare, row);\r\n    }\r\n    return SidewaysCapture(row, Number(currentSquare.props.y), Number(targetSquare.props.y), currentSquare.props.piece);\r\n}\r\n\r\n/**\r\n * Performs castling by swapping the rook and the king.\r\n * @param {object} square - The square to update.\r\n * @param {Array} row - The row to update.\r\n * @returns {Array} - The updated row.\r\n */\r\nexport function handleCastling(square, row) {\r\n    const color = getPieceColor(square);\r\n    const isWhite = isColorWhite(color);\r\n    const kingPiece = isWhite ? GlobalVariables.FEN_PIECES_WHITE.KING : GlobalVariables.FEN_PIECES_BLACK.KING;\r\n    const rookPiece = isWhite ? GlobalVariables.FEN_PIECES_WHITE.ROOK : GlobalVariables.FEN_PIECES_BLACK.ROOK;\r\n\r\n    Object.values(GlobalVariables.CASTLING_TYPES).forEach(type => {\r\n        if (isCastlingPossible(type, isWhite)) {\r\n            const [emptySquares, kingFinalCol, rookFinalCol] = type === GlobalVariables.CASTLING_TYPES.LONG ?\r\n                [GlobalVariables.EMPTY_SQUARES_AFTER_LONG_CASTLE, GlobalVariables.CASTLE_KING_FINAL_COL_LONG, GlobalVariables.CASTLE_ROOK_FINAL_COL_LONG] :\r\n                [GlobalVariables.EMPTY_SQUARES_AFTER_SHORT_CASTLE, GlobalVariables.CASTLE_KING_FINAL_COL_SHORT, GlobalVariables.CASTLE_ROOK_FINAL_COL_SHORT];\r\n            emptySquares.forEach(col => row[col] = GlobalVariables.EMPTY_SQUARE_PIECE);\r\n            row[kingFinalCol] = kingPiece;\r\n            row[rookFinalCol] = rookPiece;\r\n        }\r\n    });\r\n\r\n    return row;\r\n}\r\n\r\n/**\r\n * Updates the board position after making a move.\r\n * @param {object} currentSquare - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @returns {Array} - The updated board position.\r\n */\r\nexport function updateBoardPosition(currentSquare, targetSquare) {\r\n    return GlobalVariables.BoardPosition.map((row, rowIndex) => {\r\n        if (isSquareOnRow(currentSquare, rowIndex)) {\r\n            row = handleSquareOnCurrentRow(currentSquare, targetSquare, row);\r\n        }\r\n        if (isSquareOnRow(targetSquare, rowIndex)) {\r\n            row = handleTargetSquareOnCurrentRow(currentSquare, targetSquare, row);\r\n        }\r\n        return row;\r\n    });\r\n}\r\n\r\n/**\r\n * Modifies the row to capture pieces sideways.\r\n * @param {Array} row - The row to update.\r\n * @param {number} colIndex - The column index of the current square.\r\n * @param {number} targetColIndex - The column index of the target square.\r\n * @param {string} value - The piece value.\r\n * @returns {Array} - The updated row.\r\n */\r\nexport function SidewaysCapture(row, colIndex, targetColIndex, value) {\r\n    return row.map((col, index) => {\r\n        if (index === colIndex) return GlobalVariables.EMPTY_SQUARE_PIECE;\r\n        if (index === targetColIndex) return ConvertPieceToFENPiece(value);\r\n        return col;\r\n    });\r\n}\r\n\r\n/**\r\n * Converts the piece from {color-piece} format to FEN format (a single letter).\r\n * @param {string} value - The piece value.\r\n * @returns {string} - The FEN notation of the piece.\r\n */\r\nexport function ConvertPieceToFENPiece(value) {\r\n    const [color, piece] = value.split(GlobalVariables.PIECE_DELIMITER);\r\n    const pieceMapping = {\r\n        [GlobalVariables.PIECES.PAWN]: GlobalVariables.FEN_PIECES_BLACK.PAWN,\r\n        [GlobalVariables.PIECES.KNIGHT]: GlobalVariables.FEN_PIECES_BLACK.KNIGHT,\r\n        [GlobalVariables.PIECES.BISHOP]: GlobalVariables.FEN_PIECES_BLACK.BISHOP,\r\n        [GlobalVariables.PIECES.ROOK]: GlobalVariables.FEN_PIECES_BLACK.ROOK,\r\n        [GlobalVariables.PIECES.QUEEN]: GlobalVariables.FEN_PIECES_BLACK.QUEEN,\r\n        [GlobalVariables.PIECES.KING]: GlobalVariables.FEN_PIECES_BLACK.KING,\r\n    };\r\n\r\n    const fenPiece = pieceMapping[piece];\r\n    return isColorWhite(color) ? fenPiece.toUpperCase() : fenPiece;\r\n}\r\n\r\n/**\r\n * Generates the square components for the board.\r\n * @param {Array} boardSquares - The current board squares.\r\n * @param {Array} isPossibleMove - The possible moves.\r\n * @param {function} getPossibleMoves - The function to get possible moves.\r\n * @param {function} movePiece - The function to move a piece.\r\n * @param {function} resetPossibleMoves - The function to reset possible moves.\r\n * @returns {Array} - The square components.\r\n */\r\nexport function generateSquareComponents(boardSquares, isPossibleMove, getPossibleMoves, movePiece, resetPossibleMoves) {\r\n    return boardSquares.flatMap((row, rowIndex) =>\r\n        row.map((square, colIndex) => (\r\n            <Square\r\n                key={`${rowIndex}-${colIndex}`}\r\n                x={rowIndex}\r\n                y={colIndex}\r\n                piece={square.piece}\r\n                color={square.color}\r\n                getPossibleMoves={getPossibleMoves}\r\n                movePiece={movePiece}\r\n                isPossibleMove={isPossibleMove.includes(square)}\r\n                resetPossibleMoves={resetPossibleMoves}\r\n            />\r\n        ))\r\n    );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}