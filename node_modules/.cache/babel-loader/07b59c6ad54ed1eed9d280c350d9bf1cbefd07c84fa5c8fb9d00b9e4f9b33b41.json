{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vladi Gotsin\\\\Desktop\\\\react\\\\Chess-React.js-\\\\src\\\\MoveHandler.js\";\nimport * as GlobalVariables from './globalVariables';\nimport * as HelperMethods from './HelperMethods';\nimport Square from \"./Square.js\";\n\n/**\r\n * Gets all possible moves for a piece.\r\n * @param {object} square - The current square.\r\n * @param {Array} boardSquares - The current board squares.\r\n * @returns {Array} - The possible moves array.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function getAllPossibleMoves(square, boardSquares) {\n  const pieceColor = HelperMethods.getPieceColor(square);\n  const possibleMoves = [];\n  if (HelperMethods.isPawn(square)) {\n    possibleMoves.push(getPawnMoves(square, boardSquares, pieceColor));\n  }\n  if (HelperMethods.isRook(square)) {\n    possibleMoves.push(getRookMoves(square, boardSquares, pieceColor));\n  }\n  if (HelperMethods.isKnight(square)) {\n    possibleMoves.push(getKingMoves(square, boardSquares, pieceColor));\n  }\n  if (HelperMethods.isBishop(square)) {\n    possibleMoves.push(getBishopMoves(square, boardSquares, pieceColor));\n  }\n  if (HelperMethods.isQueen(square)) {\n    possibleMoves.push(getQueenMoves(square, boardSquares, pieceColor));\n  }\n  if (HelperMethods.isKing(square)) {\n    possibleMoves.push(getKingMoves(square, boardSquares, pieceColor));\n  }\n  return possibleMoves;\n}\n\n/**\r\n * Gets possible moves for a piece based on specified offsets.\r\n * @param {object} square - The current square.\r\n * @param {Array} boardSquares - The current board squares.\r\n * @param {Array} offsets - An array of [dx, dy] offsets to check for possible moves.\r\n * @returns {Array} - The possible moves array.\r\n */\nfunction getMovesForOffsets(square, boardSquares, offsets) {\n  const moves = [];\n  offsets.forEach(([dx, dy]) => {\n    const targetX = square.props.x + dx;\n    const targetY = square.props.y + dy;\n    const target = HelperMethods.getATargetSquareByLocation(targetX, targetY, boardSquares);\n    if (target) {\n      if (HelperMethods.isSquareAvailable(target)) {\n        moves.push(target);\n      } else if (!HelperMethods.areSameColor(square, target)) {\n        moves.push(target);\n      }\n    }\n  });\n  return moves;\n}\n\n/**\r\n * Gets all possible moves in a given direction for a piece.\r\n * @param {object} square - The current square.\r\n * @param {Array} boardSquares - The current board squares.\r\n * @param {Array} direction - The direction to move in [xIncrement, yIncrement].\r\n * @returns {Array} - The possible moves array in the given direction.\r\n */\nfunction getMovesInDirection(square, boardSquares, [xIncrement, yIncrement]) {\n  const moves = [];\n  let x = square.props.x + xIncrement;\n  let y = square.props.y + yIncrement;\n  while (x >= 0 && x < GlobalVariables.DIM && y >= 0 && y < GlobalVariables.DIM) {\n    const targetSquare = HelperMethods.getATargetSquareByLocation(x, y, boardSquares);\n    if (HelperMethods.isSquareAvailable(targetSquare)) {\n      moves.push(targetSquare);\n    } else {\n      if (!HelperMethods.areSameColor(square, targetSquare)) {\n        moves.push(targetSquare);\n      }\n      break;\n    }\n    x += xIncrement;\n    y += yIncrement;\n  }\n  return moves;\n}\n\n/**\r\n * Gets possible moves for a pawn.\r\n * @param {object} square - The current square.\r\n * @param {Array} boardSquares - The current board squares.\r\n * @param {string} pieceColor - The color of the piece.\r\n * @returns {Array} - The possible moves array.\r\n */\nfunction getPawnMoves(square, boardSquares) {\n  const moves = [];\n  const pieceColor = HelperMethods.getPieceColor(square);\n  const isWhite = HelperMethods.isColorWhite(pieceColor);\n  const direction = isWhite ? -1 : 1;\n\n  // Forward move offsets\n  const forwardOne = direction;\n  const forwardTwo = direction * 2;\n\n  // Helper function to get target square\n  const getTargetSquare = (x, y) => HelperMethods.getATargetSquareByLocation(x, y, boardSquares);\n\n  // Calculate potential forward moves\n  const addForwardMoves = () => {\n    const target1X = square.props.x + forwardOne;\n    const target2X = square.props.x + forwardTwo;\n    const target1 = getTargetSquare(target1X, square.props.y);\n    const target2 = getTargetSquare(target2X, square.props.y);\n    if (HelperMethods.isSquareAvailable(target1)) {\n      moves.push(target1);\n      if (HelperMethods.isSquareAvailable(target2) && HelperMethods.isPawnOnStartingSquare(square)) {\n        moves.push(target2);\n      }\n    }\n  };\n\n  // Calculate potential capture moves\n  const addCaptureMoves = () => {\n    const captureOffsets = [[forwardOne, 1], [forwardOne, -1]];\n    captureOffsets.forEach(([xOffset, yOffset]) => {\n      const targetX = square.props.x + xOffset;\n      const targetY = square.props.y + yOffset;\n      const targetSquare = getTargetSquare(targetX, targetY);\n      if (targetSquare && !HelperMethods.isSquareAvailable(targetSquare) && !HelperMethods.areSameColor(targetSquare, square)) {\n        moves.push(targetSquare);\n      }\n    });\n  };\n\n  // Check for en passant capture\n  const addEnPassantMove = () => {\n    if (!GlobalVariables.EnPassant.isPossible) return;\n    const enPassantSquare = getTargetSquare(GlobalVariables.EnPassant.x, GlobalVariables.EnPassant.y);\n    const validEnPassantOffsets = [[square.props.x + forwardOne, square.props.y + 1], [square.props.x + forwardOne, square.props.y - 1]];\n    if (enPassantSquare && validEnPassantOffsets.some(([x, y]) => HelperMethods.compareIfTwoSquaresAreTheSame(enPassantSquare, getTargetSquare(x, y)))) {\n      moves.push(enPassantSquare);\n    }\n  };\n\n  // Add all possible moves\n  addForwardMoves();\n  addCaptureMoves();\n  addEnPassantMove();\n  return {\n    piece: square,\n    moves: moves\n  };\n}\n\n/**\r\n * Gets possible moves for a rook.\r\n * @param {object} square - The current square.\r\n * @param {Array} boardSquares - The current board squares.\r\n * @param {string} _pieceColor - The color of the piece.\r\n * @returns {Array} - The possible moves array.\r\n */\nfunction getRookMoves(square, boardSquares) {\n  const directions = [[1, 0],\n  // Right\n  [-1, 0],\n  // Left\n  [0, 1],\n  // Up\n  [0, -1] // Down\n  ];\n  const moves = directions.flatMap(direction => getMovesInDirection(square, boardSquares, direction));\n  return {\n    piece: square,\n    moves\n  };\n}\n\n/**\r\n * Gets possible moves for a knight.\r\n * @param {object} square - The current square.\r\n * @param {Array} boardSquares - The current board squares.\r\n * @param {string} _pieceColor - The color of the piece.\r\n * @returns {Array} - The possible moves array.\r\n */\nfunction getKnightMoves(square, boardSquares) {\n  const knightMoves = [[2, 1], [1, 2], [-1, 2], [-2, 1], [-2, -1], [-1, -2], [1, -2], [2, -1]];\n  const moves = getMovesForOffsets(square, boardSquares, knightMoves);\n  return {\n    piece: square,\n    moves\n  };\n}\n\n/**\r\n * Gets possible moves for a bishop.\r\n * @param {object} square - The current square.\r\n * @param {Array} boardSquares - The current board squares.\r\n * @param {string} _pieceColor - The color of the piece.\r\n * @returns {Array} - The possible moves array.\r\n */\nfunction getBishopMoves(square, boardSquares) {\n  const directions = [[-1, -1],\n  // Top-left diagonal\n  [-1, 1],\n  // Bottom-left diagonal\n  [1, 1],\n  // Bottom-right diagonal\n  [1, -1] // Top-right diagonal\n  ];\n  const moves = directions.flatMap(direction => getMovesInDirection(square, boardSquares, direction));\n  return {\n    piece: square,\n    moves\n  };\n}\n\n/**\r\n * Gets possible moves for a queen.\r\n * @param {object} square - The current square.\r\n * @param {Array} boardSquares - The current board squares.\r\n * @param {string} _pieceColor - The color of the piece.\r\n * @returns {Array} - The possible moves array.\r\n */\nfunction getQueenMoves(square, boardSquares) {\n  const directions = [[1, 0], [-1, 0], [0, 1], [0, -1],\n  // Rook directions\n  [1, 1], [1, -1], [-1, 1], [-1, -1] // Bishop directions\n  ];\n  const moves = directions.flatMap(direction => getMovesInDirection(square, boardSquares, direction));\n  return {\n    piece: square,\n    moves\n  };\n}\n\n/**\r\n * Gets possible moves for a king.\r\n * @param {object} square - The current square.\r\n * @param {Array} boardSquares - The current board squares.\r\n * @param {string} _pieceColor - The color of the piece.\r\n * @returns {Array} - The possible moves array.\r\n */\nfunction getKingMoves(square, boardSquares) {\n  const directions = [[1, 0], [-1, 0], [0, 1], [0, -1], [1, 1], [1, -1], [-1, 1], [-1, -1]];\n  const moves = getMovesForOffsets(square, boardSquares, directions);\n  const color = HelperMethods.getPieceColor(square);\n\n  // Castling logic\n  const castlingMoves = getCastlingMoves(square, color, boardSquares);\n  moves.push(...castlingMoves);\n  return {\n    piece: square,\n    moves\n  };\n}\n\n/**\r\n * Gets castling moves for a king.\r\n * @param {object} square - The current square.\r\n * @param {string} color - The color of the piece.\r\n * @param {Array} boardSquares - The current board squares.\r\n * @returns {Array} - The possible castling moves array.\r\n */\nfunction getCastlingMoves(square, color, boardSquares) {\n  const moves = [];\n  const longCastleSquare = HelperMethods.getATargetSquareByLocation(square.props.x, square.props.y - 2, boardSquares);\n  const shortCastleSquare = HelperMethods.getATargetSquareByLocation(square.props.x, square.props.y + 2, boardSquares);\n  const isWhite = HelperMethods.isColorWhite(color);\n\n  // Check and add long castling move\n  if (HelperMethods.isCastlingPossible(GlobalVariables.CASTLING_TYPES.LONG, isWhite)) {\n    moves.push(longCastleSquare);\n  }\n\n  // Check and add short castling move\n  if (HelperMethods.isCastlingPossible(GlobalVariables.CASTLING_TYPES.SHORT, isWhite)) {\n    moves.push(shortCastleSquare);\n  }\n  return moves;\n}\n\n/**\r\n * Filters out moves that do not deal with a check.\r\n * @param {Array} possibleMoves - The array of possible moves.\r\n * @returns {Array} - The filtered array of possible moves.\r\n */\nexport function filterMovesIfInCheck(possibleMoves, boardSquares) {\n  const blackKing = HelperMethods.getATargetSquareByPiece(GlobalVariables.KINGS.BLACK_KING, boardSquares);\n  const whiteKing = HelperMethods.getATargetSquareByPiece(GlobalVariables.KINGS.WHITE_KING, boardSquares);\n  const king = GlobalVariables.IsWhiteToMove ? whiteKing : blackKing;\n  const isKingInCheck = (king, move, piece) => {\n    const pseudoMove = /*#__PURE__*/_jsxDEV(Square, {\n      x: king.props.x,\n      y: king.props.y,\n      piece: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 28\n    }, this);\n    if (piece === GlobalVariables.KINGS.BLACK_KING) {\n      return HelperMethods.isBlackInCheck(piece, move, pseudoMove, boardSquares);\n    } else if (piece === GlobalVariables.KINGS.WHITE_KING) {\n      return HelperMethods.isWhiteInCheck(piece, move, pseudoMove, boardSquares);\n    } else {\n      return GlobalVariables.IsWhiteToMove && HelperMethods.isWhiteInCheck(whiteKing, move, pseudoMove, boardSquares) || !GlobalVariables.IsWhiteToMove && HelperMethods.isBlackInCheck(blackKing, move, pseudoMove, boardSquares);\n    }\n  };\n  const filterMoves = (moves, piece) => {\n    return moves.filter(move => {\n      const moveSquare = /*#__PURE__*/_jsxDEV(Square, {\n        x: move.props.x,\n        y: move.props.y,\n        piece: piece\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 32\n      }, this);\n      return !isKingInCheck(king, moveSquare, null, boardSquares);\n    });\n  };\n  return possibleMoves.map(moveSet => {\n    const filteredMoves = filterMoves(moveSet.moves, moveSet.piece.props.piece);\n    return {\n      ...moveSet,\n      moves: filteredMoves\n    };\n  });\n}\n\n/**\r\n * Filters out moves that allow illegal castling (castling through check).\r\n * @param {Array} possibleMoves - The array of possible moves.\r\n * @returns {Array} - The filtered array of possible moves.\r\n */\nexport function filterMovesThatAllowIllegalCastling(possibleMoves, boardSquares) {\n  const blackKing = HelperMethods.getATargetSquareByPiece(GlobalVariables.KINGS.BLACK_KING, boardSquares);\n  const whiteKing = HelperMethods.getATargetSquareByPiece(GlobalVariables.KINGS.WHITE_KING, boardSquares);\n  const removeCastlingMove = (moves, x, y) => {\n    const index = moves.findIndex(m => m.props.x === x && m.props.y === y);\n    if (index !== -1) {\n      moves.splice(index, 1);\n    }\n  };\n  const isIllegalCastling = (king, castle1, castle2, across1, across2) => {\n    if (king && (castle1 || castle2)) {\n      if (castle1 && !across1) {\n        removeCastlingMove(king.moves, castle1.props.x, castle1.props.y);\n      }\n      if (castle2 && !across2) {\n        removeCastlingMove(king.moves, castle2.props.x, castle2.props.y);\n      }\n    }\n  };\n  return possibleMoves.map(moveSet => {\n    const piece = moveSet.piece;\n    const moves = moveSet.moves;\n    const whiteCastle1 = moves.find(m => m.props.x === 7 && m.props.y === 6);\n    const whiteCastle2 = moves.find(m => m.props.x === 7 && m.props.y === 2);\n    const blackCastle1 = moves.find(m => m.props.x === 0 && m.props.y === 6);\n    const blackCastle2 = moves.find(m => m.props.x === 0 && m.props.y === 2);\n    if (piece === blackKing || piece === whiteKing) {\n      isIllegalCastling(moveSet, whiteCastle1, whiteCastle2, moves.find(m => m.props.x === 7 && m.props.y === 5), moves.find(m => m.props.x === 7 && m.props.y === 3));\n      isIllegalCastling(moveSet, blackCastle1, blackCastle2, moves.find(m => m.props.x === 0 && m.props.y === 5), moves.find(m => m.props.x === 0 && m.props.y === 3));\n    }\n    if (piece === blackKing && HelperMethods.isBlackInCheck(blackKing, piece, null, boardSquares)) {\n      removeCastlingMove(moves, 0, 6);\n      removeCastlingMove(moves, 0, 2);\n    }\n    if (piece === whiteKing && HelperMethods.isWhiteInCheck(whiteKing, piece, null, boardSquares)) {\n      removeCastlingMove(moves, 7, 6);\n      removeCastlingMove(moves, 7, 2);\n    }\n    return moveSet;\n  });\n}\n\n/**\r\n * Removes empty or undefined moves from the possible moves array.\r\n * @param {Array} possibleMoves - The array of possible moves.\r\n * @returns {Array} - The cleaned array of possible moves.\r\n */\nexport function removeEmptyMoves(possibleMoves) {\n  return possibleMoves.filter(moveSet => moveSet && moveSet.moves && moveSet.moves.length > 0).map(moveSet => ({\n    ...moveSet,\n    moves: moveSet.moves.filter(move => move)\n  }));\n}","map":{"version":3,"names":["GlobalVariables","HelperMethods","Square","jsxDEV","_jsxDEV","getAllPossibleMoves","square","boardSquares","pieceColor","getPieceColor","possibleMoves","isPawn","push","getPawnMoves","isRook","getRookMoves","isKnight","getKingMoves","isBishop","getBishopMoves","isQueen","getQueenMoves","isKing","getMovesForOffsets","offsets","moves","forEach","dx","dy","targetX","props","x","targetY","y","target","getATargetSquareByLocation","isSquareAvailable","areSameColor","getMovesInDirection","xIncrement","yIncrement","DIM","targetSquare","isWhite","isColorWhite","direction","forwardOne","forwardTwo","getTargetSquare","addForwardMoves","target1X","target2X","target1","target2","isPawnOnStartingSquare","addCaptureMoves","captureOffsets","xOffset","yOffset","addEnPassantMove","EnPassant","isPossible","enPassantSquare","validEnPassantOffsets","some","compareIfTwoSquaresAreTheSame","piece","directions","flatMap","getKnightMoves","knightMoves","color","castlingMoves","getCastlingMoves","longCastleSquare","shortCastleSquare","isCastlingPossible","CASTLING_TYPES","LONG","SHORT","filterMovesIfInCheck","blackKing","getATargetSquareByPiece","KINGS","BLACK_KING","whiteKing","WHITE_KING","king","IsWhiteToMove","isKingInCheck","move","pseudoMove","fileName","_jsxFileName","lineNumber","columnNumber","isBlackInCheck","isWhiteInCheck","filterMoves","filter","moveSquare","map","moveSet","filteredMoves","filterMovesThatAllowIllegalCastling","removeCastlingMove","index","findIndex","m","splice","isIllegalCastling","castle1","castle2","across1","across2","whiteCastle1","find","whiteCastle2","blackCastle1","blackCastle2","removeEmptyMoves","length"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/Chess-React.js-/src/MoveHandler.js"],"sourcesContent":["import * as GlobalVariables from './globalVariables';\r\nimport * as HelperMethods from './HelperMethods';\r\nimport Square from \"./Square.js\"\r\n\r\n/**\r\n * Gets all possible moves for a piece.\r\n * @param {object} square - The current square.\r\n * @param {Array} boardSquares - The current board squares.\r\n * @returns {Array} - The possible moves array.\r\n */\r\nexport function getAllPossibleMoves(square, boardSquares) {\r\n    const pieceColor = HelperMethods.getPieceColor(square);\r\n    const possibleMoves = []\r\n\r\n    if (HelperMethods.isPawn(square)) {\r\n        possibleMoves.push(getPawnMoves(square, boardSquares, pieceColor))\r\n    }\r\n\r\n    if (HelperMethods.isRook(square)) {\r\n        possibleMoves.push(getRookMoves(square, boardSquares, pieceColor))\r\n    }\r\n\r\n    if (HelperMethods.isKnight(square)) {\r\n        possibleMoves.push(getKingMoves(square, boardSquares, pieceColor))\r\n    }\r\n\r\n    if (HelperMethods.isBishop(square)) {\r\n        possibleMoves.push(getBishopMoves(square, boardSquares, pieceColor))\r\n    }\r\n\r\n    if (HelperMethods.isQueen(square)) {\r\n        possibleMoves.push(getQueenMoves(square, boardSquares, pieceColor))\r\n    }\r\n\r\n    if (HelperMethods.isKing(square)) {\r\n        possibleMoves.push(getKingMoves(square, boardSquares, pieceColor))\r\n    }\r\n\r\n    return possibleMoves\r\n}\r\n\r\n/**\r\n * Gets possible moves for a piece based on specified offsets.\r\n * @param {object} square - The current square.\r\n * @param {Array} boardSquares - The current board squares.\r\n * @param {Array} offsets - An array of [dx, dy] offsets to check for possible moves.\r\n * @returns {Array} - The possible moves array.\r\n */\r\nfunction getMovesForOffsets(square, boardSquares, offsets) {\r\n    const moves = [];\r\n    offsets.forEach(([dx, dy]) => {\r\n        const targetX = square.props.x + dx;\r\n        const targetY = square.props.y + dy;\r\n        const target = HelperMethods.getATargetSquareByLocation(targetX, targetY, boardSquares);\r\n\r\n        if (target) {\r\n            if (HelperMethods.isSquareAvailable(target)) {\r\n                moves.push(target);\r\n            } else if (!HelperMethods.areSameColor(square, target)) {\r\n                moves.push(target);\r\n            }\r\n        }\r\n    });\r\n    return moves;\r\n}\r\n\r\n/**\r\n * Gets all possible moves in a given direction for a piece.\r\n * @param {object} square - The current square.\r\n * @param {Array} boardSquares - The current board squares.\r\n * @param {Array} direction - The direction to move in [xIncrement, yIncrement].\r\n * @returns {Array} - The possible moves array in the given direction.\r\n */\r\nfunction getMovesInDirection(square, boardSquares, [xIncrement, yIncrement]) {\r\n    const moves = [];\r\n    let x = square.props.x + xIncrement;\r\n    let y = square.props.y + yIncrement;\r\n    while (x >= 0 && x < GlobalVariables.DIM && y >= 0 && y < GlobalVariables.DIM) {\r\n        const targetSquare = HelperMethods.getATargetSquareByLocation(x, y, boardSquares);\r\n        if (HelperMethods.isSquareAvailable(targetSquare)) {\r\n            moves.push(targetSquare);\r\n        } else {\r\n            if (!HelperMethods.areSameColor(square, targetSquare)) {\r\n                moves.push(targetSquare);\r\n            }\r\n            break;\r\n        }\r\n        x += xIncrement;\r\n        y += yIncrement;\r\n    }\r\n    return moves;\r\n}\r\n\r\n/**\r\n * Gets possible moves for a pawn.\r\n * @param {object} square - The current square.\r\n * @param {Array} boardSquares - The current board squares.\r\n * @param {string} pieceColor - The color of the piece.\r\n * @returns {Array} - The possible moves array.\r\n */\r\nfunction getPawnMoves(square, boardSquares) {\r\n    const moves = []\r\n    const pieceColor = HelperMethods.getPieceColor(square)\r\n    const isWhite = HelperMethods.isColorWhite(pieceColor);\r\n    const direction = isWhite ? -1 : 1;\r\n\r\n    // Forward move offsets\r\n    const forwardOne = direction;\r\n    const forwardTwo = direction * 2;\r\n\r\n    // Helper function to get target square\r\n    const getTargetSquare = (x, y) => HelperMethods.getATargetSquareByLocation(x, y, boardSquares);\r\n\r\n    // Calculate potential forward moves\r\n    const addForwardMoves = () => {\r\n        const target1X = square.props.x + forwardOne;\r\n        const target2X = square.props.x + forwardTwo;\r\n\r\n        const target1 = getTargetSquare(target1X, square.props.y);\r\n        const target2 = getTargetSquare(target2X, square.props.y);\r\n\r\n        if (HelperMethods.isSquareAvailable(target1)) {\r\n            moves.push(target1);\r\n            if (HelperMethods.isSquareAvailable(target2) && HelperMethods.isPawnOnStartingSquare(square)) {\r\n                moves.push(target2);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Calculate potential capture moves\r\n    const addCaptureMoves = () => {\r\n        const captureOffsets = [\r\n            [forwardOne, 1],\r\n            [forwardOne, -1]\r\n        ];\r\n\r\n        captureOffsets.forEach(([xOffset, yOffset]) => {\r\n            const targetX = square.props.x + xOffset;\r\n            const targetY = square.props.y + yOffset;\r\n            const targetSquare = getTargetSquare(targetX, targetY);\r\n\r\n            if (targetSquare && !HelperMethods.isSquareAvailable(targetSquare) && !HelperMethods.areSameColor(targetSquare, square)) {\r\n                moves.push(targetSquare);\r\n            }\r\n        });\r\n    };\r\n\r\n    // Check for en passant capture\r\n    const addEnPassantMove = () => {\r\n        if (!GlobalVariables.EnPassant.isPossible) return;\r\n        const enPassantSquare = getTargetSquare(GlobalVariables.EnPassant.x, GlobalVariables.EnPassant.y);\r\n        const validEnPassantOffsets = [\r\n            [square.props.x + forwardOne, square.props.y + 1],\r\n            [square.props.x + forwardOne, square.props.y - 1]\r\n        ];\r\n\r\n        if (enPassantSquare && validEnPassantOffsets.some(([x, y]) => HelperMethods.compareIfTwoSquaresAreTheSame(enPassantSquare, getTargetSquare(x, y)))) {\r\n            moves.push(enPassantSquare);\r\n        }\r\n    };\r\n\r\n    // Add all possible moves\r\n    addForwardMoves();\r\n    addCaptureMoves();\r\n    addEnPassantMove();\r\n\r\n    return { piece: square, moves: moves }\r\n}\r\n\r\n/**\r\n * Gets possible moves for a rook.\r\n * @param {object} square - The current square.\r\n * @param {Array} boardSquares - The current board squares.\r\n * @param {string} _pieceColor - The color of the piece.\r\n * @returns {Array} - The possible moves array.\r\n */\r\nfunction getRookMoves(square, boardSquares) {\r\n    const directions = [\r\n        [1, 0],  // Right\r\n        [-1, 0], // Left\r\n        [0, 1],  // Up\r\n        [0, -1]  // Down\r\n    ];\r\n\r\n    const moves = directions.flatMap(direction => getMovesInDirection(square, boardSquares, direction));\r\n\r\n    return { piece: square, moves };\r\n}\r\n\r\n/**\r\n * Gets possible moves for a knight.\r\n * @param {object} square - The current square.\r\n * @param {Array} boardSquares - The current board squares.\r\n * @param {string} _pieceColor - The color of the piece.\r\n * @returns {Array} - The possible moves array.\r\n */\r\nfunction getKnightMoves(square, boardSquares) {\r\n    const knightMoves = [\r\n        [2, 1], [1, 2], [-1, 2], [-2, 1],\r\n        [-2, -1], [-1, -2], [1, -2], [2, -1]\r\n    ];\r\n\r\n    const moves = getMovesForOffsets(square, boardSquares, knightMoves);\r\n    return { piece: square, moves };\r\n}\r\n\r\n/**\r\n * Gets possible moves for a bishop.\r\n * @param {object} square - The current square.\r\n * @param {Array} boardSquares - The current board squares.\r\n * @param {string} _pieceColor - The color of the piece.\r\n * @returns {Array} - The possible moves array.\r\n */\r\nfunction getBishopMoves(square, boardSquares) {\r\n    const directions = [\r\n        [-1, -1], // Top-left diagonal\r\n        [-1, 1],  // Bottom-left diagonal\r\n        [1, 1],   // Bottom-right diagonal\r\n        [1, -1]   // Top-right diagonal\r\n    ];\r\n\r\n    const moves = directions.flatMap(direction => getMovesInDirection(square, boardSquares, direction));\r\n\r\n    return { piece: square, moves };\r\n}\r\n\r\n/**\r\n * Gets possible moves for a queen.\r\n * @param {object} square - The current square.\r\n * @param {Array} boardSquares - The current board squares.\r\n * @param {string} _pieceColor - The color of the piece.\r\n * @returns {Array} - The possible moves array.\r\n */\r\nfunction getQueenMoves(square, boardSquares) {\r\n    const directions = [\r\n        [1, 0], [-1, 0], [0, 1], [0, -1], // Rook directions\r\n        [1, 1], [1, -1], [-1, 1], [-1, -1] // Bishop directions\r\n    ];\r\n\r\n    const moves = directions.flatMap(direction => getMovesInDirection(square, boardSquares, direction));\r\n\r\n    return { piece: square, moves };\r\n}\r\n\r\n/**\r\n * Gets possible moves for a king.\r\n * @param {object} square - The current square.\r\n * @param {Array} boardSquares - The current board squares.\r\n * @param {string} _pieceColor - The color of the piece.\r\n * @returns {Array} - The possible moves array.\r\n */\r\nfunction getKingMoves(square, boardSquares) {\r\n    const directions = [\r\n        [1, 0], [-1, 0], [0, 1], [0, -1],\r\n        [1, 1], [1, -1], [-1, 1], [-1, -1]\r\n    ];\r\n\r\n    const moves = getMovesForOffsets(square, boardSquares, directions);\r\n\r\n    const color = HelperMethods.getPieceColor(square);\r\n\r\n    // Castling logic\r\n    const castlingMoves = getCastlingMoves(square, color, boardSquares);\r\n    moves.push(...castlingMoves);\r\n\r\n    return { piece: square, moves };\r\n}\r\n\r\n/**\r\n * Gets castling moves for a king.\r\n * @param {object} square - The current square.\r\n * @param {string} color - The color of the piece.\r\n * @param {Array} boardSquares - The current board squares.\r\n * @returns {Array} - The possible castling moves array.\r\n */\r\nfunction getCastlingMoves(square, color, boardSquares) {\r\n    const moves = [];\r\n\r\n    const longCastleSquare = HelperMethods.getATargetSquareByLocation(square.props.x, square.props.y - 2, boardSquares);\r\n    const shortCastleSquare = HelperMethods.getATargetSquareByLocation(square.props.x, square.props.y + 2, boardSquares);\r\n\r\n    const isWhite = HelperMethods.isColorWhite(color);\r\n\r\n    // Check and add long castling move\r\n    if (HelperMethods.isCastlingPossible(GlobalVariables.CASTLING_TYPES.LONG, isWhite)) {\r\n        moves.push(longCastleSquare);\r\n    }\r\n\r\n    // Check and add short castling move\r\n    if (HelperMethods.isCastlingPossible(GlobalVariables.CASTLING_TYPES.SHORT, isWhite)) {\r\n        moves.push(shortCastleSquare);\r\n    }\r\n\r\n    return moves;\r\n}\r\n\r\n/**\r\n * Filters out moves that do not deal with a check.\r\n * @param {Array} possibleMoves - The array of possible moves.\r\n * @returns {Array} - The filtered array of possible moves.\r\n */\r\nexport function filterMovesIfInCheck(possibleMoves, boardSquares) {\r\n    const blackKing = HelperMethods.getATargetSquareByPiece(GlobalVariables.KINGS.BLACK_KING, boardSquares);\r\n    const whiteKing = HelperMethods.getATargetSquareByPiece(GlobalVariables.KINGS.WHITE_KING, boardSquares);\r\n    const king = GlobalVariables.IsWhiteToMove ? whiteKing : blackKing\r\n\r\n    const isKingInCheck = (king, move, piece) => {\r\n        const pseudoMove = <Square x={king.props.x} y={king.props.y} piece={\"\"} />\r\n        if (piece === GlobalVariables.KINGS.BLACK_KING) {\r\n            return HelperMethods.isBlackInCheck(piece, move, pseudoMove, boardSquares);\r\n        } else if (piece === GlobalVariables.KINGS.WHITE_KING) {\r\n            return HelperMethods.isWhiteInCheck(piece, move, pseudoMove, boardSquares);\r\n        } else {\r\n            return (GlobalVariables.IsWhiteToMove && HelperMethods.isWhiteInCheck(whiteKing, move, pseudoMove, boardSquares)) ||\r\n                (!GlobalVariables.IsWhiteToMove && HelperMethods.isBlackInCheck(blackKing, move, pseudoMove, boardSquares));\r\n        }\r\n    };\r\n\r\n    const filterMoves = (moves, piece) => {\r\n        return moves.filter(move => {\r\n            const moveSquare = <Square x={move.props.x} y={move.props.y} piece={piece} />;\r\n            return !isKingInCheck(king, moveSquare, null, boardSquares);\r\n        });\r\n    };\r\n\r\n    return possibleMoves.map(moveSet => {\r\n        const filteredMoves = filterMoves(moveSet.moves, moveSet.piece.props.piece);\r\n        return { ...moveSet, moves: filteredMoves };\r\n    });\r\n}\r\n\r\n/**\r\n * Filters out moves that allow illegal castling (castling through check).\r\n * @param {Array} possibleMoves - The array of possible moves.\r\n * @returns {Array} - The filtered array of possible moves.\r\n */\r\nexport function filterMovesThatAllowIllegalCastling(possibleMoves, boardSquares) {\r\n    const blackKing = HelperMethods.getATargetSquareByPiece(GlobalVariables.KINGS.BLACK_KING, boardSquares);\r\n    const whiteKing = HelperMethods.getATargetSquareByPiece(GlobalVariables.KINGS.WHITE_KING, boardSquares);\r\n\r\n    const removeCastlingMove = (moves, x, y) => {\r\n        const index = moves.findIndex(m => m.props.x === x && m.props.y === y);\r\n        if (index !== -1) {\r\n            moves.splice(index, 1);\r\n        }\r\n    };\r\n\r\n    const isIllegalCastling = (king, castle1, castle2, across1, across2) => {\r\n        if (king && (castle1 || castle2)) {\r\n            if (castle1 && !across1) {\r\n                removeCastlingMove(king.moves, castle1.props.x, castle1.props.y);\r\n            }\r\n            if (castle2 && !across2) {\r\n                removeCastlingMove(king.moves, castle2.props.x, castle2.props.y);\r\n            }\r\n        }\r\n    };\r\n\r\n    return possibleMoves.map(moveSet => {\r\n        const piece = moveSet.piece;\r\n        const moves = moveSet.moves;\r\n\r\n        const whiteCastle1 = moves.find(m => m.props.x === 7 && m.props.y === 6);\r\n        const whiteCastle2 = moves.find(m => m.props.x === 7 && m.props.y === 2);\r\n        const blackCastle1 = moves.find(m => m.props.x === 0 && m.props.y === 6);\r\n        const blackCastle2 = moves.find(m => m.props.x === 0 && m.props.y === 2);\r\n\r\n        if (piece === blackKing || piece === whiteKing) {\r\n            isIllegalCastling(moveSet, whiteCastle1, whiteCastle2,\r\n                moves.find(m => m.props.x === 7 && m.props.y === 5),\r\n                moves.find(m => m.props.x === 7 && m.props.y === 3));\r\n\r\n            isIllegalCastling(moveSet, blackCastle1, blackCastle2,\r\n                moves.find(m => m.props.x === 0 && m.props.y === 5),\r\n                moves.find(m => m.props.x === 0 && m.props.y === 3));\r\n        }\r\n\r\n        if (piece === blackKing && HelperMethods.isBlackInCheck(blackKing, piece, null, boardSquares)) {\r\n            removeCastlingMove(moves, 0, 6);\r\n            removeCastlingMove(moves, 0, 2);\r\n        }\r\n\r\n        if (piece === whiteKing && HelperMethods.isWhiteInCheck(whiteKing, piece, null, boardSquares)) {\r\n            removeCastlingMove(moves, 7, 6);\r\n            removeCastlingMove(moves, 7, 2);\r\n        }\r\n\r\n        return moveSet;\r\n    });\r\n}\r\n\r\n/**\r\n * Removes empty or undefined moves from the possible moves array.\r\n * @param {Array} possibleMoves - The array of possible moves.\r\n * @returns {Array} - The cleaned array of possible moves.\r\n */\r\nexport function removeEmptyMoves(possibleMoves) {\r\n    return possibleMoves.filter(moveSet =>\r\n        moveSet && moveSet.moves && moveSet.moves.length > 0\r\n    ).map(moveSet => ({\r\n        ...moveSet,\r\n        moves: moveSet.moves.filter(move => move)\r\n    }));\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}