{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vladi Gotsin\\\\Desktop\\\\react\\\\Chess-React.js-\\\\src\\\\Board.js\";\nimport { Component } from \"react\";\nimport React from 'react';\nimport { Square } from \"./Square.js\";\nimport { ConvertFENPieceToPiece, ConvertFenToString, UpdatePosition, ParseFEN } from \"./HelperMethods.js\";\n\n/*\r\nTODO:\r\nCode Reusability: refactor some of the repeated code and generate new functions if needed\r\nConsistency and Naming: Have better and more consistent names for variables and functions\r\nDocumentation: add more comments to understand what is going on\r\nTesting: add unit tests\r\nImplementations: add promotions, implement endgames (mate, stalemate, draws repeation, 50 moves rule)\r\nBugs: Fix bugs (if any)\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DIM = 8; //8x8 Board\nconst BLACK_KING = 'black-king';\nconst WHITE_KING = 'white-king';\nconst PIECE_DELIMITER = '-';\nconst WHITE = 'white';\nconst BLACK = 'black';\nconst PAWN = 'pawn';\nconst ROOK = 'rook';\nconst KNIGHT = 'knight';\nconst BISHOP = 'bishop';\nconst KING = 'king';\nconst QUEEN = 'queen';\nexport class Board extends Component {\n  constructor(props) {\n    super(props);\n    this.movePiece = (x, y) => {\n      let squares = this.state.boardSquare;\n      let targetSquare = this.getATargetSquareByLocation(x, y);\n      let square = squares.find(s => s.props.x == this.state.selectedSquareX && s.props.y == this.state.selectedSquareY);\n      let color = this.getPieceColor(square);\n      let piece = this.getPiece(square);\n\n      //disable castling if the king moves\n      if (piece == \"king\") {\n        if (this.isColorWhite(color)) {\n          this.setState({\n            canWhiteLongCastle: false,\n            canWhiteShortCastle: false\n          });\n        } else {\n          this.setState({\n            canBlackLongCastle: false,\n            canBlackShortCastle: false\n          });\n        }\n      }\n\n      //disable castling if the rook moves\n      if (piece == \"rook\") {\n        if (square.props.x == 7 && square.props.y == 7) {\n          this.setState({\n            canWhiteShortCastle: false\n          });\n        }\n        if (square.props.x == 0 && square.props.y == 7) {\n          this.setState({\n            canBlackShortCastle: false\n          });\n        }\n        if (square.props.x == 7 && square.props.y == 0) {\n          this.setState({\n            canWhiteLongCastle: false\n          });\n        }\n        if (square.props.x == 0 && square.props.y == 0) {\n          this.setState({\n            canBlackLongCastle: false\n          });\n        }\n      }\n      let p = UpdatePosition(square, targetSquare, this.state.position);\n\n      //capturing enPassant\n      if (this.state.enPassantX && this.state.enPassantY && this.state.enPassantPossible) {\n        let enPassantTargetSquare = color == \"white\" ? squares.find(s => s.props.x == x + 1 && s.props.y == y) : squares.find(s => s.props.x == x - 1 && s.props.y == y);\n        let enPassantSquare = /*#__PURE__*/_jsxDEV(Square, {\n          x: square.props.x,\n          y: square.props.y,\n          piece: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 741,\n          columnNumber: 35\n        }, this);\n        p = UpdatePosition(enPassantSquare, enPassantTargetSquare, p);\n      }\n      this.setState({\n        position: p,\n        possibleMoves: [],\n        isWhiteToMove: !this.state.isWhiteToMove\n      });\n\n      //enabling en passant\n      if (piece == \"pawn\") {\n        if (Math.abs(square.props.x - targetSquare.props.x) == 2) {\n          let enPassant1 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y - 1);\n          let enPassant2 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y + 1);\n          if (enPassant1) {\n            if (enPassant1.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (enPassant1.props.piece.split(\"-\")[0] != color) {\n                this.setState({\n                  enPassantPossible: true,\n                  enPassantX: targetSquare.props.x,\n                  enPassantY: targetSquare.props.y\n                });\n                return;\n              }\n            }\n          }\n          if (enPassant2) {\n            if (enPassant2.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (enPassant2.props.piece.split(\"-\")[0] != color) {\n                this.setState({\n                  enPassantPossible: true,\n                  enPassantX: targetSquare.props.x,\n                  enPassantY: targetSquare.props.y\n                });\n                return;\n              }\n            }\n          }\n        }\n      }\n      this.setState({\n        enPassantPossible: false,\n        enPassantX: \"\",\n        enPassantY: \"\"\n      });\n    };\n    //updates the state with the possible moves\n    this.updatePossibleMoves = moves => {\n      this.setState({\n        possibleMoves: moves\n      });\n    };\n    //updates the state with the selectedSquare X coordinates\n    this.updateSelectedSquareX = x => {\n      this.setState({\n        selectedSquareX: x\n      });\n    };\n    //updates the state with the selectedSquare Y coordinates\n    this.updateSelectedSquareY = y => {\n      this.setState({\n        selectedSquareY: y\n      });\n    };\n    this.state = {\n      //<summary>\n      //FEN - Forsyth-Edwards Notation\n      //small letters - black pieces\n      //capital letters - white pieces\n      //numbers - empty board squares\n      //(/) - separates each board row\n      //first letter after the board indicates whose turn it is to move (w - white, b - black)\n      //next letters indicate castling rights, k - kingside, q - queenside, (-) - no castling allowed for any side\n      //en passant square - when a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square\n      //the number of half turns (white moves, then black moves = 2 half moves) that were made without a pawn move or a capture of a piece (50-move rule when reaches 100)\n      //the number of full moves (white moves, then black moves = 1 full move); increase after every black half move\n      //</summary>\n      //starting position\n      //'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\n      fen: 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0',\n      boardPostition: [],\n      nextTurn: '',\n      WCastleK: true,\n      WCastleQ: true,\n      BCastleK: true,\n      BCastleQ: true,\n      enPassant: '',\n      halfMoves: 0,\n      fullMoves: 0,\n      boardSquare: [],\n      possibleMoves: [],\n      selectedSquareX: \"\",\n      selectedSquareY: \"\",\n      canWhiteShortCastle: false,\n      canWhiteLongCastle: false,\n      canBlackShortCastle: false,\n      canBlackLongCastle: false,\n      enPassantPossible: false,\n      enPassantX: \"\",\n      enPassantY: \"\",\n      isWhiteToMove: true\n    };\n    this.fenParser = this.fenParser.bind(this);\n  }\n\n  //called when the page loads. we need to parse the FEN to fill in the board\n  componentDidMount() {\n    this.fenParser();\n  }\n\n  //parses the FEN for the initial board state\n  fenParser() {\n    //parses the FEN string to variables\n    const {\n      fenBoard,\n      fenTurn,\n      fenCastling,\n      fenEnPassant,\n      fenHalfMoves,\n      fenFullMoves\n    } = ParseFEN(this.state.fen);\n    const fenRows = fenBoard.split('/');\n    let arr = [];\n\n    //splits all rows and creates a matrix for the board\n    for (let row of fenRows) {\n      const tokens = row.split('');\n      let r = [];\n      for (let i = 0; i < tokens.length; i++) {\n        if (Number(tokens[i])) {\n          for (let j = 0; j < Number(tokens[i]); j++) {\n            r.push(' ');\n          }\n        } else {\n          r.push(tokens[i]);\n        }\n      }\n      arr.push(r);\n    }\n\n    //generates a Square component for each element in the matrix created above\n    let boardSquares = [];\n    let squareColorIsWhite = true;\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0; j < arr[i].length; j++) {\n        let color = squareColorIsWhite ? \"\" : \"dark\";\n        boardSquares.push( /*#__PURE__*/_jsxDEV(Square, {\n          getPossibleMoves: this.getPossibleMoves.bind(this),\n          x: i,\n          y: j,\n          piece: ConvertFENPieceToPiece(arr[i][j]),\n          color: color,\n          selectedSquareX: this.state.selectedSquareX,\n          setSelectedSquareX: this.updateSelectedSquareX,\n          selectedSquareY: this.state.selectedSquareY,\n          setSelectedSquareY: this.updateSelectedSquareY,\n          possibleMoves: this.state.possibleMoves,\n          updatePossibleMoves: this.updatePossibleMoves,\n          movePiece: this.movePiece\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 35\n        }, this));\n        squareColorIsWhite = !squareColorIsWhite;\n      }\n      squareColorIsWhite = !squareColorIsWhite;\n    }\n\n    //collects the states to update\n    let propsToUpdate = {\n      boardPostition: arr,\n      nextTurn: fenTurn,\n      enPassant: fenEnPassant,\n      halfMoves: fenHalfMoves,\n      fullMoves: fenFullMoves,\n      boardSquare: boardSquares\n    };\n    let castles = fenCastling.split(\"\");\n\n    //parses the castling options from the FEN string\n    for (let i = 0; i < castles.length; i++) {\n      let castling = castles[i];\n      switch (castling) {\n        case \"K\":\n          propsToUpdate.canWhiteShortCastle = true;\n          break;\n        case \"k\":\n          propsToUpdate.canBlackShortCastle = true;\n          break;\n        case \"Q\":\n          propsToUpdate.canWhiteLongCastle = true;\n          break;\n        case \"q\":\n          propsToUpdate.canBlackLongCastle = true;\n          break;\n        default:\n          break;\n      }\n    }\n\n    //updates the state\n    this.setState(propsToUpdate);\n  }\n  isWhiteInCheck(square, pseudo) {\n    let squares = this.state.boardSquare;\n    if (pseudo) {\n      const updatedSquares = squares.map(s => {\n        if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\n          // Return a new Square component with the updated piece\n          return /*#__PURE__*/React.cloneElement(s, {\n            piece: pseudo.props.piece\n          });\n        } else {\n          // For other squares, return the original Square component\n          return s;\n        }\n      });\n      squares = updatedSquares;\n    }\n\n    //check for attackers in front of the white king\n    for (let i = square.props.x - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from behind\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers behind the white king\n    for (let i = square.props.x + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the front\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the left of the white king\n    for (let i = square.props.y - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the left\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the right of the white king\n    for (let i = square.props.y + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the right\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == -1) {\n                //console.log(\"in check from top half of counterclockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from top half of counterclockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == 1) {\n                //console.log(\"in check from top half of clockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from top half of clockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for knights check\n    let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1);\n    let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1);\n    let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1);\n    let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1);\n    let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2);\n    let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2);\n    let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2);\n    let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2);\n    if (knight1) {\n      if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight1.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 1\")\n          return true;\n        }\n      }\n    }\n    if (knight2) {\n      if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight2.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 2\")\n          return true;\n        }\n      }\n    }\n    if (knight3) {\n      if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight3.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 3\")\n          return true;\n        }\n      }\n    }\n    if (knight4) {\n      if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight4.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 4\")\n          return true;\n        }\n      }\n    }\n    if (knight5) {\n      if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight5.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 5\")\n          return true;\n        }\n      }\n    }\n    if (knight6) {\n      if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight6.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 6\")\n          return true;\n        }\n      }\n    }\n    if (knight7) {\n      if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight7.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 7\")\n          return true;\n        }\n      }\n    }\n    if (knight8) {\n      if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight8.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 8\")\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  isBlackInCheck(square, pseudo) {\n    let squares = this.state.boardSquare;\n    if (pseudo) {\n      const updatedSquares = squares.map(s => {\n        if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\n          // Return a new Square component with the updated piece\n          return /*#__PURE__*/React.cloneElement(s, {\n            piece: pseudo.props.piece\n          });\n        } else {\n          // For other squares, return the original Square component\n          return s;\n        }\n      });\n      squares = updatedSquares;\n    }\n\n    //check for attackers behind the black king\n    for (let i = square.props.x - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from behind\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers in front of the black king\n    for (let i = square.props.x + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the front\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the left of the black king\n    for (let i = square.props.y - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the left\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the right of the black king\n    for (let i = square.props.y + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the right\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            //console.log(\"in check from top half of counterclockwise diagonal\")\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == 1) {\n                //console.log(\"in check from bottom half of counterclockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from bottom half of counterclockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            //console.log(\"in check from top half of clockwise diagonal\")\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == -1) {\n                //console.log(\"in check from bottom half of clockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from bottom half of clockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for knights check\n    let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1);\n    let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1);\n    let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1);\n    let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1);\n    let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2);\n    let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2);\n    let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2);\n    let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2);\n    if (knight1) {\n      if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight1.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 1\")\n          return true;\n        }\n      }\n    }\n    if (knight2) {\n      if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight2.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 2\")\n          return true;\n        }\n      }\n    }\n    if (knight3) {\n      if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight3.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 3\")\n          return true;\n        }\n      }\n    }\n    if (knight4) {\n      if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight4.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 4\")\n          return true;\n        }\n      }\n    }\n    if (knight5) {\n      if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight5.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 5\")\n          return true;\n        }\n      }\n    }\n    if (knight6) {\n      if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight6.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 6\")\n          return true;\n        }\n      }\n    }\n    if (knight7) {\n      if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight7.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 7\")\n          return true;\n        }\n      }\n    }\n    if (knight8) {\n      if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight8.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 8\")\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  //retrieves a speecific square from the board using x and y coordinates (location)\n  getATargetSquareByLocation(x, y) {\n    let squares = this.state.boardSquare;\n    return squares.find(s => s.props.x === x && s.props.y === y);\n  }\n\n  //retrieves a speecific square from the board that has a certain piece\n  getATargetSquareByPiece(piece) {\n    let squares = this.state.boardSquare;\n    return squares.find(s => s.props.piece == piece);\n  }\n\n  //check if a specific square has a piece assigned to it\n  isSquareAvailable(square) {\n    return square && !square.props.piece;\n  }\n\n  //checks if a pawn is on its starting square and allows a 2-squares move\n  isPawnOnStartingSquare(pawn) {\n    return this.isColorWhite(pawn.props.piece.split(PIECE_DELIMITER)[0]) ? pawn.props.x == 6 : pawn.props.x == 1;\n  }\n\n  //checks if two pieces have the same color\n  areSameColor(square1, square2) {\n    if (!square1 || !square2) {\n      return;\n    }\n    let color1 = square1.props.piece.split(PIECE_DELIMITER)[0];\n    let color2 = square2.props.piece.split(PIECE_DELIMITER)[0];\n    return color1 == color2;\n  }\n\n  //checks if a square contains a certain piece\n  doesTheSquareHasThePiece(square, piece) {\n    let p = this.getPiece(square);\n    return p == piece;\n  }\n\n  //cheks if a pawn is on En Passant square\n  isPawnOnEnPassantSquare(pawn) {\n    return this.isColorWhite(pawn.props.piece.split(PIECE_DELIMITER)[0]) ? pawn.props.x == 3 : pawn.props.x == 4;\n  }\n\n  //checks if a color is white\n  isColorWhite(color) {\n    return color == WHITE;\n  }\n\n  //checks if a color is black\n  isColorBlack(color) {\n    return color == BLACK;\n  }\n\n  //checks if white is allowed to long castle\n  canWhiteLongCastle() {\n    return this.state.canWhiteLongCastle && this.state.boardPostition[7][0] == 'R' && this.state.boardPostition[7][1] == '' && this.state.boardPostition[7][2] == '' && this.state.boardPostition[7][3] == '';\n  }\n\n  //checks if white is allowed to short castle\n  canWhiteShortCastle() {\n    return this.state.canWhiteShortCastle && this.state.boardPostition[7][7] == 'R' && this.state.boardPostition[7][6] == '' && this.state.boardPostition[7][5] == '';\n  }\n\n  //checks if black is allowed to long castle\n  canBlackLongCastle() {\n    return this.state.canBlackLongCastle && this.state.boardPostition[0][0] == 'r' && this.state.boardPostition[0][1] == '' && this.state.boardPostition[0][2] == '' && this.state.boardPostition[0][3] == '';\n  }\n\n  //checks if black is allowed to short castle\n  canBlackShortCastle() {\n    return this.state.canBlackShortCastle && this.state.boardPostition[7][7] == 'r' && this.state.boardPostition[7][6] == '' && this.state.boardPostition[7][5] == '';\n  }\n\n  //converts board coordinates to X and Y position on the board, e.g., a8 = 0, 0\n  convertCoordinatesToLocation(coordinates) {\n    let tokens = coordinates.split('');\n\n    //skip invalid coordinates\n    if (tokens.length != 2) {\n      return;\n    }\n    let letter = tokens[0].toString().toUpperCase();\n    let number = tokens[1];\n\n    //65 is the ASCII code for capital A which will give us 0 if we have A as a coordinate; A-F will give us 0-7 for x\n    //reverse the numbers since we draw the board top down\n    return {\n      x: letter.charCodeAt(0) - 65,\n      y: DIM - Number(number)\n    };\n  }\n\n  //gets all possible moves for a pawn\n  getPawnsPossibleMoves(square) {\n    let color = this.getPieceColor(square); //get the piece color\n\n    let moves = [];\n    let position1Offset = 1;\n    let position2Offset = 2;\n\n    //flips the direction if the color is white\n    if (this.isColorWhite(color)) {\n      position1Offset *= -1;\n      position2Offset *= -1;\n    }\n\n    //get all forwards moves + the double move at the start\n    let targetPiece1 = this.getATargetSquareByLocation(square.props.x + position1Offset, square.props.y); //move pawn 1 square ahead\n    let targetPiece2 = this.getATargetSquareByLocation(square.props.x + position2Offset, square.props.y); //move pawn 2 squares ahead\n\n    //get potential neighbors to capture\n    let neighbor1 = this.getATargetSquareByLocation(square.props.x + position1Offset, square.props.y + position1Offset);\n    let neighbor2 = this.getATargetSquareByLocation(square.props.x + position1Offset, square.props.y + position1Offset * -1);\n\n    //get the En Passant coordinates\n    let enPassantCordinates = this.convertCoordinatesToLocation(this.state.enPassant);\n    let enPassant = enPassantCordinates ? this.getATargetSquareByLocation(enPassantCordinates.x, enPassantCordinates.y) : '';\n    let isTheSquareInFrontAvailable = this.isSquareAvailable(targetPiece1);\n\n    //push the one move forward for a pawn\n    if (isTheSquareInFrontAvailable) {\n      moves.push(targetPiece1);\n    }\n\n    //two moves are allowed only if the two squares above are free/empty\n    //allowed if pawn hasn't moved before\n    if (isTheSquareInFrontAvailable && this.isSquareAvailable(targetPiece2) && this.isPawnOnStartingSquare(square)) {\n      moves.push(targetPiece2);\n    }\n\n    //push neighbour if there is a piece to capture and it's a different color than the pawn\n    if (!this.isSquareAvailable(neighbor1) && !this.areSameColor(neighbor1, square)) {\n      moves.push(neighbor1);\n    }\n\n    //push neighbour if there is a piece to capture and it's a different color than the pawn\n    if (!this.isSquareAvailable(neighbor2) && !this.areSameColor(neighbor2, square)) {\n      moves.push(neighbor2);\n    }\n\n    //add En Passant\n    if (enPassant) {\n      moves.push(enPassant);\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a rook\n  getRooksPossibleMoves(square) {\n    let moves = [];\n    for (let i = square.props.x + 1; i < DIM; i++) {\n      let targetSquare = this.getATargetSquareByLocation(i, square.props.y);\n      if (this.isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!this.areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    for (let i = square.props.x - 1; i >= 0; i--) {\n      let targetSquare = this.getATargetSquareByLocation(i, square.props.y);\n      if (this.isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!this.areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    for (let i = square.props.y + 1; i < DIM; i++) {\n      let targetSquare = this.getATargetSquareByLocation(square.props.x, i);\n      if (this.isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!this.areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    for (let i = square.props.y - 1; i >= 0; i--) {\n      let targetSquare = this.getATargetSquareByLocation(square.props.x, i);\n      if (this.isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!this.areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a bishop\n  getBishopPossibleMoves(square) {\n    let moves = [];\n    let counter = 0;\n    for (let i = 1; i <= DIM; i++) {\n      if (counter == 5) {\n        break;\n      }\n      let target1 = this.getATargetSquareByLocation(square.props.x - i, square.props.y - i);\n      let target2 = this.getATargetSquareByLocation(square.props.x - i, square.props.y + i);\n      let target3 = this.getATargetSquareByLocation(square.props.x + i, square.props.y + i);\n      let target4 = this.getATargetSquareByLocation(square.props.x + i, square.props.y - i);\n      if (target1 && this.isSquareAvailable(target1) && counter < 1) {\n        moves.push(target1);\n      } else {\n        if (!this.areSameColor(square, target1)) {\n          moves.push(target1);\n        }\n        counter++;\n      }\n      if (target2 && this.isSquareAvailable(target2) && counter < 2) {\n        moves.push(target2);\n      } else {\n        if (!this.areSameColor(square, target2)) {\n          moves.push(target2);\n        }\n        counter++;\n      }\n      if (target3 && this.isSquareAvailable(target3) && counter < 3) {\n        moves.push(target3);\n      } else {\n        if (!this.areSameColor(square, target3)) {\n          moves.push(target3);\n        }\n        counter++;\n      }\n      if (target4 && this.isSquareAvailable(target4) && counter < 4) {\n        moves.push(target4);\n      } else {\n        if (!this.areSameColor(square, target4)) {\n          moves.push(target4);\n        }\n        counter++;\n      }\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a knight\n  getKnightPossibleMoves(square) {\n    let offset = 1;\n    let doubleOffset = 2 * offset;\n    let moves = [];\n    for (let i = 0; i < 8; i++) {\n      if (i != 0 && i % 2 == 0) {\n        offset *= -1;\n      }\n      let targetX = square.props.x + offset;\n      let targetY = square.props.y + doubleOffset;\n      let target = this.getATargetSquareByLocation(targetX, targetY);\n      if (target && this.isSquareAvailable(target)) {\n        moves.push(target);\n      } else {\n        if (!this.areSameColor(square, target)) {\n          moves.push(target);\n        }\n      }\n      doubleOffset *= -1;\n      if (i == 4) {\n        offset *= 2;\n        doubleOffset /= 2;\n      }\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a king\n  getKingPossibleMoves(square) {\n    let moves = [];\n    let color = this.getPieceColor(square);\n\n    //gets all possible 1-square moves for the king\n    for (let i = -1; i < 2; i++) {\n      for (let j = -1; j < 2; j++) {\n        let targetPiece = this.getATargetSquareByLocation(square.props.x + i, square.props.y + j);\n        if (targetPiece && this.isSquareAvailable(targetPiece)) {\n          moves.push(targetPiece);\n        } else {\n          if (!this.areSameColor(square, targetPiece)) {\n            moves.push(targetPiece);\n          }\n        }\n      }\n    }\n\n    //Castling logic\n    const longCastleSquare = this.getATargetSquareByLocation(square.props.x, square.props.y - 2);\n    const shortCastleSquare = this.getATargetSquareByLocation(square.props.x, square.props.y + 2);\n    if (this.isColorWhite(color) && this.canWhiteLongCastle()) {\n      moves.push(longCastleSquare);\n    }\n    if (this.isColorWhite(color) && this.canWhiteShortCastle()) {\n      moves.push(shortCastleSquare);\n    }\n    if (this.isColorBlack(color) && this.canBlackLongCastle()) {\n      moves.push(longCastleSquare);\n    }\n    if (this.isColorBlack(color) && this.canBlackShortCastle()) {\n      moves.push(shortCastleSquare);\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a queen\n  getQueenPossibleMoves(square) {\n    let moves = [];\n\n    //a queen has the same moves as a bishop and a rook\n    const rookMoves = this.getRooksPossibleMoves(square).moves;\n    const bishopMoves = this.getBishopPossibleMoves(square).moves;\n\n    // Concatenate the arrays of moves\n    moves.push(...rookMoves, ...bishopMoves);\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets the piece color\n  getPieceColor(square) {\n    return square.props.piece.split(PIECE_DELIMITER)[0];\n  }\n\n  //gets the piece\n  getPiece(square) {\n    return square.props.piece.split(PIECE_DELIMITER)[1];\n  }\n\n  //removes moves that do not deal with a check\n  filterMovesIfInCheck(possibleMoves) {\n    let blackKing = this.getATargetSquareByPiece(BLACK_KING); //get the black king\n    let whiteKing = this.getATargetSquareByPiece(WHITE_KING); //get the white king\n\n    for (let i = 0; i < possibleMoves.length; i++) {\n      for (let j = 0; j < possibleMoves[i].moves; j++) {\n        if (possibleMoves[i].piece.props.piece == BLACK_KING) {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].moves[j].x,\n            y: possibleMoves[i].moves[j].y,\n            piece: \"black-king\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1186,\n            columnNumber: 32\n          }, this);\n          let pseudo = /*#__PURE__*/_jsxDEV(Square, {\n            x: blackKing.props.x,\n            y: blackKing.props.y,\n            piece: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1187,\n            columnNumber: 34\n          }, this);\n          let isInCheck = this.isBlackInCheck(move, pseudo);\n          if (isInCheck) {\n            possibleMoves[i].moves.splice(j, 1);\n            j--;\n          }\n        } else if (possibleMoves[i].piece.props.piece == WHITE_KING) {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].moves[j].x,\n            y: possibleMoves[i].moves[j].y,\n            piece: \"white-king\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1195,\n            columnNumber: 32\n          }, this);\n          let pseudo = /*#__PURE__*/_jsxDEV(Square, {\n            x: whiteKing.props.x,\n            y: whiteKing.props.y,\n            piece: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1196,\n            columnNumber: 34\n          }, this);\n          let isInCheck = this.isWhiteInCheck(move, pseudo);\n          if (isInCheck) {\n            possibleMoves[i].moves.splice(j, 1);\n            j--;\n          }\n        } else {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].moves[j].x,\n            y: possibleMoves[i].moves[j].y,\n            piece: possibleMoves[i].piece.props.piece\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1204,\n            columnNumber: 32\n          }, this);\n          let isInCheck = this.isBlackInCheck(blackKing, move) ? true : this.isWhiteInCheck(whiteKing, move);\n          if (isInCheck) {\n            possibleMoves[i].moves.splice(j, 1);\n            j--;\n          }\n        }\n      }\n    }\n    return possibleMoves;\n  }\n\n  //removes moves that allow illigal castling (castles through check for example)\n  filterMovesThatAllowIllegalCastling(possibleMoves) {\n    let blackKing = this.getATargetSquareByPiece(BLACK_KING); //get the black king\n    let whiteKing = this.getATargetSquareByPiece(WHITE_KING); //get the white king\n\n    for (let i = 0; i < possibleMoves.length; i++) {\n      let whiteCastle1 = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 6); //sqaure where king will be after short castle (white)\n      let whiteCastle2 = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 2); //sqaure where king will be after long castle (white)\n      let blackCastle1 = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 6); //square where king will be after shot castle (black)\n      let blackCastle2 = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 2); //square where king will be after long castle (black)\n\n      if (possibleMoves[i].piece == blackKing || possibleMoves[i].piece == whiteKing) {\n        if (whiteCastle1) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.x == 7 && m.y == 5);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n        if (whiteCastle2) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.x == 7 && m.y == 3);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n        if (blackCastle1) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.x == 0 && m.y == 5);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n        if (blackCastle2) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.x == 0 && m.y == 3);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n      }\n\n      //prevents black to castle if in check\n      if (this.isBlackInCheck(blackKing)) {\n        if (blackCastle1) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove), 1);\n        }\n        if (blackCastle2) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove2), 1);\n        }\n      }\n\n      //prevents white to castle if in check\n      if (this.isWhiteInCheck(whiteKing)) {\n        if (whiteCastle1) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove), 1);\n        }\n        if (whiteCastle2) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove2), 1);\n        }\n      }\n    }\n    return possibleMoves;\n  }\n\n  //removes empty/undefined values for generated moves\n  removeEmptyMoves(possibleMoves) {\n    for (let i = 0; i < possibleMoves.length; i++) {\n      if (possibleMoves[i].moves.length == 0) {\n        possibleMoves.splice(i, 1);\n        i--;\n        continue;\n      }\n      for (let j = 0; j < possibleMoves[i].moves.length; j++) {\n        if (!possibleMoves[i].moves[j]) {\n          possibleMoves[i].moves.splice(j, 1);\n          j--;\n        }\n      }\n    }\n    return possibleMoves;\n  }\n\n  //gets all possible/legal moves\n  getPossibleMoves(square) {\n    let possibleMoves = [];\n\n    //if the square has a piece\n    if (square.props.piece) {\n      let color = this.getPieceColor(square); //get the piece color\n\n      //don't collect possible moves if it's black to move and you're trying to move a white piece\n      if (this.isColorWhite(color) && !this.state.isWhiteToMove) {\n        return;\n      }\n\n      //don't collect possible moves if it's white to move and you're trying to move a black piece\n      if (this.isColorBlack(color) && this.state.isWhiteToMove) {\n        return;\n      }\n\n      //get all possible moves for each piece\n      possibleMoves.push(this.getPawnsPossibleMoves(square));\n      possibleMoves.push(this.getRooksPossibleMoves(square));\n      possibleMoves.push(this.getBishopPossibleMoves(square));\n      possibleMoves.push(this.getKnightPossibleMoves(square));\n      possibleMoves.push(this.getKingPossibleMoves(square));\n      possibleMoves.push(this.getQueenPossibleMoves(square));\n\n      //filter empty moves\n      possibleMoves = this.removeEmptyMoves(possibleMoves);\n\n      //filter possible moves\n      possibleMoves = this.filterMovesIfInCheck(possibleMoves);\n      possibleMoves = this.filterMovesThatAllowIllegalCastling(possibleMoves);\n    }\n    console.log(\"Possible Moves:\", possibleMoves);\n    updateSquaresWithMoves(possibleMoves);\n    this.updatePossibleMoves(possibleMoves);\n  }\n\n  //renders the board\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessGrid\",\n      children: this.state.boardSquare.map(sqr => sqr)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1349,\n      columnNumber: 13\n    }, this);\n  }\n}","map":{"version":3,"names":["Component","React","Square","ConvertFENPieceToPiece","ConvertFenToString","UpdatePosition","ParseFEN","jsxDEV","_jsxDEV","DIM","BLACK_KING","WHITE_KING","PIECE_DELIMITER","WHITE","BLACK","PAWN","ROOK","KNIGHT","BISHOP","KING","QUEEN","Board","constructor","props","movePiece","x","y","squares","state","boardSquare","targetSquare","getATargetSquareByLocation","square","find","s","selectedSquareX","selectedSquareY","color","getPieceColor","piece","getPiece","isColorWhite","setState","canWhiteLongCastle","canWhiteShortCastle","canBlackLongCastle","canBlackShortCastle","p","position","enPassantX","enPassantY","enPassantPossible","enPassantTargetSquare","enPassantSquare","fileName","_jsxFileName","lineNumber","columnNumber","possibleMoves","isWhiteToMove","Math","abs","enPassant1","enPassant2","split","updatePossibleMoves","moves","updateSelectedSquareX","updateSelectedSquareY","fen","boardPostition","nextTurn","WCastleK","WCastleQ","BCastleK","BCastleQ","enPassant","halfMoves","fullMoves","fenParser","bind","componentDidMount","fenBoard","fenTurn","fenCastling","fenEnPassant","fenHalfMoves","fenFullMoves","fenRows","arr","row","tokens","r","i","length","Number","j","push","boardSquares","squareColorIsWhite","getPossibleMoves","setSelectedSquareX","setSelectedSquareY","propsToUpdate","castles","castling","isWhiteInCheck","pseudo","updatedSquares","map","cloneElement","knight1","knight2","knight3","knight4","knight5","knight6","knight7","knight8","isBlackInCheck","getATargetSquareByPiece","isSquareAvailable","isPawnOnStartingSquare","pawn","areSameColor","square1","square2","color1","color2","doesTheSquareHasThePiece","isPawnOnEnPassantSquare","isColorBlack","convertCoordinatesToLocation","coordinates","letter","toString","toUpperCase","number","charCodeAt","getPawnsPossibleMoves","position1Offset","position2Offset","targetPiece1","targetPiece2","neighbor1","neighbor2","enPassantCordinates","isTheSquareInFrontAvailable","getRooksPossibleMoves","getBishopPossibleMoves","counter","target1","target2","target3","target4","getKnightPossibleMoves","offset","doubleOffset","targetX","targetY","target","getKingPossibleMoves","targetPiece","longCastleSquare","shortCastleSquare","getQueenPossibleMoves","rookMoves","bishopMoves","filterMovesIfInCheck","blackKing","whiteKing","move","isInCheck","splice","filterMovesThatAllowIllegalCastling","whiteCastle1","m","whiteCastle2","blackCastle1","blackCastle2","pieceAcross","indexOf","castleMove","castleMove2","removeEmptyMoves","console","log","updateSquaresWithMoves","render","className","children","sqr"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/Chess-React.js-/src/Board.js"],"sourcesContent":["import { Component } from \"react\";\r\nimport React from 'react';\r\nimport { Square } from \"./Square.js\"\r\nimport { ConvertFENPieceToPiece, ConvertFenToString, UpdatePosition, ParseFEN } from \"./HelperMethods.js\";\r\n\r\n\r\n/*\r\nTODO:\r\nCode Reusability: refactor some of the repeated code and generate new functions if needed\r\nConsistency and Naming: Have better and more consistent names for variables and functions\r\nDocumentation: add more comments to understand what is going on\r\nTesting: add unit tests\r\nImplementations: add promotions, implement endgames (mate, stalemate, draws repeation, 50 moves rule)\r\nBugs: Fix bugs (if any)\r\n*/\r\n\r\nconst DIM = 8; //8x8 Board\r\nconst BLACK_KING = 'black-king';\r\nconst WHITE_KING = 'white-king';\r\nconst PIECE_DELIMITER = '-';\r\nconst WHITE = 'white';\r\nconst BLACK = 'black';\r\nconst PAWN = 'pawn';\r\nconst ROOK = 'rook';\r\nconst KNIGHT = 'knight';\r\nconst BISHOP = 'bishop';\r\nconst KING = 'king';\r\nconst QUEEN = 'queen';\r\n\r\nexport class Board extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            //<summary>\r\n            //FEN - Forsyth-Edwards Notation\r\n            //small letters - black pieces\r\n            //capital letters - white pieces\r\n            //numbers - empty board squares\r\n            //(/) - separates each board row\r\n            //first letter after the board indicates whose turn it is to move (w - white, b - black)\r\n            //next letters indicate castling rights, k - kingside, q - queenside, (-) - no castling allowed for any side\r\n            //en passant square - when a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square\r\n            //the number of half turns (white moves, then black moves = 2 half moves) that were made without a pawn move or a capture of a piece (50-move rule when reaches 100)\r\n            //the number of full moves (white moves, then black moves = 1 full move); increase after every black half move\r\n            //</summary>\r\n            //starting position\r\n            //'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\r\n            fen: 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0',\r\n            boardPostition: [],\r\n            nextTurn: '',\r\n            WCastleK: true,\r\n            WCastleQ: true,\r\n            BCastleK: true,\r\n            BCastleQ: true,\r\n            enPassant: '',\r\n            halfMoves: 0,\r\n            fullMoves: 0,\r\n            boardSquare: [],\r\n            possibleMoves: [],\r\n            selectedSquareX: \"\",\r\n            selectedSquareY: \"\",\r\n            canWhiteShortCastle: false,\r\n            canWhiteLongCastle: false,\r\n            canBlackShortCastle: false,\r\n            canBlackLongCastle: false,\r\n            enPassantPossible: false,\r\n            enPassantX: \"\",\r\n            enPassantY: \"\",\r\n            isWhiteToMove: true\r\n        };\r\n        this.fenParser = this.fenParser.bind(this);\r\n    }\r\n\r\n    //called when the page loads. we need to parse the FEN to fill in the board\r\n    componentDidMount() {\r\n        this.fenParser();\r\n    }\r\n\r\n    //parses the FEN for the initial board state\r\n    fenParser() {\r\n        //parses the FEN string to variables\r\n        const { fenBoard, fenTurn, fenCastling, fenEnPassant, fenHalfMoves, fenFullMoves } = ParseFEN(this.state.fen)\r\n\r\n        const fenRows = fenBoard.split('/')\r\n\r\n        let arr = [];\r\n\r\n        //splits all rows and creates a matrix for the board\r\n        for (let row of fenRows) {\r\n            const tokens = row.split('')\r\n\r\n            let r = []\r\n\r\n            for (let i = 0; i < tokens.length; i++) {\r\n                if (Number(tokens[i])) {\r\n                    for (let j = 0; j < Number(tokens[i]); j++) {\r\n                        r.push(' ')\r\n                    }\r\n                } else {\r\n                    r.push(tokens[i])\r\n                }\r\n            }\r\n\r\n            arr.push(r)\r\n        }\r\n\r\n        //generates a Square component for each element in the matrix created above\r\n        let boardSquares = [];\r\n        let squareColorIsWhite = true;\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            for (let j = 0; j < arr[i].length; j++) {\r\n                let color = squareColorIsWhite ? \"\" : \"dark\";\r\n                boardSquares.push(<Square\r\n                    getPossibleMoves={this.getPossibleMoves.bind(this)}\r\n                    key={`${i}-${j}`}\r\n                    x={i}\r\n                    y={j}\r\n                    piece={ConvertFENPieceToPiece(arr[i][j])}\r\n                    color={color}\r\n                    selectedSquareX={this.state.selectedSquareX}\r\n                    setSelectedSquareX={this.updateSelectedSquareX}\r\n                    selectedSquareY={this.state.selectedSquareY}\r\n                    setSelectedSquareY={this.updateSelectedSquareY}\r\n                    possibleMoves={this.state.possibleMoves}\r\n                    updatePossibleMoves={this.updatePossibleMoves}\r\n                    movePiece={this.movePiece}\r\n                />)\r\n                squareColorIsWhite = !squareColorIsWhite;\r\n            }\r\n            squareColorIsWhite = !squareColorIsWhite;\r\n        }\r\n\r\n        //collects the states to update\r\n        let propsToUpdate = { boardPostition: arr, nextTurn: fenTurn, enPassant: fenEnPassant, halfMoves: fenHalfMoves, fullMoves: fenFullMoves, boardSquare: boardSquares }\r\n\r\n        let castles = fenCastling.split(\"\");\r\n\r\n        //parses the castling options from the FEN string\r\n        for (let i = 0; i < castles.length; i++) {\r\n            let castling = castles[i]\r\n\r\n            switch (castling) {\r\n                case \"K\":\r\n                    propsToUpdate.canWhiteShortCastle = true\r\n                    break;\r\n                case \"k\":\r\n                    propsToUpdate.canBlackShortCastle = true\r\n                    break;\r\n                case \"Q\":\r\n                    propsToUpdate.canWhiteLongCastle = true\r\n                    break;\r\n                case \"q\":\r\n                    propsToUpdate.canBlackLongCastle = true\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        //updates the state\r\n        this.setState(propsToUpdate)\r\n    }\r\n\r\n    isWhiteInCheck(square, pseudo) {\r\n        let squares = this.state.boardSquare\r\n\r\n        if (pseudo) {\r\n            const updatedSquares = squares.map(s => {\r\n                if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\r\n                    // Return a new Square component with the updated piece\r\n                    return React.cloneElement(s, { piece: pseudo.props.piece });\r\n                } else {\r\n                    // For other squares, return the original Square component\r\n                    return s;\r\n                }\r\n            });\r\n\r\n            squares = updatedSquares;\r\n        }\r\n\r\n        //check for attackers in front of the white king\r\n        for (let i = square.props.x - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from behind\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers behind the white king\r\n        for (let i = square.props.x + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the front\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the left of the white king\r\n        for (let i = square.props.y - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the left\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the right of the white king\r\n        for (let i = square.props.y + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the right\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == -1) {\r\n                                //console.log(\"in check from top half of counterclockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from top half of counterclockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        return true\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == 1) {\r\n                                //console.log(\"in check from top half of clockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from top half of clockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        return true;\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for knights check\r\n        let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1)\r\n        let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1)\r\n        let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1)\r\n        let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1)\r\n        let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2)\r\n        let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2)\r\n        let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2)\r\n        let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2)\r\n\r\n        if (knight1) {\r\n            if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight1.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 1\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight2) {\r\n            if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight2.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 2\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight3) {\r\n            if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight3.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 3\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight4) {\r\n            if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight4.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 4\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight5) {\r\n            if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight5.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 5\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight6) {\r\n            if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight6.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 6\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight7) {\r\n            if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight7.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 7\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight8) {\r\n            if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight8.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 8\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    isBlackInCheck(square, pseudo) {\r\n        let squares = this.state.boardSquare\r\n\r\n        if (pseudo) {\r\n            const updatedSquares = squares.map(s => {\r\n                if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\r\n                    // Return a new Square component with the updated piece\r\n                    return React.cloneElement(s, { piece: pseudo.props.piece });\r\n                } else {\r\n                    // For other squares, return the original Square component\r\n                    return s;\r\n                }\r\n            });\r\n\r\n            squares = updatedSquares;\r\n        }\r\n\r\n        //check for attackers behind the black king\r\n        for (let i = square.props.x - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from behind\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers in front of the black king\r\n        for (let i = square.props.x + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the front\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the left of the black king\r\n        for (let i = square.props.y - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the left\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the right of the black king\r\n        for (let i = square.props.y + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the right\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        //console.log(\"in check from top half of counterclockwise diagonal\")\r\n                        return true\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == 1) {\r\n                                //console.log(\"in check from bottom half of counterclockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from bottom half of counterclockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        //console.log(\"in check from top half of clockwise diagonal\")\r\n                        return true\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == -1) {\r\n                                //console.log(\"in check from bottom half of clockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from bottom half of clockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for knights check\r\n        let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1)\r\n        let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1)\r\n        let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1)\r\n        let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1)\r\n        let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2)\r\n        let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2)\r\n        let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2)\r\n        let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2)\r\n\r\n        if (knight1) {\r\n            if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight1.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 1\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight2) {\r\n            if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight2.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 2\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight3) {\r\n            if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight3.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 3\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight4) {\r\n            if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight4.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 4\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight5) {\r\n            if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight5.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 5\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight6) {\r\n            if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight6.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 6\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight7) {\r\n            if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight7.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 7\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight8) {\r\n            if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight8.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 8\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    movePiece = (x, y) => {\r\n        let squares = this.state.boardSquare;\r\n\r\n        let targetSquare = this.getATargetSquareByLocation(x, y)\r\n        let square = squares.find(s => s.props.x == this.state.selectedSquareX && s.props.y == this.state.selectedSquareY)\r\n\r\n        let color = this.getPieceColor(square)\r\n        let piece = this.getPiece(square)\r\n\r\n        //disable castling if the king moves\r\n        if (piece == \"king\") {\r\n            if (this.isColorWhite(color)) {\r\n                this.setState({ canWhiteLongCastle: false, canWhiteShortCastle: false })\r\n            } else {\r\n                this.setState({ canBlackLongCastle: false, canBlackShortCastle: false })\r\n            }\r\n        }\r\n\r\n        //disable castling if the rook moves\r\n        if (piece == \"rook\") {\r\n            if (square.props.x == 7 && square.props.y == 7) {\r\n                this.setState({ canWhiteShortCastle: false })\r\n            }\r\n\r\n            if (square.props.x == 0 && square.props.y == 7) {\r\n                this.setState({ canBlackShortCastle: false })\r\n            }\r\n\r\n            if (square.props.x == 7 && square.props.y == 0) {\r\n                this.setState({ canWhiteLongCastle: false })\r\n            }\r\n\r\n            if (square.props.x == 0 && square.props.y == 0) {\r\n                this.setState({ canBlackLongCastle: false })\r\n            }\r\n        }\r\n\r\n        let p = UpdatePosition(square, targetSquare, this.state.position)\r\n\r\n        //capturing enPassant\r\n        if (this.state.enPassantX && this.state.enPassantY && this.state.enPassantPossible) {\r\n            let enPassantTargetSquare = color == \"white\" ? squares.find(s => s.props.x == x + 1 && s.props.y == y) : squares.find(s => s.props.x == x - 1 && s.props.y == y)\r\n            let enPassantSquare = <Square x={square.props.x} y={square.props.y} piece={\"\"} />\r\n\r\n            p = UpdatePosition(enPassantSquare, enPassantTargetSquare, p)\r\n        }\r\n\r\n        this.setState({ position: p, possibleMoves: [], isWhiteToMove: !this.state.isWhiteToMove })\r\n\r\n        //enabling en passant\r\n        if (piece == \"pawn\") {\r\n            if (Math.abs(square.props.x - targetSquare.props.x) == 2) {\r\n                let enPassant1 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y - 1)\r\n                let enPassant2 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y + 1)\r\n\r\n                if (enPassant1) {\r\n                    if (enPassant1.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (enPassant1.props.piece.split(\"-\")[0] != color) {\r\n                            this.setState({ enPassantPossible: true, enPassantX: targetSquare.props.x, enPassantY: targetSquare.props.y })\r\n                            return\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (enPassant2) {\r\n                    if (enPassant2.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (enPassant2.props.piece.split(\"-\")[0] != color) {\r\n                            this.setState({ enPassantPossible: true, enPassantX: targetSquare.props.x, enPassantY: targetSquare.props.y })\r\n                            return\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({ enPassantPossible: false, enPassantX: \"\", enPassantY: \"\" })\r\n    }\r\n\r\n    //updates the state with the possible moves\r\n    updatePossibleMoves = (moves) => {\r\n        this.setState({ possibleMoves: moves });\r\n    };\r\n\r\n    //updates the state with the selectedSquare X coordinates\r\n    updateSelectedSquareX = (x) => {\r\n        this.setState({ selectedSquareX: x })\r\n    }\r\n\r\n    //updates the state with the selectedSquare Y coordinates\r\n    updateSelectedSquareY = (y) => {\r\n        this.setState({ selectedSquareY: y })\r\n    }\r\n\r\n    //retrieves a speecific square from the board using x and y coordinates (location)\r\n    getATargetSquareByLocation(x, y) {\r\n        let squares = this.state.boardSquare\r\n\r\n        return squares.find(s => s.props.x === x && s.props.y === y);\r\n    }\r\n\r\n    //retrieves a speecific square from the board that has a certain piece\r\n    getATargetSquareByPiece(piece) {\r\n        let squares = this.state.boardSquare\r\n\r\n        return squares.find(s => s.props.piece == piece);\r\n    }\r\n\r\n    //check if a specific square has a piece assigned to it\r\n    isSquareAvailable(square) {\r\n        return square && !square.props.piece\r\n    }\r\n\r\n    //checks if a pawn is on its starting square and allows a 2-squares move\r\n    isPawnOnStartingSquare(pawn) {\r\n        return this.isColorWhite(pawn.props.piece.split(PIECE_DELIMITER)[0]) ? pawn.props.x == 6 : pawn.props.x == 1\r\n    }\r\n\r\n    //checks if two pieces have the same color\r\n    areSameColor(square1, square2) {\r\n        if (!square1 || !square2) {\r\n            return\r\n        }\r\n\r\n        let color1 = square1.props.piece.split(PIECE_DELIMITER)[0];\r\n        let color2 = square2.props.piece.split(PIECE_DELIMITER)[0];\r\n\r\n        return color1 == color2\r\n    }\r\n\r\n    //checks if a square contains a certain piece\r\n    doesTheSquareHasThePiece(square, piece) {\r\n        let p = this.getPiece(square)\r\n\r\n        return p == piece\r\n    }\r\n\r\n    //cheks if a pawn is on En Passant square\r\n    isPawnOnEnPassantSquare(pawn) {\r\n        return this.isColorWhite(pawn.props.piece.split(PIECE_DELIMITER)[0]) ? pawn.props.x == 3 : pawn.props.x == 4\r\n    }\r\n\r\n    //checks if a color is white\r\n    isColorWhite(color) {\r\n        return color == WHITE\r\n    }\r\n\r\n    //checks if a color is black\r\n    isColorBlack(color) {\r\n        return color == BLACK\r\n    }\r\n\r\n    //checks if white is allowed to long castle\r\n    canWhiteLongCastle() {\r\n        return this.state.canWhiteLongCastle &&\r\n            this.state.boardPostition[7][0] == 'R' &&\r\n            this.state.boardPostition[7][1] == '' &&\r\n            this.state.boardPostition[7][2] == '' &&\r\n            this.state.boardPostition[7][3] == '';\r\n    }\r\n\r\n    //checks if white is allowed to short castle\r\n    canWhiteShortCastle() {\r\n        return this.state.canWhiteShortCastle &&\r\n            this.state.boardPostition[7][7] == 'R' &&\r\n            this.state.boardPostition[7][6] == '' &&\r\n            this.state.boardPostition[7][5] == '';\r\n    }\r\n\r\n    //checks if black is allowed to long castle\r\n    canBlackLongCastle() {\r\n        return this.state.canBlackLongCastle &&\r\n            this.state.boardPostition[0][0] == 'r' &&\r\n            this.state.boardPostition[0][1] == '' &&\r\n            this.state.boardPostition[0][2] == '' &&\r\n            this.state.boardPostition[0][3] == '';\r\n    }\r\n\r\n    //checks if black is allowed to short castle\r\n    canBlackShortCastle() {\r\n        return this.state.canBlackShortCastle &&\r\n            this.state.boardPostition[7][7] == 'r' &&\r\n            this.state.boardPostition[7][6] == '' &&\r\n            this.state.boardPostition[7][5] == '';\r\n    }\r\n\r\n    //converts board coordinates to X and Y position on the board, e.g., a8 = 0, 0\r\n    convertCoordinatesToLocation(coordinates) {\r\n        let tokens = coordinates.split('')\r\n\r\n        //skip invalid coordinates\r\n        if (tokens.length != 2) {\r\n            return\r\n        }\r\n\r\n        let letter = tokens[0].toString().toUpperCase()\r\n        let number = tokens[1]\r\n\r\n        //65 is the ASCII code for capital A which will give us 0 if we have A as a coordinate; A-F will give us 0-7 for x\r\n        //reverse the numbers since we draw the board top down\r\n        return { x: letter.charCodeAt(0) - 65, y: DIM - Number(number) }\r\n    }\r\n\r\n    //gets all possible moves for a pawn\r\n    getPawnsPossibleMoves(square) {\r\n        let color = this.getPieceColor(square) //get the piece color\r\n\r\n        let moves = []\r\n\r\n        let position1Offset = 1\r\n        let position2Offset = 2\r\n\r\n        //flips the direction if the color is white\r\n        if (this.isColorWhite(color)) {\r\n            position1Offset *= -1\r\n            position2Offset *= -1\r\n        }\r\n\r\n        //get all forwards moves + the double move at the start\r\n        let targetPiece1 = this.getATargetSquareByLocation(square.props.x + position1Offset, square.props.y) //move pawn 1 square ahead\r\n        let targetPiece2 = this.getATargetSquareByLocation(square.props.x + position2Offset, square.props.y) //move pawn 2 squares ahead\r\n\r\n        //get potential neighbors to capture\r\n        let neighbor1 = this.getATargetSquareByLocation(square.props.x + position1Offset, square.props.y + position1Offset)\r\n        let neighbor2 = this.getATargetSquareByLocation(square.props.x + position1Offset, square.props.y + (position1Offset * -1))\r\n\r\n        //get the En Passant coordinates\r\n        let enPassantCordinates = this.convertCoordinatesToLocation(this.state.enPassant)\r\n        let enPassant = enPassantCordinates ? this.getATargetSquareByLocation(enPassantCordinates.x, enPassantCordinates.y) : ''\r\n\r\n        let isTheSquareInFrontAvailable = this.isSquareAvailable(targetPiece1)\r\n\r\n        //push the one move forward for a pawn\r\n        if (isTheSquareInFrontAvailable) {\r\n            moves.push(targetPiece1)\r\n        }\r\n\r\n        //two moves are allowed only if the two squares above are free/empty\r\n        //allowed if pawn hasn't moved before\r\n        if (isTheSquareInFrontAvailable && this.isSquareAvailable(targetPiece2) && this.isPawnOnStartingSquare(square)) {\r\n            moves.push(targetPiece2)\r\n        }\r\n\r\n        //push neighbour if there is a piece to capture and it's a different color than the pawn\r\n        if (!this.isSquareAvailable(neighbor1) && !this.areSameColor(neighbor1, square)) {\r\n            moves.push(neighbor1)\r\n        }\r\n\r\n        //push neighbour if there is a piece to capture and it's a different color than the pawn\r\n        if (!this.isSquareAvailable(neighbor2) && !this.areSameColor(neighbor2, square)) {\r\n            moves.push(neighbor2)\r\n        }\r\n\r\n        //add En Passant\r\n        if (enPassant) {\r\n            moves.push(enPassant)\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a rook\r\n    getRooksPossibleMoves(square) {\r\n        let moves = []\r\n\r\n        for (let i = square.props.x + 1; i < DIM; i++) {\r\n            let targetSquare = this.getATargetSquareByLocation(i, square.props.y)\r\n\r\n            if (this.isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!this.areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break\r\n            }\r\n        }\r\n\r\n        for (let i = square.props.x - 1; i >= 0; i--) {\r\n            let targetSquare = this.getATargetSquareByLocation(i, square.props.y)\r\n\r\n            if (this.isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!this.areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = square.props.y + 1; i < DIM; i++) {\r\n            let targetSquare = this.getATargetSquareByLocation(square.props.x, i)\r\n\r\n            if (this.isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!this.areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break\r\n            }\r\n        }\r\n\r\n        for (let i = square.props.y - 1; i >= 0; i--) {\r\n            let targetSquare = this.getATargetSquareByLocation(square.props.x, i)\r\n\r\n            if (this.isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!this.areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break\r\n            }\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a bishop\r\n    getBishopPossibleMoves(square) {\r\n        let moves = []\r\n\r\n        let counter = 0;\r\n\r\n        for (let i = 1; i <= DIM; i++) {\r\n            if (counter == 5) {\r\n                break;\r\n            }\r\n\r\n            let target1 = this.getATargetSquareByLocation(square.props.x - i, square.props.y - i)\r\n            let target2 = this.getATargetSquareByLocation(square.props.x - i, square.props.y + i)\r\n            let target3 = this.getATargetSquareByLocation(square.props.x + i, square.props.y + i)\r\n            let target4 = this.getATargetSquareByLocation(square.props.x + i, square.props.y - i)\r\n\r\n            if (target1 && this.isSquareAvailable(target1) && counter < 1) {\r\n                moves.push(target1)\r\n            } else {\r\n                if (!this.areSameColor(square, target1)) {\r\n                    moves.push(target1)\r\n                }\r\n                counter++;\r\n            }\r\n\r\n            if (target2 && this.isSquareAvailable(target2) && counter < 2) {\r\n                moves.push(target2)\r\n            } else {\r\n                if (!this.areSameColor(square, target2)) {\r\n                    moves.push(target2)\r\n                }\r\n                counter++;\r\n            }\r\n\r\n            if (target3 && this.isSquareAvailable(target3) && counter < 3) {\r\n                moves.push(target3)\r\n            } else {\r\n                if (!this.areSameColor(square, target3)) {\r\n                    moves.push(target3)\r\n                }\r\n                counter++;\r\n            }\r\n\r\n            if (target4 && this.isSquareAvailable(target4) && counter < 4) {\r\n                moves.push(target4)\r\n            } else {\r\n                if (!this.areSameColor(square, target4)) {\r\n                    moves.push(target4)\r\n                }\r\n                counter++;\r\n            }\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a knight\r\n    getKnightPossibleMoves(square) {\r\n        let offset = 1;\r\n        let doubleOffset = 2 * offset;\r\n\r\n        let moves = []\r\n\r\n        for (let i = 0; i < 8; i++) {\r\n            if (i != 0 && i % 2 == 0) {\r\n                offset *= -1;\r\n            }\r\n\r\n            let targetX = square.props.x + offset;\r\n            let targetY = square.props.y + doubleOffset;\r\n\r\n            let target = this.getATargetSquareByLocation(targetX, targetY)\r\n\r\n            if (target && this.isSquareAvailable(target)) {\r\n                moves.push(target)\r\n            } else {\r\n                if (!this.areSameColor(square, target)) {\r\n                    moves.push(target)\r\n                }\r\n            }\r\n\r\n            doubleOffset *= -1\r\n\r\n            if (i == 4) {\r\n                offset *= 2\r\n                doubleOffset /= 2\r\n            }\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a king\r\n    getKingPossibleMoves(square) {\r\n        let moves = []\r\n\r\n        let color = this.getPieceColor(square)\r\n\r\n        //gets all possible 1-square moves for the king\r\n        for (let i = -1; i < 2; i++) {\r\n            for (let j = -1; j < 2; j++) {\r\n                let targetPiece = this.getATargetSquareByLocation(square.props.x + i, square.props.y + j)\r\n\r\n                if (targetPiece && this.isSquareAvailable(targetPiece)) {\r\n                    moves.push(targetPiece)\r\n                } else {\r\n                    if (!this.areSameColor(square, targetPiece)) {\r\n                        moves.push(targetPiece)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //Castling logic\r\n        const longCastleSquare = this.getATargetSquareByLocation(square.props.x, square.props.y - 2)\r\n        const shortCastleSquare = this.getATargetSquareByLocation(square.props.x, square.props.y + 2)\r\n\r\n        if (this.isColorWhite(color) && this.canWhiteLongCastle()) {\r\n            moves.push(longCastleSquare)\r\n        }\r\n\r\n        if (this.isColorWhite(color) && this.canWhiteShortCastle()) {\r\n            moves.push(shortCastleSquare)\r\n        }\r\n\r\n        if (this.isColorBlack(color) && this.canBlackLongCastle()) {\r\n            moves.push(longCastleSquare)\r\n        }\r\n\r\n        if (this.isColorBlack(color) && this.canBlackShortCastle()) {\r\n            moves.push(shortCastleSquare)\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a queen\r\n    getQueenPossibleMoves(square) {\r\n        let moves = []\r\n\r\n        //a queen has the same moves as a bishop and a rook\r\n        const rookMoves = this.getRooksPossibleMoves(square).moves;\r\n        const bishopMoves = this.getBishopPossibleMoves(square).moves;\r\n\r\n        // Concatenate the arrays of moves\r\n        moves.push(...rookMoves, ...bishopMoves);\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets the piece color\r\n    getPieceColor(square) {\r\n        return square.props.piece.split(PIECE_DELIMITER)[0]\r\n    }\r\n\r\n    //gets the piece\r\n    getPiece(square) {\r\n        return square.props.piece.split(PIECE_DELIMITER)[1]\r\n    }\r\n\r\n    //removes moves that do not deal with a check\r\n    filterMovesIfInCheck(possibleMoves) {\r\n        let blackKing = this.getATargetSquareByPiece(BLACK_KING) //get the black king\r\n        let whiteKing = this.getATargetSquareByPiece(WHITE_KING) //get the white king\r\n\r\n        for (let i = 0; i < possibleMoves.length; i++) {\r\n            for (let j = 0; j < possibleMoves[i].moves; j++) {\r\n                if (possibleMoves[i].piece.props.piece == BLACK_KING) {\r\n                    let move = <Square x={possibleMoves[i].moves[j].x} y={possibleMoves[i].moves[j].y} piece={\"black-king\"} />\r\n                    let pseudo = <Square x={blackKing.props.x} y={blackKing.props.y} piece={\"\"} />\r\n                    let isInCheck = this.isBlackInCheck(move, pseudo)\r\n\r\n                    if (isInCheck) {\r\n                        possibleMoves[i].moves.splice(j, 1);\r\n                        j--;\r\n                    }\r\n                } else if (possibleMoves[i].piece.props.piece == WHITE_KING) {\r\n                    let move = <Square x={possibleMoves[i].moves[j].x} y={possibleMoves[i].moves[j].y} piece={\"white-king\"} />\r\n                    let pseudo = <Square x={whiteKing.props.x} y={whiteKing.props.y} piece={\"\"} />\r\n                    let isInCheck = this.isWhiteInCheck(move, pseudo)\r\n\r\n                    if (isInCheck) {\r\n                        possibleMoves[i].moves.splice(j, 1);\r\n                        j--;\r\n                    }\r\n                } else {\r\n                    let move = <Square x={possibleMoves[i].moves[j].x} y={possibleMoves[i].moves[j].y} piece={possibleMoves[i].piece.props.piece} />\r\n                    let isInCheck = this.isBlackInCheck(blackKing, move) ? true : this.isWhiteInCheck(whiteKing, move)\r\n\r\n                    if (isInCheck) {\r\n                        possibleMoves[i].moves.splice(j, 1);\r\n                        j--;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return possibleMoves\r\n    }\r\n\r\n    //removes moves that allow illigal castling (castles through check for example)\r\n    filterMovesThatAllowIllegalCastling(possibleMoves) {\r\n        let blackKing = this.getATargetSquareByPiece(BLACK_KING) //get the black king\r\n        let whiteKing = this.getATargetSquareByPiece(WHITE_KING) //get the white king\r\n\r\n        for (let i = 0; i < possibleMoves.length; i++) {\r\n            let whiteCastle1 = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 6) //sqaure where king will be after short castle (white)\r\n            let whiteCastle2 = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 2) //sqaure where king will be after long castle (white)\r\n            let blackCastle1 = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 6) //square where king will be after shot castle (black)\r\n            let blackCastle2 = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 2) //square where king will be after long castle (black)\r\n\r\n            if (possibleMoves[i].piece == blackKing || possibleMoves[i].piece == whiteKing) {\r\n                if (whiteCastle1) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.x == 7 && m.y == 5)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n\r\n                if (whiteCastle2) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.x == 7 && m.y == 3)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n\r\n                if (blackCastle1) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.x == 0 && m.y == 5)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n\r\n                if (blackCastle2) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.x == 0 && m.y == 3)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n            }\r\n\r\n            //prevents black to castle if in check\r\n            if (this.isBlackInCheck(blackKing)) {\r\n                if (blackCastle1) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove), 1)\r\n                }\r\n\r\n                if (blackCastle2) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove2), 1)\r\n                }\r\n            }\r\n\r\n            //prevents white to castle if in check\r\n            if (this.isWhiteInCheck(whiteKing)) {\r\n                if (whiteCastle1) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove), 1)\r\n                }\r\n\r\n                if (whiteCastle2) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove2), 1)\r\n                }\r\n            }\r\n        }\r\n\r\n        return possibleMoves\r\n    }\r\n\r\n    //removes empty/undefined values for generated moves\r\n    removeEmptyMoves(possibleMoves) {\r\n        for (let i = 0; i < possibleMoves.length; i++) {\r\n            if (possibleMoves[i].moves.length == 0) {\r\n                possibleMoves.splice(i, 1)\r\n                i--;\r\n                continue;\r\n            }\r\n\r\n            for (let j = 0; j < possibleMoves[i].moves.length; j++) {\r\n                if (!possibleMoves[i].moves[j]) {\r\n                    possibleMoves[i].moves.splice(j, 1);\r\n                    j--;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possibleMoves\r\n    }\r\n\r\n    //gets all possible/legal moves\r\n    getPossibleMoves(square) {\r\n        let possibleMoves = [];\r\n\r\n        //if the square has a piece\r\n        if (square.props.piece) {\r\n            let color = this.getPieceColor(square); //get the piece color\r\n\r\n            //don't collect possible moves if it's black to move and you're trying to move a white piece\r\n            if (this.isColorWhite(color) && !this.state.isWhiteToMove) {\r\n                return\r\n            }\r\n\r\n            //don't collect possible moves if it's white to move and you're trying to move a black piece\r\n            if (this.isColorBlack(color) && this.state.isWhiteToMove) {\r\n                return\r\n            }\r\n\r\n            //get all possible moves for each piece\r\n            possibleMoves.push(this.getPawnsPossibleMoves(square))\r\n            possibleMoves.push(this.getRooksPossibleMoves(square))\r\n            possibleMoves.push(this.getBishopPossibleMoves(square))\r\n            possibleMoves.push(this.getKnightPossibleMoves(square))\r\n            possibleMoves.push(this.getKingPossibleMoves(square))\r\n            possibleMoves.push(this.getQueenPossibleMoves(square))\r\n\r\n            //filter empty moves\r\n            possibleMoves = this.removeEmptyMoves(possibleMoves);\r\n\r\n            //filter possible moves\r\n            possibleMoves = this.filterMovesIfInCheck(possibleMoves)\r\n            possibleMoves = this.filterMovesThatAllowIllegalCastling(possibleMoves)\r\n        }\r\n\r\n        console.log(\"Possible Moves:\", possibleMoves);\r\n\r\n        updateSquaresWithMoves(possibleMoves)\r\n\r\n        this.updatePossibleMoves(possibleMoves);\r\n    }\r\n\r\n    //renders the board\r\n    render() {\r\n        return (\r\n            <div className=\"chessGrid\">\r\n                {this.state.boardSquare.map((sqr) => sqr)}\r\n            </div>\r\n        );\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}