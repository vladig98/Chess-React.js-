{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vladi Gotsin\\\\Desktop\\\\react\\\\Chess-React.js-\\\\src\\\\Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport * as HelperMethods from \"./HelperMethods.js\";\nimport * as GlobalVariables from \"./globalVariables.js\";\nimport * as MoveHandling from './MoveHandler.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Board() {\n  _s();\n  /// <summary>\n  /// FEN - Forsyth-Edwards Notation\n  /// small letters - black pieces\n  /// capital letters - white pieces\n  /// numbers - empty board squares\n  /// (/) - separates each board row\n  /// first letter after the board indicates whose turn it is to move (w - white, b - black)\n  /// next letters indicate castling rights, k - king-side, q - queen-side, (-) - no castling allowed for any side\n  /// en passant square - when a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square\n  /// the number of half turns (white moves, then black moves = 2 half moves) that were made without a pawn move or a capture of a piece (50-move rule when reaches 100)\n  /// the number of full moves (white moves, then black moves = 1 full move); increase after every black half move\n  /// </summary>\n  /// <example>\n  /// Starting position:\n  /// 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\n  /// Examples of FEN positions:\n  /// 'r1bqk2r/pppp1ppp/2n5/8/1bBPn3/2N2N2/PP3PPP/R1BQK2R w KQkq - 0 8'\n  /// 'r1bqk2r/pppp1ppp/2n2n2/2b5/2BPP3/5N2/PP3PPP/RNBQK2R b KQkq - 0 6'\n  /// 'r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21'\n  /// </example>\n  const [fen, setFen] = useState('r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21');\n\n  /// <summary>\n  /// State to manage possible moves for a piece.\n  /// </summary>\n  const [isPossibleMove, setIsPossibleMove] = useState([]);\n\n  /// <summary>\n  /// State to manage the squares on the board.\n  /// </summary>\n  const [boardSquares, setBoardSquares] = useState([]);\n\n  /// <summary>\n  /// Reference to the isPossibleMove state to avoid stale closures.\n  /// </summary>\n  const isPossibleMoveRef = useRef(isPossibleMove);\n\n  /// <summary>\n  /// Reference to the boardSquares state to avoid stale closures.\n  /// </summary>\n  const boardSquaresRef = useRef(boardSquares);\n\n  /**\r\n   * Updates the possible move array.\r\n   * If a square is a possible move, it will receive a circle indicating you can move there.\r\n   * \r\n   * @param {string} key - The key of the item to update.\r\n   * @param {boolean} value - The new value to set for the item.\r\n   */\n  const updateIsPossibleMove = (key, value) => {\n    // We are updating the state based on the previous state to resolve the issue with pending state and queue in React\n    setIsPossibleMove(prevState => prevState.map(item =>\n    // If the current item's key matches the key we're looking for,\n    // copy all properties of the object in a new object using the spread syntax (...),\n    // modify the value property to whatever value we're using,\n    // copy the original item if no modifications are needed\n    item.key === key ? {\n      ...item,\n      value: value\n    } : item));\n  };\n\n  /**\r\n   * Updates the reference to the isPossibleMove array whenever we set a new value to the array.\r\n   */\n  useEffect(() => {\n    isPossibleMoveRef.current = isPossibleMove;\n    setBoardSquares(HelperMethods.fenParser(fen, isPossibleMoveRef.current, movePiece, resetPossibleMoves, false));\n  }, [isPossibleMove]);\n\n  /**\r\n   * Called when the page loads.\r\n   * Removes all circles from squares indicating that they can be clicked to move a piece there.\r\n   * Parses the FEN to fill in the board.\r\n   */\n  useEffect(() => {\n    resetPossibleMoves();\n    setBoardSquares(HelperMethods.fenParser(fen, isPossibleMoveRef.current, movePiece, resetPossibleMoves));\n  }, []);\n\n  /**\r\n   * Parses the FEN and fills in the board with the new position when the FEN updates.\r\n   */\n  useEffect(() => {\n    setBoardSquares(HelperMethods.fenParser(fen, isPossibleMoveRef.current, movePiece, resetPossibleMoves));\n  }, [fen]);\n\n  /**\r\n   * Updates the reference to the BoardSquares array whenever we set a new value to the array.\r\n   */\n  useEffect(() => {\n    boardSquaresRef.current = boardSquares;\n  }, [boardSquares]);\n\n  /**\r\n  * Resets possible moves highlighting.\r\n  */\n  function resetPossibleMoves() {\n    const initialIsPossibleMove = [];\n    for (let i = 0; i < GlobalVariables.DIM; i++) {\n      for (let j = 0; j < GlobalVariables.DIM; j++) {\n        initialIsPossibleMove.push({\n          key: `${i}-${j}`,\n          value: false\n        });\n      }\n    }\n    setIsPossibleMove(initialIsPossibleMove);\n  }\n\n  /**\r\n   * Updates the `isPossibleMove` array based on the `PossibleMoves` array and forces a component update \r\n   * of the square to visually indicate the circles showing a move is possible.\r\n   * \r\n   * This function iterates through the `PossibleMoves` array to find moves that match the currently \r\n   * selected square. For each matching move, it updates the `isPossibleMove` array to true, indicating \r\n   * that a move is possible, which will trigger the visual indication on the chessboard.\r\n   */\n  function updatePossibleMovesVisually() {\n    for (let i = 0; i < GlobalVariables.PossibleMoves.length; i++) {\n      if (HelperMethods.checkIfAMoveIsEqualToTheCurrentSelectedSquare(GlobalVariables.PossibleMoves[i].piece)) {\n        for (let j = 0; j < GlobalVariables.PossibleMoves[i].moves.length; j++) {\n          updateIsPossibleMove(`${GlobalVariables.PossibleMoves[i].moves[j].props.x}-${GlobalVariables.PossibleMoves[i].moves[j].props.y}`, true);\n        }\n      }\n    }\n  }\n\n  /**\r\n   * Disables castling rights if the king or a rook moves.\r\n   * @param {object} square - The square containing the piece that moved.\r\n   */\n  function disableCastlingIfKingOrRookMoves(square) {\n    const color = HelperMethods.getPieceColor(square);\n    const piece = HelperMethods.getPiece(square);\n    const isWhite = HelperMethods.isColorWhite(color);\n    const updateCastlingRights = (color, type, value) => {\n      GlobalVariables.CastlingRights[`${color}${type}Castle`] = value;\n    };\n    if (piece === GlobalVariables.PIECES.KING) {\n      updateCastlingRights(isWhite ? 'white' : 'black', 'Long', false);\n      updateCastlingRights(isWhite ? 'white' : 'black', 'Short', false);\n    }\n    if (piece === GlobalVariables.PIECES.ROOK) {\n      const {\n        x,\n        y\n      } = square.props;\n      const rookPositions = [{\n        row: GlobalVariables.CASTLE_ROW_WHITE,\n        col: GlobalVariables.CASTLE_ROOK_INITIAL_COL_SHORT,\n        type: 'Short',\n        color: 'white'\n      }, {\n        row: GlobalVariables.CASTLE_ROW_BLACK,\n        col: GlobalVariables.CASTLE_ROOK_INITIAL_COL_SHORT,\n        type: 'Short',\n        color: 'black'\n      }, {\n        row: GlobalVariables.CASTLE_ROW_WHITE,\n        col: GlobalVariables.CASTLE_ROOK_INITIAL_COL_LONG,\n        type: 'Long',\n        color: 'white'\n      }, {\n        row: GlobalVariables.CASTLE_ROW_BLACK,\n        col: GlobalVariables.CASTLE_ROOK_INITIAL_COL_LONG,\n        type: 'Long',\n        color: 'black'\n      }];\n      rookPositions.forEach(pos => {\n        if (x === pos.row && y === pos.col) {\n          updateCastlingRights(pos.color, pos.type, false);\n        }\n      });\n    }\n  }\n  function enableEnPassant(square, targetSquare) {\n    const color = HelperMethods.getPieceColor(square);\n    const piece = HelperMethods.getPiece(square);\n    const isWhite = HelperMethods.isColorWhite(color);\n\n    //enabling en passant\n    if (piece == GlobalVariables.PIECES.PAWN && Math.abs(square.props.x - targetSquare.props.x) == 2) {\n      if (isWhite) {\n        GlobalVariables.EnPassant.isPossible = true;\n        GlobalVariables.EnPassant.x = square.props.x - 1;\n        GlobalVariables.EnPassant.y = square.props.y;\n      } else {\n        GlobalVariables.EnPassant.isPossible = true;\n        GlobalVariables.EnPassant.x = square.props.x + 1;\n        GlobalVariables.EnPassant.y = square.props.y;\n      }\n\n      // let enPassant1 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y - 1)\n      // let enPassant2 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y + 1)\n\n      // if (enPassant1) {\n      //     if (enPassant1.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\n      //         if (enPassant1.props.piece.split(PIECE_DELIMITER)[0] != color) {\n      //             EnPassant.isPossible = true\n      //             EnPassant.x = targetSquare.props.x\n      //             EnPassant.y = targetSquare.props.y\n      //             return\n      //         }\n      //     }\n      // }\n\n      // if (enPassant2) {\n      //     if (enPassant2.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\n      //         if (enPassant2.props.piece.split(PIECE_DELIMITER)[0] != color) {\n      //             EnPassant.isPossible = true\n      //             EnPassant.x = targetSquare.props.x\n      //             EnPassant.y = targetSquare.props.y\n      //             return\n      //         }\n      //     }\n      // }\n    } else {\n      GlobalVariables.EnPassant.isPossible = false;\n      GlobalVariables.EnPassant.x = -1;\n      GlobalVariables.EnPassant.y = -1;\n    }\n  }\n\n  /**\r\n   * Handles moving a piece to a new location.\r\n   * @param {number} x - The X coordinate.\r\n   * @param {number} y - The Y coordinate.\r\n   */\n  function movePiece(x, y) {\n    let squares = boardSquares;\n    let position = GlobalVariables.BoardPosition;\n    let targetSquare = HelperMethods.getATargetSquareByLocation(x, y, boardSquaresRef.current);\n    let square = squares.find(s => HelperMethods.checkIfAMoveIsEqualToTheCurrentSelectedSquare(s));\n    let color = HelperMethods.getPieceColor(square);\n    let piece = HelperMethods.getPiece(square);\n    disableCastlingIfKingOrRookMoves(square);\n    let p = HelperMethods.updateBoardPosition(square, targetSquare, position);\n\n    //capturing enPassant\n    // if (EnPassant.isPossible) {\n    //     let enPassantTargetSquare = color == COLORS.WHITE ? squares.find(s => s.props.x == x + 1 && s.props.y == y) : squares.find(s => s.props.x == x - 1 && s.props.y == y)\n    //     let enPassantSquare = <Square x={square.props.x} y={square.props.y} piece={\"\"} />\n\n    //     p = UpdatePosition(enPassantSquare, enPassantTargetSquare, p)\n    // }\n\n    const updatedBoardPosition = p.map(row => [...row]);\n    GlobalVariables.BoardPosition.splice(0, GlobalVariables.BoardPosition.length, ...updatedBoardPosition);\n    GlobalVariables.PossibleMoves.splice(0, GlobalVariables.PossibleMoves.length);\n    GlobalVariables.updateIsWhiteToMove(!GlobalVariables.IsWhiteToMove);\n    enableEnPassant(square, targetSquare);\n    GlobalVariables.updateFullMoves(GlobalVariables.FullMoves + 1);\n    HelperMethods.generateANewFen();\n  }\n\n  /**\r\n   * Gets possible moves for a piece.\r\n   * @param {object} square - The square object.\r\n   */\n  function getPossibleMoves() {\n    //let square = getATargetSquareByLocation(x, y)\n    let possiblePieceMoves = [];\n    let squares = boardSquares;\n    for (let i = 0; i < squares.length; i++) {\n      let square = squares[i];\n\n      //if the square has a piece\n      if (square.props.piece) {\n        let color = HelperMethods.getPieceColor(square); //get the piece color\n\n        //don't collect possible moves if it's black to move and you're trying to move a white piece\n        if (HelperMethods.isColorWhite(color) && !GlobalVariables.IsWhiteToMove) {\n          //console.log(`Skipping because it's black to move and you're moving a white piece, x: ${square.props.x}, y: ${square.props.y}`)\n          continue;\n        }\n\n        //don't collect possible moves if it's white to move and you're trying to move a black piece\n        if (HelperMethods.isColorBlack(color) && GlobalVariables.IsWhiteToMove) {\n          //console.log(`Skipping because it's white to move and you're moving a black piece, x: ${square.props.x}, y: ${square.props.y}`)\n          continue;\n        }\n\n        //console.log(`Getting possible moves, x: ${square.props.x}, y: ${square.props.y}`)\n        //get all possible moves for each piece\n        console.log(square, squares);\n        possiblePieceMoves = MoveHandling.getAllPossibleMoves(square, squares);\n\n        //filter empty moves\n        possiblePieceMoves = removeEmptyMoves(possiblePieceMoves);\n\n        //filter possible moves\n        possiblePieceMoves = filterMovesIfInCheck(possiblePieceMoves);\n        possiblePieceMoves = filterMovesThatAllowIllegalCastling(possiblePieceMoves);\n      }\n    }\n    console.log(\"Possible Moves:\", possiblePieceMoves);\n    console.log('Moves count', possiblePieceMoves.reduce((sum, pieceMove) => sum + pieceMove.moves.length, 0));\n    GlobalVariables.PossibleMoves.splice(0, GlobalVariables.PossibleMoves.length, ...possiblePieceMoves);\n    updatePossibleMovesVisually();\n  }\n\n  //renders the board\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessGrid\",\n      children: boardSquares.map(sqr => sqr)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Board, \"IVJugR7YzpxWBiVdY41x4HwgqNQ=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useEffect","useRef","HelperMethods","GlobalVariables","MoveHandling","jsxDEV","_jsxDEV","Fragment","_Fragment","Board","_s","fen","setFen","isPossibleMove","setIsPossibleMove","boardSquares","setBoardSquares","isPossibleMoveRef","boardSquaresRef","updateIsPossibleMove","key","value","prevState","map","item","current","fenParser","movePiece","resetPossibleMoves","initialIsPossibleMove","i","DIM","j","push","updatePossibleMovesVisually","PossibleMoves","length","checkIfAMoveIsEqualToTheCurrentSelectedSquare","piece","moves","props","x","y","disableCastlingIfKingOrRookMoves","square","color","getPieceColor","getPiece","isWhite","isColorWhite","updateCastlingRights","type","CastlingRights","PIECES","KING","ROOK","rookPositions","row","CASTLE_ROW_WHITE","col","CASTLE_ROOK_INITIAL_COL_SHORT","CASTLE_ROW_BLACK","CASTLE_ROOK_INITIAL_COL_LONG","forEach","pos","enableEnPassant","targetSquare","PAWN","Math","abs","EnPassant","isPossible","squares","position","BoardPosition","getATargetSquareByLocation","find","s","p","updateBoardPosition","updatedBoardPosition","splice","updateIsWhiteToMove","IsWhiteToMove","updateFullMoves","FullMoves","generateANewFen","getPossibleMoves","possiblePieceMoves","isColorBlack","console","log","getAllPossibleMoves","removeEmptyMoves","filterMovesIfInCheck","filterMovesThatAllowIllegalCastling","reduce","sum","pieceMove","children","className","sqr","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/Chess-React.js-/src/Board.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport * as HelperMethods from \"./HelperMethods.js\";\r\nimport * as GlobalVariables from \"./globalVariables.js\"\r\nimport * as MoveHandling from './MoveHandler.js'\r\n\r\nfunction Board() {\r\n    /// <summary>\r\n    /// FEN - Forsyth-Edwards Notation\r\n    /// small letters - black pieces\r\n    /// capital letters - white pieces\r\n    /// numbers - empty board squares\r\n    /// (/) - separates each board row\r\n    /// first letter after the board indicates whose turn it is to move (w - white, b - black)\r\n    /// next letters indicate castling rights, k - king-side, q - queen-side, (-) - no castling allowed for any side\r\n    /// en passant square - when a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square\r\n    /// the number of half turns (white moves, then black moves = 2 half moves) that were made without a pawn move or a capture of a piece (50-move rule when reaches 100)\r\n    /// the number of full moves (white moves, then black moves = 1 full move); increase after every black half move\r\n    /// </summary>\r\n    /// <example>\r\n    /// Starting position:\r\n    /// 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\r\n    /// Examples of FEN positions:\r\n    /// 'r1bqk2r/pppp1ppp/2n5/8/1bBPn3/2N2N2/PP3PPP/R1BQK2R w KQkq - 0 8'\r\n    /// 'r1bqk2r/pppp1ppp/2n2n2/2b5/2BPP3/5N2/PP3PPP/RNBQK2R b KQkq - 0 6'\r\n    /// 'r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21'\r\n    /// </example>\r\n    const [fen, setFen] = useState('r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21');\r\n\r\n    /// <summary>\r\n    /// State to manage possible moves for a piece.\r\n    /// </summary>\r\n    const [isPossibleMove, setIsPossibleMove] = useState([]);\r\n\r\n    /// <summary>\r\n    /// State to manage the squares on the board.\r\n    /// </summary>\r\n    const [boardSquares, setBoardSquares] = useState([]);\r\n\r\n    /// <summary>\r\n    /// Reference to the isPossibleMove state to avoid stale closures.\r\n    /// </summary>\r\n    const isPossibleMoveRef = useRef(isPossibleMove);\r\n\r\n    /// <summary>\r\n    /// Reference to the boardSquares state to avoid stale closures.\r\n    /// </summary>\r\n    const boardSquaresRef = useRef(boardSquares);\r\n\r\n    /**\r\n     * Updates the possible move array.\r\n     * If a square is a possible move, it will receive a circle indicating you can move there.\r\n     * \r\n     * @param {string} key - The key of the item to update.\r\n     * @param {boolean} value - The new value to set for the item.\r\n     */\r\n    const updateIsPossibleMove = (key, value) => {\r\n        // We are updating the state based on the previous state to resolve the issue with pending state and queue in React\r\n        setIsPossibleMove(prevState =>\r\n            prevState.map(item =>\r\n                // If the current item's key matches the key we're looking for,\r\n                // copy all properties of the object in a new object using the spread syntax (...),\r\n                // modify the value property to whatever value we're using,\r\n                // copy the original item if no modifications are needed\r\n                item.key === key ? { ...item, value: value } : item\r\n            )\r\n        );\r\n    };\r\n\r\n    /**\r\n     * Updates the reference to the isPossibleMove array whenever we set a new value to the array.\r\n     */\r\n    useEffect(() => {\r\n        isPossibleMoveRef.current = isPossibleMove;\r\n        setBoardSquares(HelperMethods.fenParser(fen, isPossibleMoveRef.current, movePiece, resetPossibleMoves, false));\r\n    }, [isPossibleMove]);\r\n\r\n    /**\r\n     * Called when the page loads.\r\n     * Removes all circles from squares indicating that they can be clicked to move a piece there.\r\n     * Parses the FEN to fill in the board.\r\n     */\r\n    useEffect(() => {\r\n        resetPossibleMoves();\r\n        setBoardSquares(HelperMethods.fenParser(fen, isPossibleMoveRef.current, movePiece, resetPossibleMoves));\r\n    }, []);\r\n\r\n    /**\r\n     * Parses the FEN and fills in the board with the new position when the FEN updates.\r\n     */\r\n    useEffect(() => {\r\n        setBoardSquares(HelperMethods.fenParser(fen, isPossibleMoveRef.current, movePiece, resetPossibleMoves));\r\n    }, [fen]);\r\n\r\n    /**\r\n     * Updates the reference to the BoardSquares array whenever we set a new value to the array.\r\n     */\r\n    useEffect(() => {\r\n        boardSquaresRef.current = boardSquares;\r\n    }, [boardSquares]);\r\n\r\n    /**\r\n    * Resets possible moves highlighting.\r\n    */\r\n    function resetPossibleMoves() {\r\n        const initialIsPossibleMove = [];\r\n        for (let i = 0; i < GlobalVariables.DIM; i++) {\r\n            for (let j = 0; j < GlobalVariables.DIM; j++) {\r\n                initialIsPossibleMove.push({ key: `${i}-${j}`, value: false });\r\n            }\r\n        }\r\n        setIsPossibleMove(initialIsPossibleMove);\r\n    }\r\n\r\n    /**\r\n     * Updates the `isPossibleMove` array based on the `PossibleMoves` array and forces a component update \r\n     * of the square to visually indicate the circles showing a move is possible.\r\n     * \r\n     * This function iterates through the `PossibleMoves` array to find moves that match the currently \r\n     * selected square. For each matching move, it updates the `isPossibleMove` array to true, indicating \r\n     * that a move is possible, which will trigger the visual indication on the chessboard.\r\n     */\r\n    function updatePossibleMovesVisually() {\r\n        for (let i = 0; i < GlobalVariables.PossibleMoves.length; i++) {\r\n            if (HelperMethods.checkIfAMoveIsEqualToTheCurrentSelectedSquare(GlobalVariables.PossibleMoves[i].piece)) {\r\n                for (let j = 0; j < GlobalVariables.PossibleMoves[i].moves.length; j++) {\r\n                    updateIsPossibleMove(`${GlobalVariables.PossibleMoves[i].moves[j].props.x}-${GlobalVariables.PossibleMoves[i].moves[j].props.y}`, true)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disables castling rights if the king or a rook moves.\r\n     * @param {object} square - The square containing the piece that moved.\r\n     */\r\n    function disableCastlingIfKingOrRookMoves(square) {\r\n        const color = HelperMethods.getPieceColor(square);\r\n        const piece = HelperMethods.getPiece(square);\r\n        const isWhite = HelperMethods.isColorWhite(color);\r\n\r\n        const updateCastlingRights = (color, type, value) => {\r\n            GlobalVariables.CastlingRights[`${color}${type}Castle`] = value;\r\n        };\r\n\r\n        if (piece === GlobalVariables.PIECES.KING) {\r\n            updateCastlingRights(isWhite ? 'white' : 'black', 'Long', false);\r\n            updateCastlingRights(isWhite ? 'white' : 'black', 'Short', false);\r\n        }\r\n\r\n        if (piece === GlobalVariables.PIECES.ROOK) {\r\n            const { x, y } = square.props;\r\n            const rookPositions = [\r\n                { row: GlobalVariables.CASTLE_ROW_WHITE, col: GlobalVariables.CASTLE_ROOK_INITIAL_COL_SHORT, type: 'Short', color: 'white' },\r\n                { row: GlobalVariables.CASTLE_ROW_BLACK, col: GlobalVariables.CASTLE_ROOK_INITIAL_COL_SHORT, type: 'Short', color: 'black' },\r\n                { row: GlobalVariables.CASTLE_ROW_WHITE, col: GlobalVariables.CASTLE_ROOK_INITIAL_COL_LONG, type: 'Long', color: 'white' },\r\n                { row: GlobalVariables.CASTLE_ROW_BLACK, col: GlobalVariables.CASTLE_ROOK_INITIAL_COL_LONG, type: 'Long', color: 'black' }\r\n            ];\r\n\r\n            rookPositions.forEach(pos => {\r\n                if (x === pos.row && y === pos.col) {\r\n                    updateCastlingRights(pos.color, pos.type, false);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    function enableEnPassant(square, targetSquare) {\r\n        const color = HelperMethods.getPieceColor(square);\r\n        const piece = HelperMethods.getPiece(square);\r\n        const isWhite = HelperMethods.isColorWhite(color)\r\n\r\n        //enabling en passant\r\n        if (piece == GlobalVariables.PIECES.PAWN && Math.abs(square.props.x - targetSquare.props.x) == 2) {\r\n            if (isWhite) {\r\n                GlobalVariables.EnPassant.isPossible = true\r\n                GlobalVariables.EnPassant.x = square.props.x - 1\r\n                GlobalVariables.EnPassant.y = square.props.y\r\n            } else {\r\n                GlobalVariables.EnPassant.isPossible = true\r\n                GlobalVariables.EnPassant.x = square.props.x + 1\r\n                GlobalVariables.EnPassant.y = square.props.y\r\n            }\r\n\r\n            // let enPassant1 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y - 1)\r\n            // let enPassant2 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y + 1)\r\n\r\n            // if (enPassant1) {\r\n            //     if (enPassant1.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\r\n            //         if (enPassant1.props.piece.split(PIECE_DELIMITER)[0] != color) {\r\n            //             EnPassant.isPossible = true\r\n            //             EnPassant.x = targetSquare.props.x\r\n            //             EnPassant.y = targetSquare.props.y\r\n            //             return\r\n            //         }\r\n            //     }\r\n            // }\r\n\r\n            // if (enPassant2) {\r\n            //     if (enPassant2.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\r\n            //         if (enPassant2.props.piece.split(PIECE_DELIMITER)[0] != color) {\r\n            //             EnPassant.isPossible = true\r\n            //             EnPassant.x = targetSquare.props.x\r\n            //             EnPassant.y = targetSquare.props.y\r\n            //             return\r\n            //         }\r\n            //     }\r\n            // }\r\n        } else {\r\n            GlobalVariables.EnPassant.isPossible = false\r\n            GlobalVariables.EnPassant.x = -1\r\n            GlobalVariables.EnPassant.y = -1\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles moving a piece to a new location.\r\n     * @param {number} x - The X coordinate.\r\n     * @param {number} y - The Y coordinate.\r\n     */\r\n    function movePiece(x, y) {\r\n        let squares = boardSquares\r\n        let position = GlobalVariables.BoardPosition\r\n\r\n        let targetSquare = HelperMethods.getATargetSquareByLocation(x, y, boardSquaresRef.current)\r\n        let square = squares.find(s => HelperMethods.checkIfAMoveIsEqualToTheCurrentSelectedSquare(s))\r\n\r\n        let color = HelperMethods.getPieceColor(square)\r\n        let piece = HelperMethods.getPiece(square)\r\n\r\n        disableCastlingIfKingOrRookMoves(square)\r\n\r\n        let p = HelperMethods.updateBoardPosition(square, targetSquare, position)\r\n\r\n        //capturing enPassant\r\n        // if (EnPassant.isPossible) {\r\n        //     let enPassantTargetSquare = color == COLORS.WHITE ? squares.find(s => s.props.x == x + 1 && s.props.y == y) : squares.find(s => s.props.x == x - 1 && s.props.y == y)\r\n        //     let enPassantSquare = <Square x={square.props.x} y={square.props.y} piece={\"\"} />\r\n\r\n        //     p = UpdatePosition(enPassantSquare, enPassantTargetSquare, p)\r\n        // }\r\n\r\n        const updatedBoardPosition = p.map(row => [...row]);\r\n        GlobalVariables.BoardPosition.splice(0, GlobalVariables.BoardPosition.length, ...updatedBoardPosition);\r\n        GlobalVariables.PossibleMoves.splice(0, GlobalVariables.PossibleMoves.length);\r\n        GlobalVariables.updateIsWhiteToMove(!GlobalVariables.IsWhiteToMove)\r\n\r\n        enableEnPassant(square, targetSquare)\r\n\r\n        GlobalVariables.updateFullMoves(GlobalVariables.FullMoves + 1)\r\n        HelperMethods.generateANewFen()\r\n    }\r\n\r\n    /**\r\n     * Gets possible moves for a piece.\r\n     * @param {object} square - The square object.\r\n     */\r\n    function getPossibleMoves() {\r\n        //let square = getATargetSquareByLocation(x, y)\r\n        let possiblePieceMoves = [];\r\n        let squares = boardSquares\r\n\r\n        for (let i = 0; i < squares.length; i++) {\r\n            let square = squares[i]\r\n\r\n            //if the square has a piece\r\n            if (square.props.piece) {\r\n                let color = HelperMethods.getPieceColor(square); //get the piece color\r\n\r\n                //don't collect possible moves if it's black to move and you're trying to move a white piece\r\n                if (HelperMethods.isColorWhite(color) && !GlobalVariables.IsWhiteToMove) {\r\n                    //console.log(`Skipping because it's black to move and you're moving a white piece, x: ${square.props.x}, y: ${square.props.y}`)\r\n                    continue\r\n                }\r\n\r\n                //don't collect possible moves if it's white to move and you're trying to move a black piece\r\n                if (HelperMethods.isColorBlack(color) && GlobalVariables.IsWhiteToMove) {\r\n                    //console.log(`Skipping because it's white to move and you're moving a black piece, x: ${square.props.x}, y: ${square.props.y}`)\r\n                    continue\r\n                }\r\n\r\n                //console.log(`Getting possible moves, x: ${square.props.x}, y: ${square.props.y}`)\r\n                //get all possible moves for each piece\r\n                console.log(square, squares)\r\n                possiblePieceMoves = MoveHandling.getAllPossibleMoves(square, squares)\r\n\r\n                //filter empty moves\r\n                possiblePieceMoves = removeEmptyMoves(possiblePieceMoves);\r\n\r\n                //filter possible moves\r\n                possiblePieceMoves = filterMovesIfInCheck(possiblePieceMoves)\r\n                possiblePieceMoves = filterMovesThatAllowIllegalCastling(possiblePieceMoves)\r\n            }\r\n        }\r\n\r\n        console.log(\"Possible Moves:\", possiblePieceMoves);\r\n        console.log('Moves count', possiblePieceMoves.reduce((sum, pieceMove) => sum + pieceMove.moves.length, 0))\r\n        GlobalVariables.PossibleMoves.splice(0, GlobalVariables.PossibleMoves.length, ...possiblePieceMoves);\r\n        updatePossibleMovesVisually()\r\n    }\r\n\r\n    //renders the board\r\n    return (\r\n        <>\r\n            <div className=\"chessGrid\">\r\n                {boardSquares.map((sqr) => sqr)}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Board"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}