{"ast":null,"code":"export const DIM = 8; //8x8 Board\nexport const PIECE_DELIMITER = '-'; //a piece is stored in the format {color-piece}, e.g., {black-pawn}, the delimiter (-) is used to separate the color and the piece\n//object that has all the color options (ENUM)\nexport const COLORS = {\n  WHITE: 'white',\n  BLACK: 'black'\n};\n//object that has the name of each individual piece (ENUM)\nexport const PIECES = {\n  PAWN: \"pawn\",\n  ROOK: \"rook\",\n  KNIGHT: \"knight\",\n  BISHOP: \"bishop\",\n  KING: \"king\",\n  QUEEN: \"queen\"\n};\n//object that has the kings for quicker access (ENUM)\nexport const KINGS = {\n  BLACK_KING: `${COLORS.BLACK}${PIECE_DELIMITER}${PIECES.KING}`,\n  //the piece for the black king; used to get the king from the squares array quicker\n  WHITE_KING: `${COLORS.WHITE}${PIECE_DELIMITER}${PIECES.KING}` //the piece for the white king; used to get the king from the squares array quicker\n};\n\n//export let BoardSquares = [] //array that collects all square components\nexport let CastlingRights = {\n  whiteShortCastle: false,\n  whiteLongCastle: false,\n  blackLongCastle: false,\n  blackShortCastle: false\n};\nexport let EnPassant = {\n  isPossible: false,\n  x: -1,\n  y: -1\n};\nexport let CurrentSquareSelection = {\n  x: -1,\n  y: -1\n};\nexport let PossibleMoves = [];\nexport let HalfMoves = 0;\nexport let FullMoves = 0;\nexport let IsWhiteToMove = false;\nexport function updateIsWhiteToMove(value) {\n  IsWhiteToMove = value;\n}\nexport function updateHalfMoves(value) {\n  HalfMoves = value;\n}\nexport function updateFullMoves(value) {\n  FullMoves = value;\n}\nexport let BoardPosition = [[]];\nexport const WHITE_PAWN_STARTING_SQUARE = 6;\nexport const BLACK_PAWN_STARTING_SQUARE = 1;\nexport const WHITE_EN_PASSANT_SQUARE = 3;\nexport const BLACK_EN_PASSANT_SQUARE = 4;\nexport const FEN_PIECES_WHITE = {\n  PAWN: \"P\",\n  ROOK: \"R\",\n  KNIGHT: \"N\",\n  BISHOP: \"B\",\n  KING: \"K\",\n  QUEEN: \"Q\"\n};\nexport const FEN_PIECES_BLACK = {\n  PAWN: \"p\",\n  ROOK: \"r\",\n  KNIGHT: \"n\",\n  BISHOP: \"b\",\n  KING: \"k\",\n  QUEEN: \"q\"\n};\nexport const EMPTY_SQUARE_PIECE = ' ';\nexport const CASTLE_ROW_WHITE = 7;\nexport const CASTLE_ROW_BLACK = 0;\nexport const CASTLE_KING_INITIAL_COL = 4;\nexport const CASTLE_KING_FINAL_COL_LONG = 2;\nexport const CASTLE_KING_FINAL_COL_SHORT = 6;\nexport const CASTLE_ROOK_INITIAL_COL_LONG = 0;\nexport const CASTLE_ROOK_INITIAL_COL_SHORT = 7;\nexport const CASTLE_ROOK_FINAL_COL_LONG = 3;\nexport const CASTLE_ROOK_FINAL_COL_SHORT = 5;\nexport const CASTLE_PATH_COLS_LONG = [1, 2, 3];\nexport const CASTLE_PATH_COLS_SHORT = [5, 6];\nexport const EMPTY_SQUARES_AFTER_LONG_CASTLE = [0, 1, 4];\nexport const EMPTY_SQUARES_AFTER_SHORT_CASTLE = [4, 7];\nexport const PIECE_COLOR_INDEX = 0;\nexport const PIECE_PIECE_INDEX = 1;\nexport const CASTLING_TYPES = {\n  LONG: \"long\",\n  SHORT: \"short\"\n};","map":{"version":3,"names":["DIM","PIECE_DELIMITER","COLORS","WHITE","BLACK","PIECES","PAWN","ROOK","KNIGHT","BISHOP","KING","QUEEN","KINGS","BLACK_KING","WHITE_KING","CastlingRights","whiteShortCastle","whiteLongCastle","blackLongCastle","blackShortCastle","EnPassant","isPossible","x","y","CurrentSquareSelection","PossibleMoves","HalfMoves","FullMoves","IsWhiteToMove","updateIsWhiteToMove","value","updateHalfMoves","updateFullMoves","BoardPosition","WHITE_PAWN_STARTING_SQUARE","BLACK_PAWN_STARTING_SQUARE","WHITE_EN_PASSANT_SQUARE","BLACK_EN_PASSANT_SQUARE","FEN_PIECES_WHITE","FEN_PIECES_BLACK","EMPTY_SQUARE_PIECE","CASTLE_ROW_WHITE","CASTLE_ROW_BLACK","CASTLE_KING_INITIAL_COL","CASTLE_KING_FINAL_COL_LONG","CASTLE_KING_FINAL_COL_SHORT","CASTLE_ROOK_INITIAL_COL_LONG","CASTLE_ROOK_INITIAL_COL_SHORT","CASTLE_ROOK_FINAL_COL_LONG","CASTLE_ROOK_FINAL_COL_SHORT","CASTLE_PATH_COLS_LONG","CASTLE_PATH_COLS_SHORT","EMPTY_SQUARES_AFTER_LONG_CASTLE","EMPTY_SQUARES_AFTER_SHORT_CASTLE","PIECE_COLOR_INDEX","PIECE_PIECE_INDEX","CASTLING_TYPES","LONG","SHORT"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/Chess-React.js-/src/globalVariables.js"],"sourcesContent":["export const DIM = 8; //8x8 Board\r\nexport const PIECE_DELIMITER = '-'; //a piece is stored in the format {color-piece}, e.g., {black-pawn}, the delimiter (-) is used to separate the color and the piece\r\n//object that has all the color options (ENUM)\r\nexport const COLORS = {\r\n    WHITE: 'white',\r\n    BLACK: 'black'\r\n}\r\n//object that has the name of each individual piece (ENUM)\r\nexport const PIECES = {\r\n    PAWN: \"pawn\",\r\n    ROOK: \"rook\",\r\n    KNIGHT: \"knight\",\r\n    BISHOP: \"bishop\",\r\n    KING: \"king\",\r\n    QUEEN: \"queen\"\r\n};\r\n//object that has the kings for quicker access (ENUM)\r\nexport const KINGS = {\r\n    BLACK_KING: `${COLORS.BLACK}${PIECE_DELIMITER}${PIECES.KING}`, //the piece for the black king; used to get the king from the squares array quicker\r\n    WHITE_KING: `${COLORS.WHITE}${PIECE_DELIMITER}${PIECES.KING}` //the piece for the white king; used to get the king from the squares array quicker\r\n}\r\n\r\n//export let BoardSquares = [] //array that collects all square components\r\nexport let CastlingRights = {\r\n    whiteShortCastle: false,\r\n    whiteLongCastle: false,\r\n    blackLongCastle: false,\r\n    blackShortCastle: false\r\n}\r\nexport let EnPassant = {\r\n    isPossible: false,\r\n    x: -1,\r\n    y: -1\r\n}\r\nexport let CurrentSquareSelection = {\r\n    x: -1,\r\n    y: -1\r\n}\r\nexport let PossibleMoves = []\r\nexport let HalfMoves = 0\r\nexport let FullMoves = 0\r\nexport let IsWhiteToMove = false\r\nexport function updateIsWhiteToMove(value) {\r\n    IsWhiteToMove = value\r\n}\r\nexport function updateHalfMoves(value) {\r\n    HalfMoves = value\r\n}\r\nexport function updateFullMoves(value) {\r\n    FullMoves = value\r\n}\r\nexport let BoardPosition = [[]]\r\nexport const WHITE_PAWN_STARTING_SQUARE = 6\r\nexport const BLACK_PAWN_STARTING_SQUARE = 1\r\nexport const WHITE_EN_PASSANT_SQUARE = 3\r\nexport const BLACK_EN_PASSANT_SQUARE = 4\r\nexport const FEN_PIECES_WHITE = {\r\n    PAWN: \"P\",\r\n    ROOK: \"R\",\r\n    KNIGHT: \"N\",\r\n    BISHOP: \"B\",\r\n    KING: \"K\",\r\n    QUEEN: \"Q\"\r\n}\r\nexport const FEN_PIECES_BLACK = {\r\n    PAWN: \"p\",\r\n    ROOK: \"r\",\r\n    KNIGHT: \"n\",\r\n    BISHOP: \"b\",\r\n    KING: \"k\",\r\n    QUEEN: \"q\"\r\n}\r\nexport const EMPTY_SQUARE_PIECE = ' '\r\nexport const CASTLE_ROW_WHITE = 7;\r\nexport const CASTLE_ROW_BLACK = 0;\r\nexport const CASTLE_KING_INITIAL_COL = 4;\r\nexport const CASTLE_KING_FINAL_COL_LONG = 2\r\nexport const CASTLE_KING_FINAL_COL_SHORT = 6\r\nexport const CASTLE_ROOK_INITIAL_COL_LONG = 0;\r\nexport const CASTLE_ROOK_INITIAL_COL_SHORT = 7;\r\nexport const CASTLE_ROOK_FINAL_COL_LONG = 3\r\nexport const CASTLE_ROOK_FINAL_COL_SHORT = 5\r\nexport const CASTLE_PATH_COLS_LONG = [1, 2, 3];\r\nexport const CASTLE_PATH_COLS_SHORT = [5, 6];\r\nexport const EMPTY_SQUARES_AFTER_LONG_CASTLE = [0, 1, 4]\r\nexport const EMPTY_SQUARES_AFTER_SHORT_CASTLE = [4, 7]\r\nexport const PIECE_COLOR_INDEX = 0\r\nexport const PIECE_PIECE_INDEX = 1\r\nexport const CASTLING_TYPES = {\r\n    LONG: \"long\",\r\n    SHORT: \"short\"\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}