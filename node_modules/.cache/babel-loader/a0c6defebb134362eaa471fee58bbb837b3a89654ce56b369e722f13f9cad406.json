{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vladi Gotsin\\\\Desktop\\\\react\\\\Chess-React.js-\\\\src\\\\Board.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef, createContext } from \"react\";\nimport React from 'react';\nimport Square from \"./Square.js\";\nimport { ConvertFENPieceToPiece, ConvertFenToString, UpdatePosition, ParseFEN } from \"./HelperMethods.js\";\nimport { DIM, PIECE_DELIMITER, KINGS, COLORS, PIECES, BoardSquares } from \"./gllobalVariables.js\";\n\n/*\r\nTODO:\r\nCode Reusability: refactor some of the repeated code and generate new functions if needed\r\nConsistency and Naming: Have better and more consistent names for variables and functions\r\nDocumentation: add more comments to understand what is going on\r\nTesting: add unit tests\r\nImplementations: add promotions, implement endgames (mate, stalemate, draws repeation, 50 moves rule)\r\nBugs: Fix bugs (if any)\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Board() {\n  _s();\n  //<summary>\n  //FEN - Forsyth-Edwards Notation\n  //small letters - black pieces\n  //capital letters - white pieces\n  //numbers - empty board squares\n  //(/) - separates each board row\n  //first letter after the board indicates whose turn it is to move (w - white, b - black)\n  //next letters indicate castling rights, k - kingside, q - queenside, (-) - no castling allowed for any side\n  //en passant square - when a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square\n  //the number of half turns (white moves, then black moves = 2 half moves) that were made without a pawn move or a capture of a piece (50-move rule when reaches 100)\n  //the number of full moves (white moves, then black moves = 1 full move); increase after every black half move\n  //</summary>\n  //starting position\n  //'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\n  const [fen, setFen] = useState('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0');\n  const [boardPosition, setBoardPosition] = useState([[]]);\n  const [nextTurn, setNextTurn] = useState('');\n  const [WCastleK, setWCastleK] = useState(true);\n  const [WCastleQ, setWCastleQ] = useState(true);\n  const [BCastleK, setBCastleK] = useState(true);\n  const [BCastleQ, setBCastleQ] = useState(true);\n  const [enPassant, setEnPassant] = useState('');\n  const [halfMoves, setHalfMoves] = useState(0);\n  const [fullMoves, setFullMoves] = useState(0);\n  const [possibleMoves, setPossibleMoves] = useState([]);\n  const [selectedSquareX, setSelectedSquareX] = useState('');\n  const [selectedSquareY, setSelectedSquareY] = useState('');\n  const [canWhiteShortCastle, setCanWhiteShortCastle] = useState(true);\n  const [canWhiteLongCastle, setCanWhiteLongCastle] = useState(true);\n  const [canBlackShortCastle, setCanBlackShortCastle] = useState(true);\n  const [canBlackLongCastle, setCanBlackLongCastle] = useState(true);\n  const [enPassantPossible, setEnPassantPossible] = useState(false);\n  const [enPassantX, setEnPassantX] = useState('');\n  const [enPassantY, setEnPassantY] = useState('');\n  const [isWhiteToMove, setIsWhiteToMove] = useState(true);\n  const boardPositionRef = useRef(boardPosition);\n  const boardSquareRef = useRef(boardSquare);\n  const possibleMovesRef = useRef(possibleMoves);\n  useEffect(() => {\n    possibleMovesRef.current = possibleMoves;\n  }, [possibleMoves]);\n  useEffect(() => {\n    boardPositionRef.current = boardPosition;\n  }, [boardPosition]);\n  useEffect(() => {\n    boardSquareRef.current = boardSquare;\n  }, [boardSquare]);\n\n  // useEffect(() => {\n  //     console.log(selectedSquareX, selectedSquareY)\n  // }, [selectedSquareX, selectedSquareY])\n\n  //called when the page loads.we need to parse the FEN to fill in the board\n  useEffect(() => {\n    fenParser();\n  }, []);\n\n  //parses the FEN for the initial board state\n  function fenParser() {\n    //parses the FEN string to variables\n    const {\n      fenBoard,\n      fenTurn,\n      fenCastling,\n      fenEnPassant,\n      fenHalfMoves,\n      fenFullMoves\n    } = ParseFEN(fen);\n    const fenRows = fenBoard.split('/');\n    let arr = [];\n\n    //splits all rows and creates a matrix for the board\n    for (let row of fenRows) {\n      const tokens = row.split('');\n      let r = [];\n      for (let i = 0; i < tokens.length; i++) {\n        if (Number(tokens[i])) {\n          for (let j = 0; j < Number(tokens[i]); j++) {\n            r.push(' ');\n          }\n        } else {\n          r.push(tokens[i]);\n        }\n      }\n      arr.push(r);\n    }\n\n    //generates a Square component for each element in the matrix created above\n    let boardSquares = [];\n    let squareColorIsWhite = true;\n    let squares = [];\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0; j < arr[i].length; j++) {\n        let color = squareColorIsWhite ? \"\" : \"dark\";\n        //boardSquares.push(\n        squares.push( /*#__PURE__*/_jsxDEV(Square, {\n          getPossibleMoves: getPossibleMoves,\n          x: i,\n          y: j,\n          piece: ConvertFENPieceToPiece(arr[i][j]),\n          color: color,\n          selectedSquareX: selectedSquareX,\n          setSelectedSquareX: updateSelectedSquareX,\n          selectedSquareY: selectedSquareY,\n          setSelectedSquareY: updateSelectedSquareY,\n          possibleMoves: possibleMovesRef,\n          updatePossibleMoves: updatePossibleMoves,\n          movePiece: movePiece\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this));\n        squareColorIsWhite = !squareColorIsWhite;\n      }\n      squareColorIsWhite = !squareColorIsWhite;\n    }\n    BoardSquares.length == 0 ? BoardSquares.push(...squares) : BoardSquares;\n    if (fenCastling.includes('K')) {\n      setCanWhiteShortCastle(true);\n    }\n    if (fenCastling.includes('Q')) {\n      setCanWhiteLongCastle(true);\n    }\n    if (fenCastling.includes('k')) {\n      setCanBlackShortCastle(true);\n    }\n    if (fenCastling.includes('q')) {\n      setCanBlackLongCastle(true);\n    }\n\n    //updates the state\n    setBoardPosition(arr);\n    setNextTurn(fenTurn);\n    setEnPassant(fenEnPassant);\n    setHalfMoves(fenHalfMoves);\n    setFullMoves(fenFullMoves);\n    setBoardSquare(boardSquares);\n  }\n  function isWhiteInCheck(square, pseudo) {\n    let squares = boardSquareRef.current;\n    if (pseudo) {\n      const updatedSquares = squares.map(s => {\n        if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\n          // Return a new Square component with the updated piece\n          return /*#__PURE__*/React.cloneElement(s, {\n            piece: pseudo.props.piece\n          });\n        } else {\n          // For other squares, return the original Square component\n          return s;\n        }\n      });\n      squares = updatedSquares;\n    }\n\n    //check for attackers in front of the white king\n    for (let i = square.props.x - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from behind\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers behind the white king\n    for (let i = square.props.x + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the front\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the left of the white king\n    for (let i = square.props.y - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the left\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the right of the white king\n    for (let i = square.props.y + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the right\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == -1) {\n                //console.log(\"in check from top half of counterclockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from top half of counterclockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == 1) {\n                //console.log(\"in check from top half of clockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from top half of clockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for knights check\n    let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1);\n    let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1);\n    let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1);\n    let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1);\n    let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2);\n    let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2);\n    let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2);\n    let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2);\n    if (knight1) {\n      if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight1.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 1\")\n          return true;\n        }\n      }\n    }\n    if (knight2) {\n      if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight2.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 2\")\n          return true;\n        }\n      }\n    }\n    if (knight3) {\n      if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight3.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 3\")\n          return true;\n        }\n      }\n    }\n    if (knight4) {\n      if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight4.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 4\")\n          return true;\n        }\n      }\n    }\n    if (knight5) {\n      if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight5.props.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 5\")\n          return true;\n        }\n      }\n    }\n    if (knight6) {\n      if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight6.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 6\")\n          return true;\n        }\n      }\n    }\n    if (knight7) {\n      if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight7.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 7\")\n          return true;\n        }\n      }\n    }\n    if (knight8) {\n      if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight8.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 8\")\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  function isBlackInCheck(square, pseudo) {\n    let squares = boardSquareRef.current;\n    if (pseudo) {\n      const updatedSquares = squares.map(s => {\n        if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\n          // Return a new Square component with the updated piece\n          return /*#__PURE__*/React.cloneElement(s, {\n            piece: pseudo.props.piece\n          });\n        } else {\n          // For other squares, return the original Square component\n          return s;\n        }\n      });\n      squares = updatedSquares;\n    }\n\n    //check for attackers behind the black king\n    for (let i = square.props.x - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from behind\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers in front of the black king\n    for (let i = square.props.x + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the front\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the left of the black king\n    for (let i = square.props.y - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the left\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the right of the black king\n    for (let i = square.props.y + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the right\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            //console.log(\"in check from top half of counterclockwise diagonal\")\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == 1) {\n                //console.log(\"in check from bottom half of counterclockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from bottom half of counterclockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            //console.log(\"in check from top half of clockwise diagonal\")\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == -1) {\n                //console.log(\"in check from bottom half of clockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from bottom half of clockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for knights check\n    let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1);\n    let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1);\n    let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1);\n    let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1);\n    let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2);\n    let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2);\n    let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2);\n    let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2);\n    if (knight1) {\n      if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight1.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 1\")\n          return true;\n        }\n      }\n    }\n    if (knight2) {\n      if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight2.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 2\")\n          return true;\n        }\n      }\n    }\n    if (knight3) {\n      if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight3.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 3\")\n          return true;\n        }\n      }\n    }\n    if (knight4) {\n      if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight4.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 4\")\n          return true;\n        }\n      }\n    }\n    if (knight5) {\n      if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight5.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 5\")\n          return true;\n        }\n      }\n    }\n    if (knight6) {\n      if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight6.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 6\")\n          return true;\n        }\n      }\n    }\n    if (knight7) {\n      if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight7.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 7\")\n          return true;\n        }\n      }\n    }\n    if (knight8) {\n      if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight8.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 8\")\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  function movePiece(x, y) {\n    let squares = boardSquareRef.current;\n    let position = boardPositionRef.current;\n    let targetSquare = getATargetSquareByLocation(x, y);\n    let square = squares.find(s => s.props.x == selectedSquareX && s.props.y == selectedSquareY);\n    let color = getPieceColor(square);\n    let piece = getPiece(square);\n\n    //disable castling if the king moves\n    if (piece == \"king\") {\n      if (isColorWhite(color)) {\n        setCanWhiteLongCastle(false);\n        setCanWhiteShortCastle(false);\n      } else {\n        setCanBlackLongCastle(false);\n        setCanBlackShortCastle(false);\n      }\n    }\n\n    //disable castling if the rook moves\n    if (piece == \"rook\") {\n      if (square.props.x == 7 && square.props.y == 7) {\n        setCanWhiteShortCastle(false);\n      }\n      if (square.props.x == 0 && square.props.y == 7) {\n        setCanBlackShortCastle(false);\n      }\n      if (square.props.x == 7 && square.props.y == 0) {\n        setCanWhiteLongCastle(false);\n      }\n      if (square.props.x == 0 && square.props.y == 0) {\n        setCanBlackLongCastle(false);\n      }\n    }\n    let p = UpdatePosition(square, targetSquare, position);\n\n    //capturing enPassant\n    if (enPassantX && enPassantY && enPassantPossible) {\n      let enPassantTargetSquare = color == \"white\" ? squares.find(s => s.props.x == x + 1 && s.props.y == y) : squares.find(s => s.props.x == x - 1 && s.props.y == y);\n      let enPassantSquare = /*#__PURE__*/_jsxDEV(Square, {\n        x: square.props.x,\n        y: square.props.y,\n        piece: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 742,\n        columnNumber: 35\n      }, this);\n      p = UpdatePosition(enPassantSquare, enPassantTargetSquare, p);\n    }\n\n    //TODO: ensure p matches the new board Position format\n    //setBoardPosition(p)\n    setPossibleMoves([]);\n    setIsWhiteToMove(!isWhiteToMove);\n\n    //enabling en passant\n    if (piece == \"pawn\") {\n      if (Math.abs(square.props.x - targetSquare.props.x) == 2) {\n        let enPassant1 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y - 1);\n        let enPassant2 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y + 1);\n        if (enPassant1) {\n          if (enPassant1.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (enPassant1.props.piece.split(\"-\")[0] != color) {\n              setEnPassantPossible(true);\n              setEnPassantX(targetSquare.props.x);\n              setEnPassantY(targetSquare.props.y);\n              return;\n            }\n          }\n        }\n        if (enPassant2) {\n          if (enPassant2.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (enPassant2.props.piece.split(\"-\")[0] != color) {\n              setEnPassantPossible(true);\n              setEnPassantX(targetSquare.props.x);\n              setEnPassantY(targetSquare.props.y);\n              return;\n            }\n          }\n        }\n      }\n    }\n    setEnPassantPossible(false);\n    setEnPassantX('');\n    setEnPassantY('');\n  }\n\n  //updates the state with the possible moves\n  function updatePossibleMoves(moves) {\n    setPossibleMoves(moves);\n  }\n  ;\n\n  //updates the state with the selectedSquare X coordinates\n  function updateSelectedSquareX(x) {\n    setSelectedSquareX(x);\n  }\n\n  //updates the state with the selectedSquare Y coordinates\n  function updateSelectedSquareY(y) {\n    setSelectedSquareY(y);\n  }\n\n  //retrieves a speecific square from the board using x and y coordinates (location)\n  function getATargetSquareByLocation(x, y) {\n    return BoardSquares.find(s => s.props.x === x && s.props.y === y);\n  }\n\n  //retrieves a speecific square from the board that has a certain piece\n  function getATargetSquareByPiece(piece) {\n    return BoardSquares.find(s => s.props.piece == piece);\n  }\n\n  //check if a specific square has a piece assigned to it\n  function isSquareAvailable(square) {\n    return square && !square.props.piece;\n  }\n\n  //checks if a pawn is on its starting square and allows a 2-squares move\n  function isPawnOnStartingSquare(pawn) {\n    return isColorWhite(pawn.props.piece.split(PIECE_DELIMITER)[0]) ? pawn.props.x == 6 : pawn.props.x == 1;\n  }\n\n  //checks if two pieces have the same color\n  function areSameColor(square1, square2) {\n    if (!square1 || !square2) {\n      return;\n    }\n    let color1 = square1.props.piece.split(PIECE_DELIMITER)[0];\n    let color2 = square2.props.piece.split(PIECE_DELIMITER)[0];\n    return color1 == color2;\n  }\n\n  //checks if a square contains a certain piece\n  function doesTheSquareHasThePiece(square, piece) {\n    let p = getPiece(square);\n    return p == piece;\n  }\n\n  //cheks if a pawn is on En Passant square\n  function isPawnOnEnPassantSquare(pawn) {\n    return isColorWhite(pawn.props.piece.split(PIECE_DELIMITER)[0]) ? pawn.props.x == 3 : pawn.props.x == 4;\n  }\n\n  //checks if a color is white\n  function isColorWhite(color) {\n    return color == COLORS.WHITE;\n  }\n\n  //checks if a color is black\n  function isColorBlack(color) {\n    return color == COLORS.BLACK;\n  }\n\n  //checks if white is allowed to long castle\n  function checkIfCanWhiteLongCastle() {\n    return canWhiteLongCastle && boardPositionRef.current[7][0] == 'R' && boardPositionRef.current[7][1] == '' && boardPositionRef.current[7][2] == '' && boardPositionRef.current[7][3] == '';\n  }\n\n  //checks if white is allowed to short castle\n  function checkIfCanWhiteShortCastle() {\n    return canWhiteShortCastle && boardPositionRef.current[7][7] == 'R' && boardPositionRef.current[7][6] == '' && boardPositionRef.current[7][5] == '';\n  }\n\n  //checks if black is allowed to long castle\n  function checkIfCanBlackLongCastle() {\n    return canBlackLongCastle && boardPositionRef.current[0][0] == 'r' && boardPositionRef.current[0][1] == '' && boardPositionRef.current[0][2] == '' && boardPositionRef.current[0][3] == '';\n  }\n\n  //checks if black is allowed to short castle\n  function checkIfCanBlackShortCastle() {\n    return canBlackShortCastle && boardPositionRef.current[7][7] == 'r' && boardPositionRef.current[7][6] == '' && boardPositionRef.current[7][5] == '';\n  }\n\n  //converts board coordinates to X and Y position on the board, e.g., a8 = 0, 0\n  function convertCoordinatesToLocation(coordinates) {\n    let tokens = coordinates.split('');\n\n    //skip invalid coordinates\n    if (tokens.length != 2) {\n      return;\n    }\n    let letter = tokens[0].toString().toUpperCase();\n    let number = tokens[1];\n\n    //65 is the ASCII code for capital A which will give us 0 if we have A as a coordinate; A-F will give us 0-7 for x\n    //reverse the numbers since we draw the board top down\n    return {\n      x: letter.charCodeAt(0) - 65,\n      y: DIM - Number(number)\n    };\n  }\n\n  //gets all possible moves for a pawn\n  function getPawnsPossibleMoves(square) {\n    if (!doesTheSquareHasThePiece(square, PIECES.PAWN)) {\n      return;\n    }\n    let color = getPieceColor(square); //get the piece color\n\n    let moves = [];\n    let position1Offset = 1;\n    let position2Offset = 2;\n\n    //flips the direction if the color is white\n    if (isColorWhite(color)) {\n      position1Offset *= -1;\n      position2Offset *= -1;\n    }\n\n    //get all forwards moves + the double move at the start\n    let targetPiece1 = getATargetSquareByLocation(square.props.x + position1Offset, square.props.y); //move pawn 1 square ahead\n    let targetPiece2 = getATargetSquareByLocation(square.props.x + position2Offset, square.props.y); //move pawn 2 squares ahead\n\n    //get potential neighbors to capture\n    let neighbor1 = getATargetSquareByLocation(square.props.x + position1Offset, square.props.y + position1Offset);\n    let neighbor2 = getATargetSquareByLocation(square.props.x + position1Offset, square.props.y + position1Offset * -1);\n\n    //get the En Passant coordinates\n    let enPassantCordinates = convertCoordinatesToLocation(enPassant);\n    let enPassantSquare = enPassantCordinates ? getATargetSquareByLocation(enPassantCordinates.x, enPassantCordinates.y) : '';\n    let isTheSquareInFrontAvailable = isSquareAvailable(targetPiece1);\n\n    //push the one move forward for a pawn\n    if (isTheSquareInFrontAvailable) {\n      moves.push(targetPiece1);\n    }\n\n    //two moves are allowed only if the two squares above are free/empty\n    //allowed if pawn hasn't moved before\n    if (isTheSquareInFrontAvailable && isSquareAvailable(targetPiece2) && isPawnOnStartingSquare(square)) {\n      moves.push(targetPiece2);\n    }\n\n    //push neighbour if there is a piece to capture and it's a different color than the pawn\n    if (!isSquareAvailable(neighbor1) && !areSameColor(neighbor1, square)) {\n      moves.push(neighbor1);\n    }\n\n    //push neighbour if there is a piece to capture and it's a different color than the pawn\n    if (!isSquareAvailable(neighbor2) && !areSameColor(neighbor2, square)) {\n      moves.push(neighbor2);\n    }\n\n    //add En Passant\n    if (enPassantSquare) {\n      moves.push(enPassantSquare);\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a rook\n  function getRooksPossibleMoves(square, skip = true) {\n    if (!doesTheSquareHasThePiece(square, PIECES.ROOK) && skip) {\n      return;\n    }\n    let moves = [];\n    for (let i = square.props.x + 1; i < DIM; i++) {\n      let targetSquare = getATargetSquareByLocation(i, square.props.y);\n      if (isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    for (let i = square.props.x - 1; i >= 0; i--) {\n      let targetSquare = getATargetSquareByLocation(i, square.props.y);\n      if (isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    for (let i = square.props.y + 1; i < DIM; i++) {\n      let targetSquare = getATargetSquareByLocation(square.props.x, i);\n      if (isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    for (let i = square.props.y - 1; i >= 0; i--) {\n      let targetSquare = getATargetSquareByLocation(square.props.x, i);\n      if (isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a bishop\n  function getBishopPossibleMoves(square, skip = true) {\n    if (!doesTheSquareHasThePiece(square, PIECES.BISHOP) && skip) {\n      return;\n    }\n    let moves = [];\n    let counter = 0;\n    for (let i = 1; i <= DIM; i++) {\n      if (counter == 4) {\n        break;\n      }\n      let target1 = getATargetSquareByLocation(square.props.x - i, square.props.y - i);\n      let target2 = getATargetSquareByLocation(square.props.x - i, square.props.y + i);\n      let target3 = getATargetSquareByLocation(square.props.x + i, square.props.y + i);\n      let target4 = getATargetSquareByLocation(square.props.x + i, square.props.y - i);\n      if (target1 && isSquareAvailable(target1) && counter < 1) {\n        moves.push(target1);\n      } else {\n        if (!areSameColor(square, target1)) {\n          moves.push(target1);\n        }\n        counter++;\n      }\n      if (target2 && isSquareAvailable(target2) && counter < 2) {\n        moves.push(target2);\n      } else {\n        if (!areSameColor(square, target2)) {\n          moves.push(target2);\n        }\n        counter++;\n      }\n      if (target3 && isSquareAvailable(target3) && counter < 3) {\n        moves.push(target3);\n      } else {\n        if (!areSameColor(square, target3)) {\n          moves.push(target3);\n        }\n        counter++;\n      }\n      if (target4 && isSquareAvailable(target4) && counter < 4) {\n        moves.push(target4);\n      } else {\n        if (!areSameColor(square, target4)) {\n          moves.push(target4);\n        }\n        counter++;\n      }\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a knight\n  function getKnightPossibleMoves(square) {\n    if (!doesTheSquareHasThePiece(square, PIECES.KNIGHT)) {\n      return;\n    }\n    let offset = 1;\n    let doubleOffset = 2 * offset;\n    let moves = [];\n    for (let i = 0; i < 8; i++) {\n      if (i != 0 && i % 2 == 0) {\n        offset *= -1;\n      }\n      let targetX = square.props.x + offset;\n      let targetY = square.props.y + doubleOffset;\n      let target = getATargetSquareByLocation(targetX, targetY);\n      if (target && isSquareAvailable(target)) {\n        moves.push(target);\n      } else {\n        if (!areSameColor(square, target)) {\n          moves.push(target);\n        }\n      }\n      doubleOffset *= -1;\n      if (i == 4) {\n        offset *= 2;\n        doubleOffset /= 2;\n      }\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a king\n  function getKingPossibleMoves(square) {\n    if (!doesTheSquareHasThePiece(square, PIECES.KING)) {\n      return;\n    }\n    let moves = [];\n    let color = getPieceColor(square);\n\n    //gets all possible 1-square moves for the king\n    for (let i = -1; i < 2; i++) {\n      for (let j = -1; j < 2; j++) {\n        let targetPiece = getATargetSquareByLocation(square.props.x + i, square.props.y + j);\n        if (targetPiece && isSquareAvailable(targetPiece)) {\n          moves.push(targetPiece);\n        } else {\n          if (!areSameColor(square, targetPiece)) {\n            moves.push(targetPiece);\n          }\n        }\n      }\n    }\n\n    //Castling logic\n    const longCastleSquare = getATargetSquareByLocation(square.props.x, square.props.y - 2);\n    const shortCastleSquare = getATargetSquareByLocation(square.props.x, square.props.y + 2);\n    if (isColorWhite(color) && checkIfCanWhiteLongCastle()) {\n      moves.push(longCastleSquare);\n    }\n    if (isColorWhite(color) && checkIfCanWhiteShortCastle()) {\n      moves.push(shortCastleSquare);\n    }\n    if (isColorBlack(color) && checkIfCanBlackLongCastle()) {\n      moves.push(longCastleSquare);\n    }\n    if (isColorBlack(color) && checkIfCanBlackShortCastle()) {\n      moves.push(shortCastleSquare);\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a queen\n  function getQueenPossibleMoves(square) {\n    if (!doesTheSquareHasThePiece(square, QUEEN)) {\n      return;\n    }\n    let moves = [];\n\n    //a queen has the same moves as a bishop and a rook\n    const rookMoves = getRooksPossibleMoves(square, false).moves;\n    const bishopMoves = getBishopPossibleMoves(square, false).moves;\n\n    // Concatenate the arrays of moves\n    moves.push(...rookMoves, ...bishopMoves);\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets the piece color\n  function getPieceColor(square) {\n    return square.props.piece.split(PIECE_DELIMITER)[0];\n  }\n\n  //gets the piece\n  function getPiece(square) {\n    return square.props.piece.split(PIECE_DELIMITER)[1];\n  }\n\n  //removes moves that do not deal with a check\n  function filterMovesIfInCheck(possibleMoves) {\n    let blackKing = getATargetSquareByPiece(BLACK_KING); //get the black king\n    let whiteKing = getATargetSquareByPiece(WHITE_KING); //get the white king\n\n    for (let i = 0; i < possibleMoves.length; i++) {\n      for (let j = 0; j < possibleMoves[i].moves; j++) {\n        if (possibleMoves[i].piece.props.piece == BLACK_KING) {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].moves[j].props.x,\n            y: possibleMoves[i].moves[j].props.y,\n            piece: \"black-king\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1216,\n            columnNumber: 32\n          }, this);\n          let pseudo = /*#__PURE__*/_jsxDEV(Square, {\n            x: blackKing.props.x,\n            y: blackKing.props.y,\n            piece: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1217,\n            columnNumber: 34\n          }, this);\n          let isInCheck = isBlackInCheck(move, pseudo);\n          if (isInCheck) {\n            possibleMoves[i].moves.splice(j, 1);\n            j--;\n          }\n        } else if (possibleMoves[i].piece.props.piece == WHITE_KING) {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].moves[j].props.x,\n            y: possibleMoves[i].moves[j].props.y,\n            piece: \"white-king\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1225,\n            columnNumber: 32\n          }, this);\n          let pseudo = /*#__PURE__*/_jsxDEV(Square, {\n            x: whiteKing.props.x,\n            y: whiteKing.props.y,\n            piece: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1226,\n            columnNumber: 34\n          }, this);\n          let isInCheck = isWhiteInCheck(move, pseudo);\n          if (isInCheck) {\n            possibleMoves[i].moves.splice(j, 1);\n            j--;\n          }\n        } else {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].moves[j].props.x,\n            y: possibleMoves[i].moves[j].props.y,\n            piece: possibleMoves[i].piece.props.piece\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1234,\n            columnNumber: 32\n          }, this);\n          let isInCheck = isBlackInCheck(blackKing, move) ? true : isWhiteInCheck(whiteKing, move);\n          if (isInCheck) {\n            possibleMoves[i].moves.splice(j, 1);\n            j--;\n          }\n        }\n      }\n    }\n    return possibleMoves;\n  }\n\n  //removes moves that allow illigal castling (castles through check for example)\n  function filterMovesThatAllowIllegalCastling(possibleMoves) {\n    let blackKing = getATargetSquareByPiece(BLACK_KING); //get the black king\n    let whiteKing = getATargetSquareByPiece(WHITE_KING); //get the white king\n\n    for (let i = 0; i < possibleMoves.length; i++) {\n      let whiteCastle1 = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 6); //sqaure where king will be after short castle (white)\n      let whiteCastle2 = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 2); //sqaure where king will be after long castle (white)\n      let blackCastle1 = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 6); //square where king will be after shot castle (black)\n      let blackCastle2 = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 2); //square where king will be after long castle (black)\n\n      if (possibleMoves[i].piece == blackKing || possibleMoves[i].piece == whiteKing) {\n        if (whiteCastle1) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 5);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n        if (whiteCastle2) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 3);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n        if (blackCastle1) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 5);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n        if (blackCastle2) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 3);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n      }\n\n      //prevents black to castle if in check\n      if (isBlackInCheck(blackKing)) {\n        if (blackCastle1) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove), 1);\n        }\n        if (blackCastle2) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove2), 1);\n        }\n      }\n\n      //prevents white to castle if in check\n      if (isWhiteInCheck(whiteKing)) {\n        if (whiteCastle1) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove), 1);\n        }\n        if (whiteCastle2) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove2), 1);\n        }\n      }\n    }\n    return possibleMoves;\n  }\n\n  //removes empty/undefined values for generated moves\n  function removeEmptyMoves(possibleMoves) {\n    for (let i = 0; i < possibleMoves.length; i++) {\n      if (!possibleMoves[i]) {\n        possibleMoves.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (possibleMoves[i].moves.length == 0) {\n        possibleMoves.splice(i, 1);\n        i--;\n        continue;\n      }\n      for (let j = 0; j < possibleMoves[i].moves.length; j++) {\n        if (!possibleMoves[i].moves[j]) {\n          possibleMoves[i].moves.splice(j, 1);\n          j--;\n        }\n      }\n    }\n    return possibleMoves;\n  }\n\n  //gets all possible/legal moves\n  function getPossibleMoves() {\n    //let square = getATargetSquareByLocation(x, y)\n    let possiblePieceMoves = [];\n    let squares = BoardSquares;\n    for (let i = 0; i < squares.length; i++) {\n      let square = squares[i];\n\n      //if the square has a piece\n      if (square.props.piece) {\n        let color = getPieceColor(square); //get the piece color\n\n        //don't collect possible moves if it's black to move and you're trying to move a white piece\n        if (isColorWhite(color) && !isWhiteToMove) {\n          //console.log(`Skipping because it's black to move and you're moving a white piece, x: ${square.props.x}, y: ${square.props.y}`)\n          continue;\n        }\n\n        //don't collect possible moves if it's white to move and you're trying to move a black piece\n        if (isColorBlack(color) && isWhiteToMove) {\n          //console.log(`Skipping because it's white to move and you're moving a black piece, x: ${square.props.x}, y: ${square.props.y}`)\n          continue;\n        }\n\n        //console.log(`Getting possible moves, x: ${square.props.x}, y: ${square.props.y}`)\n        //get all possible moves for each piece\n        possiblePieceMoves.push(getPawnsPossibleMoves(square));\n        possiblePieceMoves.push(getRooksPossibleMoves(square));\n        possiblePieceMoves.push(getBishopPossibleMoves(square));\n        possiblePieceMoves.push(getKnightPossibleMoves(square));\n        possiblePieceMoves.push(getKingPossibleMoves(square));\n        possiblePieceMoves.push(getQueenPossibleMoves(square));\n\n        //filter empty moves\n        possiblePieceMoves = removeEmptyMoves(possiblePieceMoves);\n\n        //filter possible moves\n        possiblePieceMoves = filterMovesIfInCheck(possiblePieceMoves);\n        possiblePieceMoves = filterMovesThatAllowIllegalCastling(possiblePieceMoves);\n      }\n    }\n    console.log(\"Possible Moves:\", possiblePieceMoves);\n    updatePossibleMoves(possiblePieceMoves);\n  }\n\n  //renders the board\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessGrid\",\n      children: BoardSquares.map(sqr => sqr)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1391,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Board, \"xJXclnYn8btg3XUa1jQ4zsqLJfI=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useState","useEffect","useRef","createContext","React","Square","ConvertFENPieceToPiece","ConvertFenToString","UpdatePosition","ParseFEN","DIM","PIECE_DELIMITER","KINGS","COLORS","PIECES","BoardSquares","jsxDEV","_jsxDEV","Fragment","_Fragment","Board","_s","fen","setFen","boardPosition","setBoardPosition","nextTurn","setNextTurn","WCastleK","setWCastleK","WCastleQ","setWCastleQ","BCastleK","setBCastleK","BCastleQ","setBCastleQ","enPassant","setEnPassant","halfMoves","setHalfMoves","fullMoves","setFullMoves","possibleMoves","setPossibleMoves","selectedSquareX","setSelectedSquareX","selectedSquareY","setSelectedSquareY","canWhiteShortCastle","setCanWhiteShortCastle","canWhiteLongCastle","setCanWhiteLongCastle","canBlackShortCastle","setCanBlackShortCastle","canBlackLongCastle","setCanBlackLongCastle","enPassantPossible","setEnPassantPossible","enPassantX","setEnPassantX","enPassantY","setEnPassantY","isWhiteToMove","setIsWhiteToMove","boardPositionRef","boardSquareRef","boardSquare","possibleMovesRef","current","fenParser","fenBoard","fenTurn","fenCastling","fenEnPassant","fenHalfMoves","fenFullMoves","fenRows","split","arr","row","tokens","r","i","length","Number","j","push","boardSquares","squareColorIsWhite","squares","color","getPossibleMoves","x","y","piece","updateSelectedSquareX","updateSelectedSquareY","updatePossibleMoves","movePiece","fileName","_jsxFileName","lineNumber","columnNumber","includes","setBoardSquare","isWhiteInCheck","square","pseudo","updatedSquares","map","s","props","cloneElement","find","knight1","knight2","knight3","knight4","knight5","knight6","knight7","knight8","isBlackInCheck","position","targetSquare","getATargetSquareByLocation","getPieceColor","getPiece","isColorWhite","p","enPassantTargetSquare","enPassantSquare","Math","abs","enPassant1","enPassant2","moves","getATargetSquareByPiece","isSquareAvailable","isPawnOnStartingSquare","pawn","areSameColor","square1","square2","color1","color2","doesTheSquareHasThePiece","isPawnOnEnPassantSquare","WHITE","isColorBlack","BLACK","checkIfCanWhiteLongCastle","checkIfCanWhiteShortCastle","checkIfCanBlackLongCastle","checkIfCanBlackShortCastle","convertCoordinatesToLocation","coordinates","letter","toString","toUpperCase","number","charCodeAt","getPawnsPossibleMoves","PAWN","position1Offset","position2Offset","targetPiece1","targetPiece2","neighbor1","neighbor2","enPassantCordinates","isTheSquareInFrontAvailable","getRooksPossibleMoves","skip","ROOK","getBishopPossibleMoves","BISHOP","counter","target1","target2","target3","target4","getKnightPossibleMoves","KNIGHT","offset","doubleOffset","targetX","targetY","target","getKingPossibleMoves","KING","targetPiece","longCastleSquare","shortCastleSquare","getQueenPossibleMoves","QUEEN","rookMoves","bishopMoves","filterMovesIfInCheck","blackKing","BLACK_KING","whiteKing","WHITE_KING","move","isInCheck","splice","filterMovesThatAllowIllegalCastling","whiteCastle1","m","whiteCastle2","blackCastle1","blackCastle2","pieceAcross","indexOf","castleMove","castleMove2","removeEmptyMoves","possiblePieceMoves","console","log","children","className","sqr","_c","$RefreshReg$"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/Chess-React.js-/src/Board.js"],"sourcesContent":["import { useState, useEffect, useRef, createContext } from \"react\";\r\nimport React from 'react';\r\nimport Square from \"./Square.js\"\r\nimport { ConvertFENPieceToPiece, ConvertFenToString, UpdatePosition, ParseFEN } from \"./HelperMethods.js\";\r\nimport { DIM, PIECE_DELIMITER, KINGS, COLORS, PIECES, BoardSquares } from \"./gllobalVariables.js\"\r\n\r\n\r\n/*\r\nTODO:\r\nCode Reusability: refactor some of the repeated code and generate new functions if needed\r\nConsistency and Naming: Have better and more consistent names for variables and functions\r\nDocumentation: add more comments to understand what is going on\r\nTesting: add unit tests\r\nImplementations: add promotions, implement endgames (mate, stalemate, draws repeation, 50 moves rule)\r\nBugs: Fix bugs (if any)\r\n*/\r\n\r\nfunction Board() {\r\n    //<summary>\r\n    //FEN - Forsyth-Edwards Notation\r\n    //small letters - black pieces\r\n    //capital letters - white pieces\r\n    //numbers - empty board squares\r\n    //(/) - separates each board row\r\n    //first letter after the board indicates whose turn it is to move (w - white, b - black)\r\n    //next letters indicate castling rights, k - kingside, q - queenside, (-) - no castling allowed for any side\r\n    //en passant square - when a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square\r\n    //the number of half turns (white moves, then black moves = 2 half moves) that were made without a pawn move or a capture of a piece (50-move rule when reaches 100)\r\n    //the number of full moves (white moves, then black moves = 1 full move); increase after every black half move\r\n    //</summary>\r\n    //starting position\r\n    //'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\r\n    const [fen, setFen] = useState('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0')\r\n    const [boardPosition, setBoardPosition] = useState([[]])\r\n    const [nextTurn, setNextTurn] = useState('')\r\n    const [WCastleK, setWCastleK] = useState(true)\r\n    const [WCastleQ, setWCastleQ] = useState(true)\r\n    const [BCastleK, setBCastleK] = useState(true)\r\n    const [BCastleQ, setBCastleQ] = useState(true)\r\n    const [enPassant, setEnPassant] = useState('')\r\n    const [halfMoves, setHalfMoves] = useState(0)\r\n    const [fullMoves, setFullMoves] = useState(0)\r\n    const [possibleMoves, setPossibleMoves] = useState([])\r\n    const [selectedSquareX, setSelectedSquareX] = useState('')\r\n    const [selectedSquareY, setSelectedSquareY] = useState('')\r\n    const [canWhiteShortCastle, setCanWhiteShortCastle] = useState(true)\r\n    const [canWhiteLongCastle, setCanWhiteLongCastle] = useState(true)\r\n    const [canBlackShortCastle, setCanBlackShortCastle] = useState(true)\r\n    const [canBlackLongCastle, setCanBlackLongCastle] = useState(true)\r\n    const [enPassantPossible, setEnPassantPossible] = useState(false)\r\n    const [enPassantX, setEnPassantX] = useState('')\r\n    const [enPassantY, setEnPassantY] = useState('')\r\n    const [isWhiteToMove, setIsWhiteToMove] = useState(true)\r\n\r\n    const boardPositionRef = useRef(boardPosition);\r\n    const boardSquareRef = useRef(boardSquare)\r\n    const possibleMovesRef = useRef(possibleMoves)\r\n\r\n    useEffect(() => {\r\n        possibleMovesRef.current = possibleMoves\r\n    }, [possibleMoves])\r\n\r\n    useEffect(() => {\r\n        boardPositionRef.current = boardPosition;\r\n    }, [boardPosition]);\r\n\r\n    useEffect(() => {\r\n        boardSquareRef.current = boardSquare;\r\n    }, [boardSquare]);\r\n\r\n    // useEffect(() => {\r\n    //     console.log(selectedSquareX, selectedSquareY)\r\n    // }, [selectedSquareX, selectedSquareY])\r\n\r\n    //called when the page loads.we need to parse the FEN to fill in the board\r\n    useEffect(() => {\r\n        fenParser()\r\n    }, [])\r\n\r\n    //parses the FEN for the initial board state\r\n    function fenParser() {\r\n        //parses the FEN string to variables\r\n        const { fenBoard, fenTurn, fenCastling, fenEnPassant, fenHalfMoves, fenFullMoves } = ParseFEN(fen)\r\n\r\n        const fenRows = fenBoard.split('/')\r\n\r\n        let arr = [];\r\n\r\n        //splits all rows and creates a matrix for the board\r\n        for (let row of fenRows) {\r\n            const tokens = row.split('')\r\n\r\n            let r = []\r\n\r\n            for (let i = 0; i < tokens.length; i++) {\r\n                if (Number(tokens[i])) {\r\n                    for (let j = 0; j < Number(tokens[i]); j++) {\r\n                        r.push(' ')\r\n                    }\r\n                } else {\r\n                    r.push(tokens[i])\r\n                }\r\n            }\r\n\r\n            arr.push(r)\r\n        }\r\n\r\n        //generates a Square component for each element in the matrix created above\r\n        let boardSquares = [];\r\n        let squareColorIsWhite = true;\r\n        let squares = []\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            for (let j = 0; j < arr[i].length; j++) {\r\n                let color = squareColorIsWhite ? \"\" : \"dark\";\r\n                //boardSquares.push(\r\n                squares.push(\r\n                    <Square\r\n                        getPossibleMoves={getPossibleMoves}\r\n                        key={`${i}-${j}`}\r\n                        x={i}\r\n                        y={j}\r\n                        piece={ConvertFENPieceToPiece(arr[i][j])}\r\n                        color={color}\r\n                        selectedSquareX={selectedSquareX}\r\n                        setSelectedSquareX={updateSelectedSquareX}\r\n                        selectedSquareY={selectedSquareY}\r\n                        setSelectedSquareY={updateSelectedSquareY}\r\n                        possibleMoves={possibleMovesRef}\r\n                        updatePossibleMoves={updatePossibleMoves}\r\n                        movePiece={movePiece}\r\n                    />\r\n                )\r\n                squareColorIsWhite = !squareColorIsWhite;\r\n            }\r\n            squareColorIsWhite = !squareColorIsWhite;\r\n        }\r\n\r\n        BoardSquares.length == 0 ? BoardSquares.push(...squares) : BoardSquares;\r\n\r\n        if (fenCastling.includes('K')) {\r\n            setCanWhiteShortCastle(true);\r\n        }\r\n        if (fenCastling.includes('Q')) {\r\n            setCanWhiteLongCastle(true);\r\n        }\r\n        if (fenCastling.includes('k')) {\r\n            setCanBlackShortCastle(true);\r\n        }\r\n        if (fenCastling.includes('q')) {\r\n            setCanBlackLongCastle(true);\r\n        }\r\n\r\n        //updates the state\r\n        setBoardPosition(arr)\r\n        setNextTurn(fenTurn)\r\n        setEnPassant(fenEnPassant)\r\n        setHalfMoves(fenHalfMoves)\r\n        setFullMoves(fenFullMoves)\r\n        setBoardSquare(boardSquares)\r\n    }\r\n\r\n    function isWhiteInCheck(square, pseudo) {\r\n        let squares = boardSquareRef.current\r\n\r\n        if (pseudo) {\r\n            const updatedSquares = squares.map(s => {\r\n                if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\r\n                    // Return a new Square component with the updated piece\r\n                    return React.cloneElement(s, { piece: pseudo.props.piece });\r\n                } else {\r\n                    // For other squares, return the original Square component\r\n                    return s;\r\n                }\r\n            });\r\n\r\n            squares = updatedSquares;\r\n        }\r\n\r\n        //check for attackers in front of the white king\r\n        for (let i = square.props.x - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from behind\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers behind the white king\r\n        for (let i = square.props.x + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the front\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the left of the white king\r\n        for (let i = square.props.y - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the left\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the right of the white king\r\n        for (let i = square.props.y + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the right\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == -1) {\r\n                                //console.log(\"in check from top half of counterclockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from top half of counterclockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        return true\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == 1) {\r\n                                //console.log(\"in check from top half of clockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from top half of clockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        return true;\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for knights check\r\n        let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1)\r\n        let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1)\r\n        let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1)\r\n        let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1)\r\n        let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2)\r\n        let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2)\r\n        let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2)\r\n        let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2)\r\n\r\n        if (knight1) {\r\n            if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight1.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 1\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight2) {\r\n            if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight2.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 2\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight3) {\r\n            if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight3.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 3\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight4) {\r\n            if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight4.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 4\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight5) {\r\n            if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight5.props.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 5\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight6) {\r\n            if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight6.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 6\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight7) {\r\n            if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight7.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 7\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight8) {\r\n            if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight8.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 8\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function isBlackInCheck(square, pseudo) {\r\n        let squares = boardSquareRef.current\r\n\r\n        if (pseudo) {\r\n            const updatedSquares = squares.map(s => {\r\n                if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\r\n                    // Return a new Square component with the updated piece\r\n                    return React.cloneElement(s, { piece: pseudo.props.piece });\r\n                } else {\r\n                    // For other squares, return the original Square component\r\n                    return s;\r\n                }\r\n            });\r\n\r\n            squares = updatedSquares;\r\n        }\r\n\r\n        //check for attackers behind the black king\r\n        for (let i = square.props.x - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from behind\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers in front of the black king\r\n        for (let i = square.props.x + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the front\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the left of the black king\r\n        for (let i = square.props.y - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the left\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the right of the black king\r\n        for (let i = square.props.y + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the right\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        //console.log(\"in check from top half of counterclockwise diagonal\")\r\n                        return true\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == 1) {\r\n                                //console.log(\"in check from bottom half of counterclockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from bottom half of counterclockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        //console.log(\"in check from top half of clockwise diagonal\")\r\n                        return true\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == -1) {\r\n                                //console.log(\"in check from bottom half of clockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from bottom half of clockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for knights check\r\n        let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1)\r\n        let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1)\r\n        let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1)\r\n        let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1)\r\n        let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2)\r\n        let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2)\r\n        let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2)\r\n        let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2)\r\n\r\n        if (knight1) {\r\n            if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight1.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 1\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight2) {\r\n            if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight2.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 2\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight3) {\r\n            if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight3.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 3\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight4) {\r\n            if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight4.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 4\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight5) {\r\n            if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight5.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 5\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight6) {\r\n            if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight6.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 6\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight7) {\r\n            if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight7.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 7\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight8) {\r\n            if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight8.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 8\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function movePiece(x, y) {\r\n        let squares = boardSquareRef.current;\r\n        let position = boardPositionRef.current\r\n\r\n        let targetSquare = getATargetSquareByLocation(x, y)\r\n        let square = squares.find(s => s.props.x == selectedSquareX && s.props.y == selectedSquareY)\r\n\r\n        let color = getPieceColor(square)\r\n        let piece = getPiece(square)\r\n\r\n        //disable castling if the king moves\r\n        if (piece == \"king\") {\r\n            if (isColorWhite(color)) {\r\n                setCanWhiteLongCastle(false)\r\n                setCanWhiteShortCastle(false)\r\n            } else {\r\n                setCanBlackLongCastle(false)\r\n                setCanBlackShortCastle(false)\r\n            }\r\n        }\r\n\r\n        //disable castling if the rook moves\r\n        if (piece == \"rook\") {\r\n            if (square.props.x == 7 && square.props.y == 7) {\r\n                setCanWhiteShortCastle(false)\r\n            }\r\n\r\n            if (square.props.x == 0 && square.props.y == 7) {\r\n                setCanBlackShortCastle(false)\r\n            }\r\n\r\n            if (square.props.x == 7 && square.props.y == 0) {\r\n                setCanWhiteLongCastle(false)\r\n            }\r\n\r\n            if (square.props.x == 0 && square.props.y == 0) {\r\n                setCanBlackLongCastle(false)\r\n            }\r\n        }\r\n\r\n        let p = UpdatePosition(square, targetSquare, position)\r\n\r\n        //capturing enPassant\r\n        if (enPassantX && enPassantY && enPassantPossible) {\r\n            let enPassantTargetSquare = color == \"white\" ? squares.find(s => s.props.x == x + 1 && s.props.y == y) : squares.find(s => s.props.x == x - 1 && s.props.y == y)\r\n            let enPassantSquare = <Square x={square.props.x} y={square.props.y} piece={\"\"} />\r\n\r\n            p = UpdatePosition(enPassantSquare, enPassantTargetSquare, p)\r\n        }\r\n\r\n        //TODO: ensure p matches the new board Position format\r\n        //setBoardPosition(p)\r\n        setPossibleMoves([])\r\n        setIsWhiteToMove(!isWhiteToMove)\r\n\r\n        //enabling en passant\r\n        if (piece == \"pawn\") {\r\n            if (Math.abs(square.props.x - targetSquare.props.x) == 2) {\r\n                let enPassant1 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y - 1)\r\n                let enPassant2 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y + 1)\r\n\r\n                if (enPassant1) {\r\n                    if (enPassant1.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (enPassant1.props.piece.split(\"-\")[0] != color) {\r\n                            setEnPassantPossible(true)\r\n                            setEnPassantX(targetSquare.props.x)\r\n                            setEnPassantY(targetSquare.props.y)\r\n                            return\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (enPassant2) {\r\n                    if (enPassant2.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (enPassant2.props.piece.split(\"-\")[0] != color) {\r\n                            setEnPassantPossible(true)\r\n                            setEnPassantX(targetSquare.props.x)\r\n                            setEnPassantY(targetSquare.props.y)\r\n                            return\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        setEnPassantPossible(false)\r\n        setEnPassantX('')\r\n        setEnPassantY('')\r\n    }\r\n\r\n    //updates the state with the possible moves\r\n    function updatePossibleMoves(moves) {\r\n        setPossibleMoves(moves)\r\n    };\r\n\r\n    //updates the state with the selectedSquare X coordinates\r\n    function updateSelectedSquareX(x) {\r\n        setSelectedSquareX(x)\r\n    }\r\n\r\n    //updates the state with the selectedSquare Y coordinates\r\n    function updateSelectedSquareY(y) {\r\n        setSelectedSquareY(y)\r\n    }\r\n\r\n    //retrieves a speecific square from the board using x and y coordinates (location)\r\n    function getATargetSquareByLocation(x, y) {\r\n        return BoardSquares.find(s => s.props.x === x && s.props.y === y);\r\n    }\r\n\r\n    //retrieves a speecific square from the board that has a certain piece\r\n    function getATargetSquareByPiece(piece) {\r\n        return BoardSquares.find(s => s.props.piece == piece);\r\n    }\r\n\r\n    //check if a specific square has a piece assigned to it\r\n    function isSquareAvailable(square) {\r\n        return square && !square.props.piece\r\n    }\r\n\r\n    //checks if a pawn is on its starting square and allows a 2-squares move\r\n    function isPawnOnStartingSquare(pawn) {\r\n        return isColorWhite(pawn.props.piece.split(PIECE_DELIMITER)[0]) ? pawn.props.x == 6 : pawn.props.x == 1\r\n    }\r\n\r\n    //checks if two pieces have the same color\r\n    function areSameColor(square1, square2) {\r\n        if (!square1 || !square2) {\r\n            return\r\n        }\r\n\r\n        let color1 = square1.props.piece.split(PIECE_DELIMITER)[0];\r\n        let color2 = square2.props.piece.split(PIECE_DELIMITER)[0];\r\n\r\n        return color1 == color2\r\n    }\r\n\r\n    //checks if a square contains a certain piece\r\n    function doesTheSquareHasThePiece(square, piece) {\r\n        let p = getPiece(square)\r\n\r\n        return p == piece\r\n    }\r\n\r\n    //cheks if a pawn is on En Passant square\r\n    function isPawnOnEnPassantSquare(pawn) {\r\n        return isColorWhite(pawn.props.piece.split(PIECE_DELIMITER)[0]) ? pawn.props.x == 3 : pawn.props.x == 4\r\n    }\r\n\r\n    //checks if a color is white\r\n    function isColorWhite(color) {\r\n        return color == COLORS.WHITE\r\n    }\r\n\r\n    //checks if a color is black\r\n    function isColorBlack(color) {\r\n        return color == COLORS.BLACK\r\n    }\r\n\r\n    //checks if white is allowed to long castle\r\n    function checkIfCanWhiteLongCastle() {\r\n        return canWhiteLongCastle &&\r\n            boardPositionRef.current[7][0] == 'R' &&\r\n            boardPositionRef.current[7][1] == '' &&\r\n            boardPositionRef.current[7][2] == '' &&\r\n            boardPositionRef.current[7][3] == '';\r\n    }\r\n\r\n    //checks if white is allowed to short castle\r\n    function checkIfCanWhiteShortCastle() {\r\n        return canWhiteShortCastle &&\r\n            boardPositionRef.current[7][7] == 'R' &&\r\n            boardPositionRef.current[7][6] == '' &&\r\n            boardPositionRef.current[7][5] == '';\r\n    }\r\n\r\n    //checks if black is allowed to long castle\r\n    function checkIfCanBlackLongCastle() {\r\n        return canBlackLongCastle &&\r\n            boardPositionRef.current[0][0] == 'r' &&\r\n            boardPositionRef.current[0][1] == '' &&\r\n            boardPositionRef.current[0][2] == '' &&\r\n            boardPositionRef.current[0][3] == '';\r\n    }\r\n\r\n    //checks if black is allowed to short castle\r\n    function checkIfCanBlackShortCastle() {\r\n        return canBlackShortCastle &&\r\n            boardPositionRef.current[7][7] == 'r' &&\r\n            boardPositionRef.current[7][6] == '' &&\r\n            boardPositionRef.current[7][5] == '';\r\n    }\r\n\r\n    //converts board coordinates to X and Y position on the board, e.g., a8 = 0, 0\r\n    function convertCoordinatesToLocation(coordinates) {\r\n        let tokens = coordinates.split('')\r\n\r\n        //skip invalid coordinates\r\n        if (tokens.length != 2) {\r\n            return\r\n        }\r\n\r\n        let letter = tokens[0].toString().toUpperCase()\r\n        let number = tokens[1]\r\n\r\n        //65 is the ASCII code for capital A which will give us 0 if we have A as a coordinate; A-F will give us 0-7 for x\r\n        //reverse the numbers since we draw the board top down\r\n        return { x: letter.charCodeAt(0) - 65, y: DIM - Number(number) }\r\n    }\r\n\r\n    //gets all possible moves for a pawn\r\n    function getPawnsPossibleMoves(square) {\r\n        if (!doesTheSquareHasThePiece(square, PIECES.PAWN)) {\r\n            return\r\n        }\r\n\r\n        let color = getPieceColor(square) //get the piece color\r\n\r\n        let moves = []\r\n\r\n        let position1Offset = 1\r\n        let position2Offset = 2\r\n\r\n        //flips the direction if the color is white\r\n        if (isColorWhite(color)) {\r\n            position1Offset *= -1\r\n            position2Offset *= -1\r\n        }\r\n\r\n        //get all forwards moves + the double move at the start\r\n        let targetPiece1 = getATargetSquareByLocation(square.props.x + position1Offset, square.props.y) //move pawn 1 square ahead\r\n        let targetPiece2 = getATargetSquareByLocation(square.props.x + position2Offset, square.props.y) //move pawn 2 squares ahead\r\n\r\n        //get potential neighbors to capture\r\n        let neighbor1 = getATargetSquareByLocation(square.props.x + position1Offset, square.props.y + position1Offset)\r\n        let neighbor2 = getATargetSquareByLocation(square.props.x + position1Offset, square.props.y + (position1Offset * -1))\r\n\r\n        //get the En Passant coordinates\r\n        let enPassantCordinates = convertCoordinatesToLocation(enPassant)\r\n        let enPassantSquare = enPassantCordinates ? getATargetSquareByLocation(enPassantCordinates.x, enPassantCordinates.y) : ''\r\n\r\n        let isTheSquareInFrontAvailable = isSquareAvailable(targetPiece1)\r\n\r\n        //push the one move forward for a pawn\r\n        if (isTheSquareInFrontAvailable) {\r\n            moves.push(targetPiece1)\r\n        }\r\n\r\n        //two moves are allowed only if the two squares above are free/empty\r\n        //allowed if pawn hasn't moved before\r\n        if (isTheSquareInFrontAvailable && isSquareAvailable(targetPiece2) && isPawnOnStartingSquare(square)) {\r\n            moves.push(targetPiece2)\r\n        }\r\n\r\n        //push neighbour if there is a piece to capture and it's a different color than the pawn\r\n        if (!isSquareAvailable(neighbor1) && !areSameColor(neighbor1, square)) {\r\n            moves.push(neighbor1)\r\n        }\r\n\r\n        //push neighbour if there is a piece to capture and it's a different color than the pawn\r\n        if (!isSquareAvailable(neighbor2) && !areSameColor(neighbor2, square)) {\r\n            moves.push(neighbor2)\r\n        }\r\n\r\n        //add En Passant\r\n        if (enPassantSquare) {\r\n            moves.push(enPassantSquare)\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a rook\r\n    function getRooksPossibleMoves(square, skip = true) {\r\n        if (!doesTheSquareHasThePiece(square, PIECES.ROOK) && skip) {\r\n            return\r\n        }\r\n\r\n        let moves = []\r\n\r\n        for (let i = square.props.x + 1; i < DIM; i++) {\r\n            let targetSquare = getATargetSquareByLocation(i, square.props.y)\r\n\r\n            if (isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break\r\n            }\r\n        }\r\n\r\n        for (let i = square.props.x - 1; i >= 0; i--) {\r\n            let targetSquare = getATargetSquareByLocation(i, square.props.y)\r\n\r\n            if (isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = square.props.y + 1; i < DIM; i++) {\r\n            let targetSquare = getATargetSquareByLocation(square.props.x, i)\r\n\r\n            if (isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break\r\n            }\r\n        }\r\n\r\n        for (let i = square.props.y - 1; i >= 0; i--) {\r\n            let targetSquare = getATargetSquareByLocation(square.props.x, i)\r\n\r\n            if (isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break\r\n            }\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a bishop\r\n    function getBishopPossibleMoves(square, skip = true) {\r\n        if (!doesTheSquareHasThePiece(square, PIECES.BISHOP) && skip) {\r\n            return\r\n        }\r\n\r\n        let moves = []\r\n\r\n        let counter = 0;\r\n\r\n        for (let i = 1; i <= DIM; i++) {\r\n            if (counter == 4) {\r\n                break;\r\n            }\r\n\r\n            let target1 = getATargetSquareByLocation(square.props.x - i, square.props.y - i)\r\n            let target2 = getATargetSquareByLocation(square.props.x - i, square.props.y + i)\r\n            let target3 = getATargetSquareByLocation(square.props.x + i, square.props.y + i)\r\n            let target4 = getATargetSquareByLocation(square.props.x + i, square.props.y - i)\r\n\r\n            if (target1 && isSquareAvailable(target1) && counter < 1) {\r\n                moves.push(target1)\r\n            } else {\r\n                if (!areSameColor(square, target1)) {\r\n                    moves.push(target1)\r\n                }\r\n                counter++;\r\n            }\r\n\r\n            if (target2 && isSquareAvailable(target2) && counter < 2) {\r\n                moves.push(target2)\r\n            } else {\r\n                if (!areSameColor(square, target2)) {\r\n                    moves.push(target2)\r\n                }\r\n                counter++;\r\n            }\r\n\r\n            if (target3 && isSquareAvailable(target3) && counter < 3) {\r\n                moves.push(target3)\r\n            } else {\r\n                if (!areSameColor(square, target3)) {\r\n                    moves.push(target3)\r\n                }\r\n                counter++;\r\n            }\r\n\r\n            if (target4 && isSquareAvailable(target4) && counter < 4) {\r\n                moves.push(target4)\r\n            } else {\r\n                if (!areSameColor(square, target4)) {\r\n                    moves.push(target4)\r\n                }\r\n                counter++;\r\n            }\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a knight\r\n    function getKnightPossibleMoves(square) {\r\n        if (!doesTheSquareHasThePiece(square, PIECES.KNIGHT)) {\r\n            return\r\n        }\r\n\r\n        let offset = 1;\r\n        let doubleOffset = 2 * offset;\r\n\r\n        let moves = []\r\n\r\n        for (let i = 0; i < 8; i++) {\r\n            if (i != 0 && i % 2 == 0) {\r\n                offset *= -1;\r\n            }\r\n\r\n            let targetX = square.props.x + offset;\r\n            let targetY = square.props.y + doubleOffset;\r\n\r\n            let target = getATargetSquareByLocation(targetX, targetY)\r\n\r\n            if (target && isSquareAvailable(target)) {\r\n                moves.push(target)\r\n            } else {\r\n                if (!areSameColor(square, target)) {\r\n                    moves.push(target)\r\n                }\r\n            }\r\n\r\n            doubleOffset *= -1\r\n\r\n            if (i == 4) {\r\n                offset *= 2\r\n                doubleOffset /= 2\r\n            }\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a king\r\n    function getKingPossibleMoves(square) {\r\n        if (!doesTheSquareHasThePiece(square, PIECES.KING)) {\r\n            return\r\n        }\r\n\r\n        let moves = []\r\n\r\n        let color = getPieceColor(square)\r\n\r\n        //gets all possible 1-square moves for the king\r\n        for (let i = -1; i < 2; i++) {\r\n            for (let j = -1; j < 2; j++) {\r\n                let targetPiece = getATargetSquareByLocation(square.props.x + i, square.props.y + j)\r\n\r\n                if (targetPiece && isSquareAvailable(targetPiece)) {\r\n                    moves.push(targetPiece)\r\n                } else {\r\n                    if (!areSameColor(square, targetPiece)) {\r\n                        moves.push(targetPiece)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //Castling logic\r\n        const longCastleSquare = getATargetSquareByLocation(square.props.x, square.props.y - 2)\r\n        const shortCastleSquare = getATargetSquareByLocation(square.props.x, square.props.y + 2)\r\n\r\n        if (isColorWhite(color) && checkIfCanWhiteLongCastle()) {\r\n            moves.push(longCastleSquare)\r\n        }\r\n\r\n        if (isColorWhite(color) && checkIfCanWhiteShortCastle()) {\r\n            moves.push(shortCastleSquare)\r\n        }\r\n\r\n        if (isColorBlack(color) && checkIfCanBlackLongCastle()) {\r\n            moves.push(longCastleSquare)\r\n        }\r\n\r\n        if (isColorBlack(color) && checkIfCanBlackShortCastle()) {\r\n            moves.push(shortCastleSquare)\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a queen\r\n    function getQueenPossibleMoves(square) {\r\n        if (!doesTheSquareHasThePiece(square, QUEEN)) {\r\n            return\r\n        }\r\n\r\n        let moves = []\r\n\r\n        //a queen has the same moves as a bishop and a rook\r\n        const rookMoves = getRooksPossibleMoves(square, false).moves;\r\n        const bishopMoves = getBishopPossibleMoves(square, false).moves;\r\n\r\n        // Concatenate the arrays of moves\r\n        moves.push(...rookMoves, ...bishopMoves);\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets the piece color\r\n    function getPieceColor(square) {\r\n        return square.props.piece.split(PIECE_DELIMITER)[0]\r\n    }\r\n\r\n    //gets the piece\r\n    function getPiece(square) {\r\n        return square.props.piece.split(PIECE_DELIMITER)[1]\r\n    }\r\n\r\n    //removes moves that do not deal with a check\r\n    function filterMovesIfInCheck(possibleMoves) {\r\n        let blackKing = getATargetSquareByPiece(BLACK_KING) //get the black king\r\n        let whiteKing = getATargetSquareByPiece(WHITE_KING) //get the white king\r\n\r\n        for (let i = 0; i < possibleMoves.length; i++) {\r\n            for (let j = 0; j < possibleMoves[i].moves; j++) {\r\n                if (possibleMoves[i].piece.props.piece == BLACK_KING) {\r\n                    let move = <Square x={possibleMoves[i].moves[j].props.x} y={possibleMoves[i].moves[j].props.y} piece={\"black-king\"} />\r\n                    let pseudo = <Square x={blackKing.props.x} y={blackKing.props.y} piece={\"\"} />\r\n                    let isInCheck = isBlackInCheck(move, pseudo)\r\n\r\n                    if (isInCheck) {\r\n                        possibleMoves[i].moves.splice(j, 1);\r\n                        j--;\r\n                    }\r\n                } else if (possibleMoves[i].piece.props.piece == WHITE_KING) {\r\n                    let move = <Square x={possibleMoves[i].moves[j].props.x} y={possibleMoves[i].moves[j].props.y} piece={\"white-king\"} />\r\n                    let pseudo = <Square x={whiteKing.props.x} y={whiteKing.props.y} piece={\"\"} />\r\n                    let isInCheck = isWhiteInCheck(move, pseudo)\r\n\r\n                    if (isInCheck) {\r\n                        possibleMoves[i].moves.splice(j, 1);\r\n                        j--;\r\n                    }\r\n                } else {\r\n                    let move = <Square x={possibleMoves[i].moves[j].props.x} y={possibleMoves[i].moves[j].props.y} piece={possibleMoves[i].piece.props.piece} />\r\n                    let isInCheck = isBlackInCheck(blackKing, move) ? true : isWhiteInCheck(whiteKing, move)\r\n\r\n                    if (isInCheck) {\r\n                        possibleMoves[i].moves.splice(j, 1);\r\n                        j--;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return possibleMoves\r\n    }\r\n\r\n    //removes moves that allow illigal castling (castles through check for example)\r\n    function filterMovesThatAllowIllegalCastling(possibleMoves) {\r\n        let blackKing = getATargetSquareByPiece(BLACK_KING) //get the black king\r\n        let whiteKing = getATargetSquareByPiece(WHITE_KING) //get the white king\r\n\r\n        for (let i = 0; i < possibleMoves.length; i++) {\r\n            let whiteCastle1 = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 6) //sqaure where king will be after short castle (white)\r\n            let whiteCastle2 = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 2) //sqaure where king will be after long castle (white)\r\n            let blackCastle1 = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 6) //square where king will be after shot castle (black)\r\n            let blackCastle2 = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 2) //square where king will be after long castle (black)\r\n\r\n            if (possibleMoves[i].piece == blackKing || possibleMoves[i].piece == whiteKing) {\r\n                if (whiteCastle1) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 5)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n\r\n                if (whiteCastle2) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 3)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n\r\n                if (blackCastle1) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 5)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n\r\n                if (blackCastle2) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 3)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n            }\r\n\r\n            //prevents black to castle if in check\r\n            if (isBlackInCheck(blackKing)) {\r\n                if (blackCastle1) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove), 1)\r\n                }\r\n\r\n                if (blackCastle2) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove2), 1)\r\n                }\r\n            }\r\n\r\n            //prevents white to castle if in check\r\n            if (isWhiteInCheck(whiteKing)) {\r\n                if (whiteCastle1) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove), 1)\r\n                }\r\n\r\n                if (whiteCastle2) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove2), 1)\r\n                }\r\n            }\r\n        }\r\n\r\n        return possibleMoves\r\n    }\r\n\r\n    //removes empty/undefined values for generated moves\r\n    function removeEmptyMoves(possibleMoves) {\r\n        for (let i = 0; i < possibleMoves.length; i++) {\r\n            if (!possibleMoves[i]) {\r\n                possibleMoves.splice(i, 1)\r\n                i--;\r\n                continue;\r\n            }\r\n\r\n            if (possibleMoves[i].moves.length == 0) {\r\n                possibleMoves.splice(i, 1)\r\n                i--;\r\n                continue;\r\n            }\r\n\r\n            for (let j = 0; j < possibleMoves[i].moves.length; j++) {\r\n                if (!possibleMoves[i].moves[j]) {\r\n                    possibleMoves[i].moves.splice(j, 1);\r\n                    j--;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possibleMoves\r\n    }\r\n\r\n    //gets all possible/legal moves\r\n    function getPossibleMoves() {\r\n        //let square = getATargetSquareByLocation(x, y)\r\n        let possiblePieceMoves = [];\r\n        let squares = BoardSquares\r\n\r\n        for (let i = 0; i < squares.length; i++) {\r\n            let square = squares[i]\r\n\r\n            //if the square has a piece\r\n            if (square.props.piece) {\r\n                let color = getPieceColor(square); //get the piece color\r\n\r\n                //don't collect possible moves if it's black to move and you're trying to move a white piece\r\n                if (isColorWhite(color) && !isWhiteToMove) {\r\n                    //console.log(`Skipping because it's black to move and you're moving a white piece, x: ${square.props.x}, y: ${square.props.y}`)\r\n                    continue\r\n                }\r\n\r\n                //don't collect possible moves if it's white to move and you're trying to move a black piece\r\n                if (isColorBlack(color) && isWhiteToMove) {\r\n                    //console.log(`Skipping because it's white to move and you're moving a black piece, x: ${square.props.x}, y: ${square.props.y}`)\r\n                    continue\r\n                }\r\n\r\n                //console.log(`Getting possible moves, x: ${square.props.x}, y: ${square.props.y}`)\r\n                //get all possible moves for each piece\r\n                possiblePieceMoves.push(getPawnsPossibleMoves(square))\r\n                possiblePieceMoves.push(getRooksPossibleMoves(square))\r\n                possiblePieceMoves.push(getBishopPossibleMoves(square))\r\n                possiblePieceMoves.push(getKnightPossibleMoves(square))\r\n                possiblePieceMoves.push(getKingPossibleMoves(square))\r\n                possiblePieceMoves.push(getQueenPossibleMoves(square))\r\n\r\n                //filter empty moves\r\n                possiblePieceMoves = removeEmptyMoves(possiblePieceMoves);\r\n\r\n                //filter possible moves\r\n                possiblePieceMoves = filterMovesIfInCheck(possiblePieceMoves)\r\n                possiblePieceMoves = filterMovesThatAllowIllegalCastling(possiblePieceMoves)\r\n            }\r\n        }\r\n\r\n        console.log(\"Possible Moves:\", possiblePieceMoves);\r\n        updatePossibleMoves(possiblePieceMoves);\r\n    }\r\n\r\n    //renders the board\r\n    return (\r\n        <>\r\n            <div className=\"chessGrid\">\r\n                {BoardSquares.map((sqr) => sqr)}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Board"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}