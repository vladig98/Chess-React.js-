{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vladi Gotsin\\\\Desktop\\\\react\\\\Chess-React.js-\\\\src\\\\HelperMethods.js\";\nimport React from 'react';\nimport Square from \"./Square.js\";\nimport * as GlobalVariables from './globalVariables';\n\n/**\r\n * Checks if a character is Uppercase using the ASCII table.\r\n * @param {string} value - The character to check.\r\n * @returns {boolean} - True if the character is uppercase, false otherwise.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function IsUpperCase(value) {\n  const firstChar = getFirstCharacter(value);\n  return firstChar >= GlobalVariables.ASCII_UPPERCASE_A && firstChar <= GlobalVariables.ASCII_UPPERCASE_Z;\n}\n\n/**\r\n * Returns the ASCII code of the first character of a string.\r\n * @param {string} value - The string from which to get the ASCII code.\r\n * @returns {number} - The ASCII code of the first character.\r\n */\n_c = IsUpperCase;\nexport function getFirstCharacter(value) {\n  return value.charCodeAt(0);\n}\n\n/**\r\n * Checks if a character is Lowercase using the ASCII table.\r\n * @param {string} value - The character to check.\r\n * @returns {boolean} - True if the character is lowercase, false otherwise.\r\n */\nexport function IsLowerCase(value) {\n  const firstChar = getFirstCharacter(value);\n  return value.charCodeAt(0) >= 97 && value.charCodeAt(0) <= 122;\n}\n\n/**\r\n * Checks if a character is a Digit using the ASCII table.\r\n * @param {string} value - The character to check.\r\n * @returns {boolean} - True if the character is a digit, false otherwise.\r\n */\n_c2 = IsLowerCase;\nexport function IsDigit(value) {\n  return value.charCodeAt(0) >= 48 && value.charCodeAt(0) <= 57;\n}\n\n/**\r\n * Parses a FEN string and returns its components.\r\n * @param {string} fen - The FEN string to parse.\r\n * @returns {object} - An object containing the FEN components.\r\n */\n_c3 = IsDigit;\nexport function ParseFEN(fen) {\n  const fenParts = fen.split(' ');\n  if (fenParts.length !== 6) {\n    throw new Error('Invalid FEN');\n  }\n  const [fenBoard, fenTurn, fenCastling, fenEnPassant, fenHalfMoves, fenFullMoves] = fenParts;\n  return {\n    fenBoard,\n    fenTurn,\n    fenCastling,\n    fenEnPassant,\n    fenHalfMoves: Number(fenHalfMoves),\n    fenFullMoves: Number(fenFullMoves)\n  };\n}\n\n/**\r\n * Converts FEN piece notation to an actual piece.\r\n * @param {string} letter - The FEN notation of the piece.\r\n * @returns {string} - The actual piece.\r\n */\n_c4 = ParseFEN;\nexport function ConvertFENtoPiece(letter) {\n  const FEN_PIECE_MAP = {\n    [GlobalVariables.FEN_PIECES_BLACK.PAWN]: GlobalVariables.PIECES.PAWN,\n    [GlobalVariables.FEN_PIECES_BLACK.KNIGHT]: GlobalVariables.PIECES.KNIGHT,\n    [GlobalVariables.FEN_PIECES_BLACK.KING]: GlobalVariables.PIECES.KING,\n    [GlobalVariables.FEN_PIECES_BLACK.QUEEN]: GlobalVariables.PIECES.QUEEN,\n    [GlobalVariables.FEN_PIECES_BLACK.ROOK]: GlobalVariables.PIECES.ROOK,\n    [GlobalVariables.FEN_PIECES_BLACK.BISHOP]: GlobalVariables.PIECES.BISHOP\n  };\n  return FEN_PIECE_MAP[letter.toLowerCase()] || \"\";\n}\n\n/**\r\n * Converts the FEN piece notation to a piece that we can use in the square component.\r\n * @param {string} value - The FEN notation of the piece.\r\n * @returns {string} - The piece in {color-piece} format.\r\n */\n_c5 = ConvertFENtoPiece;\nexport function ConvertFENPieceToPiece(value) {\n  if (IsUpperCase(value)) {\n    return `${GlobalVariables.COLORS.WHITE}-${ConvertFENtoPiece(value)}`;\n  }\n  if (IsLowerCase(value)) {\n    return `${GlobalVariables.COLORS.BLACK}-${ConvertFENtoPiece(value)}`;\n  }\n  return \"\";\n}\n\n/**\r\n * Converts a string in FEN format to a normal string.\r\n * @param {string} value - The FEN string.\r\n * @returns {string} - The normal string.\r\n */\n_c6 = ConvertFENPieceToPiece;\nexport function ConvertFenToString(value) {\n  return value.split('').reduce((result, char) => {\n    if (IsDigit(char)) {\n      return result + GlobalVariables.EMPTY_SQUARE_PIECE.repeat(Number(char));\n    }\n    return result + char;\n  }, '');\n}\n\n/**\r\n * Checks if two squares are on the same row.\r\n * @param {object} square1 - The first square.\r\n * @param {object} square2 - The second square.\r\n * @returns {boolean} - True if the squares are on the same row, false otherwise.\r\n */\n_c7 = ConvertFenToString;\nexport function checkIfTwoSquaresAreOnTheSameRow(square1, square2) {\n  return square1.props.x === square2.props.x;\n}\n\n/**\r\n * Checks if two squares are on the same column.\r\n * @param {object} square1 - The first square to check.\r\n * @param {object} square2 - The second square to check.\r\n * @returns {boolean} - True if both squares are on the same column, false otherwise.\r\n */\nexport function checkIfTwoSquaresAreOnTheSameColumn(square1, square2) {\n  return square1.props.y === square2.props.y;\n}\n\n/**\r\n * Checks if the square is on the given row number.\r\n * @param {object} square - The square to check.\r\n * @param {number} rowNumber - The row number.\r\n * @returns {boolean} - True if the square is on the given row, false otherwise.\r\n */\nexport function isSquareOnRow(square, rowNumber) {\n  return square.props.x === rowNumber;\n}\n\n/**\r\n * Checks if the square is on the given column number.\r\n * @param {object} square - The square to check.\r\n * @param {number} columnNumber - The column number.\r\n * @returns {boolean} - True if the square is on the given column, false otherwise.\r\n */\nexport function isSquareOnColumn(square, columnNumber) {\n  return square.props.y === columnNumber;\n}\n\n/**\r\n * Gets the piece from a square.\r\n * @param {object} square - The square to get the piece from.\r\n * @returns {string} - The piece.\r\n */\nexport function getPiece(square) {\n  return square.props.piece.split(GlobalVariables.PIECE_DELIMITER)[GlobalVariables.PIECE_PIECE_INDEX];\n}\n\n/**\r\n * Checks if a square has a specific piece.\r\n * @param {object} square - The square to check.\r\n * @param {string} piece - The piece to check for.\r\n * @returns {boolean} - True if the square has the piece, false otherwise.\r\n */\nexport function doesTheSquareHasThePiece(square, piece) {\n  return getPiece(square) === piece;\n}\n\n/**\r\n * Gets the piece color from a square.\r\n * @param {object} square - The square to get the piece color from.\r\n * @returns {string} - The piece color.\r\n */\nexport function getPieceColor(square) {\n  return square.props.piece.split(GlobalVariables.PIECE_DELIMITER)[GlobalVariables.PIECE_COLOR_INDEX];\n}\n\n/**\r\n * Checks if a color is white.\r\n * @param {string} color - The color to check.\r\n * @returns {boolean} - True if the color is white, false otherwise.\r\n */\nexport function isColorWhite(color) {\n  return color === GlobalVariables.COLORS.WHITE;\n}\n\n/**\r\n * Checks if a color is black.\r\n * @param {string} color - The color to check.\r\n * @returns {boolean} - True if the color is black, false otherwise.\r\n */\nexport function isColorBlack(color) {\n  return color === GlobalVariables.COLORS.BLACK;\n}\n\n/**\r\n * Checks if two pieces are of the same color.\r\n * @param {string} piece1 - The first piece.\r\n * @param {string} piece2 - The second piece.\r\n * @returns {boolean} - True if the pieces are of the same color, false otherwise.\r\n */\nexport function areSameColor(piece1, piece2) {\n  return getPieceColor(piece1) === getPieceColor(piece2);\n}\n\n/**\r\n * Checks if a move is equal to the current selected square.\r\n * @param {object} move - The move to check.\r\n * @returns {boolean} - True if the move is equal to the current selected square, false otherwise.\r\n */\nexport function checkIfAMoveIsEqualToTheCurrentSelectedSquare(move) {\n  return move.props.x === GlobalVariables.CurrentSquareSelection.x && move.props.y === GlobalVariables.CurrentSquareSelection.y;\n}\n\n/**\r\n * Compares if two squares are the same.\r\n * @param {object} square1 - The first square.\r\n * @param {object} square2 - The second square.\r\n * @returns {boolean} - True if the squares are the same, false otherwise.\r\n */\nexport function compareIfTwoSquaresAreTheSame(square1, square2) {\n  return checkIfTwoSquaresAreOnTheSameRow(square1, square2) && checkIfTwoSquaresAreOnTheSameColumn(square1, square2);\n}\n\n/**\r\n * Gets a target square by its location.\r\n * @param {number} x - The x coordinate of the target square.\r\n * @param {number} y - The y coordinate of the target square.\r\n * @returns {object} - The target square.\r\n */\nexport function getATargetSquareByLocation(x, y, squares) {\n  return squares.find(s => s.props.x == x && s.props.y == y);\n}\n\n/**\r\n * Gets a target square by its piece.\r\n * @param {string} piece - The piece to search for.\r\n * @returns {object} - The target square.\r\n */\nexport function getATargetSquareByPiece(piece, squares) {\n  return squares.find(s => s.props.piece == piece);\n}\n\n/**\r\n * Checks if castling is possible.\r\n * @param {string} castlingType - The type of castling (long or short).\r\n * @param {boolean} [withWhite=true] - True if checking for white's castling, false otherwise.\r\n * @returns {boolean} - True if castling is possible, false otherwise.\r\n */\nexport function isCastlingPossible(castlingType, withWhite = true) {\n  const row = withWhite ? GlobalVariables.CASTLE_ROW_WHITE : GlobalVariables.CASTLE_ROW_BLACK;\n  const pieces = withWhite ? GlobalVariables.FEN_PIECES_WHITE : GlobalVariables.FEN_PIECES_BLACK;\n  const [rookCol, kingCol, pathCols] = castlingType === GlobalVariables.CASTLING_TYPES.LONG ? [GlobalVariables.CASTLE_ROOK_INITIAL_COL_LONG, GlobalVariables.CASTLE_KING_INITIAL_COL, GlobalVariables.CASTLE_PATH_COLS_LONG] : [GlobalVariables.CASTLE_ROOK_INITIAL_COL_SHORT, GlobalVariables.CASTLE_KING_INITIAL_COL, GlobalVariables.CASTLE_PATH_COLS_SHORT];\n  return GlobalVariables.BoardPosition[row][rookCol] === pieces.ROOK && GlobalVariables.BoardPosition[row][kingCol] === pieces.KING && pathCols.every(col => GlobalVariables.BoardPosition[row][col] === GlobalVariables.EMPTY_SQUARE_PIECE);\n}\n\n/**\r\n * Checks if a pawn is on its starting square.\r\n * @param {object} pawn - The pawn to check.\r\n * @returns {boolean} - True if the pawn is on its starting square, false otherwise.\r\n */\nexport function isPawnOnStartingSquare(pawn) {\n  const isWhite = isColorWhite(getPieceColor(pawn));\n  return isWhite ? pawn.props.x === GlobalVariables.WHITE_PAWN_STARTING_SQUARE : pawn.props.x === GlobalVariables.BLACK_PAWN_STARTING_SQUARE;\n}\n\n/**\r\n * Checks if a pawn is on an en passant square.\r\n * @param {object} pawn - The pawn to check.\r\n * @returns {boolean} - True if the pawn is on an en passant square, false otherwise.\r\n */\nexport function isPawnOnEnPassantSquare(pawn) {\n  const isWhite = isColorWhite(getPieceColor(pawn));\n  return isWhite ? pawn.props.x === GlobalVariables.WHITE_EN_PASSANT_SQUARE : pawn.props.x === GlobalVariables.BLACK_EN_PASSANT_SQUARE;\n}\n\n/**\r\n * Checks if a square is available for a move.\r\n * @param {object} square - The square to check.\r\n * @returns {boolean} - True if the square is available, false otherwise.\r\n */\nexport function isSquareAvailable(square) {\n  return !square.props.piece;\n}\n\n/**\r\n * Updates a column on a row with a new value.\r\n * @param {Array} row - The row to update.\r\n * @param {number} colIndex - The column index.\r\n * @param {string} newValue - The new value.\r\n * @returns {Array} - The updated row.\r\n */\nexport function updateColumnOnARow(row, colIndex, newValue) {\n  row[colIndex] = newValue;\n  return row;\n}\n\n/**\r\n * Removes the current square's piece.\r\n * @param {object} currentSquare - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @param {Array} row - The row to update.\r\n * @returns {Array} - The updated row.\r\n */\nexport function handleSquareOnCurrentRow(currentSquare, targetSquare, row) {\n  return checkIfTwoSquaresAreOnTheSameRow(currentSquare, targetSquare) ? handleSquareAndTargetSquareOnTheSameRow(currentSquare, targetSquare, row) : updateColumnOnARow(row, currentSquare.props.y, GlobalVariables.EMPTY_SQUARE_PIECE);\n}\n\n/**\r\n * Updates the target square with the current square's piece.\r\n * @param {object} currentSquare - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @param {Array} row - The row to update.\r\n * @returns {Array} - The updated row.\r\n */\nexport function handleTargetSquareOnCurrentRow(currentSquare, targetSquare, row) {\n  return updateColumnOnARow(row, targetSquare.props.y, ConvertPieceToFENPiece(currentSquare.props.piece));\n}\n\n/**\r\n * Checks if castling is possible for either side.\r\n * @returns {boolean} - True if castling is possible for either side, false otherwise.\r\n */\nexport function canWeCastle() {\n  return Object.values(GlobalVariables.CastlingRights).some(s => s);\n}\n\n/**\r\n * Checks if we're making a move on the same row and performs castling if we want to castle.\r\n * @param {object} currentSquare - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @param {Array} row - The row to update.\r\n * @returns {Array} - The updated row.\r\n */\nexport function handleSquareAndTargetSquareOnTheSameRow(currentSquare, targetSquare, row) {\n  if (isKing(currentSquare) && canWeCastle()) {\n    return handleCastling(currentSquare, row);\n  }\n  return SidewaysCapture(row, Number(currentSquare.props.y), Number(targetSquare.props.y), currentSquare.props.piece);\n}\n\n/**\r\n * Performs castling by swapping the rook and the king.\r\n * @param {object} square - The square to update.\r\n * @param {Array} row - The row to update.\r\n * @returns {Array} - The updated row.\r\n */\nexport function handleCastling(square, row) {\n  const color = getPieceColor(square);\n  const isWhite = isColorWhite(color);\n  const kingPiece = isWhite ? GlobalVariables.FEN_PIECES_WHITE.KING : GlobalVariables.FEN_PIECES_BLACK.KING;\n  const rookPiece = isWhite ? GlobalVariables.FEN_PIECES_WHITE.ROOK : GlobalVariables.FEN_PIECES_BLACK.ROOK;\n  Object.values(GlobalVariables.CASTLING_TYPES).forEach(type => {\n    if (isCastlingPossible(type, isWhite)) {\n      const [emptySquares, kingFinalCol, rookFinalCol] = type === GlobalVariables.CASTLING_TYPES.LONG ? [GlobalVariables.EMPTY_SQUARES_AFTER_LONG_CASTLE, GlobalVariables.CASTLE_KING_FINAL_COL_LONG, GlobalVariables.CASTLE_ROOK_FINAL_COL_LONG] : [GlobalVariables.EMPTY_SQUARES_AFTER_SHORT_CASTLE, GlobalVariables.CASTLE_KING_FINAL_COL_SHORT, GlobalVariables.CASTLE_ROOK_FINAL_COL_SHORT];\n      emptySquares.forEach(col => row[col] = GlobalVariables.EMPTY_SQUARE_PIECE);\n      row[kingFinalCol] = kingPiece;\n      row[rookFinalCol] = rookPiece;\n    }\n  });\n  return row;\n}\n\n/**\r\n * Converts a row of squares to its FEN representation.\r\n * @param {Array} row - The row to convert.\r\n * @returns {string} - The FEN representation of the row.\r\n */\nexport function convertRowToFEN(row) {\n  return row.reduce((acc, column) => {\n    if (column === EMPTY_SQUARE_PIECE) {\n      const lastChar = acc.slice(-1);\n      if (IsDigit(lastChar)) {\n        return acc.slice(0, -1) + (Number(lastChar) + 1); //add 1 to the previous number if an empty space\n      } else {\n        return acc + '1'; //set the next piece as 1 (1 empty space)\n      }\n    } else {\n      return acc + column; //return the piece if no empty spaces\n    }\n  }, '');\n}\n\n/**\r\n * Gets the castling rules as a string.\r\n * @returns {string} - The castling rules.\r\n */\nexport function getCastlingRules() {\n  const sortedKeys = getSortedCastlingKeys();\n  const castlingMap = {\n    [sortedKeys[0]]: GlobalVariables.FEN_PIECES_BLACK.QUEEN,\n    // 'blackLongCastle'\n    [sortedKeys[1]]: GlobalVariables.FEN_PIECES_BLACK.KING,\n    // 'blackShortCastle'\n    [sortedKeys[2]]: GlobalVariables.FEN_PIECES_WHITE.QUEEN,\n    // 'whiteLongCastle'\n    [sortedKeys[3]]: GlobalVariables.FEN_PIECES_WHITE.KING // 'whiteShortCastle'\n  };\n  return sortedKeys.map(key => GlobalVariables.CastlingRights[key] ? castlingMap[key] : \"\").join(\"\") || GlobalVariables.PIECE_DELIMITER;\n}\n\n/**\r\n * Generates a new FEN string based on the current board state.\r\n * @returns {string} - The new FEN string.\r\n */\nexport function generateANewFen() {\n  const fenRows = GlobalVariables.BoardPosition.map(row => convertRowToFEN(row)).join('/');\n  const turn = GlobalVariables.IsWhiteToMove ? 'w' : 'b';\n  const castling = getCastlingRules();\n  const enPassant = GlobalVariables.EnPassant.isPossible ? convertLocationToCoordinates(GlobalVariables.EnPassant.x, GlobalVariables.EnPassant.y) : '-';\n  const halfMoves = GlobalVariables.HalfMoves;\n  const fullMoves = GlobalVariables.FullMoves;\n  return `${fenRows} ${turn} ${castling} ${enPassant} ${halfMoves} ${fullMoves}`;\n}\n\n/**\r\n * Returns the keys of the CastlingRights object in alphabetical order.\r\n * @returns {Array<string>} - The sorted keys of CastlingRights.\r\n */\nexport function getSortedCastlingKeys() {\n  return Object.keys(GlobalVariables.CastlingRights).sort();\n}\n\n/**\r\n * Updates castling rights based on the given castling string.\r\n * @param {string} castling - The castling rights string (e.g., 'KQkq').\r\n */\nexport function updateCastlingRights(castling) {\n  const sortedKeys = getSortedCastlingKeys();\n\n  // Create a map based on the sorted keys to ensure consistency\n  const castlingMap = {\n    [GlobalVariables.FEN_PIECES_BLACK.QUEEN]: sortedKeys[0],\n    // 'blackLongCastle'\n    [GlobalVariables.FEN_PIECES_BLACK.KING]: sortedKeys[1],\n    // 'blackShortCastle'\n    [GlobalVariables.FEN_PIECES_WHITE.QUEEN]: sortedKeys[2],\n    // 'whiteLongCastle'\n    [GlobalVariables.FEN_PIECES_WHITE.KING]: sortedKeys[3] // 'whiteShortCastle'\n  };\n\n  // Update castling rights using the castling map\n  Object.keys(castlingMap).forEach(key => {\n    GlobalVariables.CastlingRights[castlingMap[key]] = castling.includes(key);\n  });\n}\n\n/**\r\n * Updates en passant status based on the given en passant string.\r\n * @param {string} enPassant - The en passant target square (e.g., 'e3') or '-' if not available.\r\n */\nexport function updateEnPassant(enPassant) {\n  if (enPassant !== GlobalVariables.PIECE_DELIMITER) {\n    const {\n      x,\n      y\n    } = convertCoordinatesToLocation(enPassant);\n    Object.assign(GlobalVariables.EnPassant, {\n      isPossible: true,\n      x: x,\n      y: y\n    });\n  }\n}\n\n/**\r\n * Parses the FEN string to update the board state.\r\n * @param {string} fen - The FEN string representing the board state.\r\n * @param {Array} isPossibleMove - Array indicating possible moves.\r\n * @param {function} getPossibleMoves - Function to get possible moves.\r\n * @param {function} movePiece - Function to move a piece.\r\n * @param {function} resetPossibleMoves - Function to reset possible moves.\r\n * @param {boolean} [updateBoardPosition=true] - Whether to update the board position.\r\n * @returns {Array} - The generated square components.\r\n */\nexport function fenParser(fen, isPossibleMove, getPossibleMoves, movePiece, resetPossibleMoves, updateBoardPosition = true) {\n  const {\n    fenBoard,\n    fenTurn,\n    fenCastling,\n    fenEnPassant,\n    fenHalfMoves,\n    fenFullMoves\n  } = ParseFEN(fen);\n  const fenRows = fenBoard.split('/');\n  const boardArray = fenRows.map(row => ConvertFenToString(row).split(''));\n  const squares = generateSquareComponents(boardArray, isPossibleMove, getPossibleMoves, movePiece, resetPossibleMoves);\n  updateCastlingRights(fenCastling);\n  GlobalVariables.updateIsWhiteToMove(fenTurn === 'w');\n  GlobalVariables.updateHalfMoves(fenHalfMoves);\n  GlobalVariables.updateFullMoves(fenFullMoves);\n  if (updateBoardPosition) {\n    GlobalVariables.BoardPosition.splice(0, GlobalVariables.BoardPosition.length, ...boardArray);\n  }\n  updateEnPassant(fenEnPassant);\n  return squares;\n}\n\n/**\r\n * Updates the board position after making a move.\r\n * @param {object} currentSquare - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @returns {Array} - The updated board position.\r\n */\nexport function updateBoardPosition(currentSquare, targetSquare) {\n  return GlobalVariables.BoardPosition.map((row, rowIndex) => {\n    if (isSquareOnRow(currentSquare, rowIndex)) {\n      row = handleSquareOnCurrentRow(currentSquare, targetSquare, row);\n    }\n    if (isSquareOnRow(targetSquare, rowIndex)) {\n      row = handleTargetSquareOnCurrentRow(currentSquare, targetSquare, row);\n    }\n    return row;\n  });\n}\n\n/**\r\n * Modifies the row to capture pieces sideways.\r\n * @param {Array} row - The row to update.\r\n * @param {number} colIndex - The column index of the current square.\r\n * @param {number} targetColIndex - The column index of the target square.\r\n * @param {string} value - The piece value.\r\n * @returns {Array} - The updated row.\r\n */\nexport function SidewaysCapture(row, colIndex, targetColIndex, value) {\n  return row.map((col, index) => {\n    if (index === colIndex) return GlobalVariables.EMPTY_SQUARE_PIECE;\n    if (index === targetColIndex) return ConvertPieceToFENPiece(value);\n    return col;\n  });\n}\n\n/**\r\n * Converts the piece from {color-piece} format to FEN format (a single letter).\r\n * @param {string} value - The piece value.\r\n * @returns {string} - The FEN notation of the piece.\r\n */\n_c8 = SidewaysCapture;\nexport function ConvertPieceToFENPiece(value) {\n  const [color, piece] = value.split(GlobalVariables.PIECE_DELIMITER);\n  const pieceMapping = {\n    [GlobalVariables.PIECES.PAWN]: GlobalVariables.FEN_PIECES_BLACK.PAWN,\n    [GlobalVariables.PIECES.KNIGHT]: GlobalVariables.FEN_PIECES_BLACK.KNIGHT,\n    [GlobalVariables.PIECES.BISHOP]: GlobalVariables.FEN_PIECES_BLACK.BISHOP,\n    [GlobalVariables.PIECES.ROOK]: GlobalVariables.FEN_PIECES_BLACK.ROOK,\n    [GlobalVariables.PIECES.QUEEN]: GlobalVariables.FEN_PIECES_BLACK.QUEEN,\n    [GlobalVariables.PIECES.KING]: GlobalVariables.FEN_PIECES_BLACK.KING\n  };\n  const fenPiece = pieceMapping[piece];\n  return isColorWhite(color) ? fenPiece.toUpperCase() : fenPiece;\n}\n\n/**\r\n * Generates Square components for the given board state.\r\n * @param {Array} boardSquares - The 2D array representing the board squares.\r\n * @param {Array} isPossibleMove - The array of possible move states.\r\n * @param {Function} getPossibleMoves - The function to get possible moves.\r\n * @param {Function} movePiece - The function to move a piece.\r\n * @param {Function} resetPossibleMoves - The function to reset possible moves.\r\n * @returns {Array} - The array of Square components.\r\n */\n_c9 = ConvertPieceToFENPiece;\nexport function generateSquareComponents(boardSquares, isPossibleMove, getPossibleMoves, movePiece, resetPossibleMoves) {\n  let squareColorIsWhite = true;\n  const squares = boardSquares.flatMap((row, rowIndex) => {\n    const rowSquares = row.map((square, colIndex) => {\n      const color = squareColorIsWhite ? \"\" : GlobalVariables.DARK_SQUARES_COLOR;\n      const possibleMoveStatus = isPossibleMove.find(item => item.key === `${rowIndex}-${colIndex}`);\n      const squareComponent = /*#__PURE__*/_jsxDEV(Square, {\n        x: rowIndex,\n        y: colIndex,\n        piece: ConvertFENPieceToPiece(square),\n        color: color,\n        getPossibleMoves: getPossibleMoves,\n        movePiece: movePiece,\n        isPossibleMove: possibleMoveStatus ? possibleMoveStatus.value : false,\n        resetPossibleMoves: resetPossibleMoves\n      }, `${rowIndex}-${colIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 17\n      }, this);\n      squareColorIsWhite = !squareColorIsWhite;\n      return squareComponent;\n    });\n    squareColorIsWhite = !squareColorIsWhite; // Reset color for the next row\n    return rowSquares;\n  });\n  return squares;\n}\n\n/**\r\n * Converts board coordinates to X and Y position on the board, e.g., a8 = 0, 0\r\n * @param {string} coordinates - The board coordinates to convert.\r\n * @returns {object} - Returns an object with x and y properties.\r\n */\nexport function convertCoordinatesToLocation(coordinates) {\n  let tokens = coordinates.split('');\n\n  //skip invalid coordinates\n  if (tokens.length != 2) {\n    return;\n  }\n  let letter = tokens[0].toString().toUpperCase();\n  let number = tokens[1];\n\n  //65 is the ASCII code for capital A which will give us 0 if we have A as a coordinate; A-F will give us 0-7 for y (columns)\n  //reverse the numbers since we draw the board top down for x (rows)\n  return {\n    x: GlobalVariables.DIM - Number(number),\n    y: letter.charCodeAt(0) - 65\n  };\n}\n\n/**\r\n * Converts a piece location to board coordinate, e.g., 0, 0 to a8\r\n * @param {string} x - The X position.\r\n * @param {string} y - The Y position.\r\n * @returns {string} - Returns a string containing the board coordinates.\r\n */\nexport function convertLocationToCoordinates(x, y) {\n  //maps y (column) to the letter coordinate; add 65 (capital A code) to the ASCII code for the location we have and we get a letter between A and F\n  //reverses the x (rows) coordinate because we drop the board top down, while coordinates go down up\n  return `${String.fromCharCode(y + 65)}${GlobalVariables.DIM - x}`.toLowerCase();\n}\n\n/**\r\n * Determines if the king is in check.\r\n * @param {object} kingSquare - The square where the king is located.\r\n * @param {object} [pseudo] - The square where a piece is hypothetically moved.\r\n * @param {object} [currentSquare=null] - The square of the piece being moved.\r\n * @param {string} color - The color of the king ('white' or 'black').\r\n * @returns {boolean} - True if the king is in check, false otherwise.\r\n */\nexport function isKingInCheck(kingSquare, pseudo, currentSquare = null, color, boardSquares) {\n  const squares = boardSquares;\n  const updatedSquares = squares.map(s => {\n    if (pseudo && compareIfTwoSquaresAreTheSame(s, pseudo)) {\n      return /*#__PURE__*/React.cloneElement(s, {\n        piece: pseudo.props.piece\n      });\n    } else if (currentSquare && compareIfTwoSquaresAreTheSame(s, currentSquare)) {\n      return /*#__PURE__*/React.cloneElement(s, {\n        piece: ''\n      });\n    } else {\n      return s;\n    }\n  });\n  const checkDirections = directions => {\n    for (const [dx, dy] of directions) {\n      for (let i = 1; i < GlobalVariables.DIM; i++) {\n        const piece = updatedSquares.find(s => isSquareOnRow(s, kingSquare.props.x + dx * i) && isSquareOnColumn(s, kingSquare.props.y + dy * i));\n        if (!piece) break;\n        const [pieceColor, pieceType] = piece.props.piece.split(GlobalVariables.PIECE_DELIMITER);\n        if (pieceColor !== color) {\n          if (pieceType === GlobalVariables.PIECES.QUEEN || pieceType === GlobalVariables.PIECES.ROOK || pieceType === GlobalVariables.PIECES.BISHOP || i === 1 && pieceType === GlobalVariables.PIECES.PAWN && (dx === -1 || dx === 1)) {\n            return true;\n          }\n          if (piece.props.piece) break;\n        } else {\n          break;\n        }\n      }\n    }\n    return false;\n  };\n  const linearDirections = [[1, 0], [-1, 0], [0, 1], [0, -1] // Right, Left, Up, Down\n  ];\n  const diagonalDirections = [[1, 1], [-1, -1], [1, -1], [-1, 1] // Diagonals\n  ];\n  if (checkDirections(linearDirections) || checkDirections(diagonalDirections)) {\n    return true;\n  }\n  const knightMoves = [[-2, -1], [-2, 1], [2, -1], [2, 1], [-1, 2], [1, 2], [-1, -2], [1, -2]];\n  for (const [dx, dy] of knightMoves) {\n    const piece = updatedSquares.find(s => isSquareOnRow(s, kingSquare.props.x + dx) && isSquareOnColumn(s, kingSquare.props.y + dy));\n    if (piece && getPieceColor(piece) !== color && getPiece(piece) === GlobalVariables.PIECES.KNIGHT) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\r\n * Determines if the white king is in check.\r\n * @param {object} kingSquare - The square where the king is located.\r\n * @param {object} [pseudo] - The square where a piece is hypothetically moved.\r\n * @param {object} [currentSquare=null] - The square of the piece being moved.\r\n * @returns {boolean} - True if the white king is in check, false otherwise.\r\n */\nexport function isWhiteInCheck(kingSquare, pseudo, currentSquare = null, boardSquares) {\n  return isKingInCheck(kingSquare, pseudo, currentSquare, GlobalVariables.COLORS.WHITE, boardSquares);\n}\n\n/**\r\n * Determines if the black king is in check.\r\n * @param {object} kingSquare - The square where the king is located.\r\n * @param {object} [pseudo] - The square where a piece is hypothetically moved.\r\n * @param {object} [currentSquare=null] - The square of the piece being moved.\r\n * @returns {boolean} - True if the black king is in check, false otherwise.\r\n */\nexport function isBlackInCheck(kingSquare, pseudo, currentSquare = null, boardSquares) {\n  return isKingInCheck(kingSquare, pseudo, currentSquare, GlobalVariables.COLORS.BLACK, boardSquares);\n}\n\n/**\r\n * Checks if the piece on the square is a King.\r\n * @param {object} square - The square to check.\r\n * @returns {boolean} - True if the piece is a King, false otherwise.\r\n */\nexport function isKing(square) {\n  return doesTheSquareHasThePiece(square, GlobalVariables.PIECES.KING);\n}\n\n/**\r\n * Checks if the piece on the square is a Bishop.\r\n * @param {object} square - The square to check.\r\n * @returns {boolean} - True if the piece is a Bishop, false otherwise.\r\n */\nexport function isBishop(square) {\n  return doesTheSquareHasThePiece(square, GlobalVariables.PIECES.BISHOP);\n}\n\n/**\r\n * Checks if the piece on the square is a Queen.\r\n * @param {object} square - The square to check.\r\n * @returns {boolean} - True if the piece is a Queen, false otherwise.\r\n */\nexport function isQueen(square) {\n  return doesTheSquareHasThePiece(square, GlobalVariables.PIECES.QUEEN);\n}\n\n/**\r\n * Checks if the piece on the square is a Rook.\r\n * @param {object} square - The square to check.\r\n * @returns {boolean} - True if the piece is a Rook, false otherwise.\r\n */\nexport function isRook(square) {\n  return doesTheSquareHasThePiece(square, GlobalVariables.PIECES.ROOK);\n}\n\n/**\r\n * Checks if the piece on the square is a Pawn.\r\n * @param {object} square - The square to check.\r\n * @returns {boolean} - True if the piece is a Pawn, false otherwise.\r\n */\nexport function isPawn(square) {\n  return doesTheSquareHasThePiece(square, GlobalVariables.PIECES.PAWN);\n}\n\n/**\r\n * Checks if the piece on the square is a Knight.\r\n * @param {object} square - The square to check.\r\n * @returns {boolean} - True if the piece is a Knight, false otherwise.\r\n */\nexport function isKnight(square) {\n  return doesTheSquareHasThePiece(square, GlobalVariables.PIECES.KNIGHT);\n}\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n$RefreshReg$(_c, \"IsUpperCase\");\n$RefreshReg$(_c2, \"IsLowerCase\");\n$RefreshReg$(_c3, \"IsDigit\");\n$RefreshReg$(_c4, \"ParseFEN\");\n$RefreshReg$(_c5, \"ConvertFENtoPiece\");\n$RefreshReg$(_c6, \"ConvertFENPieceToPiece\");\n$RefreshReg$(_c7, \"ConvertFenToString\");\n$RefreshReg$(_c8, \"SidewaysCapture\");\n$RefreshReg$(_c9, \"ConvertPieceToFENPiece\");","map":{"version":3,"names":["React","Square","GlobalVariables","jsxDEV","_jsxDEV","IsUpperCase","value","firstChar","getFirstCharacter","ASCII_UPPERCASE_A","ASCII_UPPERCASE_Z","_c","charCodeAt","IsLowerCase","_c2","IsDigit","_c3","ParseFEN","fen","fenParts","split","length","Error","fenBoard","fenTurn","fenCastling","fenEnPassant","fenHalfMoves","fenFullMoves","Number","_c4","ConvertFENtoPiece","letter","FEN_PIECE_MAP","FEN_PIECES_BLACK","PAWN","PIECES","KNIGHT","KING","QUEEN","ROOK","BISHOP","toLowerCase","_c5","ConvertFENPieceToPiece","COLORS","WHITE","BLACK","_c6","ConvertFenToString","reduce","result","char","EMPTY_SQUARE_PIECE","repeat","_c7","checkIfTwoSquaresAreOnTheSameRow","square1","square2","props","x","checkIfTwoSquaresAreOnTheSameColumn","y","isSquareOnRow","square","rowNumber","isSquareOnColumn","columnNumber","getPiece","piece","PIECE_DELIMITER","PIECE_PIECE_INDEX","doesTheSquareHasThePiece","getPieceColor","PIECE_COLOR_INDEX","isColorWhite","color","isColorBlack","areSameColor","piece1","piece2","checkIfAMoveIsEqualToTheCurrentSelectedSquare","move","CurrentSquareSelection","compareIfTwoSquaresAreTheSame","getATargetSquareByLocation","squares","find","s","getATargetSquareByPiece","isCastlingPossible","castlingType","withWhite","row","CASTLE_ROW_WHITE","CASTLE_ROW_BLACK","pieces","FEN_PIECES_WHITE","rookCol","kingCol","pathCols","CASTLING_TYPES","LONG","CASTLE_ROOK_INITIAL_COL_LONG","CASTLE_KING_INITIAL_COL","CASTLE_PATH_COLS_LONG","CASTLE_ROOK_INITIAL_COL_SHORT","CASTLE_PATH_COLS_SHORT","BoardPosition","every","col","isPawnOnStartingSquare","pawn","isWhite","WHITE_PAWN_STARTING_SQUARE","BLACK_PAWN_STARTING_SQUARE","isPawnOnEnPassantSquare","WHITE_EN_PASSANT_SQUARE","BLACK_EN_PASSANT_SQUARE","isSquareAvailable","updateColumnOnARow","colIndex","newValue","handleSquareOnCurrentRow","currentSquare","targetSquare","handleSquareAndTargetSquareOnTheSameRow","handleTargetSquareOnCurrentRow","ConvertPieceToFENPiece","canWeCastle","Object","values","CastlingRights","some","isKing","handleCastling","SidewaysCapture","kingPiece","rookPiece","forEach","type","emptySquares","kingFinalCol","rookFinalCol","EMPTY_SQUARES_AFTER_LONG_CASTLE","CASTLE_KING_FINAL_COL_LONG","CASTLE_ROOK_FINAL_COL_LONG","EMPTY_SQUARES_AFTER_SHORT_CASTLE","CASTLE_KING_FINAL_COL_SHORT","CASTLE_ROOK_FINAL_COL_SHORT","convertRowToFEN","acc","column","lastChar","slice","getCastlingRules","sortedKeys","getSortedCastlingKeys","castlingMap","map","key","join","generateANewFen","fenRows","turn","IsWhiteToMove","castling","enPassant","EnPassant","isPossible","convertLocationToCoordinates","halfMoves","HalfMoves","fullMoves","FullMoves","keys","sort","updateCastlingRights","includes","updateEnPassant","convertCoordinatesToLocation","assign","fenParser","isPossibleMove","getPossibleMoves","movePiece","resetPossibleMoves","updateBoardPosition","boardArray","generateSquareComponents","updateIsWhiteToMove","updateHalfMoves","updateFullMoves","splice","rowIndex","targetColIndex","index","_c8","pieceMapping","fenPiece","toUpperCase","_c9","boardSquares","squareColorIsWhite","flatMap","rowSquares","DARK_SQUARES_COLOR","possibleMoveStatus","item","squareComponent","fileName","_jsxFileName","lineNumber","coordinates","tokens","toString","number","DIM","String","fromCharCode","isKingInCheck","kingSquare","pseudo","updatedSquares","cloneElement","checkDirections","directions","dx","dy","i","pieceColor","pieceType","linearDirections","diagonalDirections","knightMoves","isWhiteInCheck","isBlackInCheck","isBishop","isQueen","isRook","isPawn","isKnight","$RefreshReg$"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/Chess-React.js-/src/HelperMethods.js"],"sourcesContent":["import React from 'react';\r\nimport Square from \"./Square.js\"\r\nimport * as GlobalVariables from './globalVariables';\r\n\r\n/**\r\n * Checks if a character is Uppercase using the ASCII table.\r\n * @param {string} value - The character to check.\r\n * @returns {boolean} - True if the character is uppercase, false otherwise.\r\n */\r\nexport function IsUpperCase(value) {\r\n    const firstChar = getFirstCharacter(value)\r\n    return firstChar >= GlobalVariables.ASCII_UPPERCASE_A && firstChar <= GlobalVariables.ASCII_UPPERCASE_Z;\r\n}\r\n\r\n/**\r\n * Returns the ASCII code of the first character of a string.\r\n * @param {string} value - The string from which to get the ASCII code.\r\n * @returns {number} - The ASCII code of the first character.\r\n */\r\nexport function getFirstCharacter(value) {\r\n    return value.charCodeAt(0);\r\n}\r\n\r\n/**\r\n * Checks if a character is Lowercase using the ASCII table.\r\n * @param {string} value - The character to check.\r\n * @returns {boolean} - True if the character is lowercase, false otherwise.\r\n */\r\nexport function IsLowerCase(value) {\r\n    const firstChar = getFirstCharacter(value)\r\n    return value.charCodeAt(0) >= 97 && value.charCodeAt(0) <= 122;\r\n}\r\n\r\n/**\r\n * Checks if a character is a Digit using the ASCII table.\r\n * @param {string} value - The character to check.\r\n * @returns {boolean} - True if the character is a digit, false otherwise.\r\n */\r\nexport function IsDigit(value) {\r\n    return value.charCodeAt(0) >= 48 && value.charCodeAt(0) <= 57;\r\n}\r\n\r\n/**\r\n * Parses a FEN string and returns its components.\r\n * @param {string} fen - The FEN string to parse.\r\n * @returns {object} - An object containing the FEN components.\r\n */\r\nexport function ParseFEN(fen) {\r\n    const fenParts = fen.split(' ');\r\n    if (fenParts.length !== 6) {\r\n        throw new Error('Invalid FEN');\r\n    }\r\n    const [fenBoard, fenTurn, fenCastling, fenEnPassant, fenHalfMoves, fenFullMoves] = fenParts;\r\n    return {\r\n        fenBoard,\r\n        fenTurn,\r\n        fenCastling,\r\n        fenEnPassant,\r\n        fenHalfMoves: Number(fenHalfMoves),\r\n        fenFullMoves: Number(fenFullMoves)\r\n    };\r\n}\r\n\r\n/**\r\n * Converts FEN piece notation to an actual piece.\r\n * @param {string} letter - The FEN notation of the piece.\r\n * @returns {string} - The actual piece.\r\n */\r\nexport function ConvertFENtoPiece(letter) {\r\n    const FEN_PIECE_MAP = {\r\n        [GlobalVariables.FEN_PIECES_BLACK.PAWN]: GlobalVariables.PIECES.PAWN,\r\n        [GlobalVariables.FEN_PIECES_BLACK.KNIGHT]: GlobalVariables.PIECES.KNIGHT,\r\n        [GlobalVariables.FEN_PIECES_BLACK.KING]: GlobalVariables.PIECES.KING,\r\n        [GlobalVariables.FEN_PIECES_BLACK.QUEEN]: GlobalVariables.PIECES.QUEEN,\r\n        [GlobalVariables.FEN_PIECES_BLACK.ROOK]: GlobalVariables.PIECES.ROOK,\r\n        [GlobalVariables.FEN_PIECES_BLACK.BISHOP]: GlobalVariables.PIECES.BISHOP,\r\n    };\r\n\r\n    return FEN_PIECE_MAP[letter.toLowerCase()] || \"\";\r\n}\r\n\r\n/**\r\n * Converts the FEN piece notation to a piece that we can use in the square component.\r\n * @param {string} value - The FEN notation of the piece.\r\n * @returns {string} - The piece in {color-piece} format.\r\n */\r\nexport function ConvertFENPieceToPiece(value) {\r\n    if (IsUpperCase(value)) {\r\n        return `${GlobalVariables.COLORS.WHITE}-${ConvertFENtoPiece(value)}`;\r\n    }\r\n\r\n    if (IsLowerCase(value)) {\r\n        return `${GlobalVariables.COLORS.BLACK}-${ConvertFENtoPiece(value)}`;\r\n    }\r\n\r\n    return \"\";\r\n}\r\n\r\n/**\r\n * Converts a string in FEN format to a normal string.\r\n * @param {string} value - The FEN string.\r\n * @returns {string} - The normal string.\r\n */\r\nexport function ConvertFenToString(value) {\r\n    return value.split('').reduce((result, char) => {\r\n        if (IsDigit(char)) {\r\n            return result + GlobalVariables.EMPTY_SQUARE_PIECE.repeat(Number(char));\r\n        }\r\n        return result + char;\r\n    }, '');\r\n}\r\n\r\n/**\r\n * Checks if two squares are on the same row.\r\n * @param {object} square1 - The first square.\r\n * @param {object} square2 - The second square.\r\n * @returns {boolean} - True if the squares are on the same row, false otherwise.\r\n */\r\nexport function checkIfTwoSquaresAreOnTheSameRow(square1, square2) {\r\n    return square1.props.x === square2.props.x;\r\n}\r\n\r\n/**\r\n * Checks if two squares are on the same column.\r\n * @param {object} square1 - The first square to check.\r\n * @param {object} square2 - The second square to check.\r\n * @returns {boolean} - True if both squares are on the same column, false otherwise.\r\n */\r\nexport function checkIfTwoSquaresAreOnTheSameColumn(square1, square2) {\r\n    return square1.props.y === square2.props.y;\r\n}\r\n\r\n/**\r\n * Checks if the square is on the given row number.\r\n * @param {object} square - The square to check.\r\n * @param {number} rowNumber - The row number.\r\n * @returns {boolean} - True if the square is on the given row, false otherwise.\r\n */\r\nexport function isSquareOnRow(square, rowNumber) {\r\n    return square.props.x === rowNumber;\r\n}\r\n\r\n/**\r\n * Checks if the square is on the given column number.\r\n * @param {object} square - The square to check.\r\n * @param {number} columnNumber - The column number.\r\n * @returns {boolean} - True if the square is on the given column, false otherwise.\r\n */\r\nexport function isSquareOnColumn(square, columnNumber) {\r\n    return square.props.y === columnNumber;\r\n}\r\n\r\n/**\r\n * Gets the piece from a square.\r\n * @param {object} square - The square to get the piece from.\r\n * @returns {string} - The piece.\r\n */\r\nexport function getPiece(square) {\r\n    return square.props.piece.split(GlobalVariables.PIECE_DELIMITER)[GlobalVariables.PIECE_PIECE_INDEX];\r\n}\r\n\r\n/**\r\n * Checks if a square has a specific piece.\r\n * @param {object} square - The square to check.\r\n * @param {string} piece - The piece to check for.\r\n * @returns {boolean} - True if the square has the piece, false otherwise.\r\n */\r\nexport function doesTheSquareHasThePiece(square, piece) {\r\n    return getPiece(square) === piece;\r\n}\r\n\r\n/**\r\n * Gets the piece color from a square.\r\n * @param {object} square - The square to get the piece color from.\r\n * @returns {string} - The piece color.\r\n */\r\nexport function getPieceColor(square) {\r\n    return square.props.piece.split(GlobalVariables.PIECE_DELIMITER)[GlobalVariables.PIECE_COLOR_INDEX];\r\n}\r\n\r\n/**\r\n * Checks if a color is white.\r\n * @param {string} color - The color to check.\r\n * @returns {boolean} - True if the color is white, false otherwise.\r\n */\r\nexport function isColorWhite(color) {\r\n    return color === GlobalVariables.COLORS.WHITE;\r\n}\r\n\r\n/**\r\n * Checks if a color is black.\r\n * @param {string} color - The color to check.\r\n * @returns {boolean} - True if the color is black, false otherwise.\r\n */\r\nexport function isColorBlack(color) {\r\n    return color === GlobalVariables.COLORS.BLACK;\r\n}\r\n\r\n/**\r\n * Checks if two pieces are of the same color.\r\n * @param {string} piece1 - The first piece.\r\n * @param {string} piece2 - The second piece.\r\n * @returns {boolean} - True if the pieces are of the same color, false otherwise.\r\n */\r\nexport function areSameColor(piece1, piece2) {\r\n    return getPieceColor(piece1) === getPieceColor(piece2);\r\n}\r\n\r\n/**\r\n * Checks if a move is equal to the current selected square.\r\n * @param {object} move - The move to check.\r\n * @returns {boolean} - True if the move is equal to the current selected square, false otherwise.\r\n */\r\nexport function checkIfAMoveIsEqualToTheCurrentSelectedSquare(move) {\r\n    return move.props.x === GlobalVariables.CurrentSquareSelection.x && move.props.y === GlobalVariables.CurrentSquareSelection.y;\r\n}\r\n\r\n/**\r\n * Compares if two squares are the same.\r\n * @param {object} square1 - The first square.\r\n * @param {object} square2 - The second square.\r\n * @returns {boolean} - True if the squares are the same, false otherwise.\r\n */\r\nexport function compareIfTwoSquaresAreTheSame(square1, square2) {\r\n    return checkIfTwoSquaresAreOnTheSameRow(square1, square2) && checkIfTwoSquaresAreOnTheSameColumn(square1, square2);\r\n}\r\n\r\n/**\r\n * Gets a target square by its location.\r\n * @param {number} x - The x coordinate of the target square.\r\n * @param {number} y - The y coordinate of the target square.\r\n * @returns {object} - The target square.\r\n */\r\nexport function getATargetSquareByLocation(x, y, squares) {\r\n    return squares.find(s => s.props.x == x && s.props.y == y)\r\n}\r\n\r\n/**\r\n * Gets a target square by its piece.\r\n * @param {string} piece - The piece to search for.\r\n * @returns {object} - The target square.\r\n */\r\nexport function getATargetSquareByPiece(piece, squares) {\r\n    return squares.find(s => s.props.piece == piece)\r\n}\r\n\r\n/**\r\n * Checks if castling is possible.\r\n * @param {string} castlingType - The type of castling (long or short).\r\n * @param {boolean} [withWhite=true] - True if checking for white's castling, false otherwise.\r\n * @returns {boolean} - True if castling is possible, false otherwise.\r\n */\r\nexport function isCastlingPossible(castlingType, withWhite = true) {\r\n    const row = withWhite ? GlobalVariables.CASTLE_ROW_WHITE : GlobalVariables.CASTLE_ROW_BLACK;\r\n    const pieces = withWhite ? GlobalVariables.FEN_PIECES_WHITE : GlobalVariables.FEN_PIECES_BLACK;\r\n    const [rookCol, kingCol, pathCols] = castlingType === GlobalVariables.CASTLING_TYPES.LONG ?\r\n        [GlobalVariables.CASTLE_ROOK_INITIAL_COL_LONG, GlobalVariables.CASTLE_KING_INITIAL_COL, GlobalVariables.CASTLE_PATH_COLS_LONG] :\r\n        [GlobalVariables.CASTLE_ROOK_INITIAL_COL_SHORT, GlobalVariables.CASTLE_KING_INITIAL_COL, GlobalVariables.CASTLE_PATH_COLS_SHORT];\r\n\r\n    return GlobalVariables.BoardPosition[row][rookCol] === pieces.ROOK &&\r\n        GlobalVariables.BoardPosition[row][kingCol] === pieces.KING &&\r\n        pathCols.every(col => GlobalVariables.BoardPosition[row][col] === GlobalVariables.EMPTY_SQUARE_PIECE);\r\n}\r\n\r\n/**\r\n * Checks if a pawn is on its starting square.\r\n * @param {object} pawn - The pawn to check.\r\n * @returns {boolean} - True if the pawn is on its starting square, false otherwise.\r\n */\r\nexport function isPawnOnStartingSquare(pawn) {\r\n    const isWhite = isColorWhite(getPieceColor(pawn));\r\n    return isWhite ? pawn.props.x === GlobalVariables.WHITE_PAWN_STARTING_SQUARE : pawn.props.x === GlobalVariables.BLACK_PAWN_STARTING_SQUARE;\r\n}\r\n\r\n/**\r\n * Checks if a pawn is on an en passant square.\r\n * @param {object} pawn - The pawn to check.\r\n * @returns {boolean} - True if the pawn is on an en passant square, false otherwise.\r\n */\r\nexport function isPawnOnEnPassantSquare(pawn) {\r\n    const isWhite = isColorWhite(getPieceColor(pawn));\r\n    return isWhite ? pawn.props.x === GlobalVariables.WHITE_EN_PASSANT_SQUARE : pawn.props.x === GlobalVariables.BLACK_EN_PASSANT_SQUARE;\r\n}\r\n\r\n/**\r\n * Checks if a square is available for a move.\r\n * @param {object} square - The square to check.\r\n * @returns {boolean} - True if the square is available, false otherwise.\r\n */\r\nexport function isSquareAvailable(square) {\r\n    return !square.props.piece;\r\n}\r\n\r\n/**\r\n * Updates a column on a row with a new value.\r\n * @param {Array} row - The row to update.\r\n * @param {number} colIndex - The column index.\r\n * @param {string} newValue - The new value.\r\n * @returns {Array} - The updated row.\r\n */\r\nexport function updateColumnOnARow(row, colIndex, newValue) {\r\n    row[colIndex] = newValue;\r\n    return row;\r\n}\r\n\r\n/**\r\n * Removes the current square's piece.\r\n * @param {object} currentSquare - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @param {Array} row - The row to update.\r\n * @returns {Array} - The updated row.\r\n */\r\nexport function handleSquareOnCurrentRow(currentSquare, targetSquare, row) {\r\n    return checkIfTwoSquaresAreOnTheSameRow(currentSquare, targetSquare) ?\r\n        handleSquareAndTargetSquareOnTheSameRow(currentSquare, targetSquare, row) :\r\n        updateColumnOnARow(row, currentSquare.props.y, GlobalVariables.EMPTY_SQUARE_PIECE);\r\n}\r\n\r\n/**\r\n * Updates the target square with the current square's piece.\r\n * @param {object} currentSquare - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @param {Array} row - The row to update.\r\n * @returns {Array} - The updated row.\r\n */\r\nexport function handleTargetSquareOnCurrentRow(currentSquare, targetSquare, row) {\r\n    return updateColumnOnARow(row, targetSquare.props.y, ConvertPieceToFENPiece(currentSquare.props.piece));\r\n}\r\n\r\n/**\r\n * Checks if castling is possible for either side.\r\n * @returns {boolean} - True if castling is possible for either side, false otherwise.\r\n */\r\nexport function canWeCastle() {\r\n    return Object.values(GlobalVariables.CastlingRights).some(s => s);\r\n}\r\n\r\n/**\r\n * Checks if we're making a move on the same row and performs castling if we want to castle.\r\n * @param {object} currentSquare - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @param {Array} row - The row to update.\r\n * @returns {Array} - The updated row.\r\n */\r\nexport function handleSquareAndTargetSquareOnTheSameRow(currentSquare, targetSquare, row) {\r\n    if (isKing(currentSquare) && canWeCastle()) {\r\n        return handleCastling(currentSquare, row);\r\n    }\r\n    return SidewaysCapture(row, Number(currentSquare.props.y), Number(targetSquare.props.y), currentSquare.props.piece);\r\n}\r\n\r\n/**\r\n * Performs castling by swapping the rook and the king.\r\n * @param {object} square - The square to update.\r\n * @param {Array} row - The row to update.\r\n * @returns {Array} - The updated row.\r\n */\r\nexport function handleCastling(square, row) {\r\n    const color = getPieceColor(square);\r\n    const isWhite = isColorWhite(color);\r\n    const kingPiece = isWhite ? GlobalVariables.FEN_PIECES_WHITE.KING : GlobalVariables.FEN_PIECES_BLACK.KING;\r\n    const rookPiece = isWhite ? GlobalVariables.FEN_PIECES_WHITE.ROOK : GlobalVariables.FEN_PIECES_BLACK.ROOK;\r\n\r\n    Object.values(GlobalVariables.CASTLING_TYPES).forEach(type => {\r\n        if (isCastlingPossible(type, isWhite)) {\r\n            const [emptySquares, kingFinalCol, rookFinalCol] = type === GlobalVariables.CASTLING_TYPES.LONG ?\r\n                [GlobalVariables.EMPTY_SQUARES_AFTER_LONG_CASTLE, GlobalVariables.CASTLE_KING_FINAL_COL_LONG, GlobalVariables.CASTLE_ROOK_FINAL_COL_LONG] :\r\n                [GlobalVariables.EMPTY_SQUARES_AFTER_SHORT_CASTLE, GlobalVariables.CASTLE_KING_FINAL_COL_SHORT, GlobalVariables.CASTLE_ROOK_FINAL_COL_SHORT];\r\n            emptySquares.forEach(col => row[col] = GlobalVariables.EMPTY_SQUARE_PIECE);\r\n            row[kingFinalCol] = kingPiece;\r\n            row[rookFinalCol] = rookPiece;\r\n        }\r\n    });\r\n\r\n    return row;\r\n}\r\n\r\n/**\r\n * Converts a row of squares to its FEN representation.\r\n * @param {Array} row - The row to convert.\r\n * @returns {string} - The FEN representation of the row.\r\n */\r\nexport function convertRowToFEN(row) {\r\n    return row.reduce((acc, column) => {\r\n        if (column === EMPTY_SQUARE_PIECE) {\r\n            const lastChar = acc.slice(-1);\r\n            if (IsDigit(lastChar)) {\r\n                return acc.slice(0, -1) + (Number(lastChar) + 1); //add 1 to the previous number if an empty space\r\n            } else {\r\n                return acc + '1'; //set the next piece as 1 (1 empty space)\r\n            }\r\n        } else {\r\n            return acc + column; //return the piece if no empty spaces\r\n        }\r\n    }, '');\r\n}\r\n\r\n/**\r\n * Gets the castling rules as a string.\r\n * @returns {string} - The castling rules.\r\n */\r\nexport function getCastlingRules() {\r\n    const sortedKeys = getSortedCastlingKeys();\r\n\r\n    const castlingMap = {\r\n        [sortedKeys[0]]: GlobalVariables.FEN_PIECES_BLACK.QUEEN, // 'blackLongCastle'\r\n        [sortedKeys[1]]: GlobalVariables.FEN_PIECES_BLACK.KING, // 'blackShortCastle'\r\n        [sortedKeys[2]]: GlobalVariables.FEN_PIECES_WHITE.QUEEN, // 'whiteLongCastle'\r\n        [sortedKeys[3]]: GlobalVariables.FEN_PIECES_WHITE.KING  // 'whiteShortCastle'\r\n    };\r\n\r\n    return sortedKeys.map(key => GlobalVariables.CastlingRights[key] ? castlingMap[key] : \"\").join(\"\") || GlobalVariables.PIECE_DELIMITER\r\n}\r\n\r\n/**\r\n * Generates a new FEN string based on the current board state.\r\n * @returns {string} - The new FEN string.\r\n */\r\nexport function generateANewFen() {\r\n    const fenRows = GlobalVariables.BoardPosition.map(row => convertRowToFEN(row)).join('/');\r\n    const turn = GlobalVariables.IsWhiteToMove ? 'w' : 'b';\r\n    const castling = getCastlingRules();\r\n    const enPassant = GlobalVariables.EnPassant.isPossible\r\n        ? convertLocationToCoordinates(GlobalVariables.EnPassant.x, GlobalVariables.EnPassant.y)\r\n        : '-';\r\n    const halfMoves = GlobalVariables.HalfMoves;\r\n    const fullMoves = GlobalVariables.FullMoves;\r\n\r\n    return `${fenRows} ${turn} ${castling} ${enPassant} ${halfMoves} ${fullMoves}`;\r\n}\r\n\r\n/**\r\n * Returns the keys of the CastlingRights object in alphabetical order.\r\n * @returns {Array<string>} - The sorted keys of CastlingRights.\r\n */\r\nexport function getSortedCastlingKeys() {\r\n    return Object.keys(GlobalVariables.CastlingRights).sort();\r\n}\r\n\r\n/**\r\n * Updates castling rights based on the given castling string.\r\n * @param {string} castling - The castling rights string (e.g., 'KQkq').\r\n */\r\nexport function updateCastlingRights(castling) {\r\n    const sortedKeys = getSortedCastlingKeys();\r\n\r\n    // Create a map based on the sorted keys to ensure consistency\r\n    const castlingMap = {\r\n        [GlobalVariables.FEN_PIECES_BLACK.QUEEN]: sortedKeys[0], // 'blackLongCastle'\r\n        [GlobalVariables.FEN_PIECES_BLACK.KING]: sortedKeys[1], // 'blackShortCastle'\r\n        [GlobalVariables.FEN_PIECES_WHITE.QUEEN]: sortedKeys[2], // 'whiteLongCastle'\r\n        [GlobalVariables.FEN_PIECES_WHITE.KING]: sortedKeys[3]  // 'whiteShortCastle'\r\n    };\r\n\r\n    // Update castling rights using the castling map\r\n    Object.keys(castlingMap).forEach(key => {\r\n        GlobalVariables.CastlingRights[castlingMap[key]] = castling.includes(key);\r\n    });\r\n}\r\n\r\n/**\r\n * Updates en passant status based on the given en passant string.\r\n * @param {string} enPassant - The en passant target square (e.g., 'e3') or '-' if not available.\r\n */\r\nexport function updateEnPassant(enPassant) {\r\n    if (enPassant !== GlobalVariables.PIECE_DELIMITER) {\r\n        const { x, y } = convertCoordinatesToLocation(enPassant);\r\n        Object.assign(GlobalVariables.EnPassant, {\r\n            isPossible: true,\r\n            x: x,\r\n            y: y\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Parses the FEN string to update the board state.\r\n * @param {string} fen - The FEN string representing the board state.\r\n * @param {Array} isPossibleMove - Array indicating possible moves.\r\n * @param {function} getPossibleMoves - Function to get possible moves.\r\n * @param {function} movePiece - Function to move a piece.\r\n * @param {function} resetPossibleMoves - Function to reset possible moves.\r\n * @param {boolean} [updateBoardPosition=true] - Whether to update the board position.\r\n * @returns {Array} - The generated square components.\r\n */\r\nexport function fenParser(fen, isPossibleMove, getPossibleMoves, movePiece, resetPossibleMoves, updateBoardPosition = true) {\r\n    const {\r\n        fenBoard,\r\n        fenTurn,\r\n        fenCastling,\r\n        fenEnPassant,\r\n        fenHalfMoves,\r\n        fenFullMoves\r\n    } = ParseFEN(fen);\r\n\r\n    const fenRows = fenBoard.split('/');\r\n    const boardArray = fenRows.map(row => ConvertFenToString(row).split(''));\r\n\r\n    const squares = generateSquareComponents(boardArray, isPossibleMove, getPossibleMoves, movePiece, resetPossibleMoves);\r\n\r\n    updateCastlingRights(fenCastling);\r\n\r\n    GlobalVariables.updateIsWhiteToMove(fenTurn === 'w');\r\n    GlobalVariables.updateHalfMoves(fenHalfMoves);\r\n    GlobalVariables.updateFullMoves(fenFullMoves);\r\n\r\n    if (updateBoardPosition) {\r\n        GlobalVariables.BoardPosition.splice(0, GlobalVariables.BoardPosition.length, ...boardArray);\r\n    }\r\n\r\n    updateEnPassant(fenEnPassant);\r\n\r\n    return squares;\r\n}\r\n\r\n/**\r\n * Updates the board position after making a move.\r\n * @param {object} currentSquare - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @returns {Array} - The updated board position.\r\n */\r\nexport function updateBoardPosition(currentSquare, targetSquare) {\r\n    return GlobalVariables.BoardPosition.map((row, rowIndex) => {\r\n        if (isSquareOnRow(currentSquare, rowIndex)) {\r\n            row = handleSquareOnCurrentRow(currentSquare, targetSquare, row);\r\n        }\r\n        if (isSquareOnRow(targetSquare, rowIndex)) {\r\n            row = handleTargetSquareOnCurrentRow(currentSquare, targetSquare, row);\r\n        }\r\n        return row;\r\n    });\r\n}\r\n\r\n/**\r\n * Modifies the row to capture pieces sideways.\r\n * @param {Array} row - The row to update.\r\n * @param {number} colIndex - The column index of the current square.\r\n * @param {number} targetColIndex - The column index of the target square.\r\n * @param {string} value - The piece value.\r\n * @returns {Array} - The updated row.\r\n */\r\nexport function SidewaysCapture(row, colIndex, targetColIndex, value) {\r\n    return row.map((col, index) => {\r\n        if (index === colIndex) return GlobalVariables.EMPTY_SQUARE_PIECE;\r\n        if (index === targetColIndex) return ConvertPieceToFENPiece(value);\r\n        return col;\r\n    });\r\n}\r\n\r\n/**\r\n * Converts the piece from {color-piece} format to FEN format (a single letter).\r\n * @param {string} value - The piece value.\r\n * @returns {string} - The FEN notation of the piece.\r\n */\r\nexport function ConvertPieceToFENPiece(value) {\r\n    const [color, piece] = value.split(GlobalVariables.PIECE_DELIMITER);\r\n    const pieceMapping = {\r\n        [GlobalVariables.PIECES.PAWN]: GlobalVariables.FEN_PIECES_BLACK.PAWN,\r\n        [GlobalVariables.PIECES.KNIGHT]: GlobalVariables.FEN_PIECES_BLACK.KNIGHT,\r\n        [GlobalVariables.PIECES.BISHOP]: GlobalVariables.FEN_PIECES_BLACK.BISHOP,\r\n        [GlobalVariables.PIECES.ROOK]: GlobalVariables.FEN_PIECES_BLACK.ROOK,\r\n        [GlobalVariables.PIECES.QUEEN]: GlobalVariables.FEN_PIECES_BLACK.QUEEN,\r\n        [GlobalVariables.PIECES.KING]: GlobalVariables.FEN_PIECES_BLACK.KING,\r\n    };\r\n\r\n    const fenPiece = pieceMapping[piece];\r\n    return isColorWhite(color) ? fenPiece.toUpperCase() : fenPiece;\r\n}\r\n\r\n/**\r\n * Generates Square components for the given board state.\r\n * @param {Array} boardSquares - The 2D array representing the board squares.\r\n * @param {Array} isPossibleMove - The array of possible move states.\r\n * @param {Function} getPossibleMoves - The function to get possible moves.\r\n * @param {Function} movePiece - The function to move a piece.\r\n * @param {Function} resetPossibleMoves - The function to reset possible moves.\r\n * @returns {Array} - The array of Square components.\r\n */\r\nexport function generateSquareComponents(boardSquares, isPossibleMove, getPossibleMoves, movePiece, resetPossibleMoves) {\r\n    let squareColorIsWhite = true;\r\n\r\n    const squares = boardSquares.flatMap((row, rowIndex) => {\r\n        const rowSquares = row.map((square, colIndex) => {\r\n            const color = squareColorIsWhite ? \"\" : GlobalVariables.DARK_SQUARES_COLOR;\r\n            const possibleMoveStatus = isPossibleMove.find(item => item.key === `${rowIndex}-${colIndex}`);\r\n            const squareComponent = (\r\n                <Square\r\n                    key={`${rowIndex}-${colIndex}`}\r\n                    x={rowIndex}\r\n                    y={colIndex}\r\n                    piece={ConvertFENPieceToPiece(square)}\r\n                    color={color}\r\n                    getPossibleMoves={getPossibleMoves}\r\n                    movePiece={movePiece}\r\n                    isPossibleMove={possibleMoveStatus ? possibleMoveStatus.value : false}\r\n                    resetPossibleMoves={resetPossibleMoves}\r\n                />\r\n            );\r\n            squareColorIsWhite = !squareColorIsWhite;\r\n            return squareComponent;\r\n        });\r\n        squareColorIsWhite = !squareColorIsWhite; // Reset color for the next row\r\n        return rowSquares;\r\n    });\r\n\r\n    return squares;\r\n}\r\n\r\n/**\r\n * Converts board coordinates to X and Y position on the board, e.g., a8 = 0, 0\r\n * @param {string} coordinates - The board coordinates to convert.\r\n * @returns {object} - Returns an object with x and y properties.\r\n */\r\nexport function convertCoordinatesToLocation(coordinates) {\r\n    let tokens = coordinates.split('')\r\n\r\n    //skip invalid coordinates\r\n    if (tokens.length != 2) {\r\n        return\r\n    }\r\n\r\n    let letter = tokens[0].toString().toUpperCase()\r\n    let number = tokens[1]\r\n\r\n    //65 is the ASCII code for capital A which will give us 0 if we have A as a coordinate; A-F will give us 0-7 for y (columns)\r\n    //reverse the numbers since we draw the board top down for x (rows)\r\n    return { x: GlobalVariables.DIM - Number(number), y: letter.charCodeAt(0) - 65 }\r\n}\r\n\r\n/**\r\n * Converts a piece location to board coordinate, e.g., 0, 0 to a8\r\n * @param {string} x - The X position.\r\n * @param {string} y - The Y position.\r\n * @returns {string} - Returns a string containing the board coordinates.\r\n */\r\nexport function convertLocationToCoordinates(x, y) {\r\n    //maps y (column) to the letter coordinate; add 65 (capital A code) to the ASCII code for the location we have and we get a letter between A and F\r\n    //reverses the x (rows) coordinate because we drop the board top down, while coordinates go down up\r\n    return `${String.fromCharCode(y + 65)}${GlobalVariables.DIM - x}`.toLowerCase()\r\n}\r\n\r\n/**\r\n * Determines if the king is in check.\r\n * @param {object} kingSquare - The square where the king is located.\r\n * @param {object} [pseudo] - The square where a piece is hypothetically moved.\r\n * @param {object} [currentSquare=null] - The square of the piece being moved.\r\n * @param {string} color - The color of the king ('white' or 'black').\r\n * @returns {boolean} - True if the king is in check, false otherwise.\r\n */\r\nexport function isKingInCheck(kingSquare, pseudo, currentSquare = null, color, boardSquares) {\r\n    const squares = boardSquares;\r\n\r\n    const updatedSquares = squares.map(s => {\r\n        if (pseudo && compareIfTwoSquaresAreTheSame(s, pseudo)) {\r\n            return React.cloneElement(s, { piece: pseudo.props.piece });\r\n        } else if (currentSquare && compareIfTwoSquaresAreTheSame(s, currentSquare)) {\r\n            return React.cloneElement(s, { piece: '' });\r\n        } else {\r\n            return s;\r\n        }\r\n    });\r\n\r\n    const checkDirections = (directions) => {\r\n        for (const [dx, dy] of directions) {\r\n            for (let i = 1; i < GlobalVariables.DIM; i++) {\r\n                const piece = updatedSquares.find(s => isSquareOnRow(s, kingSquare.props.x + dx * i) && isSquareOnColumn(s, kingSquare.props.y + dy * i));\r\n                if (!piece) break;\r\n                const [pieceColor, pieceType] = piece.props.piece.split(GlobalVariables.PIECE_DELIMITER);\r\n                if (pieceColor !== color) {\r\n                    if (pieceType === GlobalVariables.PIECES.QUEEN || pieceType === GlobalVariables.PIECES.ROOK ||\r\n                        pieceType === GlobalVariables.PIECES.BISHOP || (i === 1 && pieceType === GlobalVariables.PIECES.PAWN && (dx === -1 || dx === 1))) {\r\n                        return true;\r\n                    }\r\n                    if (piece.props.piece) break;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const linearDirections = [\r\n        [1, 0], [-1, 0], [0, 1], [0, -1]  // Right, Left, Up, Down\r\n    ];\r\n\r\n    const diagonalDirections = [\r\n        [1, 1], [-1, -1], [1, -1], [-1, 1]  // Diagonals\r\n    ];\r\n\r\n    if (checkDirections(linearDirections) || checkDirections(diagonalDirections)) {\r\n        return true;\r\n    }\r\n\r\n    const knightMoves = [\r\n        [-2, -1], [-2, 1], [2, -1], [2, 1],\r\n        [-1, 2], [1, 2], [-1, -2], [1, -2]\r\n    ];\r\n\r\n    for (const [dx, dy] of knightMoves) {\r\n        const piece = updatedSquares.find(s => isSquareOnRow(s, kingSquare.props.x + dx) && isSquareOnColumn(s, kingSquare.props.y + dy));\r\n        if (piece && getPieceColor(piece) !== color && getPiece(piece) === GlobalVariables.PIECES.KNIGHT) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/**\r\n * Determines if the white king is in check.\r\n * @param {object} kingSquare - The square where the king is located.\r\n * @param {object} [pseudo] - The square where a piece is hypothetically moved.\r\n * @param {object} [currentSquare=null] - The square of the piece being moved.\r\n * @returns {boolean} - True if the white king is in check, false otherwise.\r\n */\r\nexport function isWhiteInCheck(kingSquare, pseudo, currentSquare = null, boardSquares) {\r\n    return isKingInCheck(kingSquare, pseudo, currentSquare, GlobalVariables.COLORS.WHITE, boardSquares);\r\n}\r\n\r\n/**\r\n * Determines if the black king is in check.\r\n * @param {object} kingSquare - The square where the king is located.\r\n * @param {object} [pseudo] - The square where a piece is hypothetically moved.\r\n * @param {object} [currentSquare=null] - The square of the piece being moved.\r\n * @returns {boolean} - True if the black king is in check, false otherwise.\r\n */\r\nexport function isBlackInCheck(kingSquare, pseudo, currentSquare = null, boardSquares) {\r\n    return isKingInCheck(kingSquare, pseudo, currentSquare, GlobalVariables.COLORS.BLACK, boardSquares);\r\n}\r\n\r\n/**\r\n * Checks if the piece on the square is a King.\r\n * @param {object} square - The square to check.\r\n * @returns {boolean} - True if the piece is a King, false otherwise.\r\n */\r\nexport function isKing(square) {\r\n    return doesTheSquareHasThePiece(square, GlobalVariables.PIECES.KING);\r\n}\r\n\r\n/**\r\n * Checks if the piece on the square is a Bishop.\r\n * @param {object} square - The square to check.\r\n * @returns {boolean} - True if the piece is a Bishop, false otherwise.\r\n */\r\nexport function isBishop(square) {\r\n    return doesTheSquareHasThePiece(square, GlobalVariables.PIECES.BISHOP);\r\n}\r\n\r\n/**\r\n * Checks if the piece on the square is a Queen.\r\n * @param {object} square - The square to check.\r\n * @returns {boolean} - True if the piece is a Queen, false otherwise.\r\n */\r\nexport function isQueen(square) {\r\n    return doesTheSquareHasThePiece(square, GlobalVariables.PIECES.QUEEN);\r\n}\r\n\r\n/**\r\n * Checks if the piece on the square is a Rook.\r\n * @param {object} square - The square to check.\r\n * @returns {boolean} - True if the piece is a Rook, false otherwise.\r\n */\r\nexport function isRook(square) {\r\n    return doesTheSquareHasThePiece(square, GlobalVariables.PIECES.ROOK);\r\n}\r\n\r\n/**\r\n * Checks if the piece on the square is a Pawn.\r\n * @param {object} square - The square to check.\r\n * @returns {boolean} - True if the piece is a Pawn, false otherwise.\r\n */\r\nexport function isPawn(square) {\r\n    return doesTheSquareHasThePiece(square, GlobalVariables.PIECES.PAWN);\r\n}\r\n\r\n/**\r\n * Checks if the piece on the square is a Knight.\r\n * @param {object} square - The square to check.\r\n * @returns {boolean} - True if the piece is a Knight, false otherwise.\r\n */\r\nexport function isKnight(square) {\r\n    return doesTheSquareHasThePiece(square, GlobalVariables.PIECES.KNIGHT);\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}