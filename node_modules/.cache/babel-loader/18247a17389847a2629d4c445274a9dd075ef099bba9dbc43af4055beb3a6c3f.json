{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vladi Gotsin\\\\Desktop\\\\react\\\\Chess-React.js-\\\\src\\\\Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Square from \"./Square.js\";\nimport * as HelperMethods from \"./HelperMethods.js\";\nimport { DIM, PIECE_DELIMITER, KINGS, COLORS, PIECES, CastlingRights, EnPassant, CurrentSquareSelection, PossibleMoves, HalfMoves, FullMoves, IsWhiteToMove, updateIsWhiteToMove, updateHalfMoves, updateFullMoves, BoardPosition, WHITE_PAWN_STARTING_SQUARE, BLACK_PAWN_STARTING_SQUARE, BLACK_EN_PASSANT_SQUARE, WHITE_EN_PASSANT_SQUARE, FEN_PIECES_WHITE, FEN_PIECES_BLACK, EMPTY_SQUARE_PIECE, CASTLE_ROW_WHITE, CASTLE_ROW_BLACK, CASTLE_KING_INITIAL_COL, CASTLE_ROOK_INITIAL_COL_LONG, CASTLE_ROOK_INITIAL_COL_SHORT, CASTLE_PATH_COLS_LONG, CASTLE_PATH_COLS_SHORT, PIECE_COLOR_INDEX, PIECE_PIECE_INDEX } from \"./globalVariables.js\";\n\n/*\r\nTODO:\r\nCode Reusability: refactor some of the repeated code and generate new functions if needed\r\nConsistency and Naming: Have better and more consistent names for variables and functions\r\nDocumentation: add more comments to understand what is going on\r\nTesting: add unit tests\r\nImplementations: add promotions, implement endgames (mate, stalemate, draws repetition, 50 moves rule)\r\nBugs: Fix bugs (if any)\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Board() {\n  _s();\n  //<summary>\n  //FEN - Forsyth-Edwards Notation\n  //small letters - black pieces\n  //capital letters - white pieces\n  //numbers - empty board squares\n  //(/) - separates each board row\n  //first letter after the board indicates whose turn it is to move (w - white, b - black)\n  //next letters indicate castling rights, k - king-side, q - queen-side, (-) - no castling allowed for any side\n  //en passant square - when a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square\n  //the number of half turns (white moves, then black moves = 2 half moves) that were made without a pawn move or a capture of a piece (50-move rule when reaches 100)\n  //the number of full moves (white moves, then black moves = 1 full move); increase after every black half move\n  //</summary>\n  //starting position\n  //'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\n  //r1bqk2r/pppp1ppp/2n5/8/1bBPn3/2N2N2/PP3PPP/R1BQK2R w KQkq - 0 8\n  //r1bqk2r/pppp1ppp/2n2n2/2b5/2BPP3/5N2/PP3PPP/RNBQK2R b KQkq - 0 6\n  //r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21\n  const [fen, setFen] = useState('r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21');\n  //tracks if we can move to a square and adds a circle to the square if we can\n  const [isPossibleMove, setIsPossibleMove] = useState([]);\n  //keeps track of all square components that are visualized on the page; used to calculate moves and so on.\n  const [boardSquares, setBoardSquares] = useState([]);\n\n  //using ref hooks to have access to the latest values for the two states\n  const isPossibleMoveRef = useRef(isPossibleMove);\n  const boardSquaresRef = useRef(boardSquares);\n\n  //updates the possible move array\n  //if a square is a possible move, it will receive a circle indicating you can move there\n  const updateIsPossibleMove = (key, value) => {\n    //we are updating the state based on the previous state to resolve the issue with pending state and queuen in React\n    setIsPossibleMove(prevState => prevState.map(item =>\n    //if the current item's key matches the key we're looking for\n    //copy all properties of the object in a new object using the spread syntax (...)\n    //modify the value property to whatever value we're using\n    //copy the original item if no modifications are needed\n    item.key === key ? {\n      ...item,\n      value: value\n    } : item));\n  };\n\n  //update the reference to the IsPossibleMove array whenever we set a new value to the array\n  useEffect(() => {\n    isPossibleMoveRef.current = isPossibleMove;\n    fenParser(false);\n  }, [isPossibleMove]);\n\n  //called when the page loads\n  //removes all circles from squares indicating that they can be clicked to move a piece there\n  //we parse the FEN to fill in the board\n  useEffect(() => {\n    resetPossibleMoves();\n    fenParser();\n  }, []);\n\n  //parse the FEN and fill in the board with the new position when the FEN updates\n  useEffect(() => {\n    fenParser();\n  }, [fen]);\n\n  //update the reference to the BoardSquares array whenever we set a new value to the array\n  useEffect(() => {\n    boardSquaresRef.current = boardSquares;\n  }, [boardSquares]);\n\n  //return the IsPossibleMoves array to its original state (no possible moves)\n  function resetPossibleMoves() {\n    const initialIsPossibleMove = [];\n    for (let i = 0; i < DIM; i++) {\n      for (let j = 0; j < DIM; j++) {\n        initialIsPossibleMove.push({\n          key: `${i}-${j}`,\n          value: false\n        });\n      }\n    }\n    setIsPossibleMove(initialIsPossibleMove);\n  }\n\n  //generates a new FEN based on\n  //current board position\n  //who's turn it is\n  //castling rules\n  //enPassant square\n  //half and full moves made so far\n  //TODO: ensure everything gets parsed correctly\n  //TODO: refactor the code\n  function generateANewFen() {\n    let fenString = '';\n    for (let i = 0; i < BoardPosition.length; i++) {\n      let row = BoardPosition[i];\n      for (let j = 0; j < row.length; j++) {\n        let column = row[j];\n        if (column == ' ') {\n          if (fenString && IsDigit(fenString[fenString.length - 1])) {\n            let lastChar = fenString.slice(-1);\n            fenString = fenString.substring(0, fenString.length - 1);\n            fenString += Number(lastChar) + 1;\n          } else {\n            fenString += '1';\n          }\n        } else {\n          fenString += column;\n        }\n      }\n      fenString += '/';\n    }\n    fenString = fenString.substring(0, fenString.length - 1); //removes the last slash\n\n    fenString += IsWhiteToMove ? ' w' : ' b';\n    let castlingRules = '';\n    castlingRules += CastlingRights.whiteShortCastle ? 'K' : '';\n    castlingRules += CastlingRights.whiteLongCastle ? 'Q' : '';\n    castlingRules += CastlingRights.blackShortCastle ? 'k' : '';\n    castlingRules += CastlingRights.blackLongCastle ? 'q' : '';\n    fenString += castlingRules.length == 0 ? ' -' : ' ' + castlingRules;\n    fenString += EnPassant.isPossible ? ' ' + convertLocationToCoordinates(EnPassant.x, EnPassant.y) : ' -';\n    fenString += ' ' + HalfMoves;\n    fenString += ' ' + FullMoves;\n    setFen(fenString);\n  }\n\n  //parses the current FEN and generates variables values for\n  //board position\n  //player's turn\n  //castling rules\n  //enPassant square\n  //half and full moves\n  //TODO: refactor\n  function fenParser(updateBoardPosition = true) {\n    //parses the FEN string to variables\n    const {\n      fenBoard,\n      fenTurn,\n      fenCastling,\n      fenEnPassant,\n      fenHalfMoves,\n      fenFullMoves\n    } = ParseFEN(fen);\n    const fenRows = fenBoard.split('/');\n    let arr = [];\n\n    //splits all rows and creates a matrix for the board\n    for (let row of fenRows) {\n      const tokens = row.split('');\n      let r = [];\n      for (let i = 0; i < tokens.length; i++) {\n        if (Number(tokens[i])) {\n          for (let j = 0; j < Number(tokens[i]); j++) {\n            r.push(' ');\n          }\n        } else {\n          r.push(tokens[i]);\n        }\n      }\n      arr.push(r);\n    }\n\n    //generates a Square component for each element in the matrix created above\n    let squareColorIsWhite = true;\n    let squares = [];\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0; j < arr[i].length; j++) {\n        let color = squareColorIsWhite ? \"\" : \"dark\";\n        const possibleMoveStatus = isPossibleMoveRef.current.find(item => item.key === `${i}-${j}`);\n\n        //boardSquares.push(\n        squares.push( /*#__PURE__*/_jsxDEV(Square, {\n          getPossibleMoves: getPossibleMoves,\n          x: i,\n          y: j,\n          piece: ConvertFENPieceToPiece(arr[i][j]),\n          color: color,\n          movePiece: movePiece,\n          isPossibleMove: possibleMoveStatus ? possibleMoveStatus.value : false,\n          resetPossibleMoves: resetPossibleMoves\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }, this));\n        squareColorIsWhite = !squareColorIsWhite;\n      }\n      squareColorIsWhite = !squareColorIsWhite;\n    }\n    setBoardSquares(squares);\n\n    // BoardSquares.splice(0, BoardSquares.length);\n    // BoardSquares.push(...squares)\n    // console.log(BoardSquares)\n\n    if (fenCastling.includes('K')) {\n      CastlingRights.whiteShortCastle = true;\n    }\n    if (fenCastling.includes('Q')) {\n      CastlingRights.whiteLongCastle = true;\n    }\n    if (fenCastling.includes('k')) {\n      CastlingRights.blackShortCastle = true;\n    }\n    if (fenCastling.includes('q')) {\n      CastlingRights.blackLongCastle = true;\n    }\n    fenTurn == 'w' ? updateIsWhiteToMove(true) : updateIsWhiteToMove(false);\n    updateHalfMoves(fenHalfMoves);\n    updateFullMoves(fenFullMoves);\n    if (updateBoardPosition) {\n      BoardPosition.splice(0, BoardPosition.length, ...arr);\n    }\n    if (!fenEnPassant.includes(PIECE_DELIMITER)) {\n      let location = convertCoordinatesToLocation(fenEnPassant);\n      EnPassant.isPossible = true;\n      EnPassant.x = location.x;\n      EnPassant.y = location.y;\n    }\n  }\n\n  //determines if the white king is in check\n  //determines if making a move will put the white king in check (pseudo)\n  //determines if a certain move will be allowed and not put the white king in check (currentSquare && pseudo)\n  //TODO: refactor\n  //TODO: combine both isWhiteInCheck and isBlackInCheck into one function\n  function isWhiteInCheck(square, pseudo, currentSquare = null) {\n    let squares = boardSquaresRef.current;\n    if (pseudo) {\n      const updatedSquares = squares.map(s => {\n        if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\n          // Return a new Square component with the updated piece\n          return /*#__PURE__*/React.cloneElement(s, {\n            piece: pseudo.props.piece\n          });\n        } else if (currentSquare && s.props.x === currentSquare.props.x && s.props.y === currentSquare.props.y) {\n          return /*#__PURE__*/React.cloneElement(s, {\n            piece: ''\n          });\n        } else {\n          // For other squares, return the original Square component\n          return s;\n        }\n      });\n\n      // if (pseudo && currentSquare) {\n      //     if (pseudo.props.x == 4 && pseudo.props.y == 4 && currentSquare.props.x == 5 && currentSquare.props.y == 2) {\n      //         console.log(`Squares: ${JSON.stringify(squares)}, UpdatedSquares: ${JSON.stringify(updatedSquares)}`)\n      //     }\n      // }\n\n      squares = updatedSquares;\n    }\n\n    //check for attackers in front of the white king\n    for (let i = square.props.x - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from behind\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers behind the white king\n    for (let i = square.props.x + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the front\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the left of the white king\n    for (let i = square.props.y - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the left\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the right of the white king\n    for (let i = square.props.y + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the right\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == -1) {\n                //console.log(\"in check from top half of counterclockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from top half of counterclockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == 1) {\n                //console.log(\"in check from top half of clockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from top half of clockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for knights check\n    let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1);\n    let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1);\n    let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1);\n    let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1);\n    let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2);\n    let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2);\n    let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2);\n    let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2);\n    if (knight1) {\n      if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight1.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 1\")\n          return true;\n        }\n      }\n    }\n    if (knight2) {\n      if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight2.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 2\")\n          return true;\n        }\n      }\n    }\n    if (knight3) {\n      if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight3.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 3\")\n          return true;\n        }\n      }\n    }\n    if (knight4) {\n      if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight4.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 4\")\n          return true;\n        }\n      }\n    }\n    if (knight5) {\n      if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight5.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 5\")\n          return true;\n        }\n      }\n    }\n    if (knight6) {\n      if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight6.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 6\")\n          return true;\n        }\n      }\n    }\n    if (knight7) {\n      if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight7.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 7\")\n          return true;\n        }\n      }\n    }\n    if (knight8) {\n      if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight8.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 8\")\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  //determines if the black king is in check\n  //determines if making a move will put the black king in check (pseudo)\n  //determines if a certain move will be allowed and not put the black king in check (currentSquare && pseudo)\n  //TODO: refactor\n  //TODO: combine both isWhiteInCheck and isBlackInCheck into one function\n  function isBlackInCheck(square, pseudo, currentSquare = null) {\n    let squares = boardSquaresRef.current;\n    if (pseudo) {\n      const updatedSquares = squares.map(s => {\n        if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\n          // Return a new Square component with the updated piece\n          return /*#__PURE__*/React.cloneElement(s, {\n            piece: pseudo.props.piece\n          });\n        } else if (currentSquare && s.props.x === currentSquare.props.x && s.props.y === currentSquare.props.y) {\n          return /*#__PURE__*/React.cloneElement(s, {\n            piece: ''\n          });\n        } else {\n          // For other squares, return the original Square component\n          return s;\n        }\n      });\n      squares = updatedSquares;\n    }\n\n    //check for attackers behind the black king\n    for (let i = square.props.x - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from behind\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers in front of the black king\n    for (let i = square.props.x + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the front\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the left of the black king\n    for (let i = square.props.y - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the left\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the right of the black king\n    for (let i = square.props.y + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the right\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            //console.log(\"in check from top half of counterclockwise diagonal\")\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == 1) {\n                //console.log(\"in check from bottom half of counterclockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from bottom half of counterclockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            //console.log(\"in check from top half of clockwise diagonal\")\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == -1) {\n                //console.log(\"in check from bottom half of clockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from bottom half of clockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for knights check\n    let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1);\n    let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1);\n    let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1);\n    let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1);\n    let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2);\n    let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2);\n    let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2);\n    let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2);\n    if (knight1) {\n      if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight1.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 1\")\n          return true;\n        }\n      }\n    }\n    if (knight2) {\n      if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight2.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 2\")\n          return true;\n        }\n      }\n    }\n    if (knight3) {\n      if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight3.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 3\")\n          return true;\n        }\n      }\n    }\n    if (knight4) {\n      if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight4.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 4\")\n          return true;\n        }\n      }\n    }\n    if (knight5) {\n      if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight5.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 5\")\n          return true;\n        }\n      }\n    }\n    if (knight6) {\n      if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight6.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 6\")\n          return true;\n        }\n      }\n    }\n    if (knight7) {\n      if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight7.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 7\")\n          return true;\n        }\n      }\n    }\n    if (knight8) {\n      if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight8.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 8\")\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  //makes a move, moves a piece from one square to another\n  //updates the boardPosition\n  //TODO: refactor\n  function movePiece(x, y) {\n    let squares = boardSquares;\n    let position = BoardPosition;\n    let targetSquare = getATargetSquareByLocation(x, y, boardSquaresRef.current);\n    let square = squares.find(s => s.props.x == CurrentSquareSelection.x && s.props.y == CurrentSquareSelection.y);\n    let color = getPieceColor(square);\n    let piece = getPiece(square);\n\n    //disable castling if the king moves\n    if (piece == PIECES.KING) {\n      if (isColorWhite(color)) {\n        CastlingRights.whiteLongCastle = false;\n        CastlingRights.whiteShortCastle = false;\n      } else {\n        CastlingRights.blackLongCastle = false;\n        CastlingRights.blackShortCastle = false;\n      }\n    }\n\n    //disable castling if the rook moves\n    if (piece == PIECES.ROOK) {\n      if (square.props.x == 7 && square.props.y == 7) {\n        CastlingRights.whiteShortCastle = false;\n      }\n      if (square.props.x == 0 && square.props.y == 7) {\n        CastlingRights.blackShortCastle = false;\n      }\n      if (square.props.x == 7 && square.props.y == 0) {\n        CastlingRights.whiteLongCastle = false;\n      }\n      if (square.props.x == 0 && square.props.y == 0) {\n        CastlingRights.blackLongCastle = false;\n      }\n    }\n    let p = UpdatePosition(square, targetSquare, position);\n\n    //capturing enPassant\n    // if (EnPassant.isPossible) {\n    //     let enPassantTargetSquare = color == COLORS.WHITE ? squares.find(s => s.props.x == x + 1 && s.props.y == y) : squares.find(s => s.props.x == x - 1 && s.props.y == y)\n    //     let enPassantSquare = <Square x={square.props.x} y={square.props.y} piece={\"\"} />\n\n    //     p = UpdatePosition(enPassantSquare, enPassantTargetSquare, p)\n    // }\n\n    //TODO: ensure p matches the new board Position format\n    //setBoardPosition(p)\n    const updatedBoardPosition = p.map(row => [...row]);\n    BoardPosition.splice(0, BoardPosition.length, ...updatedBoardPosition);\n    PossibleMoves.splice(0, PossibleMoves.length);\n    updateIsWhiteToMove(!IsWhiteToMove);\n\n    //enabling en passant\n    if (piece == PIECES.PAWN) {\n      if (Math.abs(square.props.x - targetSquare.props.x) == 2) {\n        if (square.props.piece.split(PIECE_DELIMITER)[0] == COLORS.WHITE) {\n          EnPassant.isPossible = true;\n          EnPassant.x = square.props.x - 1;\n          EnPassant.y = square.props.y;\n        } else {\n          EnPassant.isPossible = true;\n          EnPassant.x = square.props.x + 1;\n          EnPassant.y = square.props.y;\n        }\n\n        // let enPassant1 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y - 1)\n        // let enPassant2 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y + 1)\n\n        // if (enPassant1) {\n        //     if (enPassant1.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\n        //         if (enPassant1.props.piece.split(PIECE_DELIMITER)[0] != color) {\n        //             EnPassant.isPossible = true\n        //             EnPassant.x = targetSquare.props.x\n        //             EnPassant.y = targetSquare.props.y\n        //             return\n        //         }\n        //     }\n        // }\n\n        // if (enPassant2) {\n        //     if (enPassant2.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\n        //         if (enPassant2.props.piece.split(PIECE_DELIMITER)[0] != color) {\n        //             EnPassant.isPossible = true\n        //             EnPassant.x = targetSquare.props.x\n        //             EnPassant.y = targetSquare.props.y\n        //             return\n        //         }\n        //     }\n        // }\n      } else {\n        EnPassant.isPossible = false;\n        EnPassant.x = -1;\n        EnPassant.y = -1;\n      }\n    } else {\n      EnPassant.isPossible = false;\n      EnPassant.x = -1;\n      EnPassant.y = -1;\n    }\n    updateFullMoves(FullMoves + 1);\n    generateANewFen();\n  }\n\n  //checks if a pawn is on its starting square and allows a 2-squares move\n  //row (position.x) with index 6 for white and index 1 for black\n  function isPawnOnStartingSquare(pawn) {\n    return isColorWhite(getPieceColor(pawn)) ? pawn.props.x == WHITE_PAWN_STARTING_SQUARE : pawn.props.x == BLACK_PAWN_STARTING_SQUARE;\n  }\n\n  //checks if a pawn is on En Passant square\n  function isPawnOnEnPassantSquare(pawn) {\n    return isColorWhite(getPieceColor(pawn)) ? pawn.props.x == WHITE_EN_PASSANT_SQUARE : pawn.props.x == BLACK_EN_PASSANT_SQUARE;\n  }\n\n  //checks if white is allowed to long castle\n  //TODO: see if you can combine all 4 castling function into one\n  function checkIfCanWhiteLongCastle() {\n    return CastlingRights.whiteLongCastle && BoardPosition[CASTLE_ROW_WHITE][CASTLE_ROOK_INITIAL_COL_LONG] == FEN_PIECES_WHITE.ROOK && CASTLE_PATH_COLS_LONG.every(col => BoardPosition[CASTLE_ROW_WHITE][col] == EMPTY_SQUARE_PIECE);\n  }\n\n  //checks if white is allowed to short castle\n  //TODO: see if you can combine all 4 castling function into one\n  function checkIfCanWhiteShortCastle() {\n    return CastlingRights.whiteShortCastle && BoardPosition[CASTLE_ROW_WHITE][CASTLE_ROOK_INITIAL_COL_SHORT] == FEN_PIECES_WHITE.ROOK && CASTLE_PATH_COLS_SHORT.every(col => BoardPosition[CASTLE_ROW_WHITE][col] == EMPTY_SQUARE_PIECE);\n  }\n\n  //checks if black is allowed to long castle\n  //TODO: see if you can combine all 4 castling function into one\n  function checkIfCanBlackLongCastle() {\n    return CastlingRights.blackLongCastle && BoardPosition[CASTLE_ROW_BLACK][CASTLE_ROOK_INITIAL_COL_LONG] == FEN_PIECES_BLACK.ROOK && CASTLE_PATH_COLS_LONG.every(col => BoardPosition[CASTLE_ROW_BLACK][col] == EMPTY_SQUARE_PIECE);\n  }\n\n  //checks if black is allowed to short castle\n  //TODO: see if you can combine all 4 castling function into one\n  function checkIfCanBlackShortCastle() {\n    return CastlingRights.blackShortCastle && BoardPosition[CASTLE_ROW_BLACK][CASTLE_ROOK_INITIAL_COL_SHORT] == FEN_PIECES_BLACK.ROOK && CASTLE_PATH_COLS_SHORT.every(col => BoardPosition[CASTLE_ROW_BLACK][col] == EMPTY_SQUARE_PIECE);\n  }\n\n  //checks if two squares have the same x and y location\n  function compareIfTwoSquaresAreTheSame(square1, square2) {\n    if (!square1 || !square2) {\n      return false;\n    }\n    return square1.props.x == square2.props.x && square1.props.y == square2.props.y;\n  }\n\n  //gets all possible moves for a pawn\n  //TODO: refactor\n  function getPawnsPossibleMoves(square) {\n    if (!doesTheSquareHasThePiece(square, PIECES.PAWN)) {\n      return;\n    }\n    let color = getPieceColor(square); //get the piece color\n\n    let moves = [];\n    let position1Offset = 1;\n    let position2Offset = 2;\n\n    //flips the direction if the color is white\n    if (isColorWhite(color)) {\n      position1Offset *= -1;\n      position2Offset *= -1;\n    }\n\n    //get all forwards moves + the double move at the start\n    let targetPiece1 = getATargetSquareByLocation(square.props.x + position1Offset, square.props.y, boardSquaresRef.current); //move pawn 1 square ahead\n    let targetPiece2 = getATargetSquareByLocation(square.props.x + position2Offset, square.props.y, boardSquaresRef.current); //move pawn 2 squares ahead\n\n    //get potential neighbors to capture\n    let neighbor1 = getATargetSquareByLocation(square.props.x + position1Offset, square.props.y + position1Offset, boardSquaresRef.current);\n    let neighbor2 = getATargetSquareByLocation(square.props.x + position1Offset, square.props.y + position1Offset * -1, boardSquaresRef.current);\n\n    //get the En Passant coordinates\n    let enPassantSquare = EnPassant.isPossible ? getATargetSquareByLocation(EnPassant.x, EnPassant.y, boardSquaresRef.current) : '';\n    let isTheSquareInFrontAvailable = isSquareAvailable(targetPiece1);\n\n    //push the one move forward for a pawn\n    if (isTheSquareInFrontAvailable) {\n      moves.push(targetPiece1);\n    }\n\n    //two moves are allowed only if the two squares above are free/empty\n    //allowed if pawn hasn't moved before\n    if (isTheSquareInFrontAvailable && isSquareAvailable(targetPiece2) && isPawnOnStartingSquare(square)) {\n      moves.push(targetPiece2);\n    }\n\n    //push neighbour if there is a piece to capture and it's a different color than the pawn\n    if (!isSquareAvailable(neighbor1) && !areSameColor(neighbor1, square)) {\n      moves.push(neighbor1);\n    }\n\n    //push neighbour if there is a piece to capture and it's a different color than the pawn\n    if (!isSquareAvailable(neighbor2) && !areSameColor(neighbor2, square)) {\n      moves.push(neighbor2);\n    }\n\n    //add En Passant\n    if (enPassantSquare && (compareIfTwoSquaresAreTheSame(enPassantSquare, neighbor1) || compareIfTwoSquaresAreTheSame(enPassantSquare, neighbor2))) {\n      moves.push(enPassantSquare);\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a rook\n  //TODO: refactor\n  function getRooksPossibleMoves(square, skip = true) {\n    if (!doesTheSquareHasThePiece(square, PIECES.ROOK) && skip) {\n      return;\n    }\n    let moves = [];\n    for (let i = square.props.x + 1; i < DIM; i++) {\n      let targetSquare = getATargetSquareByLocation(i, square.props.y, boardSquaresRef.current);\n      if (isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    for (let i = square.props.x - 1; i >= 0; i--) {\n      let targetSquare = getATargetSquareByLocation(i, square.props.y, boardSquaresRef.current);\n      if (isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    for (let i = square.props.y + 1; i < DIM; i++) {\n      let targetSquare = getATargetSquareByLocation(square.props.x, i, boardSquaresRef.current);\n      if (isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    for (let i = square.props.y - 1; i >= 0; i--) {\n      let targetSquare = getATargetSquareByLocation(square.props.x, i, boardSquaresRef.current);\n      if (isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a bishop\n  //TODO: refactor\n  function getBishopPossibleMoves(square, skip = true) {\n    if (!doesTheSquareHasThePiece(square, PIECES.BISHOP) && skip) {\n      return;\n    }\n    let moves = [];\n    let counter = 0;\n    let conside1 = true;\n    let conside2 = true;\n    let conside3 = true;\n    let conside4 = true;\n    for (let i = 1; i <= DIM; i++) {\n      if (!conside1 && !conside2 && !conside3 && !conside4) {\n        break;\n      }\n      let target1 = conside1 ? getATargetSquareByLocation(square.props.x - i, square.props.y - i, boardSquaresRef.current) : null;\n      let target2 = conside2 ? getATargetSquareByLocation(square.props.x - i, square.props.y + i, boardSquaresRef.current) : null;\n      let target3 = conside3 ? getATargetSquareByLocation(square.props.x + i, square.props.y + i, boardSquaresRef.current) : null;\n      let target4 = conside4 ? getATargetSquareByLocation(square.props.x + i, square.props.y - i, boardSquaresRef.current) : null;\n      if (target1 && isSquareAvailable(target1)) {\n        moves.push(target1);\n      } else {\n        if (!areSameColor(square, target1)) {\n          moves.push(target1);\n        }\n        conside1 = false;\n      }\n      if (target2 && isSquareAvailable(target2)) {\n        moves.push(target2);\n      } else {\n        if (!areSameColor(square, target2)) {\n          moves.push(target2);\n        }\n        conside2 = false;\n      }\n      if (target3 && isSquareAvailable(target3)) {\n        moves.push(target3);\n      } else {\n        if (!areSameColor(square, target3)) {\n          moves.push(target3);\n        }\n        conside3 = false;\n      }\n      if (target4 && isSquareAvailable(target4)) {\n        moves.push(target4);\n      } else {\n        if (!areSameColor(square, target4)) {\n          moves.push(target4);\n        }\n        conside4 = false;\n      }\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a knight\n  //TODO: refactor\n  function getKnightPossibleMoves(square) {\n    if (!doesTheSquareHasThePiece(square, PIECES.KNIGHT)) {\n      return;\n    }\n    let offset = 1;\n    let doubleOffset = 2 * offset;\n    let moves = [];\n    for (let i = 0; i < 8; i++) {\n      if (i != 0 && i % 2 == 0) {\n        offset *= -1;\n      }\n      let targetX = square.props.x + offset;\n      let targetY = square.props.y + doubleOffset;\n      let target = getATargetSquareByLocation(targetX, targetY, boardSquaresRef.current);\n      if (target && isSquareAvailable(target)) {\n        moves.push(target);\n      } else {\n        if (!areSameColor(square, target)) {\n          moves.push(target);\n        }\n      }\n      doubleOffset *= -1;\n      if (i == 3) {\n        offset *= 2;\n        doubleOffset /= 2;\n      }\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a king\n  //TODO: refactor\n  function getKingPossibleMoves(square) {\n    if (!doesTheSquareHasThePiece(square, PIECES.KING)) {\n      return;\n    }\n    let moves = [];\n    let color = getPieceColor(square);\n\n    //gets all possible 1-square moves for the king\n    for (let i = -1; i < 2; i++) {\n      for (let j = -1; j < 2; j++) {\n        let targetPiece = getATargetSquareByLocation(square.props.x + i, square.props.y + j, boardSquaresRef.current);\n        if (targetPiece && isSquareAvailable(targetPiece)) {\n          moves.push(targetPiece);\n        } else {\n          if (!areSameColor(square, targetPiece)) {\n            moves.push(targetPiece);\n          }\n        }\n      }\n    }\n\n    //Castling logic\n    const longCastleSquare = getATargetSquareByLocation(square.props.x, square.props.y - 2, boardSquaresRef.current);\n    const shortCastleSquare = getATargetSquareByLocation(square.props.x, square.props.y + 2, boardSquaresRef.current);\n    if (isColorWhite(color) && checkIfCanWhiteLongCastle()) {\n      moves.push(longCastleSquare);\n    }\n    if (isColorWhite(color) && checkIfCanWhiteShortCastle()) {\n      moves.push(shortCastleSquare);\n    }\n    if (isColorBlack(color) && checkIfCanBlackLongCastle()) {\n      moves.push(longCastleSquare);\n    }\n    if (isColorBlack(color) && checkIfCanBlackShortCastle()) {\n      moves.push(shortCastleSquare);\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a queen\n  //TODO: refactor\n  function getQueenPossibleMoves(square) {\n    if (!doesTheSquareHasThePiece(square, PIECES.QUEEN)) {\n      return;\n    }\n    let moves = [];\n\n    //a queen has the same moves as a bishop and a rook\n    const rookMoves = getRooksPossibleMoves(square, false).moves;\n    const bishopMoves = getBishopPossibleMoves(square, false).moves;\n\n    // Concatenate the arrays of moves\n    moves.push(...rookMoves, ...bishopMoves);\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //removes moves that do not deal with a check\n  //TODO: Refactor\n  function filterMovesIfInCheck(possibleMoves) {\n    let blackKing = getATargetSquareByPiece(KINGS.BLACK_KING, boardSquaresRef.current); //get the black king\n    let whiteKing = getATargetSquareByPiece(KINGS.WHITE_KING, boardSquaresRef.current); //get the white king\n\n    for (let i = 0; i < possibleMoves.length; i++) {\n      for (let j = 0; j < possibleMoves[i].moves.length; j++) {\n        if (possibleMoves[i].piece.props.piece == KINGS.BLACK_KING) {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].moves[j].props.x,\n            y: possibleMoves[i].moves[j].props.y,\n            piece: \"black-king\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1285,\n            columnNumber: 32\n          }, this);\n          let pseudo = /*#__PURE__*/_jsxDEV(Square, {\n            x: blackKing.props.x,\n            y: blackKing.props.y,\n            piece: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1286,\n            columnNumber: 34\n          }, this);\n          let isInCheck = isBlackInCheck(move, pseudo);\n          if (isInCheck) {\n            possibleMoves[i].moves.splice(j, 1);\n            j--;\n          }\n        } else if (possibleMoves[i].piece.props.piece == KINGS.WHITE_KING) {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].moves[j].props.x,\n            y: possibleMoves[i].moves[j].props.y,\n            piece: \"white-king\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1294,\n            columnNumber: 32\n          }, this);\n          let pseudo = /*#__PURE__*/_jsxDEV(Square, {\n            x: whiteKing.props.x,\n            y: whiteKing.props.y,\n            piece: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1295,\n            columnNumber: 34\n          }, this);\n          let isInCheck = isWhiteInCheck(move, pseudo);\n          if (isInCheck) {\n            possibleMoves[i].moves.splice(j, 1);\n            j--;\n          }\n        } else {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].moves[j].props.x,\n            y: possibleMoves[i].moves[j].props.y,\n            piece: possibleMoves[i].piece.props.piece\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1303,\n            columnNumber: 32\n          }, this);\n          let isBlackKingInCheck = isBlackInCheck(blackKing, move, possibleMoves[i].piece);\n          let isWhiteKingInCheck = isWhiteInCheck(whiteKing, move, possibleMoves[i].piece);\n          if (isBlackKingInCheck && !IsWhiteToMove) {\n            possibleMoves[i].moves.splice(j, 1);\n            j--;\n          }\n          if (isWhiteKingInCheck && IsWhiteToMove) {\n            possibleMoves[i].moves.splice(j, 1);\n            j--;\n          }\n        }\n      }\n    }\n    return possibleMoves;\n  }\n\n  //removes moves that allow illegal castling (castles through check for example)\n  //TODO: Refactor\n  function filterMovesThatAllowIllegalCastling(possibleMoves) {\n    let blackKing = getATargetSquareByPiece(KINGS.BLACK_KING, boardSquaresRef.current); //get the black king\n    let whiteKing = getATargetSquareByPiece(KINGS.WHITE_KING, boardSquaresRef.current); //get the white king\n\n    for (let i = 0; i < possibleMoves.length; i++) {\n      let whiteCastle1 = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 6); //sqaure where king will be after short castle (white)\n      let whiteCastle2 = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 2); //sqaure where king will be after long castle (white)\n      let blackCastle1 = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 6); //square where king will be after shot castle (black)\n      let blackCastle2 = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 2); //square where king will be after long castle (black)\n\n      if (possibleMoves[i].piece == blackKing || possibleMoves[i].piece == whiteKing) {\n        if (whiteCastle1) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 5);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n        if (whiteCastle2) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 3);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n        if (blackCastle1) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 5);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n        if (blackCastle2) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 3);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n      }\n\n      //prevents black to castle if in check\n      if (isBlackInCheck(blackKing)) {\n        if (blackCastle1) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(blackCastle1), 1);\n        }\n        if (blackCastle2) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(blackCastle2), 1);\n        }\n      }\n\n      //prevents white to castle if in check\n      if (isWhiteInCheck(whiteKing)) {\n        if (whiteCastle1) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(whiteCastle1), 1);\n        }\n        if (whiteCastle2) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(whiteCastle2), 1);\n        }\n      }\n    }\n    return possibleMoves;\n  }\n\n  //removes empty/undefined values for generated moves\n  function removeEmptyMoves(possibleMoves) {\n    for (let i = 0; i < possibleMoves.length; i++) {\n      //remove undefined elements if the possible moves array contains any\n      if (!possibleMoves[i]) {\n        possibleMoves.splice(i, 1);\n        i--;\n        continue;\n      }\n\n      //remove any elements if the possible moves array contains elements with no possible moves\n      if (possibleMoves[i].moves.length == 0) {\n        possibleMoves.splice(i, 1);\n        i--;\n        continue;\n      }\n\n      //remove undefined possible moves if the element has any such moves\n      for (let j = 0; j < possibleMoves[i].moves.length; j++) {\n        if (!possibleMoves[i].moves[j]) {\n          possibleMoves[i].moves.splice(j, 1);\n          j--;\n        }\n      }\n    }\n    return possibleMoves;\n  }\n\n  //checks if a certain moves's location matches the currently selected piece\n  function checkIfAMoveIsEqualToTheCurrentSelectedSquare(move) {\n    return move.props.x == CurrentSquareSelection.x && move.props.y == CurrentSquareSelection.y;\n  }\n\n  //updates the isPossibleMove array based on the possibleMoves array and forces a component update of the square to visually the circles indicating a move is possible\n  function updatePossibleMovesVisually() {\n    for (let i = 0; i < PossibleMoves.length; i++) {\n      if (checkIfAMoveIsEqualToTheCurrentSelectedSquare(PossibleMoves[i].piece)) {\n        for (let j = 0; j < PossibleMoves[i].moves.length; j++) {\n          updateIsPossibleMove(`${PossibleMoves[i].moves[j].props.x}-${PossibleMoves[i].moves[j].props.y}`, true);\n        }\n      }\n    }\n  }\n\n  //gets all possible/legal moves\n  //TODO: check if can be refactored further\n  function getPossibleMoves() {\n    //let square = getATargetSquareByLocation(x, y)\n    let possiblePieceMoves = [];\n    let squares = boardSquares;\n    for (let i = 0; i < squares.length; i++) {\n      let square = squares[i];\n\n      //if the square has a piece\n      if (square.props.piece) {\n        let color = getPieceColor(square); //get the piece color\n\n        //don't collect possible moves if it's black to move and you're trying to move a white piece\n        if (isColorWhite(color) && !IsWhiteToMove) {\n          //console.log(`Skipping because it's black to move and you're moving a white piece, x: ${square.props.x}, y: ${square.props.y}`)\n          continue;\n        }\n\n        //don't collect possible moves if it's white to move and you're trying to move a black piece\n        if (isColorBlack(color) && IsWhiteToMove) {\n          //console.log(`Skipping because it's white to move and you're moving a black piece, x: ${square.props.x}, y: ${square.props.y}`)\n          continue;\n        }\n\n        //console.log(`Getting possible moves, x: ${square.props.x}, y: ${square.props.y}`)\n        //get all possible moves for each piece\n        possiblePieceMoves.push(getPawnsPossibleMoves(square));\n        possiblePieceMoves.push(getRooksPossibleMoves(square));\n        possiblePieceMoves.push(getBishopPossibleMoves(square));\n        possiblePieceMoves.push(getKnightPossibleMoves(square));\n        possiblePieceMoves.push(getKingPossibleMoves(square));\n        possiblePieceMoves.push(getQueenPossibleMoves(square));\n\n        //filter empty moves\n        possiblePieceMoves = removeEmptyMoves(possiblePieceMoves);\n\n        //filter possible moves\n        possiblePieceMoves = filterMovesIfInCheck(possiblePieceMoves);\n        possiblePieceMoves = filterMovesThatAllowIllegalCastling(possiblePieceMoves);\n      }\n    }\n    console.log(\"Possible Moves:\", possiblePieceMoves);\n    console.log('Moves count', possiblePieceMoves.reduce((sum, pieceMove) => sum + pieceMove.moves.length, 0));\n    PossibleMoves.splice(0, PossibleMoves.length, ...possiblePieceMoves);\n    updatePossibleMovesVisually();\n  }\n\n  //renders the board\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessGrid\",\n      children: boardSquares.map(sqr => sqr)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1489,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Board, \"IVJugR7YzpxWBiVdY41x4HwgqNQ=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Square","HelperMethods","DIM","PIECE_DELIMITER","KINGS","COLORS","PIECES","CastlingRights","EnPassant","CurrentSquareSelection","PossibleMoves","HalfMoves","FullMoves","IsWhiteToMove","updateIsWhiteToMove","updateHalfMoves","updateFullMoves","BoardPosition","WHITE_PAWN_STARTING_SQUARE","BLACK_PAWN_STARTING_SQUARE","BLACK_EN_PASSANT_SQUARE","WHITE_EN_PASSANT_SQUARE","FEN_PIECES_WHITE","FEN_PIECES_BLACK","EMPTY_SQUARE_PIECE","CASTLE_ROW_WHITE","CASTLE_ROW_BLACK","CASTLE_KING_INITIAL_COL","CASTLE_ROOK_INITIAL_COL_LONG","CASTLE_ROOK_INITIAL_COL_SHORT","CASTLE_PATH_COLS_LONG","CASTLE_PATH_COLS_SHORT","PIECE_COLOR_INDEX","PIECE_PIECE_INDEX","jsxDEV","_jsxDEV","Fragment","_Fragment","Board","_s","fen","setFen","isPossibleMove","setIsPossibleMove","boardSquares","setBoardSquares","isPossibleMoveRef","boardSquaresRef","updateIsPossibleMove","key","value","prevState","map","item","current","fenParser","resetPossibleMoves","initialIsPossibleMove","i","j","push","generateANewFen","fenString","length","row","column","IsDigit","lastChar","slice","substring","Number","castlingRules","whiteShortCastle","whiteLongCastle","blackShortCastle","blackLongCastle","isPossible","convertLocationToCoordinates","x","y","updateBoardPosition","fenBoard","fenTurn","fenCastling","fenEnPassant","fenHalfMoves","fenFullMoves","ParseFEN","fenRows","split","arr","tokens","r","squareColorIsWhite","squares","color","possibleMoveStatus","find","getPossibleMoves","piece","ConvertFENPieceToPiece","movePiece","fileName","_jsxFileName","lineNumber","columnNumber","includes","splice","location","convertCoordinatesToLocation","isWhiteInCheck","square","pseudo","currentSquare","updatedSquares","s","props","cloneElement","knight1","knight2","knight3","knight4","knight5","knight6","knight7","knight8","isBlackInCheck","position","targetSquare","getATargetSquareByLocation","getPieceColor","getPiece","KING","isColorWhite","ROOK","p","UpdatePosition","updatedBoardPosition","PAWN","Math","abs","WHITE","isPawnOnStartingSquare","pawn","isPawnOnEnPassantSquare","checkIfCanWhiteLongCastle","every","col","checkIfCanWhiteShortCastle","checkIfCanBlackLongCastle","checkIfCanBlackShortCastle","compareIfTwoSquaresAreTheSame","square1","square2","getPawnsPossibleMoves","doesTheSquareHasThePiece","moves","position1Offset","position2Offset","targetPiece1","targetPiece2","neighbor1","neighbor2","enPassantSquare","isTheSquareInFrontAvailable","isSquareAvailable","areSameColor","getRooksPossibleMoves","skip","getBishopPossibleMoves","BISHOP","counter","conside1","conside2","conside3","conside4","target1","target2","target3","target4","getKnightPossibleMoves","KNIGHT","offset","doubleOffset","targetX","targetY","target","getKingPossibleMoves","targetPiece","longCastleSquare","shortCastleSquare","isColorBlack","getQueenPossibleMoves","QUEEN","rookMoves","bishopMoves","filterMovesIfInCheck","possibleMoves","blackKing","getATargetSquareByPiece","BLACK_KING","whiteKing","WHITE_KING","move","isInCheck","isBlackKingInCheck","isWhiteKingInCheck","filterMovesThatAllowIllegalCastling","whiteCastle1","m","whiteCastle2","blackCastle1","blackCastle2","pieceAcross","indexOf","removeEmptyMoves","checkIfAMoveIsEqualToTheCurrentSelectedSquare","updatePossibleMovesVisually","possiblePieceMoves","console","log","reduce","sum","pieceMove","children","className","sqr","_c","$RefreshReg$"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/Chess-React.js-/src/Board.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport Square from \"./Square.js\"\r\nimport * as HelperMethods from \"./HelperMethods.js\";\r\nimport {\r\n    DIM, PIECE_DELIMITER, KINGS, COLORS, PIECES,\r\n    CastlingRights, EnPassant, CurrentSquareSelection, PossibleMoves,\r\n    HalfMoves, FullMoves, IsWhiteToMove, updateIsWhiteToMove, updateHalfMoves,\r\n    updateFullMoves, BoardPosition, WHITE_PAWN_STARTING_SQUARE, BLACK_PAWN_STARTING_SQUARE,\r\n    BLACK_EN_PASSANT_SQUARE, WHITE_EN_PASSANT_SQUARE, FEN_PIECES_WHITE, FEN_PIECES_BLACK, EMPTY_SQUARE_PIECE,\r\n    CASTLE_ROW_WHITE, CASTLE_ROW_BLACK, CASTLE_KING_INITIAL_COL, CASTLE_ROOK_INITIAL_COL_LONG, CASTLE_ROOK_INITIAL_COL_SHORT,\r\n    CASTLE_PATH_COLS_LONG, CASTLE_PATH_COLS_SHORT, PIECE_COLOR_INDEX, PIECE_PIECE_INDEX\r\n} from \"./globalVariables.js\"\r\n\r\n\r\n/*\r\nTODO:\r\nCode Reusability: refactor some of the repeated code and generate new functions if needed\r\nConsistency and Naming: Have better and more consistent names for variables and functions\r\nDocumentation: add more comments to understand what is going on\r\nTesting: add unit tests\r\nImplementations: add promotions, implement endgames (mate, stalemate, draws repetition, 50 moves rule)\r\nBugs: Fix bugs (if any)\r\n*/\r\n\r\nfunction Board() {\r\n    //<summary>\r\n    //FEN - Forsyth-Edwards Notation\r\n    //small letters - black pieces\r\n    //capital letters - white pieces\r\n    //numbers - empty board squares\r\n    //(/) - separates each board row\r\n    //first letter after the board indicates whose turn it is to move (w - white, b - black)\r\n    //next letters indicate castling rights, k - king-side, q - queen-side, (-) - no castling allowed for any side\r\n    //en passant square - when a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square\r\n    //the number of half turns (white moves, then black moves = 2 half moves) that were made without a pawn move or a capture of a piece (50-move rule when reaches 100)\r\n    //the number of full moves (white moves, then black moves = 1 full move); increase after every black half move\r\n    //</summary>\r\n    //starting position\r\n    //'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\r\n    //r1bqk2r/pppp1ppp/2n5/8/1bBPn3/2N2N2/PP3PPP/R1BQK2R w KQkq - 0 8\r\n    //r1bqk2r/pppp1ppp/2n2n2/2b5/2BPP3/5N2/PP3PPP/RNBQK2R b KQkq - 0 6\r\n    //r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21\r\n    const [fen, setFen] = useState('r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21')\r\n    //tracks if we can move to a square and adds a circle to the square if we can\r\n    const [isPossibleMove, setIsPossibleMove] = useState([])\r\n    //keeps track of all square components that are visualized on the page; used to calculate moves and so on.\r\n    const [boardSquares, setBoardSquares] = useState([])\r\n\r\n    //using ref hooks to have access to the latest values for the two states\r\n    const isPossibleMoveRef = useRef(isPossibleMove)\r\n    const boardSquaresRef = useRef(boardSquares)\r\n\r\n    //updates the possible move array\r\n    //if a square is a possible move, it will receive a circle indicating you can move there\r\n    const updateIsPossibleMove = (key, value) => {\r\n        //we are updating the state based on the previous state to resolve the issue with pending state and queuen in React\r\n        setIsPossibleMove(prevState =>\r\n            prevState.map(item =>\r\n                //if the current item's key matches the key we're looking for\r\n                //copy all properties of the object in a new object using the spread syntax (...)\r\n                //modify the value property to whatever value we're using\r\n                //copy the original item if no modifications are needed\r\n                item.key === key ? { ...item, value: value } : item\r\n            )\r\n        );\r\n    };\r\n\r\n    //update the reference to the IsPossibleMove array whenever we set a new value to the array\r\n    useEffect(() => {\r\n        isPossibleMoveRef.current = isPossibleMove;\r\n        fenParser(false);\r\n    }, [isPossibleMove])\r\n\r\n    //called when the page loads\r\n    //removes all circles from squares indicating that they can be clicked to move a piece there\r\n    //we parse the FEN to fill in the board\r\n    useEffect(() => {\r\n        resetPossibleMoves()\r\n        fenParser()\r\n    }, [])\r\n\r\n    //parse the FEN and fill in the board with the new position when the FEN updates\r\n    useEffect(() => {\r\n        fenParser()\r\n    }, [fen])\r\n\r\n    //update the reference to the BoardSquares array whenever we set a new value to the array\r\n    useEffect(() => {\r\n        boardSquaresRef.current = boardSquares\r\n    }, [boardSquares])\r\n\r\n    //return the IsPossibleMoves array to its original state (no possible moves)\r\n    function resetPossibleMoves() {\r\n        const initialIsPossibleMove = [];\r\n        for (let i = 0; i < DIM; i++) {\r\n            for (let j = 0; j < DIM; j++) {\r\n                initialIsPossibleMove.push({ key: `${i}-${j}`, value: false });\r\n            }\r\n        }\r\n        setIsPossibleMove(initialIsPossibleMove);\r\n    }\r\n\r\n    //generates a new FEN based on\r\n    //current board position\r\n    //who's turn it is\r\n    //castling rules\r\n    //enPassant square\r\n    //half and full moves made so far\r\n    //TODO: ensure everything gets parsed correctly\r\n    //TODO: refactor the code\r\n    function generateANewFen() {\r\n        let fenString = ''\r\n\r\n        for (let i = 0; i < BoardPosition.length; i++) {\r\n            let row = BoardPosition[i]\r\n            for (let j = 0; j < row.length; j++) {\r\n                let column = row[j]\r\n\r\n                if (column == ' ') {\r\n                    if (fenString && IsDigit(fenString[fenString.length - 1])) {\r\n                        let lastChar = fenString.slice(-1)\r\n                        fenString = fenString.substring(0, fenString.length - 1)\r\n                        fenString += Number(lastChar) + 1\r\n                    } else {\r\n                        fenString += '1'\r\n                    }\r\n                } else {\r\n                    fenString += column\r\n                }\r\n            }\r\n            fenString += '/'\r\n        }\r\n\r\n        fenString = fenString.substring(0, fenString.length - 1) //removes the last slash\r\n\r\n        fenString += IsWhiteToMove ? ' w' : ' b'\r\n\r\n        let castlingRules = ''\r\n\r\n        castlingRules += CastlingRights.whiteShortCastle ? 'K' : ''\r\n        castlingRules += CastlingRights.whiteLongCastle ? 'Q' : ''\r\n        castlingRules += CastlingRights.blackShortCastle ? 'k' : ''\r\n        castlingRules += CastlingRights.blackLongCastle ? 'q' : ''\r\n\r\n        fenString += castlingRules.length == 0 ? ' -' : ' ' + castlingRules\r\n\r\n        fenString += EnPassant.isPossible ? ' ' + convertLocationToCoordinates(EnPassant.x, EnPassant.y) : ' -'\r\n\r\n        fenString += ' ' + HalfMoves\r\n        fenString += ' ' + FullMoves\r\n\r\n        setFen(fenString)\r\n    }\r\n\r\n    //parses the current FEN and generates variables values for\r\n    //board position\r\n    //player's turn\r\n    //castling rules\r\n    //enPassant square\r\n    //half and full moves\r\n    //TODO: refactor\r\n    function fenParser(updateBoardPosition = true) {\r\n        //parses the FEN string to variables\r\n        const { fenBoard, fenTurn, fenCastling, fenEnPassant, fenHalfMoves, fenFullMoves } = ParseFEN(fen)\r\n\r\n        const fenRows = fenBoard.split('/')\r\n\r\n        let arr = [];\r\n\r\n        //splits all rows and creates a matrix for the board\r\n        for (let row of fenRows) {\r\n            const tokens = row.split('')\r\n\r\n            let r = []\r\n\r\n            for (let i = 0; i < tokens.length; i++) {\r\n                if (Number(tokens[i])) {\r\n                    for (let j = 0; j < Number(tokens[i]); j++) {\r\n                        r.push(' ')\r\n                    }\r\n                } else {\r\n                    r.push(tokens[i])\r\n                }\r\n            }\r\n\r\n            arr.push(r)\r\n        }\r\n\r\n        //generates a Square component for each element in the matrix created above\r\n        let squareColorIsWhite = true;\r\n        let squares = []\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            for (let j = 0; j < arr[i].length; j++) {\r\n                let color = squareColorIsWhite ? \"\" : \"dark\";\r\n                const possibleMoveStatus = isPossibleMoveRef.current.find(item => item.key === `${i}-${j}`);\r\n\r\n                //boardSquares.push(\r\n                squares.push(\r\n                    <Square\r\n                        getPossibleMoves={getPossibleMoves}\r\n                        key={`${i}-${j}`}\r\n                        x={i}\r\n                        y={j}\r\n                        piece={ConvertFENPieceToPiece(arr[i][j])}\r\n                        color={color}\r\n                        movePiece={movePiece}\r\n                        isPossibleMove={possibleMoveStatus ? possibleMoveStatus.value : false}\r\n                        resetPossibleMoves={resetPossibleMoves}\r\n                    />\r\n                )\r\n                squareColorIsWhite = !squareColorIsWhite;\r\n            }\r\n            squareColorIsWhite = !squareColorIsWhite;\r\n        }\r\n\r\n        setBoardSquares(squares)\r\n\r\n        // BoardSquares.splice(0, BoardSquares.length);\r\n        // BoardSquares.push(...squares)\r\n        // console.log(BoardSquares)\r\n\r\n        if (fenCastling.includes('K')) {\r\n            CastlingRights.whiteShortCastle = true;\r\n        }\r\n        if (fenCastling.includes('Q')) {\r\n            CastlingRights.whiteLongCastle = true;\r\n        }\r\n        if (fenCastling.includes('k')) {\r\n            CastlingRights.blackShortCastle = true;\r\n        }\r\n        if (fenCastling.includes('q')) {\r\n            CastlingRights.blackLongCastle = true;\r\n        }\r\n\r\n        fenTurn == 'w' ? updateIsWhiteToMove(true) : updateIsWhiteToMove(false)\r\n        updateHalfMoves(fenHalfMoves)\r\n        updateFullMoves(fenFullMoves)\r\n\r\n        if (updateBoardPosition) {\r\n            BoardPosition.splice(0, BoardPosition.length, ...arr)\r\n        }\r\n\r\n        if (!fenEnPassant.includes(PIECE_DELIMITER)) {\r\n            let location = convertCoordinatesToLocation(fenEnPassant)\r\n\r\n            EnPassant.isPossible = true\r\n            EnPassant.x = location.x\r\n            EnPassant.y = location.y\r\n        }\r\n    }\r\n\r\n    //determines if the white king is in check\r\n    //determines if making a move will put the white king in check (pseudo)\r\n    //determines if a certain move will be allowed and not put the white king in check (currentSquare && pseudo)\r\n    //TODO: refactor\r\n    //TODO: combine both isWhiteInCheck and isBlackInCheck into one function\r\n    function isWhiteInCheck(square, pseudo, currentSquare = null) {\r\n        let squares = boardSquaresRef.current\r\n\r\n        if (pseudo) {\r\n            const updatedSquares = squares.map(s => {\r\n                if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\r\n                    // Return a new Square component with the updated piece\r\n                    return React.cloneElement(s, { piece: pseudo.props.piece });\r\n                } else if (currentSquare && s.props.x === currentSquare.props.x && s.props.y === currentSquare.props.y) {\r\n                    return React.cloneElement(s, { piece: '' });\r\n                }\r\n                else {\r\n                    // For other squares, return the original Square component\r\n                    return s;\r\n                }\r\n            });\r\n\r\n            // if (pseudo && currentSquare) {\r\n            //     if (pseudo.props.x == 4 && pseudo.props.y == 4 && currentSquare.props.x == 5 && currentSquare.props.y == 2) {\r\n            //         console.log(`Squares: ${JSON.stringify(squares)}, UpdatedSquares: ${JSON.stringify(updatedSquares)}`)\r\n            //     }\r\n            // }\r\n\r\n            squares = updatedSquares;\r\n        }\r\n\r\n        //check for attackers in front of the white king\r\n        for (let i = square.props.x - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from behind\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers behind the white king\r\n        for (let i = square.props.x + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the front\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the left of the white king\r\n        for (let i = square.props.y - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the left\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the right of the white king\r\n        for (let i = square.props.y + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the right\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == -1) {\r\n                                //console.log(\"in check from top half of counterclockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from top half of counterclockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        return true\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == 1) {\r\n                                //console.log(\"in check from top half of clockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from top half of clockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        return true;\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for knights check\r\n        let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1)\r\n        let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1)\r\n        let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1)\r\n        let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1)\r\n        let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2)\r\n        let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2)\r\n        let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2)\r\n        let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2)\r\n\r\n        if (knight1) {\r\n            if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight1.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 1\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight2) {\r\n            if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight2.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 2\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight3) {\r\n            if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight3.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 3\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight4) {\r\n            if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight4.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 4\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight5) {\r\n            if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight5.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 5\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight6) {\r\n            if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight6.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 6\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight7) {\r\n            if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight7.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 7\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight8) {\r\n            if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight8.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 8\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    //determines if the black king is in check\r\n    //determines if making a move will put the black king in check (pseudo)\r\n    //determines if a certain move will be allowed and not put the black king in check (currentSquare && pseudo)\r\n    //TODO: refactor\r\n    //TODO: combine both isWhiteInCheck and isBlackInCheck into one function\r\n    function isBlackInCheck(square, pseudo, currentSquare = null) {\r\n        let squares = boardSquaresRef.current\r\n\r\n        if (pseudo) {\r\n            const updatedSquares = squares.map(s => {\r\n                if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\r\n                    // Return a new Square component with the updated piece\r\n                    return React.cloneElement(s, { piece: pseudo.props.piece });\r\n                } else if (currentSquare && s.props.x === currentSquare.props.x && s.props.y === currentSquare.props.y) {\r\n                    return React.cloneElement(s, { piece: '' });\r\n                }\r\n                else {\r\n                    // For other squares, return the original Square component\r\n                    return s;\r\n                }\r\n            });\r\n\r\n            squares = updatedSquares;\r\n        }\r\n\r\n        //check for attackers behind the black king\r\n        for (let i = square.props.x - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from behind\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers in front of the black king\r\n        for (let i = square.props.x + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the front\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the left of the black king\r\n        for (let i = square.props.y - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the left\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the right of the black king\r\n        for (let i = square.props.y + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the right\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        //console.log(\"in check from top half of counterclockwise diagonal\")\r\n                        return true\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == 1) {\r\n                                //console.log(\"in check from bottom half of counterclockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from bottom half of counterclockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        //console.log(\"in check from top half of clockwise diagonal\")\r\n                        return true\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == -1) {\r\n                                //console.log(\"in check from bottom half of clockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from bottom half of clockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for knights check\r\n        let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1)\r\n        let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1)\r\n        let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1)\r\n        let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1)\r\n        let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2)\r\n        let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2)\r\n        let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2)\r\n        let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2)\r\n\r\n        if (knight1) {\r\n            if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight1.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 1\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight2) {\r\n            if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight2.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 2\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight3) {\r\n            if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight3.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 3\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight4) {\r\n            if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight4.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 4\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight5) {\r\n            if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight5.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 5\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight6) {\r\n            if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight6.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 6\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight7) {\r\n            if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight7.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 7\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight8) {\r\n            if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight8.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 8\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    //makes a move, moves a piece from one square to another\r\n    //updates the boardPosition\r\n    //TODO: refactor\r\n    function movePiece(x, y) {\r\n        let squares = boardSquares\r\n        let position = BoardPosition\r\n\r\n        let targetSquare = getATargetSquareByLocation(x, y, boardSquaresRef.current)\r\n        let square = squares.find(s => s.props.x == CurrentSquareSelection.x && s.props.y == CurrentSquareSelection.y)\r\n\r\n        let color = getPieceColor(square)\r\n        let piece = getPiece(square)\r\n\r\n        //disable castling if the king moves\r\n        if (piece == PIECES.KING) {\r\n            if (isColorWhite(color)) {\r\n                CastlingRights.whiteLongCastle = false\r\n                CastlingRights.whiteShortCastle = false\r\n            } else {\r\n                CastlingRights.blackLongCastle = false\r\n                CastlingRights.blackShortCastle = false\r\n            }\r\n        }\r\n\r\n        //disable castling if the rook moves\r\n        if (piece == PIECES.ROOK) {\r\n            if (square.props.x == 7 && square.props.y == 7) {\r\n                CastlingRights.whiteShortCastle = false\r\n            }\r\n\r\n            if (square.props.x == 0 && square.props.y == 7) {\r\n                CastlingRights.blackShortCastle = false\r\n            }\r\n\r\n            if (square.props.x == 7 && square.props.y == 0) {\r\n                CastlingRights.whiteLongCastle = false\r\n            }\r\n\r\n            if (square.props.x == 0 && square.props.y == 0) {\r\n                CastlingRights.blackLongCastle = false\r\n            }\r\n        }\r\n\r\n        let p = UpdatePosition(square, targetSquare, position)\r\n\r\n        //capturing enPassant\r\n        // if (EnPassant.isPossible) {\r\n        //     let enPassantTargetSquare = color == COLORS.WHITE ? squares.find(s => s.props.x == x + 1 && s.props.y == y) : squares.find(s => s.props.x == x - 1 && s.props.y == y)\r\n        //     let enPassantSquare = <Square x={square.props.x} y={square.props.y} piece={\"\"} />\r\n\r\n        //     p = UpdatePosition(enPassantSquare, enPassantTargetSquare, p)\r\n        // }\r\n\r\n        //TODO: ensure p matches the new board Position format\r\n        //setBoardPosition(p)\r\n        const updatedBoardPosition = p.map(row => [...row]);\r\n        BoardPosition.splice(0, BoardPosition.length, ...updatedBoardPosition);\r\n\r\n        PossibleMoves.splice(0, PossibleMoves.length);\r\n        updateIsWhiteToMove(!IsWhiteToMove)\r\n\r\n        //enabling en passant\r\n        if (piece == PIECES.PAWN) {\r\n            if (Math.abs(square.props.x - targetSquare.props.x) == 2) {\r\n                if (square.props.piece.split(PIECE_DELIMITER)[0] == COLORS.WHITE) {\r\n                    EnPassant.isPossible = true\r\n                    EnPassant.x = square.props.x - 1\r\n                    EnPassant.y = square.props.y\r\n                } else {\r\n                    EnPassant.isPossible = true\r\n                    EnPassant.x = square.props.x + 1\r\n                    EnPassant.y = square.props.y\r\n                }\r\n\r\n                // let enPassant1 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y - 1)\r\n                // let enPassant2 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y + 1)\r\n\r\n                // if (enPassant1) {\r\n                //     if (enPassant1.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\r\n                //         if (enPassant1.props.piece.split(PIECE_DELIMITER)[0] != color) {\r\n                //             EnPassant.isPossible = true\r\n                //             EnPassant.x = targetSquare.props.x\r\n                //             EnPassant.y = targetSquare.props.y\r\n                //             return\r\n                //         }\r\n                //     }\r\n                // }\r\n\r\n                // if (enPassant2) {\r\n                //     if (enPassant2.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\r\n                //         if (enPassant2.props.piece.split(PIECE_DELIMITER)[0] != color) {\r\n                //             EnPassant.isPossible = true\r\n                //             EnPassant.x = targetSquare.props.x\r\n                //             EnPassant.y = targetSquare.props.y\r\n                //             return\r\n                //         }\r\n                //     }\r\n                // }\r\n            } else {\r\n                EnPassant.isPossible = false\r\n                EnPassant.x = -1\r\n                EnPassant.y = -1\r\n            }\r\n        } else {\r\n            EnPassant.isPossible = false\r\n            EnPassant.x = -1\r\n            EnPassant.y = -1\r\n        }\r\n\r\n        updateFullMoves(FullMoves + 1)\r\n\r\n        generateANewFen()\r\n    }\r\n\r\n    //checks if a pawn is on its starting square and allows a 2-squares move\r\n    //row (position.x) with index 6 for white and index 1 for black\r\n    function isPawnOnStartingSquare(pawn) {\r\n        return isColorWhite(getPieceColor(pawn)) ? pawn.props.x == WHITE_PAWN_STARTING_SQUARE : pawn.props.x == BLACK_PAWN_STARTING_SQUARE\r\n    }\r\n\r\n    //checks if a pawn is on En Passant square\r\n    function isPawnOnEnPassantSquare(pawn) {\r\n        return isColorWhite(getPieceColor(pawn)) ? pawn.props.x == WHITE_EN_PASSANT_SQUARE : pawn.props.x == BLACK_EN_PASSANT_SQUARE\r\n    }\r\n\r\n    //checks if white is allowed to long castle\r\n    //TODO: see if you can combine all 4 castling function into one\r\n    function checkIfCanWhiteLongCastle() {\r\n        return CastlingRights.whiteLongCastle &&\r\n            BoardPosition[CASTLE_ROW_WHITE][CASTLE_ROOK_INITIAL_COL_LONG] == FEN_PIECES_WHITE.ROOK &&\r\n            CASTLE_PATH_COLS_LONG.every(col => BoardPosition[CASTLE_ROW_WHITE][col] == EMPTY_SQUARE_PIECE);\r\n    }\r\n\r\n    //checks if white is allowed to short castle\r\n    //TODO: see if you can combine all 4 castling function into one\r\n    function checkIfCanWhiteShortCastle() {\r\n        return CastlingRights.whiteShortCastle &&\r\n            BoardPosition[CASTLE_ROW_WHITE][CASTLE_ROOK_INITIAL_COL_SHORT] == FEN_PIECES_WHITE.ROOK &&\r\n            CASTLE_PATH_COLS_SHORT.every(col => BoardPosition[CASTLE_ROW_WHITE][col] == EMPTY_SQUARE_PIECE);\r\n    }\r\n\r\n    //checks if black is allowed to long castle\r\n    //TODO: see if you can combine all 4 castling function into one\r\n    function checkIfCanBlackLongCastle() {\r\n        return CastlingRights.blackLongCastle &&\r\n            BoardPosition[CASTLE_ROW_BLACK][CASTLE_ROOK_INITIAL_COL_LONG] == FEN_PIECES_BLACK.ROOK &&\r\n            CASTLE_PATH_COLS_LONG.every(col => BoardPosition[CASTLE_ROW_BLACK][col] == EMPTY_SQUARE_PIECE);\r\n    }\r\n\r\n    //checks if black is allowed to short castle\r\n    //TODO: see if you can combine all 4 castling function into one\r\n    function checkIfCanBlackShortCastle() {\r\n        return CastlingRights.blackShortCastle &&\r\n            BoardPosition[CASTLE_ROW_BLACK][CASTLE_ROOK_INITIAL_COL_SHORT] == FEN_PIECES_BLACK.ROOK &&\r\n            CASTLE_PATH_COLS_SHORT.every(col => BoardPosition[CASTLE_ROW_BLACK][col] == EMPTY_SQUARE_PIECE);\r\n    }\r\n\r\n    //checks if two squares have the same x and y location\r\n    function compareIfTwoSquaresAreTheSame(square1, square2) {\r\n        if (!square1 || !square2) {\r\n            return false\r\n        }\r\n\r\n        return square1.props.x == square2.props.x && square1.props.y == square2.props.y\r\n    }\r\n\r\n    //gets all possible moves for a pawn\r\n    //TODO: refactor\r\n    function getPawnsPossibleMoves(square) {\r\n        if (!doesTheSquareHasThePiece(square, PIECES.PAWN)) {\r\n            return\r\n        }\r\n\r\n        let color = getPieceColor(square) //get the piece color\r\n\r\n        let moves = []\r\n\r\n        let position1Offset = 1\r\n        let position2Offset = 2\r\n\r\n        //flips the direction if the color is white\r\n        if (isColorWhite(color)) {\r\n            position1Offset *= -1\r\n            position2Offset *= -1\r\n        }\r\n\r\n        //get all forwards moves + the double move at the start\r\n        let targetPiece1 = getATargetSquareByLocation(square.props.x + position1Offset, square.props.y, boardSquaresRef.current) //move pawn 1 square ahead\r\n        let targetPiece2 = getATargetSquareByLocation(square.props.x + position2Offset, square.props.y, boardSquaresRef.current) //move pawn 2 squares ahead\r\n\r\n        //get potential neighbors to capture\r\n        let neighbor1 = getATargetSquareByLocation(square.props.x + position1Offset, square.props.y + position1Offset, boardSquaresRef.current)\r\n        let neighbor2 = getATargetSquareByLocation(square.props.x + position1Offset, square.props.y + (position1Offset * -1), boardSquaresRef.current)\r\n\r\n        //get the En Passant coordinates\r\n        let enPassantSquare = EnPassant.isPossible ? getATargetSquareByLocation(EnPassant.x, EnPassant.y, boardSquaresRef.current) : ''\r\n\r\n        let isTheSquareInFrontAvailable = isSquareAvailable(targetPiece1)\r\n\r\n        //push the one move forward for a pawn\r\n        if (isTheSquareInFrontAvailable) {\r\n            moves.push(targetPiece1)\r\n        }\r\n\r\n        //two moves are allowed only if the two squares above are free/empty\r\n        //allowed if pawn hasn't moved before\r\n        if (isTheSquareInFrontAvailable && isSquareAvailable(targetPiece2) && isPawnOnStartingSquare(square)) {\r\n            moves.push(targetPiece2)\r\n        }\r\n\r\n        //push neighbour if there is a piece to capture and it's a different color than the pawn\r\n        if (!isSquareAvailable(neighbor1) && !areSameColor(neighbor1, square)) {\r\n            moves.push(neighbor1)\r\n        }\r\n\r\n        //push neighbour if there is a piece to capture and it's a different color than the pawn\r\n        if (!isSquareAvailable(neighbor2) && !areSameColor(neighbor2, square)) {\r\n            moves.push(neighbor2)\r\n        }\r\n\r\n        //add En Passant\r\n        if (enPassantSquare && (compareIfTwoSquaresAreTheSame(enPassantSquare, neighbor1) || compareIfTwoSquaresAreTheSame(enPassantSquare, neighbor2))) {\r\n            moves.push(enPassantSquare)\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a rook\r\n    //TODO: refactor\r\n    function getRooksPossibleMoves(square, skip = true) {\r\n        if (!doesTheSquareHasThePiece(square, PIECES.ROOK) && skip) {\r\n            return\r\n        }\r\n\r\n        let moves = []\r\n\r\n        for (let i = square.props.x + 1; i < DIM; i++) {\r\n            let targetSquare = getATargetSquareByLocation(i, square.props.y, boardSquaresRef.current)\r\n\r\n            if (isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break\r\n            }\r\n        }\r\n\r\n        for (let i = square.props.x - 1; i >= 0; i--) {\r\n            let targetSquare = getATargetSquareByLocation(i, square.props.y, boardSquaresRef.current)\r\n\r\n            if (isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = square.props.y + 1; i < DIM; i++) {\r\n            let targetSquare = getATargetSquareByLocation(square.props.x, i, boardSquaresRef.current)\r\n\r\n            if (isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break\r\n            }\r\n        }\r\n\r\n        for (let i = square.props.y - 1; i >= 0; i--) {\r\n            let targetSquare = getATargetSquareByLocation(square.props.x, i, boardSquaresRef.current)\r\n\r\n            if (isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break\r\n            }\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a bishop\r\n    //TODO: refactor\r\n    function getBishopPossibleMoves(square, skip = true) {\r\n        if (!doesTheSquareHasThePiece(square, PIECES.BISHOP) && skip) {\r\n            return\r\n        }\r\n\r\n        let moves = []\r\n\r\n        let counter = 0;\r\n\r\n        let conside1 = true;\r\n        let conside2 = true;\r\n        let conside3 = true;\r\n        let conside4 = true;\r\n\r\n        for (let i = 1; i <= DIM; i++) {\r\n            if (!conside1 && !conside2 && !conside3 && !conside4) {\r\n                break;\r\n            }\r\n\r\n            let target1 = conside1 ? getATargetSquareByLocation(square.props.x - i, square.props.y - i, boardSquaresRef.current) : null\r\n            let target2 = conside2 ? getATargetSquareByLocation(square.props.x - i, square.props.y + i, boardSquaresRef.current) : null\r\n            let target3 = conside3 ? getATargetSquareByLocation(square.props.x + i, square.props.y + i, boardSquaresRef.current) : null\r\n            let target4 = conside4 ? getATargetSquareByLocation(square.props.x + i, square.props.y - i, boardSquaresRef.current) : null\r\n\r\n            if (target1 && isSquareAvailable(target1)) {\r\n                moves.push(target1)\r\n            } else {\r\n                if (!areSameColor(square, target1)) {\r\n                    moves.push(target1)\r\n                }\r\n                conside1 = false\r\n            }\r\n\r\n            if (target2 && isSquareAvailable(target2)) {\r\n                moves.push(target2)\r\n            } else {\r\n                if (!areSameColor(square, target2)) {\r\n                    moves.push(target2)\r\n                }\r\n                conside2 = false\r\n            }\r\n\r\n            if (target3 && isSquareAvailable(target3)) {\r\n                moves.push(target3)\r\n            } else {\r\n                if (!areSameColor(square, target3)) {\r\n                    moves.push(target3)\r\n                }\r\n                conside3 = false\r\n            }\r\n\r\n            if (target4 && isSquareAvailable(target4)) {\r\n                moves.push(target4)\r\n            } else {\r\n                if (!areSameColor(square, target4)) {\r\n                    moves.push(target4)\r\n                }\r\n                conside4 = false\r\n            }\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a knight\r\n    //TODO: refactor\r\n    function getKnightPossibleMoves(square) {\r\n        if (!doesTheSquareHasThePiece(square, PIECES.KNIGHT)) {\r\n            return\r\n        }\r\n\r\n        let offset = 1;\r\n        let doubleOffset = 2 * offset;\r\n\r\n        let moves = []\r\n\r\n        for (let i = 0; i < 8; i++) {\r\n            if (i != 0 && i % 2 == 0) {\r\n                offset *= -1;\r\n            }\r\n\r\n            let targetX = square.props.x + offset;\r\n            let targetY = square.props.y + doubleOffset;\r\n\r\n            let target = getATargetSquareByLocation(targetX, targetY, boardSquaresRef.current)\r\n\r\n            if (target && isSquareAvailable(target)) {\r\n                moves.push(target)\r\n            } else {\r\n                if (!areSameColor(square, target)) {\r\n                    moves.push(target)\r\n                }\r\n            }\r\n\r\n            doubleOffset *= -1\r\n\r\n            if (i == 3) {\r\n                offset *= 2\r\n                doubleOffset /= 2\r\n            }\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a king\r\n    //TODO: refactor\r\n    function getKingPossibleMoves(square) {\r\n        if (!doesTheSquareHasThePiece(square, PIECES.KING)) {\r\n            return\r\n        }\r\n\r\n        let moves = []\r\n\r\n        let color = getPieceColor(square)\r\n\r\n        //gets all possible 1-square moves for the king\r\n        for (let i = -1; i < 2; i++) {\r\n            for (let j = -1; j < 2; j++) {\r\n                let targetPiece = getATargetSquareByLocation(square.props.x + i, square.props.y + j, boardSquaresRef.current)\r\n\r\n                if (targetPiece && isSquareAvailable(targetPiece)) {\r\n                    moves.push(targetPiece)\r\n                } else {\r\n                    if (!areSameColor(square, targetPiece)) {\r\n                        moves.push(targetPiece)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //Castling logic\r\n        const longCastleSquare = getATargetSquareByLocation(square.props.x, square.props.y - 2, boardSquaresRef.current)\r\n        const shortCastleSquare = getATargetSquareByLocation(square.props.x, square.props.y + 2, boardSquaresRef.current)\r\n\r\n        if (isColorWhite(color) && checkIfCanWhiteLongCastle()) {\r\n            moves.push(longCastleSquare)\r\n        }\r\n\r\n        if (isColorWhite(color) && checkIfCanWhiteShortCastle()) {\r\n            moves.push(shortCastleSquare)\r\n        }\r\n\r\n        if (isColorBlack(color) && checkIfCanBlackLongCastle()) {\r\n            moves.push(longCastleSquare)\r\n        }\r\n\r\n        if (isColorBlack(color) && checkIfCanBlackShortCastle()) {\r\n            moves.push(shortCastleSquare)\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a queen\r\n    //TODO: refactor\r\n    function getQueenPossibleMoves(square) {\r\n        if (!doesTheSquareHasThePiece(square, PIECES.QUEEN)) {\r\n            return\r\n        }\r\n\r\n        let moves = []\r\n\r\n        //a queen has the same moves as a bishop and a rook\r\n        const rookMoves = getRooksPossibleMoves(square, false).moves;\r\n        const bishopMoves = getBishopPossibleMoves(square, false).moves;\r\n\r\n        // Concatenate the arrays of moves\r\n        moves.push(...rookMoves, ...bishopMoves);\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //removes moves that do not deal with a check\r\n    //TODO: Refactor\r\n    function filterMovesIfInCheck(possibleMoves) {\r\n        let blackKing = getATargetSquareByPiece(KINGS.BLACK_KING, boardSquaresRef.current) //get the black king\r\n        let whiteKing = getATargetSquareByPiece(KINGS.WHITE_KING, boardSquaresRef.current) //get the white king\r\n\r\n        for (let i = 0; i < possibleMoves.length; i++) {\r\n            for (let j = 0; j < possibleMoves[i].moves.length; j++) {\r\n                if (possibleMoves[i].piece.props.piece == KINGS.BLACK_KING) {\r\n                    let move = <Square x={possibleMoves[i].moves[j].props.x} y={possibleMoves[i].moves[j].props.y} piece={\"black-king\"} />\r\n                    let pseudo = <Square x={blackKing.props.x} y={blackKing.props.y} piece={\"\"} />\r\n                    let isInCheck = isBlackInCheck(move, pseudo)\r\n\r\n                    if (isInCheck) {\r\n                        possibleMoves[i].moves.splice(j, 1);\r\n                        j--;\r\n                    }\r\n                } else if (possibleMoves[i].piece.props.piece == KINGS.WHITE_KING) {\r\n                    let move = <Square x={possibleMoves[i].moves[j].props.x} y={possibleMoves[i].moves[j].props.y} piece={\"white-king\"} />\r\n                    let pseudo = <Square x={whiteKing.props.x} y={whiteKing.props.y} piece={\"\"} />\r\n                    let isInCheck = isWhiteInCheck(move, pseudo)\r\n\r\n                    if (isInCheck) {\r\n                        possibleMoves[i].moves.splice(j, 1);\r\n                        j--;\r\n                    }\r\n                } else {\r\n                    let move = <Square x={possibleMoves[i].moves[j].props.x} y={possibleMoves[i].moves[j].props.y} piece={possibleMoves[i].piece.props.piece} />\r\n                    let isBlackKingInCheck = isBlackInCheck(blackKing, move, possibleMoves[i].piece)\r\n                    let isWhiteKingInCheck = isWhiteInCheck(whiteKing, move, possibleMoves[i].piece)\r\n\r\n                    if (isBlackKingInCheck && !IsWhiteToMove) {\r\n                        possibleMoves[i].moves.splice(j, 1);\r\n                        j--;\r\n                    }\r\n\r\n                    if (isWhiteKingInCheck && IsWhiteToMove) {\r\n                        possibleMoves[i].moves.splice(j, 1);\r\n                        j--;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return possibleMoves\r\n    }\r\n\r\n    //removes moves that allow illegal castling (castles through check for example)\r\n    //TODO: Refactor\r\n    function filterMovesThatAllowIllegalCastling(possibleMoves) {\r\n        let blackKing = getATargetSquareByPiece(KINGS.BLACK_KING, boardSquaresRef.current) //get the black king\r\n        let whiteKing = getATargetSquareByPiece(KINGS.WHITE_KING, boardSquaresRef.current) //get the white king\r\n\r\n        for (let i = 0; i < possibleMoves.length; i++) {\r\n            let whiteCastle1 = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 6) //sqaure where king will be after short castle (white)\r\n            let whiteCastle2 = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 2) //sqaure where king will be after long castle (white)\r\n            let blackCastle1 = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 6) //square where king will be after shot castle (black)\r\n            let blackCastle2 = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 2) //square where king will be after long castle (black)\r\n\r\n            if (possibleMoves[i].piece == blackKing || possibleMoves[i].piece == whiteKing) {\r\n                if (whiteCastle1) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 5)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n\r\n                if (whiteCastle2) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 3)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n\r\n                if (blackCastle1) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 5)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n\r\n                if (blackCastle2) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 3)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n            }\r\n\r\n            //prevents black to castle if in check\r\n            if (isBlackInCheck(blackKing)) {\r\n                if (blackCastle1) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(blackCastle1), 1)\r\n                }\r\n\r\n                if (blackCastle2) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(blackCastle2), 1)\r\n                }\r\n            }\r\n\r\n            //prevents white to castle if in check\r\n            if (isWhiteInCheck(whiteKing)) {\r\n                if (whiteCastle1) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(whiteCastle1), 1)\r\n                }\r\n\r\n                if (whiteCastle2) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(whiteCastle2), 1)\r\n                }\r\n            }\r\n        }\r\n\r\n        return possibleMoves\r\n    }\r\n\r\n    //removes empty/undefined values for generated moves\r\n    function removeEmptyMoves(possibleMoves) {\r\n        for (let i = 0; i < possibleMoves.length; i++) {\r\n            //remove undefined elements if the possible moves array contains any\r\n            if (!possibleMoves[i]) {\r\n                possibleMoves.splice(i, 1)\r\n                i--;\r\n                continue;\r\n            }\r\n\r\n            //remove any elements if the possible moves array contains elements with no possible moves\r\n            if (possibleMoves[i].moves.length == 0) {\r\n                possibleMoves.splice(i, 1)\r\n                i--;\r\n                continue;\r\n            }\r\n\r\n            //remove undefined possible moves if the element has any such moves\r\n            for (let j = 0; j < possibleMoves[i].moves.length; j++) {\r\n                if (!possibleMoves[i].moves[j]) {\r\n                    possibleMoves[i].moves.splice(j, 1);\r\n                    j--;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possibleMoves\r\n    }\r\n\r\n    //checks if a certain moves's location matches the currently selected piece\r\n    function checkIfAMoveIsEqualToTheCurrentSelectedSquare(move) {\r\n        return move.props.x == CurrentSquareSelection.x && move.props.y == CurrentSquareSelection.y\r\n    }\r\n\r\n    //updates the isPossibleMove array based on the possibleMoves array and forces a component update of the square to visually the circles indicating a move is possible\r\n    function updatePossibleMovesVisually() {\r\n        for (let i = 0; i < PossibleMoves.length; i++) {\r\n            if (checkIfAMoveIsEqualToTheCurrentSelectedSquare(PossibleMoves[i].piece)) {\r\n                for (let j = 0; j < PossibleMoves[i].moves.length; j++) {\r\n                    updateIsPossibleMove(`${PossibleMoves[i].moves[j].props.x}-${PossibleMoves[i].moves[j].props.y}`, true)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //gets all possible/legal moves\r\n    //TODO: check if can be refactored further\r\n    function getPossibleMoves() {\r\n        //let square = getATargetSquareByLocation(x, y)\r\n        let possiblePieceMoves = [];\r\n        let squares = boardSquares\r\n\r\n        for (let i = 0; i < squares.length; i++) {\r\n            let square = squares[i]\r\n\r\n            //if the square has a piece\r\n            if (square.props.piece) {\r\n                let color = getPieceColor(square); //get the piece color\r\n\r\n                //don't collect possible moves if it's black to move and you're trying to move a white piece\r\n                if (isColorWhite(color) && !IsWhiteToMove) {\r\n                    //console.log(`Skipping because it's black to move and you're moving a white piece, x: ${square.props.x}, y: ${square.props.y}`)\r\n                    continue\r\n                }\r\n\r\n                //don't collect possible moves if it's white to move and you're trying to move a black piece\r\n                if (isColorBlack(color) && IsWhiteToMove) {\r\n                    //console.log(`Skipping because it's white to move and you're moving a black piece, x: ${square.props.x}, y: ${square.props.y}`)\r\n                    continue\r\n                }\r\n\r\n                //console.log(`Getting possible moves, x: ${square.props.x}, y: ${square.props.y}`)\r\n                //get all possible moves for each piece\r\n                possiblePieceMoves.push(getPawnsPossibleMoves(square))\r\n                possiblePieceMoves.push(getRooksPossibleMoves(square))\r\n                possiblePieceMoves.push(getBishopPossibleMoves(square))\r\n                possiblePieceMoves.push(getKnightPossibleMoves(square))\r\n                possiblePieceMoves.push(getKingPossibleMoves(square))\r\n                possiblePieceMoves.push(getQueenPossibleMoves(square))\r\n\r\n                //filter empty moves\r\n                possiblePieceMoves = removeEmptyMoves(possiblePieceMoves);\r\n\r\n                //filter possible moves\r\n                possiblePieceMoves = filterMovesIfInCheck(possiblePieceMoves)\r\n                possiblePieceMoves = filterMovesThatAllowIllegalCastling(possiblePieceMoves)\r\n            }\r\n        }\r\n\r\n        console.log(\"Possible Moves:\", possiblePieceMoves);\r\n        console.log('Moves count', possiblePieceMoves.reduce((sum, pieceMove) => sum + pieceMove.moves.length, 0))\r\n        PossibleMoves.splice(0, PossibleMoves.length, ...possiblePieceMoves);\r\n        updatePossibleMovesVisually()\r\n    }\r\n\r\n    //renders the board\r\n    return (\r\n        <>\r\n            <div className=\"chessGrid\">\r\n                {boardSquares.map((sqr) => sqr)}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Board"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,MAAM,MAAM,aAAa;AAChC,OAAO,KAAKC,aAAa,MAAM,oBAAoB;AACnD,SACIC,GAAG,EAAEC,eAAe,EAAEC,KAAK,EAAEC,MAAM,EAAEC,MAAM,EAC3CC,cAAc,EAAEC,SAAS,EAAEC,sBAAsB,EAAEC,aAAa,EAChEC,SAAS,EAAEC,SAAS,EAAEC,aAAa,EAAEC,mBAAmB,EAAEC,eAAe,EACzEC,eAAe,EAAEC,aAAa,EAAEC,0BAA0B,EAAEC,0BAA0B,EACtFC,uBAAuB,EAAEC,uBAAuB,EAAEC,gBAAgB,EAAEC,gBAAgB,EAAEC,kBAAkB,EACxGC,gBAAgB,EAAEC,gBAAgB,EAAEC,uBAAuB,EAAEC,4BAA4B,EAAEC,6BAA6B,EACxHC,qBAAqB,EAAEC,sBAAsB,EAAEC,iBAAiB,EAAEC,iBAAiB,QAChF,sBAAsB;;AAG7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAUA,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAG5C,QAAQ,CAAC,uDAAuD,CAAC;EACvF;EACA,MAAM,CAAC6C,cAAc,EAAEC,iBAAiB,CAAC,GAAG9C,QAAQ,CAAC,EAAE,CAAC;EACxD;EACA,MAAM,CAAC+C,YAAY,EAAEC,eAAe,CAAC,GAAGhD,QAAQ,CAAC,EAAE,CAAC;;EAEpD;EACA,MAAMiD,iBAAiB,GAAG/C,MAAM,CAAC2C,cAAc,CAAC;EAChD,MAAMK,eAAe,GAAGhD,MAAM,CAAC6C,YAAY,CAAC;;EAE5C;EACA;EACA,MAAMI,oBAAoB,GAAGA,CAACC,GAAG,EAAEC,KAAK,KAAK;IACzC;IACAP,iBAAiB,CAACQ,SAAS,IACvBA,SAAS,CAACC,GAAG,CAACC,IAAI;IACd;IACA;IACA;IACA;IACAA,IAAI,CAACJ,GAAG,KAAKA,GAAG,GAAG;MAAE,GAAGI,IAAI;MAAEH,KAAK,EAAEA;IAAM,CAAC,GAAGG,IACnD,CACJ,CAAC;EACL,CAAC;;EAED;EACAvD,SAAS,CAAC,MAAM;IACZgD,iBAAiB,CAACQ,OAAO,GAAGZ,cAAc;IAC1Ca,SAAS,CAAC,KAAK,CAAC;EACpB,CAAC,EAAE,CAACb,cAAc,CAAC,CAAC;;EAEpB;EACA;EACA;EACA5C,SAAS,CAAC,MAAM;IACZ0D,kBAAkB,CAAC,CAAC;IACpBD,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAzD,SAAS,CAAC,MAAM;IACZyD,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,CAACf,GAAG,CAAC,CAAC;;EAET;EACA1C,SAAS,CAAC,MAAM;IACZiD,eAAe,CAACO,OAAO,GAAGV,YAAY;EAC1C,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;;EAElB;EACA,SAASY,kBAAkBA,CAAA,EAAG;IAC1B,MAAMC,qBAAqB,GAAG,EAAE;IAChC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxD,GAAG,EAAEwD,CAAC,EAAE,EAAE;MAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGzD,GAAG,EAAEyD,CAAC,EAAE,EAAE;QAC1BF,qBAAqB,CAACG,IAAI,CAAC;UAAEX,GAAG,EAAG,GAAES,CAAE,IAAGC,CAAE,EAAC;UAAET,KAAK,EAAE;QAAM,CAAC,CAAC;MAClE;IACJ;IACAP,iBAAiB,CAACc,qBAAqB,CAAC;EAC5C;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SAASI,eAAeA,CAAA,EAAG;IACvB,IAAIC,SAAS,GAAG,EAAE;IAElB,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGzC,aAAa,CAAC8C,MAAM,EAAEL,CAAC,EAAE,EAAE;MAC3C,IAAIM,GAAG,GAAG/C,aAAa,CAACyC,CAAC,CAAC;MAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGK,GAAG,CAACD,MAAM,EAAEJ,CAAC,EAAE,EAAE;QACjC,IAAIM,MAAM,GAAGD,GAAG,CAACL,CAAC,CAAC;QAEnB,IAAIM,MAAM,IAAI,GAAG,EAAE;UACf,IAAIH,SAAS,IAAII,OAAO,CAACJ,SAAS,CAACA,SAAS,CAACC,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE;YACvD,IAAII,QAAQ,GAAGL,SAAS,CAACM,KAAK,CAAC,CAAC,CAAC,CAAC;YAClCN,SAAS,GAAGA,SAAS,CAACO,SAAS,CAAC,CAAC,EAAEP,SAAS,CAACC,MAAM,GAAG,CAAC,CAAC;YACxDD,SAAS,IAAIQ,MAAM,CAACH,QAAQ,CAAC,GAAG,CAAC;UACrC,CAAC,MAAM;YACHL,SAAS,IAAI,GAAG;UACpB;QACJ,CAAC,MAAM;UACHA,SAAS,IAAIG,MAAM;QACvB;MACJ;MACAH,SAAS,IAAI,GAAG;IACpB;IAEAA,SAAS,GAAGA,SAAS,CAACO,SAAS,CAAC,CAAC,EAAEP,SAAS,CAACC,MAAM,GAAG,CAAC,CAAC,EAAC;;IAEzDD,SAAS,IAAIjD,aAAa,GAAG,IAAI,GAAG,IAAI;IAExC,IAAI0D,aAAa,GAAG,EAAE;IAEtBA,aAAa,IAAIhE,cAAc,CAACiE,gBAAgB,GAAG,GAAG,GAAG,EAAE;IAC3DD,aAAa,IAAIhE,cAAc,CAACkE,eAAe,GAAG,GAAG,GAAG,EAAE;IAC1DF,aAAa,IAAIhE,cAAc,CAACmE,gBAAgB,GAAG,GAAG,GAAG,EAAE;IAC3DH,aAAa,IAAIhE,cAAc,CAACoE,eAAe,GAAG,GAAG,GAAG,EAAE;IAE1Db,SAAS,IAAIS,aAAa,CAACR,MAAM,IAAI,CAAC,GAAG,IAAI,GAAG,GAAG,GAAGQ,aAAa;IAEnET,SAAS,IAAItD,SAAS,CAACoE,UAAU,GAAG,GAAG,GAAGC,4BAA4B,CAACrE,SAAS,CAACsE,CAAC,EAAEtE,SAAS,CAACuE,CAAC,CAAC,GAAG,IAAI;IAEvGjB,SAAS,IAAI,GAAG,GAAGnD,SAAS;IAC5BmD,SAAS,IAAI,GAAG,GAAGlD,SAAS;IAE5B6B,MAAM,CAACqB,SAAS,CAAC;EACrB;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SAASP,SAASA,CAACyB,mBAAmB,GAAG,IAAI,EAAE;IAC3C;IACA,MAAM;MAAEC,QAAQ;MAAEC,OAAO;MAAEC,WAAW;MAAEC,YAAY;MAAEC,YAAY;MAAEC;IAAa,CAAC,GAAGC,QAAQ,CAAC/C,GAAG,CAAC;IAElG,MAAMgD,OAAO,GAAGP,QAAQ,CAACQ,KAAK,CAAC,GAAG,CAAC;IAEnC,IAAIC,GAAG,GAAG,EAAE;;IAEZ;IACA,KAAK,IAAI1B,GAAG,IAAIwB,OAAO,EAAE;MACrB,MAAMG,MAAM,GAAG3B,GAAG,CAACyB,KAAK,CAAC,EAAE,CAAC;MAE5B,IAAIG,CAAC,GAAG,EAAE;MAEV,KAAK,IAAIlC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiC,MAAM,CAAC5B,MAAM,EAAEL,CAAC,EAAE,EAAE;QACpC,IAAIY,MAAM,CAACqB,MAAM,CAACjC,CAAC,CAAC,CAAC,EAAE;UACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGW,MAAM,CAACqB,MAAM,CAACjC,CAAC,CAAC,CAAC,EAAEC,CAAC,EAAE,EAAE;YACxCiC,CAAC,CAAChC,IAAI,CAAC,GAAG,CAAC;UACf;QACJ,CAAC,MAAM;UACHgC,CAAC,CAAChC,IAAI,CAAC+B,MAAM,CAACjC,CAAC,CAAC,CAAC;QACrB;MACJ;MAEAgC,GAAG,CAAC9B,IAAI,CAACgC,CAAC,CAAC;IACf;;IAEA;IACA,IAAIC,kBAAkB,GAAG,IAAI;IAC7B,IAAIC,OAAO,GAAG,EAAE;IAEhB,KAAK,IAAIpC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgC,GAAG,CAAC3B,MAAM,EAAEL,CAAC,EAAE,EAAE;MACjC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,GAAG,CAAChC,CAAC,CAAC,CAACK,MAAM,EAAEJ,CAAC,EAAE,EAAE;QACpC,IAAIoC,KAAK,GAAGF,kBAAkB,GAAG,EAAE,GAAG,MAAM;QAC5C,MAAMG,kBAAkB,GAAGlD,iBAAiB,CAACQ,OAAO,CAAC2C,IAAI,CAAC5C,IAAI,IAAIA,IAAI,CAACJ,GAAG,KAAM,GAAES,CAAE,IAAGC,CAAE,EAAC,CAAC;;QAE3F;QACAmC,OAAO,CAAClC,IAAI,eACRzB,OAAA,CAACnC,MAAM;UACHkG,gBAAgB,EAAEA,gBAAiB;UAEnCpB,CAAC,EAAEpB,CAAE;UACLqB,CAAC,EAAEpB,CAAE;UACLwC,KAAK,EAAEC,sBAAsB,CAACV,GAAG,CAAChC,CAAC,CAAC,CAACC,CAAC,CAAC,CAAE;UACzCoC,KAAK,EAAEA,KAAM;UACbM,SAAS,EAAEA,SAAU;UACrB3D,cAAc,EAAEsD,kBAAkB,GAAGA,kBAAkB,CAAC9C,KAAK,GAAG,KAAM;UACtEM,kBAAkB,EAAEA;QAAmB,GAPjC,GAAEE,CAAE,IAAGC,CAAE,EAAC;UAAA2C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAQnB,CACL,CAAC;QACDZ,kBAAkB,GAAG,CAACA,kBAAkB;MAC5C;MACAA,kBAAkB,GAAG,CAACA,kBAAkB;IAC5C;IAEAhD,eAAe,CAACiD,OAAO,CAAC;;IAExB;IACA;IACA;;IAEA,IAAIX,WAAW,CAACuB,QAAQ,CAAC,GAAG,CAAC,EAAE;MAC3BnG,cAAc,CAACiE,gBAAgB,GAAG,IAAI;IAC1C;IACA,IAAIW,WAAW,CAACuB,QAAQ,CAAC,GAAG,CAAC,EAAE;MAC3BnG,cAAc,CAACkE,eAAe,GAAG,IAAI;IACzC;IACA,IAAIU,WAAW,CAACuB,QAAQ,CAAC,GAAG,CAAC,EAAE;MAC3BnG,cAAc,CAACmE,gBAAgB,GAAG,IAAI;IAC1C;IACA,IAAIS,WAAW,CAACuB,QAAQ,CAAC,GAAG,CAAC,EAAE;MAC3BnG,cAAc,CAACoE,eAAe,GAAG,IAAI;IACzC;IAEAO,OAAO,IAAI,GAAG,GAAGpE,mBAAmB,CAAC,IAAI,CAAC,GAAGA,mBAAmB,CAAC,KAAK,CAAC;IACvEC,eAAe,CAACsE,YAAY,CAAC;IAC7BrE,eAAe,CAACsE,YAAY,CAAC;IAE7B,IAAIN,mBAAmB,EAAE;MACrB/D,aAAa,CAAC0F,MAAM,CAAC,CAAC,EAAE1F,aAAa,CAAC8C,MAAM,EAAE,GAAG2B,GAAG,CAAC;IACzD;IAEA,IAAI,CAACN,YAAY,CAACsB,QAAQ,CAACvG,eAAe,CAAC,EAAE;MACzC,IAAIyG,QAAQ,GAAGC,4BAA4B,CAACzB,YAAY,CAAC;MAEzD5E,SAAS,CAACoE,UAAU,GAAG,IAAI;MAC3BpE,SAAS,CAACsE,CAAC,GAAG8B,QAAQ,CAAC9B,CAAC;MACxBtE,SAAS,CAACuE,CAAC,GAAG6B,QAAQ,CAAC7B,CAAC;IAC5B;EACJ;;EAEA;EACA;EACA;EACA;EACA;EACA,SAAS+B,cAAcA,CAACC,MAAM,EAAEC,MAAM,EAAEC,aAAa,GAAG,IAAI,EAAE;IAC1D,IAAInB,OAAO,GAAG/C,eAAe,CAACO,OAAO;IAErC,IAAI0D,MAAM,EAAE;MACR,MAAME,cAAc,GAAGpB,OAAO,CAAC1C,GAAG,CAAC+D,CAAC,IAAI;QACpC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,KAAKkC,MAAM,CAACI,KAAK,CAACtC,CAAC,IAAIqC,CAAC,CAACC,KAAK,CAACrC,CAAC,KAAKiC,MAAM,CAACI,KAAK,CAACrC,CAAC,EAAE;UAC9D;UACA,oBAAOnF,KAAK,CAACyH,YAAY,CAACF,CAAC,EAAE;YAAEhB,KAAK,EAAEa,MAAM,CAACI,KAAK,CAACjB;UAAM,CAAC,CAAC;QAC/D,CAAC,MAAM,IAAIc,aAAa,IAAIE,CAAC,CAACC,KAAK,CAACtC,CAAC,KAAKmC,aAAa,CAACG,KAAK,CAACtC,CAAC,IAAIqC,CAAC,CAACC,KAAK,CAACrC,CAAC,KAAKkC,aAAa,CAACG,KAAK,CAACrC,CAAC,EAAE;UACpG,oBAAOnF,KAAK,CAACyH,YAAY,CAACF,CAAC,EAAE;YAAEhB,KAAK,EAAE;UAAG,CAAC,CAAC;QAC/C,CAAC,MACI;UACD;UACA,OAAOgB,CAAC;QACZ;MACJ,CAAC,CAAC;;MAEF;MACA;MACA;MACA;MACA;;MAEArB,OAAO,GAAGoB,cAAc;IAC5B;;IAEA;IACA,KAAK,IAAIxD,CAAC,GAAGqD,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAG,CAAC,EAAEpB,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1C,IAAIyC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIpB,CAAC,IAAIyD,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIgC,MAAM,CAACK,KAAK,CAACrC,CAAC,CAAC;MAC5E,IAAIoB,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;QAC5C,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;UACzF;UACA,OAAO,IAAI;QACf,CAAC,MAAM;UACH,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,EAAE;YACnB;UACJ;QACJ;MACJ,CAAC,MAAM;QACH;MACJ;IACJ;;IAEA;IACA,KAAK,IAAIzC,CAAC,GAAGqD,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAG,CAAC,EAAEpB,CAAC,GAAGxD,GAAG,EAAEwD,CAAC,EAAE,EAAE;MAC3C,IAAIyC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIpB,CAAC,IAAIyD,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIgC,MAAM,CAACK,KAAK,CAACrC,CAAC,CAAC;MAC5E,IAAIoB,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;QAC5C,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;UACzF;UACA,OAAO,IAAI;QACf,CAAC,MAAM;UACH,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,EAAE;YACnB;UACJ;QACJ;MACJ,CAAC,MAAM;QACH;MACJ;IACJ;;IAEA;IACA,KAAK,IAAIzC,CAAC,GAAGqD,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAG,CAAC,EAAErB,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1C,IAAIyC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACtC,CAAC,IAAIqC,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIrB,CAAC,CAAC;MAC5E,IAAIyC,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;QAC5C,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;UACzF;UACA,OAAO,IAAI;QACf,CAAC,MAAM;UACH,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,EAAE;YACnB;UACJ;QACJ;MACJ,CAAC,MAAM;QACH;MACJ;IACJ;;IAEA;IACA,KAAK,IAAIzC,CAAC,GAAGqD,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAG,CAAC,EAAErB,CAAC,GAAGxD,GAAG,EAAEwD,CAAC,EAAE,EAAE;MAC3C,IAAIyC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACtC,CAAC,IAAIqC,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIrB,CAAC,CAAC;MAC5E,IAAIyC,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;QAC5C,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;UACzF;UACA,OAAO,IAAI;QACf,CAAC,MAAM;UACH,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,EAAE;YACnB;UACJ;QACJ;MACJ,CAAC,MAAM;QACH;MACJ;IACJ;;IAEA;IACA,KAAK,IAAIzC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxD,GAAG,EAAEwD,CAAC,EAAE,EAAE;MAC1B,IAAIyC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAGpB,CAAC,IAAIyD,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIgC,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAGrB,CAAC,CAAC;MAEjG,IAAIyC,KAAK,EAAE;QACP,IAAIA,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC5C,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;YACxI,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;cAC3C,IAAIU,KAAK,CAACiB,KAAK,CAACtC,CAAC,GAAGiC,MAAM,CAACK,KAAK,CAACtC,CAAC,IAAI,CAAC,CAAC,IAAIqB,KAAK,CAACiB,KAAK,CAACrC,CAAC,GAAGgC,MAAM,CAACK,KAAK,CAACrC,CAAC,IAAI,CAAC,CAAC,EAAE;gBAC9E;gBACA,OAAO,IAAI;cACf,CAAC,MAAM;gBACH;cACJ;YACJ,CAAC,MAAM;cACH;cACA,OAAO,IAAI;YACf;UACJ,CAAC,MAAM;YACH,IAAIoB,KAAK,CAACiB,KAAK,CAACjB,KAAK,EAAE;cACnB;YACJ;UACJ;QACJ,CAAC,MAAM;UACH;QACJ;MACJ;IACJ;;IAEA;IACA,KAAK,IAAIzC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxD,GAAG,EAAEwD,CAAC,EAAE,EAAE;MAC1B,IAAIyC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAGpB,CAAC,IAAIyD,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIgC,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAGrB,CAAC,CAAC;MAEjG,IAAIyC,KAAK,EAAE;QACP,IAAIA,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC5C,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;YAC3F,OAAO,IAAI;UACf,CAAC,MAAM;YACH,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,EAAE;cACnB;YACJ;UACJ;QACJ,CAAC,MAAM;UACH;QACJ;MACJ;IACJ;;IAEA;IACA,KAAK,IAAIzC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxD,GAAG,EAAEwD,CAAC,EAAE,EAAE;MAC1B,IAAIyC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAGpB,CAAC,IAAIyD,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIgC,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAGrB,CAAC,CAAC;MAEjG,IAAIyC,KAAK,EAAE;QACP,IAAIA,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC5C,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;YACxI,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;cAC3C,IAAIU,KAAK,CAACiB,KAAK,CAACtC,CAAC,GAAGiC,MAAM,CAACK,KAAK,CAACtC,CAAC,IAAI,CAAC,CAAC,IAAIqB,KAAK,CAACiB,KAAK,CAACrC,CAAC,GAAGgC,MAAM,CAACK,KAAK,CAACrC,CAAC,IAAI,CAAC,EAAE;gBAC7E;gBACA,OAAO,IAAI;cACf,CAAC,MAAM;gBACH;cACJ;YACJ,CAAC,MAAM;cACH;cACA,OAAO,IAAI;YACf;UACJ,CAAC,MAAM;YACH,IAAIoB,KAAK,CAACiB,KAAK,CAACjB,KAAK,EAAE;cACnB;YACJ;UACJ;QACJ,CAAC,MAAM;UACH;QACJ;MACJ;IACJ;;IAEA;IACA,KAAK,IAAIzC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxD,GAAG,EAAEwD,CAAC,EAAE,EAAE;MAC1B,IAAIyC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAGpB,CAAC,IAAIyD,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIgC,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAGrB,CAAC,CAAC;MAEjG,IAAIyC,KAAK,EAAE;QACP,IAAIA,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC5C,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;YAC3F,OAAO,IAAI;UACf,CAAC,MAAM;YACH,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,EAAE;cACnB;YACJ;UACJ;QACJ,CAAC,MAAM;UACH;QACJ;MACJ;IACJ;;IAEA;IACA,IAAImB,OAAO,GAAGxB,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAG,CAAC,IAAIqC,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIgC,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAG,CAAC,CAAC;IACnG,IAAIwC,OAAO,GAAGzB,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAG,CAAC,IAAIqC,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIgC,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAG,CAAC,CAAC;IACnG,IAAIyC,OAAO,GAAG1B,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAG,CAAC,IAAIqC,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIgC,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAG,CAAC,CAAC;IACnG,IAAI0C,OAAO,GAAG3B,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAG,CAAC,IAAIqC,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIgC,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAG,CAAC,CAAC;IACnG,IAAI2C,OAAO,GAAG5B,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAG,CAAC,IAAIqC,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIgC,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAG,CAAC,CAAC;IACnG,IAAI4C,OAAO,GAAG7B,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAG,CAAC,IAAIqC,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIgC,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAG,CAAC,CAAC;IACnG,IAAI6C,OAAO,GAAG9B,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAG,CAAC,IAAIqC,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIgC,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAG,CAAC,CAAC;IACnG,IAAI8C,OAAO,GAAG/B,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAG,CAAC,IAAIqC,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIgC,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAG,CAAC,CAAC;IAEnG,IAAIuC,OAAO,EAAE;MACT,IAAIA,OAAO,CAACF,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAI6B,OAAO,CAACF,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,IAAI8B,OAAO,EAAE;MACT,IAAIA,OAAO,CAACH,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAI8B,OAAO,CAACH,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,IAAI+B,OAAO,EAAE;MACT,IAAIA,OAAO,CAACJ,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAI+B,OAAO,CAACJ,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,IAAIgC,OAAO,EAAE;MACT,IAAIA,OAAO,CAACL,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAIgC,OAAO,CAACL,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,IAAIiC,OAAO,EAAE;MACT,IAAIA,OAAO,CAACN,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAIiC,OAAO,CAACN,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,IAAIkC,OAAO,EAAE;MACT,IAAIA,OAAO,CAACP,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAIkC,OAAO,CAACP,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,IAAImC,OAAO,EAAE;MACT,IAAIA,OAAO,CAACR,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAImC,OAAO,CAACR,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,IAAIoC,OAAO,EAAE;MACT,IAAIA,OAAO,CAACT,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAIoC,OAAO,CAACT,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,OAAO,KAAK;EAChB;;EAEA;EACA;EACA;EACA;EACA;EACA,SAASqC,cAAcA,CAACf,MAAM,EAAEC,MAAM,EAAEC,aAAa,GAAG,IAAI,EAAE;IAC1D,IAAInB,OAAO,GAAG/C,eAAe,CAACO,OAAO;IAErC,IAAI0D,MAAM,EAAE;MACR,MAAME,cAAc,GAAGpB,OAAO,CAAC1C,GAAG,CAAC+D,CAAC,IAAI;QACpC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,KAAKkC,MAAM,CAACI,KAAK,CAACtC,CAAC,IAAIqC,CAAC,CAACC,KAAK,CAACrC,CAAC,KAAKiC,MAAM,CAACI,KAAK,CAACrC,CAAC,EAAE;UAC9D;UACA,oBAAOnF,KAAK,CAACyH,YAAY,CAACF,CAAC,EAAE;YAAEhB,KAAK,EAAEa,MAAM,CAACI,KAAK,CAACjB;UAAM,CAAC,CAAC;QAC/D,CAAC,MAAM,IAAIc,aAAa,IAAIE,CAAC,CAACC,KAAK,CAACtC,CAAC,KAAKmC,aAAa,CAACG,KAAK,CAACtC,CAAC,IAAIqC,CAAC,CAACC,KAAK,CAACrC,CAAC,KAAKkC,aAAa,CAACG,KAAK,CAACrC,CAAC,EAAE;UACpG,oBAAOnF,KAAK,CAACyH,YAAY,CAACF,CAAC,EAAE;YAAEhB,KAAK,EAAE;UAAG,CAAC,CAAC;QAC/C,CAAC,MACI;UACD;UACA,OAAOgB,CAAC;QACZ;MACJ,CAAC,CAAC;MAEFrB,OAAO,GAAGoB,cAAc;IAC5B;;IAEA;IACA,KAAK,IAAIxD,CAAC,GAAGqD,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAG,CAAC,EAAEpB,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1C,IAAIyC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIpB,CAAC,IAAIyD,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIgC,MAAM,CAACK,KAAK,CAACrC,CAAC,CAAC;MAC5E,IAAIoB,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;QAC5C,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;UACzF;UACA,OAAO,IAAI;QACf,CAAC,MAAM;UACH,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,EAAE;YACnB;UACJ;QACJ;MACJ,CAAC,MAAM;QACH;MACJ;IACJ;;IAEA;IACA,KAAK,IAAIzC,CAAC,GAAGqD,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAG,CAAC,EAAEpB,CAAC,GAAGxD,GAAG,EAAEwD,CAAC,EAAE,EAAE;MAC3C,IAAIyC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIpB,CAAC,IAAIyD,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIgC,MAAM,CAACK,KAAK,CAACrC,CAAC,CAAC;MAC5E,IAAIoB,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;QAC5C,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;UACzF;UACA,OAAO,IAAI;QACf,CAAC,MAAM;UACH,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,EAAE;YACnB;UACJ;QACJ;MACJ,CAAC,MAAM;QACH;MACJ;IACJ;;IAEA;IACA,KAAK,IAAIzC,CAAC,GAAGqD,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAG,CAAC,EAAErB,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1C,IAAIyC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACtC,CAAC,IAAIqC,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIrB,CAAC,CAAC;MAC5E,IAAIyC,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;QAC5C,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;UACzF;UACA,OAAO,IAAI;QACf,CAAC,MAAM;UACH,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,EAAE;YACnB;UACJ;QACJ;MACJ,CAAC,MAAM;QACH;MACJ;IACJ;;IAEA;IACA,KAAK,IAAIzC,CAAC,GAAGqD,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAG,CAAC,EAAErB,CAAC,GAAGxD,GAAG,EAAEwD,CAAC,EAAE,EAAE;MAC3C,IAAIyC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACtC,CAAC,IAAIqC,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIrB,CAAC,CAAC;MAC5E,IAAIyC,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;QAC5C,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;UACzF;UACA,OAAO,IAAI;QACf,CAAC,MAAM;UACH,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,EAAE;YACnB;UACJ;QACJ;MACJ,CAAC,MAAM;QACH;MACJ;IACJ;;IAEA;IACA,KAAK,IAAIzC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxD,GAAG,EAAEwD,CAAC,EAAE,EAAE;MAC1B,IAAIyC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAGpB,CAAC,IAAIyD,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIgC,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAGrB,CAAC,CAAC;MAEjG,IAAIyC,KAAK,EAAE;QACP,IAAIA,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC5C,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;YAC3F;YACA,OAAO,IAAI;UACf,CAAC,MAAM;YACH,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,EAAE;cACnB;YACJ;UACJ;QACJ,CAAC,MAAM;UACH;QACJ;MACJ;IACJ;;IAEA;IACA,KAAK,IAAIzC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxD,GAAG,EAAEwD,CAAC,EAAE,EAAE;MAC1B,IAAIyC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAGpB,CAAC,IAAIyD,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIgC,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAGrB,CAAC,CAAC;MAEjG,IAAIyC,KAAK,EAAE;QACP,IAAIA,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC5C,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;YACxI,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;cAC3C,IAAIU,KAAK,CAACiB,KAAK,CAACtC,CAAC,GAAGiC,MAAM,CAACK,KAAK,CAACtC,CAAC,IAAI,CAAC,IAAIqB,KAAK,CAACiB,KAAK,CAACrC,CAAC,GAAGgC,MAAM,CAACK,KAAK,CAACrC,CAAC,IAAI,CAAC,EAAE;gBAC5E;gBACA,OAAO,IAAI;cACf,CAAC,MAAM;gBACH;cACJ;YACJ,CAAC,MAAM;cACH;cACA,OAAO,IAAI;YACf;UACJ,CAAC,MAAM;YACH,IAAIoB,KAAK,CAACiB,KAAK,CAACjB,KAAK,EAAE;cACnB;YACJ;UACJ;QACJ,CAAC,MAAM;UACH;QACJ;MACJ;IACJ;;IAEA;IACA,KAAK,IAAIzC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxD,GAAG,EAAEwD,CAAC,EAAE,EAAE;MAC1B,IAAIyC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAGpB,CAAC,IAAIyD,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIgC,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAGrB,CAAC,CAAC;MAEjG,IAAIyC,KAAK,EAAE;QACP,IAAIA,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC5C,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;YAC3F;YACA,OAAO,IAAI;UACf,CAAC,MAAM;YACH,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,EAAE;cACnB;YACJ;UACJ;QACJ,CAAC,MAAM;UACH;QACJ;MACJ;IACJ;;IAEA;IACA,KAAK,IAAIzC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxD,GAAG,EAAEwD,CAAC,EAAE,EAAE;MAC1B,IAAIyC,KAAK,GAAGL,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAGpB,CAAC,IAAIyD,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIgC,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAGrB,CAAC,CAAC;MAEjG,IAAIyC,KAAK,EAAE;QACP,IAAIA,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC5C,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;YACxI,IAAIU,KAAK,CAACiB,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE;cAC3C,IAAIU,KAAK,CAACiB,KAAK,CAACtC,CAAC,GAAGiC,MAAM,CAACK,KAAK,CAACtC,CAAC,IAAI,CAAC,IAAIqB,KAAK,CAACiB,KAAK,CAACrC,CAAC,GAAGgC,MAAM,CAACK,KAAK,CAACrC,CAAC,IAAI,CAAC,CAAC,EAAE;gBAC7E;gBACA,OAAO,IAAI;cACf,CAAC,MAAM;gBACH;cACJ;YACJ,CAAC,MAAM;cACH;cACA,OAAO,IAAI;YACf;UACJ,CAAC,MAAM;YACH,IAAIoB,KAAK,CAACiB,KAAK,CAACjB,KAAK,EAAE;cACnB;YACJ;UACJ;QACJ,CAAC,MAAM;UACH;QACJ;MACJ;IACJ;;IAEA;IACA,IAAImB,OAAO,GAAGxB,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAG,CAAC,IAAIqC,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIgC,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAG,CAAC,CAAC;IACnG,IAAIwC,OAAO,GAAGzB,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAG,CAAC,IAAIqC,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIgC,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAG,CAAC,CAAC;IACnG,IAAIyC,OAAO,GAAG1B,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAG,CAAC,IAAIqC,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIgC,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAG,CAAC,CAAC;IACnG,IAAI0C,OAAO,GAAG3B,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAG,CAAC,IAAIqC,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIgC,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAG,CAAC,CAAC;IACnG,IAAI2C,OAAO,GAAG5B,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAG,CAAC,IAAIqC,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIgC,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAG,CAAC,CAAC;IACnG,IAAI4C,OAAO,GAAG7B,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAG,CAAC,IAAIqC,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIgC,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAG,CAAC,CAAC;IACnG,IAAI6C,OAAO,GAAG9B,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAG,CAAC,IAAIqC,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIgC,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAG,CAAC,CAAC;IACnG,IAAI8C,OAAO,GAAG/B,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAG,CAAC,IAAIqC,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAIgC,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAG,CAAC,CAAC;IAEnG,IAAIuC,OAAO,EAAE;MACT,IAAIA,OAAO,CAACF,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAI6B,OAAO,CAACF,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,IAAI8B,OAAO,EAAE;MACT,IAAIA,OAAO,CAACH,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAI8B,OAAO,CAACH,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,IAAI+B,OAAO,EAAE;MACT,IAAIA,OAAO,CAACJ,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAI+B,OAAO,CAACJ,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,IAAIgC,OAAO,EAAE;MACT,IAAIA,OAAO,CAACL,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAIgC,OAAO,CAACL,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,IAAIiC,OAAO,EAAE;MACT,IAAIA,OAAO,CAACN,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAIiC,OAAO,CAACN,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,IAAIkC,OAAO,EAAE;MACT,IAAIA,OAAO,CAACP,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAIkC,OAAO,CAACP,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,IAAImC,OAAO,EAAE;MACT,IAAIA,OAAO,CAACR,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAImC,OAAO,CAACR,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,IAAIoC,OAAO,EAAE;MACT,IAAIA,OAAO,CAACT,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC/C,IAAIoC,OAAO,CAACT,KAAK,CAACjB,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE;UAC9C;UACA,OAAO,IAAI;QACf;MACJ;IACJ;IAEA,OAAO,KAAK;EAChB;;EAEA;EACA;EACA;EACA,SAASY,SAASA,CAACvB,CAAC,EAAEC,CAAC,EAAE;IACrB,IAAIe,OAAO,GAAGlD,YAAY;IAC1B,IAAImF,QAAQ,GAAG9G,aAAa;IAE5B,IAAI+G,YAAY,GAAGC,0BAA0B,CAACnD,CAAC,EAAEC,CAAC,EAAEhC,eAAe,CAACO,OAAO,CAAC;IAC5E,IAAIyD,MAAM,GAAGjB,OAAO,CAACG,IAAI,CAACkB,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACtC,CAAC,IAAIrE,sBAAsB,CAACqE,CAAC,IAAIqC,CAAC,CAACC,KAAK,CAACrC,CAAC,IAAItE,sBAAsB,CAACsE,CAAC,CAAC;IAE9G,IAAIgB,KAAK,GAAGmC,aAAa,CAACnB,MAAM,CAAC;IACjC,IAAIZ,KAAK,GAAGgC,QAAQ,CAACpB,MAAM,CAAC;;IAE5B;IACA,IAAIZ,KAAK,IAAI7F,MAAM,CAAC8H,IAAI,EAAE;MACtB,IAAIC,YAAY,CAACtC,KAAK,CAAC,EAAE;QACrBxF,cAAc,CAACkE,eAAe,GAAG,KAAK;QACtClE,cAAc,CAACiE,gBAAgB,GAAG,KAAK;MAC3C,CAAC,MAAM;QACHjE,cAAc,CAACoE,eAAe,GAAG,KAAK;QACtCpE,cAAc,CAACmE,gBAAgB,GAAG,KAAK;MAC3C;IACJ;;IAEA;IACA,IAAIyB,KAAK,IAAI7F,MAAM,CAACgI,IAAI,EAAE;MACtB,IAAIvB,MAAM,CAACK,KAAK,CAACtC,CAAC,IAAI,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACrC,CAAC,IAAI,CAAC,EAAE;QAC5CxE,cAAc,CAACiE,gBAAgB,GAAG,KAAK;MAC3C;MAEA,IAAIuC,MAAM,CAACK,KAAK,CAACtC,CAAC,IAAI,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACrC,CAAC,IAAI,CAAC,EAAE;QAC5CxE,cAAc,CAACmE,gBAAgB,GAAG,KAAK;MAC3C;MAEA,IAAIqC,MAAM,CAACK,KAAK,CAACtC,CAAC,IAAI,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACrC,CAAC,IAAI,CAAC,EAAE;QAC5CxE,cAAc,CAACkE,eAAe,GAAG,KAAK;MAC1C;MAEA,IAAIsC,MAAM,CAACK,KAAK,CAACtC,CAAC,IAAI,CAAC,IAAIiC,MAAM,CAACK,KAAK,CAACrC,CAAC,IAAI,CAAC,EAAE;QAC5CxE,cAAc,CAACoE,eAAe,GAAG,KAAK;MAC1C;IACJ;IAEA,IAAI4D,CAAC,GAAGC,cAAc,CAACzB,MAAM,EAAEiB,YAAY,EAAED,QAAQ,CAAC;;IAEtD;IACA;IACA;IACA;;IAEA;IACA;;IAEA;IACA;IACA,MAAMU,oBAAoB,GAAGF,CAAC,CAACnF,GAAG,CAACY,GAAG,IAAI,CAAC,GAAGA,GAAG,CAAC,CAAC;IACnD/C,aAAa,CAAC0F,MAAM,CAAC,CAAC,EAAE1F,aAAa,CAAC8C,MAAM,EAAE,GAAG0E,oBAAoB,CAAC;IAEtE/H,aAAa,CAACiG,MAAM,CAAC,CAAC,EAAEjG,aAAa,CAACqD,MAAM,CAAC;IAC7CjD,mBAAmB,CAAC,CAACD,aAAa,CAAC;;IAEnC;IACA,IAAIsF,KAAK,IAAI7F,MAAM,CAACoI,IAAI,EAAE;MACtB,IAAIC,IAAI,CAACC,GAAG,CAAC7B,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAGkD,YAAY,CAACZ,KAAK,CAACtC,CAAC,CAAC,IAAI,CAAC,EAAE;QACtD,IAAIiC,MAAM,CAACK,KAAK,CAACjB,KAAK,CAACV,KAAK,CAACtF,eAAe,CAAC,CAAC,CAAC,CAAC,IAAIE,MAAM,CAACwI,KAAK,EAAE;UAC9DrI,SAAS,CAACoE,UAAU,GAAG,IAAI;UAC3BpE,SAAS,CAACsE,CAAC,GAAGiC,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAG,CAAC;UAChCtE,SAAS,CAACuE,CAAC,GAAGgC,MAAM,CAACK,KAAK,CAACrC,CAAC;QAChC,CAAC,MAAM;UACHvE,SAAS,CAACoE,UAAU,GAAG,IAAI;UAC3BpE,SAAS,CAACsE,CAAC,GAAGiC,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAG,CAAC;UAChCtE,SAAS,CAACuE,CAAC,GAAGgC,MAAM,CAACK,KAAK,CAACrC,CAAC;QAChC;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MACJ,CAAC,MAAM;QACHvE,SAAS,CAACoE,UAAU,GAAG,KAAK;QAC5BpE,SAAS,CAACsE,CAAC,GAAG,CAAC,CAAC;QAChBtE,SAAS,CAACuE,CAAC,GAAG,CAAC,CAAC;MACpB;IACJ,CAAC,MAAM;MACHvE,SAAS,CAACoE,UAAU,GAAG,KAAK;MAC5BpE,SAAS,CAACsE,CAAC,GAAG,CAAC,CAAC;MAChBtE,SAAS,CAACuE,CAAC,GAAG,CAAC,CAAC;IACpB;IAEA/D,eAAe,CAACJ,SAAS,GAAG,CAAC,CAAC;IAE9BiD,eAAe,CAAC,CAAC;EACrB;;EAEA;EACA;EACA,SAASiF,sBAAsBA,CAACC,IAAI,EAAE;IAClC,OAAOV,YAAY,CAACH,aAAa,CAACa,IAAI,CAAC,CAAC,GAAGA,IAAI,CAAC3B,KAAK,CAACtC,CAAC,IAAI5D,0BAA0B,GAAG6H,IAAI,CAAC3B,KAAK,CAACtC,CAAC,IAAI3D,0BAA0B;EACtI;;EAEA;EACA,SAAS6H,uBAAuBA,CAACD,IAAI,EAAE;IACnC,OAAOV,YAAY,CAACH,aAAa,CAACa,IAAI,CAAC,CAAC,GAAGA,IAAI,CAAC3B,KAAK,CAACtC,CAAC,IAAIzD,uBAAuB,GAAG0H,IAAI,CAAC3B,KAAK,CAACtC,CAAC,IAAI1D,uBAAuB;EAChI;;EAEA;EACA;EACA,SAAS6H,yBAAyBA,CAAA,EAAG;IACjC,OAAO1I,cAAc,CAACkE,eAAe,IACjCxD,aAAa,CAACQ,gBAAgB,CAAC,CAACG,4BAA4B,CAAC,IAAIN,gBAAgB,CAACgH,IAAI,IACtFxG,qBAAqB,CAACoH,KAAK,CAACC,GAAG,IAAIlI,aAAa,CAACQ,gBAAgB,CAAC,CAAC0H,GAAG,CAAC,IAAI3H,kBAAkB,CAAC;EACtG;;EAEA;EACA;EACA,SAAS4H,0BAA0BA,CAAA,EAAG;IAClC,OAAO7I,cAAc,CAACiE,gBAAgB,IAClCvD,aAAa,CAACQ,gBAAgB,CAAC,CAACI,6BAA6B,CAAC,IAAIP,gBAAgB,CAACgH,IAAI,IACvFvG,sBAAsB,CAACmH,KAAK,CAACC,GAAG,IAAIlI,aAAa,CAACQ,gBAAgB,CAAC,CAAC0H,GAAG,CAAC,IAAI3H,kBAAkB,CAAC;EACvG;;EAEA;EACA;EACA,SAAS6H,yBAAyBA,CAAA,EAAG;IACjC,OAAO9I,cAAc,CAACoE,eAAe,IACjC1D,aAAa,CAACS,gBAAgB,CAAC,CAACE,4BAA4B,CAAC,IAAIL,gBAAgB,CAAC+G,IAAI,IACtFxG,qBAAqB,CAACoH,KAAK,CAACC,GAAG,IAAIlI,aAAa,CAACS,gBAAgB,CAAC,CAACyH,GAAG,CAAC,IAAI3H,kBAAkB,CAAC;EACtG;;EAEA;EACA;EACA,SAAS8H,0BAA0BA,CAAA,EAAG;IAClC,OAAO/I,cAAc,CAACmE,gBAAgB,IAClCzD,aAAa,CAACS,gBAAgB,CAAC,CAACG,6BAA6B,CAAC,IAAIN,gBAAgB,CAAC+G,IAAI,IACvFvG,sBAAsB,CAACmH,KAAK,CAACC,GAAG,IAAIlI,aAAa,CAACS,gBAAgB,CAAC,CAACyH,GAAG,CAAC,IAAI3H,kBAAkB,CAAC;EACvG;;EAEA;EACA,SAAS+H,6BAA6BA,CAACC,OAAO,EAAEC,OAAO,EAAE;IACrD,IAAI,CAACD,OAAO,IAAI,CAACC,OAAO,EAAE;MACtB,OAAO,KAAK;IAChB;IAEA,OAAOD,OAAO,CAACpC,KAAK,CAACtC,CAAC,IAAI2E,OAAO,CAACrC,KAAK,CAACtC,CAAC,IAAI0E,OAAO,CAACpC,KAAK,CAACrC,CAAC,IAAI0E,OAAO,CAACrC,KAAK,CAACrC,CAAC;EACnF;;EAEA;EACA;EACA,SAAS2E,qBAAqBA,CAAC3C,MAAM,EAAE;IACnC,IAAI,CAAC4C,wBAAwB,CAAC5C,MAAM,EAAEzG,MAAM,CAACoI,IAAI,CAAC,EAAE;MAChD;IACJ;IAEA,IAAI3C,KAAK,GAAGmC,aAAa,CAACnB,MAAM,CAAC,EAAC;;IAElC,IAAI6C,KAAK,GAAG,EAAE;IAEd,IAAIC,eAAe,GAAG,CAAC;IACvB,IAAIC,eAAe,GAAG,CAAC;;IAEvB;IACA,IAAIzB,YAAY,CAACtC,KAAK,CAAC,EAAE;MACrB8D,eAAe,IAAI,CAAC,CAAC;MACrBC,eAAe,IAAI,CAAC,CAAC;IACzB;;IAEA;IACA,IAAIC,YAAY,GAAG9B,0BAA0B,CAAClB,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAG+E,eAAe,EAAE9C,MAAM,CAACK,KAAK,CAACrC,CAAC,EAAEhC,eAAe,CAACO,OAAO,CAAC,EAAC;IACzH,IAAI0G,YAAY,GAAG/B,0BAA0B,CAAClB,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAGgF,eAAe,EAAE/C,MAAM,CAACK,KAAK,CAACrC,CAAC,EAAEhC,eAAe,CAACO,OAAO,CAAC,EAAC;;IAEzH;IACA,IAAI2G,SAAS,GAAGhC,0BAA0B,CAAClB,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAG+E,eAAe,EAAE9C,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAG8E,eAAe,EAAE9G,eAAe,CAACO,OAAO,CAAC;IACvI,IAAI4G,SAAS,GAAGjC,0BAA0B,CAAClB,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAG+E,eAAe,EAAE9C,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAI8E,eAAe,GAAG,CAAC,CAAE,EAAE9G,eAAe,CAACO,OAAO,CAAC;;IAE9I;IACA,IAAI6G,eAAe,GAAG3J,SAAS,CAACoE,UAAU,GAAGqD,0BAA0B,CAACzH,SAAS,CAACsE,CAAC,EAAEtE,SAAS,CAACuE,CAAC,EAAEhC,eAAe,CAACO,OAAO,CAAC,GAAG,EAAE;IAE/H,IAAI8G,2BAA2B,GAAGC,iBAAiB,CAACN,YAAY,CAAC;;IAEjE;IACA,IAAIK,2BAA2B,EAAE;MAC7BR,KAAK,CAAChG,IAAI,CAACmG,YAAY,CAAC;IAC5B;;IAEA;IACA;IACA,IAAIK,2BAA2B,IAAIC,iBAAiB,CAACL,YAAY,CAAC,IAAIlB,sBAAsB,CAAC/B,MAAM,CAAC,EAAE;MAClG6C,KAAK,CAAChG,IAAI,CAACoG,YAAY,CAAC;IAC5B;;IAEA;IACA,IAAI,CAACK,iBAAiB,CAACJ,SAAS,CAAC,IAAI,CAACK,YAAY,CAACL,SAAS,EAAElD,MAAM,CAAC,EAAE;MACnE6C,KAAK,CAAChG,IAAI,CAACqG,SAAS,CAAC;IACzB;;IAEA;IACA,IAAI,CAACI,iBAAiB,CAACH,SAAS,CAAC,IAAI,CAACI,YAAY,CAACJ,SAAS,EAAEnD,MAAM,CAAC,EAAE;MACnE6C,KAAK,CAAChG,IAAI,CAACsG,SAAS,CAAC;IACzB;;IAEA;IACA,IAAIC,eAAe,KAAKZ,6BAA6B,CAACY,eAAe,EAAEF,SAAS,CAAC,IAAIV,6BAA6B,CAACY,eAAe,EAAED,SAAS,CAAC,CAAC,EAAE;MAC7IN,KAAK,CAAChG,IAAI,CAACuG,eAAe,CAAC;IAC/B;IAEA,OAAO;MAAEhE,KAAK,EAAEY,MAAM;MAAE6C,KAAK,EAAEA;IAAM,CAAC;EAC1C;;EAEA;EACA;EACA,SAASW,qBAAqBA,CAACxD,MAAM,EAAEyD,IAAI,GAAG,IAAI,EAAE;IAChD,IAAI,CAACb,wBAAwB,CAAC5C,MAAM,EAAEzG,MAAM,CAACgI,IAAI,CAAC,IAAIkC,IAAI,EAAE;MACxD;IACJ;IAEA,IAAIZ,KAAK,GAAG,EAAE;IAEd,KAAK,IAAIlG,CAAC,GAAGqD,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAG,CAAC,EAAEpB,CAAC,GAAGxD,GAAG,EAAEwD,CAAC,EAAE,EAAE;MAC3C,IAAIsE,YAAY,GAAGC,0BAA0B,CAACvE,CAAC,EAAEqD,MAAM,CAACK,KAAK,CAACrC,CAAC,EAAEhC,eAAe,CAACO,OAAO,CAAC;MAEzF,IAAI+G,iBAAiB,CAACrC,YAAY,CAAC,EAAE;QACjC4B,KAAK,CAAChG,IAAI,CAACoE,YAAY,CAAC;MAC5B,CAAC,MAAM;QACH,IAAI,CAACsC,YAAY,CAACvD,MAAM,EAAEiB,YAAY,CAAC,EAAE;UACrC4B,KAAK,CAAChG,IAAI,CAACoE,YAAY,CAAC;QAC5B;QACA;MACJ;IACJ;IAEA,KAAK,IAAItE,CAAC,GAAGqD,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAG,CAAC,EAAEpB,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1C,IAAIsE,YAAY,GAAGC,0BAA0B,CAACvE,CAAC,EAAEqD,MAAM,CAACK,KAAK,CAACrC,CAAC,EAAEhC,eAAe,CAACO,OAAO,CAAC;MAEzF,IAAI+G,iBAAiB,CAACrC,YAAY,CAAC,EAAE;QACjC4B,KAAK,CAAChG,IAAI,CAACoE,YAAY,CAAC;MAC5B,CAAC,MAAM;QACH,IAAI,CAACsC,YAAY,CAACvD,MAAM,EAAEiB,YAAY,CAAC,EAAE;UACrC4B,KAAK,CAAChG,IAAI,CAACoE,YAAY,CAAC;QAC5B;QACA;MACJ;IACJ;IAEA,KAAK,IAAItE,CAAC,GAAGqD,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAG,CAAC,EAAErB,CAAC,GAAGxD,GAAG,EAAEwD,CAAC,EAAE,EAAE;MAC3C,IAAIsE,YAAY,GAAGC,0BAA0B,CAAClB,MAAM,CAACK,KAAK,CAACtC,CAAC,EAAEpB,CAAC,EAAEX,eAAe,CAACO,OAAO,CAAC;MAEzF,IAAI+G,iBAAiB,CAACrC,YAAY,CAAC,EAAE;QACjC4B,KAAK,CAAChG,IAAI,CAACoE,YAAY,CAAC;MAC5B,CAAC,MAAM;QACH,IAAI,CAACsC,YAAY,CAACvD,MAAM,EAAEiB,YAAY,CAAC,EAAE;UACrC4B,KAAK,CAAChG,IAAI,CAACoE,YAAY,CAAC;QAC5B;QACA;MACJ;IACJ;IAEA,KAAK,IAAItE,CAAC,GAAGqD,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAG,CAAC,EAAErB,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1C,IAAIsE,YAAY,GAAGC,0BAA0B,CAAClB,MAAM,CAACK,KAAK,CAACtC,CAAC,EAAEpB,CAAC,EAAEX,eAAe,CAACO,OAAO,CAAC;MAEzF,IAAI+G,iBAAiB,CAACrC,YAAY,CAAC,EAAE;QACjC4B,KAAK,CAAChG,IAAI,CAACoE,YAAY,CAAC;MAC5B,CAAC,MAAM;QACH,IAAI,CAACsC,YAAY,CAACvD,MAAM,EAAEiB,YAAY,CAAC,EAAE;UACrC4B,KAAK,CAAChG,IAAI,CAACoE,YAAY,CAAC;QAC5B;QACA;MACJ;IACJ;IAEA,OAAO;MAAE7B,KAAK,EAAEY,MAAM;MAAE6C,KAAK,EAAEA;IAAM,CAAC;EAC1C;;EAEA;EACA;EACA,SAASa,sBAAsBA,CAAC1D,MAAM,EAAEyD,IAAI,GAAG,IAAI,EAAE;IACjD,IAAI,CAACb,wBAAwB,CAAC5C,MAAM,EAAEzG,MAAM,CAACoK,MAAM,CAAC,IAAIF,IAAI,EAAE;MAC1D;IACJ;IAEA,IAAIZ,KAAK,GAAG,EAAE;IAEd,IAAIe,OAAO,GAAG,CAAC;IAEf,IAAIC,QAAQ,GAAG,IAAI;IACnB,IAAIC,QAAQ,GAAG,IAAI;IACnB,IAAIC,QAAQ,GAAG,IAAI;IACnB,IAAIC,QAAQ,GAAG,IAAI;IAEnB,KAAK,IAAIrH,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIxD,GAAG,EAAEwD,CAAC,EAAE,EAAE;MAC3B,IAAI,CAACkH,QAAQ,IAAI,CAACC,QAAQ,IAAI,CAACC,QAAQ,IAAI,CAACC,QAAQ,EAAE;QAClD;MACJ;MAEA,IAAIC,OAAO,GAAGJ,QAAQ,GAAG3C,0BAA0B,CAAClB,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAGpB,CAAC,EAAEqD,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAGrB,CAAC,EAAEX,eAAe,CAACO,OAAO,CAAC,GAAG,IAAI;MAC3H,IAAI2H,OAAO,GAAGJ,QAAQ,GAAG5C,0BAA0B,CAAClB,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAGpB,CAAC,EAAEqD,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAGrB,CAAC,EAAEX,eAAe,CAACO,OAAO,CAAC,GAAG,IAAI;MAC3H,IAAI4H,OAAO,GAAGJ,QAAQ,GAAG7C,0BAA0B,CAAClB,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAGpB,CAAC,EAAEqD,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAGrB,CAAC,EAAEX,eAAe,CAACO,OAAO,CAAC,GAAG,IAAI;MAC3H,IAAI6H,OAAO,GAAGJ,QAAQ,GAAG9C,0BAA0B,CAAClB,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAGpB,CAAC,EAAEqD,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAGrB,CAAC,EAAEX,eAAe,CAACO,OAAO,CAAC,GAAG,IAAI;MAE3H,IAAI0H,OAAO,IAAIX,iBAAiB,CAACW,OAAO,CAAC,EAAE;QACvCpB,KAAK,CAAChG,IAAI,CAACoH,OAAO,CAAC;MACvB,CAAC,MAAM;QACH,IAAI,CAACV,YAAY,CAACvD,MAAM,EAAEiE,OAAO,CAAC,EAAE;UAChCpB,KAAK,CAAChG,IAAI,CAACoH,OAAO,CAAC;QACvB;QACAJ,QAAQ,GAAG,KAAK;MACpB;MAEA,IAAIK,OAAO,IAAIZ,iBAAiB,CAACY,OAAO,CAAC,EAAE;QACvCrB,KAAK,CAAChG,IAAI,CAACqH,OAAO,CAAC;MACvB,CAAC,MAAM;QACH,IAAI,CAACX,YAAY,CAACvD,MAAM,EAAEkE,OAAO,CAAC,EAAE;UAChCrB,KAAK,CAAChG,IAAI,CAACqH,OAAO,CAAC;QACvB;QACAJ,QAAQ,GAAG,KAAK;MACpB;MAEA,IAAIK,OAAO,IAAIb,iBAAiB,CAACa,OAAO,CAAC,EAAE;QACvCtB,KAAK,CAAChG,IAAI,CAACsH,OAAO,CAAC;MACvB,CAAC,MAAM;QACH,IAAI,CAACZ,YAAY,CAACvD,MAAM,EAAEmE,OAAO,CAAC,EAAE;UAChCtB,KAAK,CAAChG,IAAI,CAACsH,OAAO,CAAC;QACvB;QACAJ,QAAQ,GAAG,KAAK;MACpB;MAEA,IAAIK,OAAO,IAAId,iBAAiB,CAACc,OAAO,CAAC,EAAE;QACvCvB,KAAK,CAAChG,IAAI,CAACuH,OAAO,CAAC;MACvB,CAAC,MAAM;QACH,IAAI,CAACb,YAAY,CAACvD,MAAM,EAAEoE,OAAO,CAAC,EAAE;UAChCvB,KAAK,CAAChG,IAAI,CAACuH,OAAO,CAAC;QACvB;QACAJ,QAAQ,GAAG,KAAK;MACpB;IACJ;IAEA,OAAO;MAAE5E,KAAK,EAAEY,MAAM;MAAE6C,KAAK,EAAEA;IAAM,CAAC;EAC1C;;EAEA;EACA;EACA,SAASwB,sBAAsBA,CAACrE,MAAM,EAAE;IACpC,IAAI,CAAC4C,wBAAwB,CAAC5C,MAAM,EAAEzG,MAAM,CAAC+K,MAAM,CAAC,EAAE;MAClD;IACJ;IAEA,IAAIC,MAAM,GAAG,CAAC;IACd,IAAIC,YAAY,GAAG,CAAC,GAAGD,MAAM;IAE7B,IAAI1B,KAAK,GAAG,EAAE;IAEd,KAAK,IAAIlG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACxB,IAAIA,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;QACtB4H,MAAM,IAAI,CAAC,CAAC;MAChB;MAEA,IAAIE,OAAO,GAAGzE,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAGwG,MAAM;MACrC,IAAIG,OAAO,GAAG1E,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAGwG,YAAY;MAE3C,IAAIG,MAAM,GAAGzD,0BAA0B,CAACuD,OAAO,EAAEC,OAAO,EAAE1I,eAAe,CAACO,OAAO,CAAC;MAElF,IAAIoI,MAAM,IAAIrB,iBAAiB,CAACqB,MAAM,CAAC,EAAE;QACrC9B,KAAK,CAAChG,IAAI,CAAC8H,MAAM,CAAC;MACtB,CAAC,MAAM;QACH,IAAI,CAACpB,YAAY,CAACvD,MAAM,EAAE2E,MAAM,CAAC,EAAE;UAC/B9B,KAAK,CAAChG,IAAI,CAAC8H,MAAM,CAAC;QACtB;MACJ;MAEAH,YAAY,IAAI,CAAC,CAAC;MAElB,IAAI7H,CAAC,IAAI,CAAC,EAAE;QACR4H,MAAM,IAAI,CAAC;QACXC,YAAY,IAAI,CAAC;MACrB;IACJ;IAEA,OAAO;MAAEpF,KAAK,EAAEY,MAAM;MAAE6C,KAAK,EAAEA;IAAM,CAAC;EAC1C;;EAEA;EACA;EACA,SAAS+B,oBAAoBA,CAAC5E,MAAM,EAAE;IAClC,IAAI,CAAC4C,wBAAwB,CAAC5C,MAAM,EAAEzG,MAAM,CAAC8H,IAAI,CAAC,EAAE;MAChD;IACJ;IAEA,IAAIwB,KAAK,GAAG,EAAE;IAEd,IAAI7D,KAAK,GAAGmC,aAAa,CAACnB,MAAM,CAAC;;IAEjC;IACA,KAAK,IAAIrD,CAAC,GAAG,CAAC,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACzB,KAAK,IAAIC,CAAC,GAAG,CAAC,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QACzB,IAAIiI,WAAW,GAAG3D,0BAA0B,CAAClB,MAAM,CAACK,KAAK,CAACtC,CAAC,GAAGpB,CAAC,EAAEqD,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAGpB,CAAC,EAAEZ,eAAe,CAACO,OAAO,CAAC;QAE7G,IAAIsI,WAAW,IAAIvB,iBAAiB,CAACuB,WAAW,CAAC,EAAE;UAC/ChC,KAAK,CAAChG,IAAI,CAACgI,WAAW,CAAC;QAC3B,CAAC,MAAM;UACH,IAAI,CAACtB,YAAY,CAACvD,MAAM,EAAE6E,WAAW,CAAC,EAAE;YACpChC,KAAK,CAAChG,IAAI,CAACgI,WAAW,CAAC;UAC3B;QACJ;MACJ;IACJ;;IAEA;IACA,MAAMC,gBAAgB,GAAG5D,0BAA0B,CAAClB,MAAM,CAACK,KAAK,CAACtC,CAAC,EAAEiC,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAG,CAAC,EAAEhC,eAAe,CAACO,OAAO,CAAC;IAChH,MAAMwI,iBAAiB,GAAG7D,0BAA0B,CAAClB,MAAM,CAACK,KAAK,CAACtC,CAAC,EAAEiC,MAAM,CAACK,KAAK,CAACrC,CAAC,GAAG,CAAC,EAAEhC,eAAe,CAACO,OAAO,CAAC;IAEjH,IAAI+E,YAAY,CAACtC,KAAK,CAAC,IAAIkD,yBAAyB,CAAC,CAAC,EAAE;MACpDW,KAAK,CAAChG,IAAI,CAACiI,gBAAgB,CAAC;IAChC;IAEA,IAAIxD,YAAY,CAACtC,KAAK,CAAC,IAAIqD,0BAA0B,CAAC,CAAC,EAAE;MACrDQ,KAAK,CAAChG,IAAI,CAACkI,iBAAiB,CAAC;IACjC;IAEA,IAAIC,YAAY,CAAChG,KAAK,CAAC,IAAIsD,yBAAyB,CAAC,CAAC,EAAE;MACpDO,KAAK,CAAChG,IAAI,CAACiI,gBAAgB,CAAC;IAChC;IAEA,IAAIE,YAAY,CAAChG,KAAK,CAAC,IAAIuD,0BAA0B,CAAC,CAAC,EAAE;MACrDM,KAAK,CAAChG,IAAI,CAACkI,iBAAiB,CAAC;IACjC;IAEA,OAAO;MAAE3F,KAAK,EAAEY,MAAM;MAAE6C,KAAK,EAAEA;IAAM,CAAC;EAC1C;;EAEA;EACA;EACA,SAASoC,qBAAqBA,CAACjF,MAAM,EAAE;IACnC,IAAI,CAAC4C,wBAAwB,CAAC5C,MAAM,EAAEzG,MAAM,CAAC2L,KAAK,CAAC,EAAE;MACjD;IACJ;IAEA,IAAIrC,KAAK,GAAG,EAAE;;IAEd;IACA,MAAMsC,SAAS,GAAG3B,qBAAqB,CAACxD,MAAM,EAAE,KAAK,CAAC,CAAC6C,KAAK;IAC5D,MAAMuC,WAAW,GAAG1B,sBAAsB,CAAC1D,MAAM,EAAE,KAAK,CAAC,CAAC6C,KAAK;;IAE/D;IACAA,KAAK,CAAChG,IAAI,CAAC,GAAGsI,SAAS,EAAE,GAAGC,WAAW,CAAC;IAExC,OAAO;MAAEhG,KAAK,EAAEY,MAAM;MAAE6C,KAAK,EAAEA;IAAM,CAAC;EAC1C;;EAEA;EACA;EACA,SAASwC,oBAAoBA,CAACC,aAAa,EAAE;IACzC,IAAIC,SAAS,GAAGC,uBAAuB,CAACnM,KAAK,CAACoM,UAAU,EAAEzJ,eAAe,CAACO,OAAO,CAAC,EAAC;IACnF,IAAImJ,SAAS,GAAGF,uBAAuB,CAACnM,KAAK,CAACsM,UAAU,EAAE3J,eAAe,CAACO,OAAO,CAAC,EAAC;;IAEnF,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2I,aAAa,CAACtI,MAAM,EAAEL,CAAC,EAAE,EAAE;MAC3C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0I,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAAC7F,MAAM,EAAEJ,CAAC,EAAE,EAAE;QACpD,IAAI0I,aAAa,CAAC3I,CAAC,CAAC,CAACyC,KAAK,CAACiB,KAAK,CAACjB,KAAK,IAAI/F,KAAK,CAACoM,UAAU,EAAE;UACxD,IAAIG,IAAI,gBAAGxK,OAAA,CAACnC,MAAM;YAAC8E,CAAC,EAAEuH,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAACjG,CAAC,CAAC,CAACyD,KAAK,CAACtC,CAAE;YAACC,CAAC,EAAEsH,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAACjG,CAAC,CAAC,CAACyD,KAAK,CAACrC,CAAE;YAACoB,KAAK,EAAE;UAAa;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;UACtH,IAAIO,MAAM,gBAAG7E,OAAA,CAACnC,MAAM;YAAC8E,CAAC,EAAEwH,SAAS,CAAClF,KAAK,CAACtC,CAAE;YAACC,CAAC,EAAEuH,SAAS,CAAClF,KAAK,CAACrC,CAAE;YAACoB,KAAK,EAAE;UAAG;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;UAC9E,IAAImG,SAAS,GAAG9E,cAAc,CAAC6E,IAAI,EAAE3F,MAAM,CAAC;UAE5C,IAAI4F,SAAS,EAAE;YACXP,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAACjD,MAAM,CAAChD,CAAC,EAAE,CAAC,CAAC;YACnCA,CAAC,EAAE;UACP;QACJ,CAAC,MAAM,IAAI0I,aAAa,CAAC3I,CAAC,CAAC,CAACyC,KAAK,CAACiB,KAAK,CAACjB,KAAK,IAAI/F,KAAK,CAACsM,UAAU,EAAE;UAC/D,IAAIC,IAAI,gBAAGxK,OAAA,CAACnC,MAAM;YAAC8E,CAAC,EAAEuH,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAACjG,CAAC,CAAC,CAACyD,KAAK,CAACtC,CAAE;YAACC,CAAC,EAAEsH,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAACjG,CAAC,CAAC,CAACyD,KAAK,CAACrC,CAAE;YAACoB,KAAK,EAAE;UAAa;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;UACtH,IAAIO,MAAM,gBAAG7E,OAAA,CAACnC,MAAM;YAAC8E,CAAC,EAAE2H,SAAS,CAACrF,KAAK,CAACtC,CAAE;YAACC,CAAC,EAAE0H,SAAS,CAACrF,KAAK,CAACrC,CAAE;YAACoB,KAAK,EAAE;UAAG;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;UAC9E,IAAImG,SAAS,GAAG9F,cAAc,CAAC6F,IAAI,EAAE3F,MAAM,CAAC;UAE5C,IAAI4F,SAAS,EAAE;YACXP,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAACjD,MAAM,CAAChD,CAAC,EAAE,CAAC,CAAC;YACnCA,CAAC,EAAE;UACP;QACJ,CAAC,MAAM;UACH,IAAIgJ,IAAI,gBAAGxK,OAAA,CAACnC,MAAM;YAAC8E,CAAC,EAAEuH,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAACjG,CAAC,CAAC,CAACyD,KAAK,CAACtC,CAAE;YAACC,CAAC,EAAEsH,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAACjG,CAAC,CAAC,CAACyD,KAAK,CAACrC,CAAE;YAACoB,KAAK,EAAEkG,aAAa,CAAC3I,CAAC,CAAC,CAACyC,KAAK,CAACiB,KAAK,CAACjB;UAAM;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;UAC5I,IAAIoG,kBAAkB,GAAG/E,cAAc,CAACwE,SAAS,EAAEK,IAAI,EAAEN,aAAa,CAAC3I,CAAC,CAAC,CAACyC,KAAK,CAAC;UAChF,IAAI2G,kBAAkB,GAAGhG,cAAc,CAAC2F,SAAS,EAAEE,IAAI,EAAEN,aAAa,CAAC3I,CAAC,CAAC,CAACyC,KAAK,CAAC;UAEhF,IAAI0G,kBAAkB,IAAI,CAAChM,aAAa,EAAE;YACtCwL,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAACjD,MAAM,CAAChD,CAAC,EAAE,CAAC,CAAC;YACnCA,CAAC,EAAE;UACP;UAEA,IAAImJ,kBAAkB,IAAIjM,aAAa,EAAE;YACrCwL,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAACjD,MAAM,CAAChD,CAAC,EAAE,CAAC,CAAC;YACnCA,CAAC,EAAE;UACP;QACJ;MACJ;IACJ;IAEA,OAAO0I,aAAa;EACxB;;EAEA;EACA;EACA,SAASU,mCAAmCA,CAACV,aAAa,EAAE;IACxD,IAAIC,SAAS,GAAGC,uBAAuB,CAACnM,KAAK,CAACoM,UAAU,EAAEzJ,eAAe,CAACO,OAAO,CAAC,EAAC;IACnF,IAAImJ,SAAS,GAAGF,uBAAuB,CAACnM,KAAK,CAACsM,UAAU,EAAE3J,eAAe,CAACO,OAAO,CAAC,EAAC;;IAEnF,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2I,aAAa,CAACtI,MAAM,EAAEL,CAAC,EAAE,EAAE;MAC3C,IAAIsJ,YAAY,GAAGX,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAAC3D,IAAI,CAACgH,CAAC,IAAIA,CAAC,CAAC7F,KAAK,CAACtC,CAAC,IAAI,CAAC,IAAImI,CAAC,CAAC7F,KAAK,CAACrC,CAAC,IAAI,CAAC,CAAC,EAAC;MACtF,IAAImI,YAAY,GAAGb,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAAC3D,IAAI,CAACgH,CAAC,IAAIA,CAAC,CAAC7F,KAAK,CAACtC,CAAC,IAAI,CAAC,IAAImI,CAAC,CAAC7F,KAAK,CAACrC,CAAC,IAAI,CAAC,CAAC,EAAC;MACtF,IAAIoI,YAAY,GAAGd,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAAC3D,IAAI,CAACgH,CAAC,IAAIA,CAAC,CAAC7F,KAAK,CAACtC,CAAC,IAAI,CAAC,IAAImI,CAAC,CAAC7F,KAAK,CAACrC,CAAC,IAAI,CAAC,CAAC,EAAC;MACtF,IAAIqI,YAAY,GAAGf,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAAC3D,IAAI,CAACgH,CAAC,IAAIA,CAAC,CAAC7F,KAAK,CAACtC,CAAC,IAAI,CAAC,IAAImI,CAAC,CAAC7F,KAAK,CAACrC,CAAC,IAAI,CAAC,CAAC,EAAC;;MAEtF,IAAIsH,aAAa,CAAC3I,CAAC,CAAC,CAACyC,KAAK,IAAImG,SAAS,IAAID,aAAa,CAAC3I,CAAC,CAAC,CAACyC,KAAK,IAAIsG,SAAS,EAAE;QAC5E,IAAIO,YAAY,EAAE;UACd,IAAIK,WAAW,GAAGhB,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAAC3D,IAAI,CAACgH,CAAC,IAAIA,CAAC,CAAC7F,KAAK,CAACtC,CAAC,IAAI,CAAC,IAAImI,CAAC,CAAC7F,KAAK,CAACrC,CAAC,IAAI,CAAC,CAAC;UACpF,IAAI,CAACsI,WAAW,EAAE;YACdhB,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAACjD,MAAM,CAAC0F,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAAC0D,OAAO,CAACD,WAAW,CAAC,EAAE,CAAC,CAAC;UACjF;QACJ;QAEA,IAAIH,YAAY,EAAE;UACd,IAAIG,WAAW,GAAGhB,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAAC3D,IAAI,CAACgH,CAAC,IAAIA,CAAC,CAAC7F,KAAK,CAACtC,CAAC,IAAI,CAAC,IAAImI,CAAC,CAAC7F,KAAK,CAACrC,CAAC,IAAI,CAAC,CAAC;UACpF,IAAI,CAACsI,WAAW,EAAE;YACdhB,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAACjD,MAAM,CAAC0F,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAAC0D,OAAO,CAACD,WAAW,CAAC,EAAE,CAAC,CAAC;UACjF;QACJ;QAEA,IAAIF,YAAY,EAAE;UACd,IAAIE,WAAW,GAAGhB,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAAC3D,IAAI,CAACgH,CAAC,IAAIA,CAAC,CAAC7F,KAAK,CAACtC,CAAC,IAAI,CAAC,IAAImI,CAAC,CAAC7F,KAAK,CAACrC,CAAC,IAAI,CAAC,CAAC;UACpF,IAAI,CAACsI,WAAW,EAAE;YACdhB,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAACjD,MAAM,CAAC0F,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAAC0D,OAAO,CAACD,WAAW,CAAC,EAAE,CAAC,CAAC;UACjF;QACJ;QAEA,IAAID,YAAY,EAAE;UACd,IAAIC,WAAW,GAAGhB,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAAC3D,IAAI,CAACgH,CAAC,IAAIA,CAAC,CAAC7F,KAAK,CAACtC,CAAC,IAAI,CAAC,IAAImI,CAAC,CAAC7F,KAAK,CAACrC,CAAC,IAAI,CAAC,CAAC;UACpF,IAAI,CAACsI,WAAW,EAAE;YACdhB,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAACjD,MAAM,CAAC0F,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAAC0D,OAAO,CAACD,WAAW,CAAC,EAAE,CAAC,CAAC;UACjF;QACJ;MACJ;;MAEA;MACA,IAAIvF,cAAc,CAACwE,SAAS,CAAC,EAAE;QAC3B,IAAIa,YAAY,EAAE;UACdd,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAACjD,MAAM,CAAC0F,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAAC0D,OAAO,CAACH,YAAY,CAAC,EAAE,CAAC,CAAC;QAClF;QAEA,IAAIC,YAAY,EAAE;UACdf,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAACjD,MAAM,CAAC0F,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAAC0D,OAAO,CAACF,YAAY,CAAC,EAAE,CAAC,CAAC;QAClF;MACJ;;MAEA;MACA,IAAItG,cAAc,CAAC2F,SAAS,CAAC,EAAE;QAC3B,IAAIO,YAAY,EAAE;UACdX,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAACjD,MAAM,CAAC0F,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAAC0D,OAAO,CAACN,YAAY,CAAC,EAAE,CAAC,CAAC;QAClF;QAEA,IAAIE,YAAY,EAAE;UACdb,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAACjD,MAAM,CAAC0F,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAAC0D,OAAO,CAACJ,YAAY,CAAC,EAAE,CAAC,CAAC;QAClF;MACJ;IACJ;IAEA,OAAOb,aAAa;EACxB;;EAEA;EACA,SAASkB,gBAAgBA,CAAClB,aAAa,EAAE;IACrC,KAAK,IAAI3I,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2I,aAAa,CAACtI,MAAM,EAAEL,CAAC,EAAE,EAAE;MAC3C;MACA,IAAI,CAAC2I,aAAa,CAAC3I,CAAC,CAAC,EAAE;QACnB2I,aAAa,CAAC1F,MAAM,CAACjD,CAAC,EAAE,CAAC,CAAC;QAC1BA,CAAC,EAAE;QACH;MACJ;;MAEA;MACA,IAAI2I,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAAC7F,MAAM,IAAI,CAAC,EAAE;QACpCsI,aAAa,CAAC1F,MAAM,CAACjD,CAAC,EAAE,CAAC,CAAC;QAC1BA,CAAC,EAAE;QACH;MACJ;;MAEA;MACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0I,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAAC7F,MAAM,EAAEJ,CAAC,EAAE,EAAE;QACpD,IAAI,CAAC0I,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAACjG,CAAC,CAAC,EAAE;UAC5B0I,aAAa,CAAC3I,CAAC,CAAC,CAACkG,KAAK,CAACjD,MAAM,CAAChD,CAAC,EAAE,CAAC,CAAC;UACnCA,CAAC,EAAE;QACP;MACJ;IACJ;IAEA,OAAO0I,aAAa;EACxB;;EAEA;EACA,SAASmB,6CAA6CA,CAACb,IAAI,EAAE;IACzD,OAAOA,IAAI,CAACvF,KAAK,CAACtC,CAAC,IAAIrE,sBAAsB,CAACqE,CAAC,IAAI6H,IAAI,CAACvF,KAAK,CAACrC,CAAC,IAAItE,sBAAsB,CAACsE,CAAC;EAC/F;;EAEA;EACA,SAAS0I,2BAA2BA,CAAA,EAAG;IACnC,KAAK,IAAI/J,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhD,aAAa,CAACqD,MAAM,EAAEL,CAAC,EAAE,EAAE;MAC3C,IAAI8J,6CAA6C,CAAC9M,aAAa,CAACgD,CAAC,CAAC,CAACyC,KAAK,CAAC,EAAE;QACvE,KAAK,IAAIxC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjD,aAAa,CAACgD,CAAC,CAAC,CAACkG,KAAK,CAAC7F,MAAM,EAAEJ,CAAC,EAAE,EAAE;UACpDX,oBAAoB,CAAE,GAAEtC,aAAa,CAACgD,CAAC,CAAC,CAACkG,KAAK,CAACjG,CAAC,CAAC,CAACyD,KAAK,CAACtC,CAAE,IAAGpE,aAAa,CAACgD,CAAC,CAAC,CAACkG,KAAK,CAACjG,CAAC,CAAC,CAACyD,KAAK,CAACrC,CAAE,EAAC,EAAE,IAAI,CAAC;QAC3G;MACJ;IACJ;EACJ;;EAEA;EACA;EACA,SAASmB,gBAAgBA,CAAA,EAAG;IACxB;IACA,IAAIwH,kBAAkB,GAAG,EAAE;IAC3B,IAAI5H,OAAO,GAAGlD,YAAY;IAE1B,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoC,OAAO,CAAC/B,MAAM,EAAEL,CAAC,EAAE,EAAE;MACrC,IAAIqD,MAAM,GAAGjB,OAAO,CAACpC,CAAC,CAAC;;MAEvB;MACA,IAAIqD,MAAM,CAACK,KAAK,CAACjB,KAAK,EAAE;QACpB,IAAIJ,KAAK,GAAGmC,aAAa,CAACnB,MAAM,CAAC,CAAC,CAAC;;QAEnC;QACA,IAAIsB,YAAY,CAACtC,KAAK,CAAC,IAAI,CAAClF,aAAa,EAAE;UACvC;UACA;QACJ;;QAEA;QACA,IAAIkL,YAAY,CAAChG,KAAK,CAAC,IAAIlF,aAAa,EAAE;UACtC;UACA;QACJ;;QAEA;QACA;QACA6M,kBAAkB,CAAC9J,IAAI,CAAC8F,qBAAqB,CAAC3C,MAAM,CAAC,CAAC;QACtD2G,kBAAkB,CAAC9J,IAAI,CAAC2G,qBAAqB,CAACxD,MAAM,CAAC,CAAC;QACtD2G,kBAAkB,CAAC9J,IAAI,CAAC6G,sBAAsB,CAAC1D,MAAM,CAAC,CAAC;QACvD2G,kBAAkB,CAAC9J,IAAI,CAACwH,sBAAsB,CAACrE,MAAM,CAAC,CAAC;QACvD2G,kBAAkB,CAAC9J,IAAI,CAAC+H,oBAAoB,CAAC5E,MAAM,CAAC,CAAC;QACrD2G,kBAAkB,CAAC9J,IAAI,CAACoI,qBAAqB,CAACjF,MAAM,CAAC,CAAC;;QAEtD;QACA2G,kBAAkB,GAAGH,gBAAgB,CAACG,kBAAkB,CAAC;;QAEzD;QACAA,kBAAkB,GAAGtB,oBAAoB,CAACsB,kBAAkB,CAAC;QAC7DA,kBAAkB,GAAGX,mCAAmC,CAACW,kBAAkB,CAAC;MAChF;IACJ;IAEAC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,kBAAkB,CAAC;IAClDC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEF,kBAAkB,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,SAAS,KAAKD,GAAG,GAAGC,SAAS,CAACnE,KAAK,CAAC7F,MAAM,EAAE,CAAC,CAAC,CAAC;IAC1GrD,aAAa,CAACiG,MAAM,CAAC,CAAC,EAAEjG,aAAa,CAACqD,MAAM,EAAE,GAAG2J,kBAAkB,CAAC;IACpED,2BAA2B,CAAC,CAAC;EACjC;;EAEA;EACA,oBACItL,OAAA,CAAAE,SAAA;IAAA2L,QAAA,eACI7L,OAAA;MAAK8L,SAAS,EAAC,WAAW;MAAAD,QAAA,EACrBpL,YAAY,CAACQ,GAAG,CAAE8K,GAAG,IAAKA,GAAG;IAAC;MAAA5H,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B;EAAC,gBACR,CAAC;AAEX;AAAClE,EAAA,CA77CQD,KAAK;AAAA6L,EAAA,GAAL7L,KAAK;AA+7Cd,eAAeA,KAAK;AAAA,IAAA6L,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}