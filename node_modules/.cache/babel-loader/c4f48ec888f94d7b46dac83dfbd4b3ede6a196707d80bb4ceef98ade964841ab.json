{"ast":null,"code":"import { PIECES, FEN_PIECES_BLACK, COLORS } from './globalVariables';\n\n//Checks if a character is Uppercase using the ASCII table; 65 (A); 90 (Z)\nexport function IsUpperCase(value) {\n  return value.charCodeAt(0) >= 65 && value.charCodeAt(0) <= 90;\n}\n\n//Checks if a character is Lowercase using the ASCII table; 97 (a); 122 (z)\n_c = IsUpperCase;\nexport function IsLowerCase(value) {\n  return value.charCodeAt(0) >= 97 && value.charCodeAt(0) <= 122;\n}\n\n//Checks if a character is a Digit using the ASCII table; 48 (0); 57 (9)\n_c2 = IsLowerCase;\nexport function IsDigit(value) {\n  return value.charCodeAt(0) >= 48 && value.charCodeAt(0) <= 57;\n}\n\n//splits the FEN string to each individual part that makes it\n_c3 = IsDigit;\nexport function ParseFEN(fen) {\n  const fenParts = fen.split(' ');\n  if (fenParts.length != 6) {\n    console.log('Invalid FEN');\n    return;\n  }\n  const fenBoard = fenParts[0];\n  const fenTurn = fenParts[1];\n  const fenCastling = fenParts[2];\n  const fenEnPassant = fenParts[3];\n  const fenHalfMoves = Number(fenParts[4]);\n  const fenFullMoves = Number(fenParts[5]);\n  return {\n    fenBoard,\n    fenTurn,\n    fenCastling,\n    fenEnPassant,\n    fenHalfMoves,\n    fenFullMoves\n  };\n}\n\n//converts FEN piece notation to an actual piece\n_c4 = ParseFEN;\nexport function ConvertFENtoPiece(letter) {\n  switch (letter.toLowerCase()) {\n    case FEN_PIECES_BLACK.PAWN:\n      return PIECES.PAWN;\n    case FEN_PIECES_BLACK.KNIGHT:\n      return PIECES.KNIGHT;\n    case FEN_PIECES_BLACK.KING:\n      return PIECES.KING;\n    case FEN_PIECES_BLACK.QUEEN:\n      return PIECES.QUEEN;\n    case FEN_PIECES_BLACK.ROOK:\n      return PIECES.ROOK;\n    case FEN_PIECES_BLACK.BISHOP:\n      return PIECES.BISHOP;\n    default:\n      return \"\";\n  }\n}\n\n//converts the FEN piece notation to a piece that we can use in the square component\n_c5 = ConvertFENtoPiece;\nexport function ConvertFENPieceToPiece(value) {\n  if (IsUpperCase(value)) {\n    return `${COLORS.WHITE}-${ConvertFENtoPiece(value)}`;\n  }\n  if (IsLowerCase(value)) {\n    return `${COLORS.BLACK}-${ConvertFENtoPiece(value)}`;\n  }\n  return \"\";\n}\n_c6 = ConvertFENPieceToPiece;\nexport function ConvertFenToString(value) {\n  let result = [];\n  for (let i = 0; i < value.length; i++) {\n    if (IsDigit(value.charAt(i))) {\n      for (let j = 0; j < Number(value.charAt(i)); j++) {\n        result.push(\" \");\n      }\n    } else {\n      result.push(value.charAt(i));\n    }\n  }\n  return result.join('');\n}\n_c7 = ConvertFenToString;\nfunction checkIfTwoSquaresAreOnTheSameRow(square1, square2) {\n  return square1.props.x == square2.props.x;\n}\nfunction checkIfWeAreOnTheSquaresRow(square, rowNumber) {\n  return square.props.x == rowNumber;\n}\n\n//gets the piece\nexport function getPiece(square) {\n  return square.props.piece.split(PIECE_DELIMITER)[PIECE_PIECE_INDEX];\n}\n\n//checks if piece is positioned on a certain square\nexport function doesTheSquareHasThePiece(square, piece) {\n  let p = getPiece(square);\n  return p == piece;\n}\n\n//gets the piece color\nexport function getPieceColor(square) {\n  return square.props.piece.split(PIECE_DELIMITER)[PIECE_COLOR_INDEX];\n}\n\n//checks if a color is white\nexport function isColorWhite(color) {\n  return color == COLORS.WHITE;\n}\nfunction areWeCastling(square1, square2) {\n  return Math.abs(square1.props.y - square2.props.y) == 2;\n}\nfunction areWeShortCastling() {\n  BoardPosition[CASTLE_ROW_WHITE][CASTLE_ROOK_INITIAL_COL_SHORT] == FEN_PIECES_WHITE.ROOK && CASTLE_PATH_COLS_SHORT.every(col => BoardPosition[CASTLE_ROW_WHITE][col] == EMPTY_SQUARE_PIECE);\n}\nfunction areWeLongCastling() {\n  return BoardPosition[CASTLE_ROW_WHITE][CASTLE_ROOK_INITIAL_COL_LONG] == FEN_PIECES_WHITE.ROOK && CASTLE_PATH_COLS_LONG.every(col => BoardPosition[CASTLE_ROW_WHITE][col] == EMPTY_SQUARE_PIECE);\n}\nexport function UpdatePosition(square, targetSquare, position) {\n  let pos = [];\n  for (let rowNumber = 0; rowNumber < position.length; rowNumber++) {\n    if (checkIfTwoSquaresAreOnTheSameRow(square, targetSquare) && checkIfWeAreOnTheSquaresRow(square, rowNumber)) {\n      let row = position[rowNumber];\n      if (doesTheSquareHasThePiece(square, PIECES.KING) && areWeCastling(square, targetSquare)) {\n        let color = getPieceColor(square);\n        if (row[0].toLowerCase() == 'r' && row[1].toLowerCase() == ' ' && row[2].toLowerCase() == ' ' && row[3].toLowerCase() == ' ' && row[4].toLowerCase() == 'k') {\n          let index2 = isColorWhite(color) ? 'K' : 'k';\n          let index3 = isColorWhite(color) ? 'R' : 'r';\n          row[0] = ' ';\n          row[1] = ' ';\n          row[2] = index2;\n          row[3] = index3;\n          row[4] = ' ';\n        }\n        if (row[4].toLowerCase() == 'k' && row[5].toLowerCase() == ' ' && row[6].toLowerCase() == ' ' && row[7].toLowerCase() == 'r') {\n          let index5 = isColorWhite(color) ? 'R' : 'r';\n          let index6 = isColorWhite(color) ? 'K' : 'k';\n          row[4] = ' ';\n          row[5] = index5;\n          row[6] = index6;\n          row[7] = ' ';\n        }\n      }\n      row = SidewaysCapture(row, Number(square.props.y), Number(targetSquare.props.y), square.props.piece);\n      pos.push(row);\n    } else if (checkIfWeAreOnTheSquaresRow(square, rowNumber)) {\n      let row = position[rowNumber];\n      row[square.props.y] = ' ';\n      pos.push(row);\n    } else if (checkIfWeAreOnTheSquaresRow(targetSquare, rowNumber)) {\n      let row = position[rowNumber];\n      row[targetSquare.props.y] = ConvertPieceToFENPiece(square.props.piece);\n      pos.push(row);\n    } else {\n      pos.push(position[rowNumber]);\n    }\n  }\n  return pos;\n}\n_c8 = UpdatePosition;\nfunction SidewaysCapture(row, y, targetY, value) {\n  let result = [];\n  for (let i = 0; i < row.length; i++) {\n    if (i == y) {\n      result.push(\" \");\n    } else if (i == targetY) {\n      result.push(ConvertPieceToFENPiece(value));\n    } else {\n      result.push(row[i]);\n    }\n  }\n  return result;\n}\n_c9 = SidewaysCapture;\nfunction ConvertStringToFEN(value) {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < value.length; i++) {\n    if (value.charAt(i) == ' ') {\n      counter++;\n    } else {\n      if (counter != 0) {\n        result.push(counter);\n      }\n      result.push(value.charAt(i));\n      counter = 0;\n    }\n  }\n  if (counter != 0) {\n    result.push(counter);\n  }\n  return result.join('');\n}\n_c10 = ConvertStringToFEN;\nfunction replaceAt(value, replacement, index) {\n  return value.substring(0, index) + replacement + value.substring(index + replacement.toString().length);\n}\nfunction ConvertPieceToFENPiece(value) {\n  let color = value.split('-')[0];\n  let piece = value.split('-')[1];\n  let p = '';\n  switch (piece) {\n    case \"pawn\":\n      p = 'p';\n      break;\n    case \"knight\":\n      p = 'n';\n      break;\n    case \"bishop\":\n      p = 'b';\n      break;\n    case \"rook\":\n      p = 'r';\n      break;\n    case \"queen\":\n      p = 'q';\n      break;\n    case \"king\":\n      p = 'k';\n      break;\n    default:\n      break;\n  }\n  return color == \"white\" ? p.toString().toUpperCase() : p.toString();\n}\n_c11 = ConvertPieceToFENPiece;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11;\n$RefreshReg$(_c, \"IsUpperCase\");\n$RefreshReg$(_c2, \"IsLowerCase\");\n$RefreshReg$(_c3, \"IsDigit\");\n$RefreshReg$(_c4, \"ParseFEN\");\n$RefreshReg$(_c5, \"ConvertFENtoPiece\");\n$RefreshReg$(_c6, \"ConvertFENPieceToPiece\");\n$RefreshReg$(_c7, \"ConvertFenToString\");\n$RefreshReg$(_c8, \"UpdatePosition\");\n$RefreshReg$(_c9, \"SidewaysCapture\");\n$RefreshReg$(_c10, \"ConvertStringToFEN\");\n$RefreshReg$(_c11, \"ConvertPieceToFENPiece\");","map":{"version":3,"names":["PIECES","FEN_PIECES_BLACK","COLORS","IsUpperCase","value","charCodeAt","_c","IsLowerCase","_c2","IsDigit","_c3","ParseFEN","fen","fenParts","split","length","console","log","fenBoard","fenTurn","fenCastling","fenEnPassant","fenHalfMoves","Number","fenFullMoves","_c4","ConvertFENtoPiece","letter","toLowerCase","PAWN","KNIGHT","KING","QUEEN","ROOK","BISHOP","_c5","ConvertFENPieceToPiece","WHITE","BLACK","_c6","ConvertFenToString","result","i","charAt","j","push","join","_c7","checkIfTwoSquaresAreOnTheSameRow","square1","square2","props","x","checkIfWeAreOnTheSquaresRow","square","rowNumber","getPiece","piece","PIECE_DELIMITER","PIECE_PIECE_INDEX","doesTheSquareHasThePiece","p","getPieceColor","PIECE_COLOR_INDEX","isColorWhite","color","areWeCastling","Math","abs","y","areWeShortCastling","BoardPosition","CASTLE_ROW_WHITE","CASTLE_ROOK_INITIAL_COL_SHORT","FEN_PIECES_WHITE","CASTLE_PATH_COLS_SHORT","every","col","EMPTY_SQUARE_PIECE","areWeLongCastling","CASTLE_ROOK_INITIAL_COL_LONG","CASTLE_PATH_COLS_LONG","UpdatePosition","targetSquare","position","pos","row","index2","index3","index5","index6","SidewaysCapture","ConvertPieceToFENPiece","_c8","targetY","_c9","ConvertStringToFEN","counter","_c10","replaceAt","replacement","index","substring","toString","toUpperCase","_c11","$RefreshReg$"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/Chess-React.js-/src/HelperMethods.js"],"sourcesContent":["import { PIECES, FEN_PIECES_BLACK, COLORS } from './globalVariables'\r\n\r\n//Checks if a character is Uppercase using the ASCII table; 65 (A); 90 (Z)\r\nexport function IsUpperCase(value) {\r\n    return value.charCodeAt(0) >= 65 && value.charCodeAt(0) <= 90\r\n}\r\n\r\n//Checks if a character is Lowercase using the ASCII table; 97 (a); 122 (z)\r\nexport function IsLowerCase(value) {\r\n    return value.charCodeAt(0) >= 97 && value.charCodeAt(0) <= 122\r\n}\r\n\r\n//Checks if a character is a Digit using the ASCII table; 48 (0); 57 (9)\r\nexport function IsDigit(value) {\r\n    return value.charCodeAt(0) >= 48 && value.charCodeAt(0) <= 57\r\n}\r\n\r\n//splits the FEN string to each individual part that makes it\r\nexport function ParseFEN(fen) {\r\n    const fenParts = fen.split(' ');\r\n\r\n    if (fenParts.length != 6) {\r\n        console.log('Invalid FEN')\r\n        return;\r\n    }\r\n\r\n    const fenBoard = fenParts[0];\r\n    const fenTurn = fenParts[1];\r\n    const fenCastling = fenParts[2];\r\n    const fenEnPassant = fenParts[3];\r\n    const fenHalfMoves = Number(fenParts[4])\r\n    const fenFullMoves = Number(fenParts[5])\r\n\r\n    return { fenBoard, fenTurn, fenCastling, fenEnPassant, fenHalfMoves, fenFullMoves }\r\n}\r\n\r\n//converts FEN piece notation to an actual piece\r\nexport function ConvertFENtoPiece(letter) {\r\n    switch (letter.toLowerCase()) {\r\n        case FEN_PIECES_BLACK.PAWN:\r\n            return PIECES.PAWN\r\n        case FEN_PIECES_BLACK.KNIGHT:\r\n            return PIECES.KNIGHT\r\n        case FEN_PIECES_BLACK.KING:\r\n            return PIECES.KING\r\n        case FEN_PIECES_BLACK.QUEEN:\r\n            return PIECES.QUEEN\r\n        case FEN_PIECES_BLACK.ROOK:\r\n            return PIECES.ROOK\r\n        case FEN_PIECES_BLACK.BISHOP:\r\n            return PIECES.BISHOP\r\n        default:\r\n            return \"\";\r\n    }\r\n}\r\n\r\n//converts the FEN piece notation to a piece that we can use in the square component\r\nexport function ConvertFENPieceToPiece(value) {\r\n    if (IsUpperCase(value)) {\r\n        return `${COLORS.WHITE}-${ConvertFENtoPiece(value)}`;\r\n    }\r\n\r\n    if (IsLowerCase(value)) {\r\n        return `${COLORS.BLACK}-${ConvertFENtoPiece(value)}`;\r\n    }\r\n\r\n    return \"\";\r\n}\r\n\r\nexport function ConvertFenToString(value) {\r\n    let result = [];\r\n\r\n    for (let i = 0; i < value.length; i++) {\r\n        if (IsDigit(value.charAt(i))) {\r\n            for (let j = 0; j < Number(value.charAt(i)); j++) {\r\n                result.push(\" \")\r\n            }\r\n        } else {\r\n            result.push(value.charAt(i))\r\n        }\r\n    }\r\n\r\n    return result.join('');\r\n}\r\n\r\nfunction checkIfTwoSquaresAreOnTheSameRow(square1, square2) {\r\n    return square1.props.x == square2.props.x\r\n}\r\n\r\nfunction checkIfWeAreOnTheSquaresRow(square, rowNumber) {\r\n    return square.props.x == rowNumber\r\n}\r\n\r\n//gets the piece\r\nexport function getPiece(square) {\r\n    return square.props.piece.split(PIECE_DELIMITER)[PIECE_PIECE_INDEX]\r\n}\r\n\r\n//checks if piece is positioned on a certain square\r\nexport function doesTheSquareHasThePiece(square, piece) {\r\n    let p = getPiece(square)\r\n\r\n    return p == piece\r\n}\r\n\r\n//gets the piece color\r\nexport function getPieceColor(square) {\r\n    return square.props.piece.split(PIECE_DELIMITER)[PIECE_COLOR_INDEX]\r\n}\r\n\r\n//checks if a color is white\r\nexport function isColorWhite(color) {\r\n    return color == COLORS.WHITE\r\n}\r\n\r\nfunction areWeCastling(square1, square2) {\r\n    return Math.abs(square1.props.y - square2.props.y) == 2\r\n}\r\n\r\nfunction areWeShortCastling() {\r\n    BoardPosition[CASTLE_ROW_WHITE][CASTLE_ROOK_INITIAL_COL_SHORT] == FEN_PIECES_WHITE.ROOK &&\r\n        CASTLE_PATH_COLS_SHORT.every(col => BoardPosition[CASTLE_ROW_WHITE][col] == EMPTY_SQUARE_PIECE);\r\n}\r\n\r\nfunction areWeLongCastling() {\r\n    return BoardPosition[CASTLE_ROW_WHITE][CASTLE_ROOK_INITIAL_COL_LONG] == FEN_PIECES_WHITE.ROOK &&\r\n        CASTLE_PATH_COLS_LONG.every(col => BoardPosition[CASTLE_ROW_WHITE][col] == EMPTY_SQUARE_PIECE);\r\n}\r\n\r\nexport function UpdatePosition(square, targetSquare, position) {\r\n    let pos = [];\r\n\r\n    for (let rowNumber = 0; rowNumber < position.length; rowNumber++) {\r\n        if (checkIfTwoSquaresAreOnTheSameRow(square, targetSquare) && checkIfWeAreOnTheSquaresRow(square, rowNumber)) {\r\n            let row = position[rowNumber]\r\n            if (doesTheSquareHasThePiece(square, PIECES.KING) && areWeCastling(square, targetSquare)) {\r\n                let color = getPieceColor(square)\r\n\r\n                if (row[0].toLowerCase() == 'r' && row[1].toLowerCase() == ' ' && row[2].toLowerCase() == ' ' && row[3].toLowerCase() == ' ' && row[4].toLowerCase() == 'k') {\r\n                    let index2 = isColorWhite(color) ? 'K' : 'k'\r\n                    let index3 = isColorWhite(color) ? 'R' : 'r'\r\n\r\n                    row[0] = ' '\r\n                    row[1] = ' '\r\n                    row[2] = index2\r\n                    row[3] = index3\r\n                    row[4] = ' '\r\n                }\r\n\r\n                if (row[4].toLowerCase() == 'k' && row[5].toLowerCase() == ' ' && row[6].toLowerCase() == ' ' && row[7].toLowerCase() == 'r') {\r\n                    let index5 = isColorWhite(color) ? 'R' : 'r'\r\n                    let index6 = isColorWhite(color) ? 'K' : 'k'\r\n\r\n                    row[4] = ' '\r\n                    row[5] = index5\r\n                    row[6] = index6\r\n                    row[7] = ' '\r\n                }\r\n            }\r\n            row = SidewaysCapture(row, Number(square.props.y), Number(targetSquare.props.y), square.props.piece)\r\n            pos.push(row)\r\n        } else if (checkIfWeAreOnTheSquaresRow(square, rowNumber)) {\r\n            let row = position[rowNumber]\r\n            row[square.props.y] = ' '\r\n            pos.push(row)\r\n        } else if (checkIfWeAreOnTheSquaresRow(targetSquare, rowNumber)) {\r\n            let row = position[rowNumber]\r\n            row[targetSquare.props.y] = ConvertPieceToFENPiece(square.props.piece)\r\n            pos.push(row)\r\n        } else {\r\n            pos.push(position[rowNumber])\r\n        }\r\n    }\r\n\r\n    return pos;\r\n}\r\n\r\nfunction SidewaysCapture(row, y, targetY, value) {\r\n    let result = []\r\n\r\n    for (let i = 0; i < row.length; i++) {\r\n        if (i == y) {\r\n            result.push(\" \")\r\n        } else if (i == targetY) {\r\n            result.push(ConvertPieceToFENPiece(value))\r\n        } else {\r\n            result.push(row[i])\r\n        }\r\n    }\r\n\r\n    return result\r\n}\r\n\r\nfunction ConvertStringToFEN(value) {\r\n    let result = [];\r\n\r\n    let counter = 0;\r\n    for (let i = 0; i < value.length; i++) {\r\n        if (value.charAt(i) == ' ') {\r\n            counter++;\r\n        } else {\r\n            if (counter != 0) {\r\n                result.push(counter)\r\n            }\r\n            result.push(value.charAt(i))\r\n            counter = 0;\r\n        }\r\n    }\r\n\r\n    if (counter != 0) {\r\n        result.push(counter)\r\n    }\r\n\r\n    return result.join('')\r\n}\r\n\r\nfunction replaceAt(value, replacement, index) {\r\n    return value.substring(0, index) + replacement + value.substring(index + replacement.toString().length);\r\n}\r\n\r\nfunction ConvertPieceToFENPiece(value) {\r\n    let color = value.split('-')[0]\r\n    let piece = value.split('-')[1]\r\n\r\n    let p = '';\r\n\r\n    switch (piece) {\r\n        case \"pawn\":\r\n            p = 'p';\r\n            break;\r\n        case \"knight\":\r\n            p = 'n';\r\n            break;\r\n        case \"bishop\":\r\n            p = 'b';\r\n            break;\r\n        case \"rook\":\r\n            p = 'r';\r\n            break;\r\n        case \"queen\":\r\n            p = 'q';\r\n            break;\r\n        case \"king\":\r\n            p = 'k';\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return color == \"white\" ? p.toString().toUpperCase() : p.toString()\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}