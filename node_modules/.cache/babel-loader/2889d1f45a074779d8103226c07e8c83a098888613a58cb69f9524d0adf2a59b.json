{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vladi Gotsin\\\\Desktop\\\\react\\\\Chess-React.js-\\\\src\\\\Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback, useMemo } from \"react\";\nimport * as HelperMethods from \"./HelperMethods.js\";\nimport * as GlobalVariables from \"./globalVariables.js\";\nimport * as MoveHandling from './MoveHandler.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board() {\n  _s();\n  /**\r\n   * State to manage the FEN (Forsyth-Edwards Notation) string representing the board position.\r\n   * This state is used to parse and set the initial board configuration.\r\n   *\r\n   * FEN - Forsyth-Edwards Notation:\r\n   * - Small letters represent black pieces.\r\n   * - Capital letters represent white pieces.\r\n   * - Numbers represent empty board squares.\r\n   * - (/) separates each board row.\r\n   * - The first letter after the board indicates whose turn it is to move (w - white, b - black).\r\n   * - Next letters indicate castling rights:\r\n   *   - k - king-side\r\n   *   - q - queen-side\r\n   *   - (-) - no castling allowed for any side.\r\n   * - En passant square:\r\n   *   - When a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square.\r\n   * - The number of half turns:\r\n   *   - White moves, then black moves = 2 half moves\r\n   *   - Half turns are made without a pawn move or a capture of a piece (50-move rule when reaches 100).\r\n   * - The number of full moves:\r\n   *   - White moves, then black moves = 1 full move\r\n   *   - Increases after every black half move.\r\n   * \r\n   * Starting position:\r\n   * 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\r\n   *\r\n   * Examples of FEN positions:\r\n   * 'r1bqk2r/pppp1ppp/2n5/8/1bBPn3/2N2N2/PP3PPP/R1BQK2R w KQkq - 0 8'\r\n   * 'r1bqk2r/pppp1ppp/2n2n2/2b5/2BPP3/5N2/PP3PPP/RNBQK2R b KQkq - 0 6'\r\n   * 'r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21'\r\n   */\n  const [fen, setFen] = useState('r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21');\n\n  /**\r\n   * State to manage possible moves for a piece. \r\n   * This state holds an array of objects indicating which squares are possible moves for the selected piece.\r\n   */\n  const [isPossibleMove, setIsPossibleMove] = useState([]);\n\n  /**\r\n   * State to manage the squares on the board.\r\n   * This state holds an array of square components representing the current board configuration.\r\n   */\n  const [boardSquares, setBoardSquares] = useState([]);\n\n  /**\r\n   * Reference to the `isPossibleMove` state to avoid stale closures.\r\n   * This reference ensures that the latest state is used in functions that rely on it.\r\n   */\n  const isPossibleMoveRef = useRef(isPossibleMove);\n\n  /**\r\n   * Reference to the `boardSquares` state to avoid stale closures.\r\n   * This reference ensures that the latest state is used in functions that rely on it.\r\n   */\n  const boardSquaresRef = useRef(boardSquares);\n\n  /**\r\n   * Updates the reference to the `isPossibleMove` array whenever the state changes.\r\n   * Additionally, updates the `boardSquares` state by parsing the FEN string.\r\n   */\n  useEffect(() => {\n    isPossibleMoveRef.current = isPossibleMove;\n    setBoardSquares(HelperMethods.fenParser(fen, isPossibleMoveRef.current, getPossibleMoves, movePiece, resetPossibleMoves, false));\n  }, [isPossibleMove]);\n\n  /**\r\n   * Initializes the board state when the component mounts.\r\n   * Parses the FEN string to set up the initial board configuration.\r\n   */\n  useEffect(() => {\n    resetPossibleMoves();\n    setBoardSquares(HelperMethods.fenParser(fen, isPossibleMoveRef.current, getPossibleMoves, movePiece, resetPossibleMoves));\n  }, []);\n\n  /**\r\n   * Updates the `boardSquares` state whenever the FEN string changes.\r\n   * Parses the FEN string to update the board configuration.\r\n   */\n  useEffect(() => {\n    setBoardSquares(HelperMethods.fenParser(fen, isPossibleMoveRef.current, getPossibleMoves, movePiece, resetPossibleMoves));\n  }, [fen]);\n\n  /**\r\n   * Updates the reference to the `boardSquares` array whenever the state changes.\r\n   * This ensures that functions relying on `boardSquaresRef` have the latest state.\r\n   */\n  useEffect(() => {\n    boardSquaresRef.current = boardSquares;\n  }, [boardSquares]);\n\n  /**\r\n   * Updates the possible move state for a specific square.\r\n   * This function modifies the `isPossibleMove` array to indicate which squares can be moved to.\r\n   *\r\n   * @param {string} key - The key of the square to update.\r\n   * @param {boolean} value - The new value indicating whether the move is possible.\r\n   */\n  const updateIsPossibleMove = useCallback((key, value) => {\n    setIsPossibleMove(prevState => prevState.map(item => item.key === key ? {\n      ...item,\n      value: value\n    } : item));\n  }, []);\n\n  /**\r\n  * Resets possible moves highlighting.\r\n  * This function initializes the `isPossibleMove` array to indicate no possible moves.\r\n  */\n  const resetPossibleMoves = useCallback(() => {\n    const initialIsPossibleMove = [];\n    for (let i = 0; i < GlobalVariables.DIM; i++) {\n      for (let j = 0; j < GlobalVariables.DIM; j++) {\n        initialIsPossibleMove.push({\n          key: `${i}${GlobalVariables.PIECE_DELIMITER}${j}`,\n          value: false\n        });\n      }\n    }\n    setIsPossibleMove(initialIsPossibleMove);\n  }, []);\n\n  /**\r\n   * Updates the `isPossibleMove` array based on the `PossibleMoves` array.\r\n   * Forces a component update to visually indicate the possible moves on the board.\r\n   */\n  const updatePossibleMovesVisually = useCallback(() => {\n    for (let i = 0; i < GlobalVariables.PossibleMoves.length; i++) {\n      if (HelperMethods.checkIfAMoveIsEqualToTheCurrentSelectedSquare(GlobalVariables.PossibleMoves[i].piece)) {\n        for (let j = 0; j < GlobalVariables.PossibleMoves[i].moves.length; j++) {\n          updateIsPossibleMove(`${GlobalVariables.PossibleMoves[i].moves[j].props.x}${GlobalVariables.PIECE_DELIMITER}${GlobalVariables.PossibleMoves[i].moves[j].props.y}`, true);\n        }\n      }\n    }\n  }, [updateIsPossibleMove]);\n\n  /**\r\n   * Moves a piece on the board.\r\n   * This function handles all aspects of moving a piece, including updating the board state, \r\n   * handling special moves like en passant and castling, and updating move counters.\r\n   *\r\n   * @param {number} x - The x coordinate of the target square.\r\n   * @param {number} y - The y coordinate of the target square.\r\n   */\n  const movePiece = useCallback((x, y) => {\n    const squares = boardSquaresRef.current;\n    const targetSquare = HelperMethods.getATargetSquareByLocation(x, y, squares);\n    const square = squares.find(s => HelperMethods.checkIfAMoveIsEqualToTheCurrentSelectedSquare(s));\n    HelperMethods.disableCastlingIfKingOrRookMoves(square);\n    let updatedPosition = HelperMethods.updateBoardPosition(square, targetSquare);\n    updatedPosition = HelperMethods.captureEnPassant(square, targetSquare);\n    HelperMethods.updateBoardState(updatedPosition);\n    HelperMethods.resetPossibleMovesAndToggleTurn();\n    HelperMethods.enableEnPassant(square, targetSquare);\n    HelperMethods.updateMoveCounters();\n    const newFen = HelperMethods.generateANewFen();\n    setFen(newFen);\n  }, [boardSquaresRef]);\n\n  /**\r\n   * Retrieves and updates the possible moves for all pieces on the board.\r\n   * This function collects all possible moves for the current player's pieces\r\n   * and updates the global possible moves state.\r\n   */\n  const getPossibleMoves = useCallback(() => {\n    const squares = boardSquaresRef.current;\n    let possiblePieceMoves = [];\n    squares.forEach(square => {\n      if (square.props.piece) {\n        const color = HelperMethods.getPieceColor(square);\n        if (MoveHandling.isMoveAllowed(color)) {\n          possiblePieceMoves.push(...MoveHandling.collectPossibleMoves(square, squares));\n        }\n      }\n    });\n    console.log(possiblePieceMoves);\n    console.log(\"Possible Moves:\", possiblePieceMoves);\n    console.log('Moves count', possiblePieceMoves.reduce((sum, pieceMove) => sum + pieceMove.moves.length, 0));\n    MoveHandling.updatePossibleMoves(possiblePieceMoves);\n    updatePossibleMovesVisually();\n  }, [updatePossibleMovesVisually]);\n\n  /**\r\n   * Memoizes the rendered board squares to prevent unnecessary re-renders.\r\n   * This useMemo hook ensures that the `renderedBoardSquares` array is only recalculated\r\n   * when the `boardSquares` state changes. This optimization helps to improve performance\r\n   * by avoiding redundant rendering of the board squares when there are no changes to the\r\n   * `boardSquares` array.\r\n   *\r\n   * @returns {Array} - The memoized array of board squares.\r\n   */\n  const renderedBoardSquares = useMemo(() => {\n    return boardSquares.map(sqr => sqr);\n  }, [boardSquares]);\n\n  //renders the board\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chessGrid\",\n    children: renderedBoardSquares\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 9\n  }, this);\n}\n_s(Board, \"Ez5AP+wvMNFsQGoEE9bcHB1cP24=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","useMemo","HelperMethods","GlobalVariables","MoveHandling","jsxDEV","_jsxDEV","Board","_s","fen","setFen","isPossibleMove","setIsPossibleMove","boardSquares","setBoardSquares","isPossibleMoveRef","boardSquaresRef","current","fenParser","getPossibleMoves","movePiece","resetPossibleMoves","updateIsPossibleMove","key","value","prevState","map","item","initialIsPossibleMove","i","DIM","j","push","PIECE_DELIMITER","updatePossibleMovesVisually","PossibleMoves","length","checkIfAMoveIsEqualToTheCurrentSelectedSquare","piece","moves","props","x","y","squares","targetSquare","getATargetSquareByLocation","square","find","s","disableCastlingIfKingOrRookMoves","updatedPosition","updateBoardPosition","captureEnPassant","updateBoardState","resetPossibleMovesAndToggleTurn","enableEnPassant","updateMoveCounters","newFen","generateANewFen","possiblePieceMoves","forEach","color","getPieceColor","isMoveAllowed","collectPossibleMoves","console","log","reduce","sum","pieceMove","updatePossibleMoves","renderedBoardSquares","sqr","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/Chess-React.js-/src/Board.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback, useMemo } from \"react\";\r\nimport * as HelperMethods from \"./HelperMethods.js\";\r\nimport * as GlobalVariables from \"./globalVariables.js\"\r\nimport * as MoveHandling from './MoveHandler.js'\r\n\r\nfunction Board() {\r\n    /**\r\n     * State to manage the FEN (Forsyth-Edwards Notation) string representing the board position.\r\n     * This state is used to parse and set the initial board configuration.\r\n     *\r\n     * FEN - Forsyth-Edwards Notation:\r\n     * - Small letters represent black pieces.\r\n     * - Capital letters represent white pieces.\r\n     * - Numbers represent empty board squares.\r\n     * - (/) separates each board row.\r\n     * - The first letter after the board indicates whose turn it is to move (w - white, b - black).\r\n     * - Next letters indicate castling rights:\r\n     *   - k - king-side\r\n     *   - q - queen-side\r\n     *   - (-) - no castling allowed for any side.\r\n     * - En passant square:\r\n     *   - When a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square.\r\n     * - The number of half turns:\r\n     *   - White moves, then black moves = 2 half moves\r\n     *   - Half turns are made without a pawn move or a capture of a piece (50-move rule when reaches 100).\r\n     * - The number of full moves:\r\n     *   - White moves, then black moves = 1 full move\r\n     *   - Increases after every black half move.\r\n     * \r\n     * Starting position:\r\n     * 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\r\n     *\r\n     * Examples of FEN positions:\r\n     * 'r1bqk2r/pppp1ppp/2n5/8/1bBPn3/2N2N2/PP3PPP/R1BQK2R w KQkq - 0 8'\r\n     * 'r1bqk2r/pppp1ppp/2n2n2/2b5/2BPP3/5N2/PP3PPP/RNBQK2R b KQkq - 0 6'\r\n     * 'r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21'\r\n     */\r\n    const [fen, setFen] = useState('r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21');\r\n\r\n    /**\r\n     * State to manage possible moves for a piece. \r\n     * This state holds an array of objects indicating which squares are possible moves for the selected piece.\r\n     */\r\n    const [isPossibleMove, setIsPossibleMove] = useState([]);\r\n\r\n    /**\r\n     * State to manage the squares on the board.\r\n     * This state holds an array of square components representing the current board configuration.\r\n     */\r\n    const [boardSquares, setBoardSquares] = useState([]);\r\n\r\n    /**\r\n     * Reference to the `isPossibleMove` state to avoid stale closures.\r\n     * This reference ensures that the latest state is used in functions that rely on it.\r\n     */\r\n    const isPossibleMoveRef = useRef(isPossibleMove);\r\n\r\n    /**\r\n     * Reference to the `boardSquares` state to avoid stale closures.\r\n     * This reference ensures that the latest state is used in functions that rely on it.\r\n     */\r\n    const boardSquaresRef = useRef(boardSquares);\r\n\r\n    /**\r\n     * Updates the reference to the `isPossibleMove` array whenever the state changes.\r\n     * Additionally, updates the `boardSquares` state by parsing the FEN string.\r\n     */\r\n    useEffect(() => {\r\n        isPossibleMoveRef.current = isPossibleMove;\r\n        setBoardSquares(HelperMethods.fenParser(fen, isPossibleMoveRef.current, getPossibleMoves, movePiece, resetPossibleMoves, false));\r\n    }, [isPossibleMove]);\r\n\r\n    /**\r\n     * Initializes the board state when the component mounts.\r\n     * Parses the FEN string to set up the initial board configuration.\r\n     */\r\n    useEffect(() => {\r\n        resetPossibleMoves();\r\n        setBoardSquares(HelperMethods.fenParser(fen, isPossibleMoveRef.current, getPossibleMoves, movePiece, resetPossibleMoves));\r\n    }, []);\r\n\r\n    /**\r\n     * Updates the `boardSquares` state whenever the FEN string changes.\r\n     * Parses the FEN string to update the board configuration.\r\n     */\r\n    useEffect(() => {\r\n        setBoardSquares(HelperMethods.fenParser(fen, isPossibleMoveRef.current, getPossibleMoves, movePiece, resetPossibleMoves));\r\n    }, [fen]);\r\n\r\n    /**\r\n     * Updates the reference to the `boardSquares` array whenever the state changes.\r\n     * This ensures that functions relying on `boardSquaresRef` have the latest state.\r\n     */\r\n    useEffect(() => {\r\n        boardSquaresRef.current = boardSquares;\r\n    }, [boardSquares]);\r\n\r\n    /**\r\n     * Updates the possible move state for a specific square.\r\n     * This function modifies the `isPossibleMove` array to indicate which squares can be moved to.\r\n     *\r\n     * @param {string} key - The key of the square to update.\r\n     * @param {boolean} value - The new value indicating whether the move is possible.\r\n     */\r\n    const updateIsPossibleMove = useCallback((key, value) => {\r\n        setIsPossibleMove(prevState =>\r\n            prevState.map(item =>\r\n                item.key === key ? { ...item, value: value } : item\r\n            )\r\n        );\r\n    }, []);\r\n\r\n    /**\r\n    * Resets possible moves highlighting.\r\n    * This function initializes the `isPossibleMove` array to indicate no possible moves.\r\n    */\r\n    const resetPossibleMoves = useCallback(() => {\r\n        const initialIsPossibleMove = [];\r\n        for (let i = 0; i < GlobalVariables.DIM; i++) {\r\n            for (let j = 0; j < GlobalVariables.DIM; j++) {\r\n                initialIsPossibleMove.push({ key: `${i}${GlobalVariables.PIECE_DELIMITER}${j}`, value: false });\r\n            }\r\n        }\r\n        setIsPossibleMove(initialIsPossibleMove);\r\n    }, []);\r\n\r\n    /**\r\n     * Updates the `isPossibleMove` array based on the `PossibleMoves` array.\r\n     * Forces a component update to visually indicate the possible moves on the board.\r\n     */\r\n    const updatePossibleMovesVisually = useCallback(() => {\r\n        for (let i = 0; i < GlobalVariables.PossibleMoves.length; i++) {\r\n            if (HelperMethods.checkIfAMoveIsEqualToTheCurrentSelectedSquare(GlobalVariables.PossibleMoves[i].piece)) {\r\n                for (let j = 0; j < GlobalVariables.PossibleMoves[i].moves.length; j++) {\r\n                    updateIsPossibleMove(`${GlobalVariables.PossibleMoves[i].moves[j].props.x}${GlobalVariables.PIECE_DELIMITER}${GlobalVariables.PossibleMoves[i].moves[j].props.y}`, true);\r\n                }\r\n            }\r\n        }\r\n    }, [updateIsPossibleMove]);\r\n\r\n    /**\r\n     * Moves a piece on the board.\r\n     * This function handles all aspects of moving a piece, including updating the board state, \r\n     * handling special moves like en passant and castling, and updating move counters.\r\n     *\r\n     * @param {number} x - The x coordinate of the target square.\r\n     * @param {number} y - The y coordinate of the target square.\r\n     */\r\n    const movePiece = useCallback((x, y) => {\r\n        const squares = boardSquaresRef.current;\r\n\r\n        const targetSquare = HelperMethods.getATargetSquareByLocation(x, y, squares);\r\n        const square = squares.find(s => HelperMethods.checkIfAMoveIsEqualToTheCurrentSelectedSquare(s));\r\n\r\n        HelperMethods.disableCastlingIfKingOrRookMoves(square);\r\n\r\n        let updatedPosition = HelperMethods.updateBoardPosition(square, targetSquare);\r\n        updatedPosition = HelperMethods.captureEnPassant(square, targetSquare);\r\n\r\n        HelperMethods.updateBoardState(updatedPosition);\r\n        HelperMethods.resetPossibleMovesAndToggleTurn();\r\n\r\n        HelperMethods.enableEnPassant(square, targetSquare);\r\n        HelperMethods.updateMoveCounters();\r\n\r\n        const newFen = HelperMethods.generateANewFen();\r\n        setFen(newFen)\r\n    }, [boardSquaresRef]);\r\n\r\n    /**\r\n     * Retrieves and updates the possible moves for all pieces on the board.\r\n     * This function collects all possible moves for the current player's pieces\r\n     * and updates the global possible moves state.\r\n     */\r\n    const getPossibleMoves = useCallback(() => {\r\n        const squares = boardSquaresRef.current;\r\n        let possiblePieceMoves = [];\r\n\r\n        squares.forEach(square => {\r\n            if (square.props.piece) {\r\n                const color = HelperMethods.getPieceColor(square);\r\n\r\n                if (MoveHandling.isMoveAllowed(color)) {\r\n                    possiblePieceMoves.push(...MoveHandling.collectPossibleMoves(square, squares));\r\n                }\r\n            }\r\n        });\r\n\r\n        console.log(possiblePieceMoves)\r\n\r\n        console.log(\"Possible Moves:\", possiblePieceMoves);\r\n        console.log('Moves count', possiblePieceMoves.reduce((sum, pieceMove) => sum + pieceMove.moves.length, 0));\r\n\r\n        MoveHandling.updatePossibleMoves(possiblePieceMoves);\r\n        updatePossibleMovesVisually();\r\n    }, [updatePossibleMovesVisually]);\r\n\r\n    /**\r\n     * Memoizes the rendered board squares to prevent unnecessary re-renders.\r\n     * This useMemo hook ensures that the `renderedBoardSquares` array is only recalculated\r\n     * when the `boardSquares` state changes. This optimization helps to improve performance\r\n     * by avoiding redundant rendering of the board squares when there are no changes to the\r\n     * `boardSquares` array.\r\n     *\r\n     * @returns {Array} - The memoized array of board squares.\r\n     */\r\n    const renderedBoardSquares = useMemo(() => {\r\n        return boardSquares.map((sqr) => sqr);\r\n    }, [boardSquares]);\r\n\r\n    //renders the board\r\n    return (\r\n        <div className=\"chessGrid\">\r\n            {renderedBoardSquares}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}