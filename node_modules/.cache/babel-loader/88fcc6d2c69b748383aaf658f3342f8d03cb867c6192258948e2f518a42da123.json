{"ast":null,"code":"import { PIECES, FEN_PIECES_BLACK, COLORS, CASTLE_ROW_WHITE, CASTLE_ROW_BLACK, CASTLE_KING_INITIAL_COL, CASTLE_ROOK_INITIAL_COL_LONG, CASTLE_ROOK_INITIAL_COL_SHORT, CASTLE_PATH_COLS_LONG, CASTLE_PATH_COLS_SHORT, PIECE_COLOR_INDEX, PIECE_PIECE_INDEX, FEN_PIECES_WHITE, EMPTY_SQUARE_PIECE, CASTLE_ROOK_FINAL_COL_LONG, CASTLE_ROOK_FINAL_COL_SHORT, CASTLE_KING_FINAL_COL_LONG, CASTLE_KING_FINAL_COL_SHORT, EMPTY_SQUARES_AFTER_LONG_CASTLE, EMPTY_SQUARES_AFTER_SHORT_CASTLE, BoardPosition, PIECE_DELIMITER, CASTLING_TYPES } from './globalVariables';\n\n/**\r\n * Checks if a character is Uppercase using the ASCII table; 65 (A) to 90 (Z)\r\n * @param {string} value - The character to check.\r\n * @returns {boolean} - True if the character is uppercase, false otherwise.\r\n */\nexport function IsUpperCase(value) {\n  return value.charCodeAt(0) >= 65 && value.charCodeAt(0) <= 90;\n}\n\n/**\r\n * Checks if a character is Lowercase using the ASCII table; 97 (a) to 122 (z)\r\n * @param {string} value - The character to check.\r\n * @returns {boolean} - True if the character is lowercase, false otherwise.\r\n */\n_c = IsUpperCase;\nexport function IsLowerCase(value) {\n  return value.charCodeAt(0) >= 97 && value.charCodeAt(0) <= 122;\n}\n\n/**\r\n * Checks if a character is a Digit using the ASCII table; 48 (0) to 57 (9)\r\n * @param {string} value - The character to check.\r\n * @returns {boolean} - True if the character is a digit, false otherwise.\r\n */\n_c2 = IsLowerCase;\nexport function IsDigit(value) {\n  return value.charCodeAt(0) >= 48 && value.charCodeAt(0) <= 57;\n}\n\n/**\r\n * Splits the FEN string into its individual components.\r\n * @param {string} fen - The FEN string.\r\n * @returns {object} - An object containing the parts of the FEN string.\r\n * @throws {Error} - Throws an error if the FEN string is invalid.\r\n */\n_c3 = IsDigit;\nexport function ParseFEN(fen) {\n  const fenParts = fen.split(EMPTY_SQUARE_PIECE);\n  if (fenParts.length !== 6) {\n    throw new Error('Invalid FEN');\n  }\n  const [fenBoard, fenTurn, fenCastling, fenEnPassant, fenHalfMoves, fenFullMoves] = fenParts;\n  return {\n    fenBoard,\n    fenTurn,\n    fenCastling,\n    fenEnPassant,\n    fenHalfMoves: Number(fenHalfMoves),\n    fenFullMoves: Number(fenFullMoves)\n  };\n}\n\n/**\r\n * Converts FEN piece notation to an actual piece.\r\n * @param {string} letter - The FEN piece notation.\r\n * @returns {string} - The corresponding piece.\r\n */\n_c4 = ParseFEN;\nexport function ConvertFENtoPiece(letter) {\n  const FEN_PIECE_MAP = {\n    [FEN_PIECES_BLACK.PAWN]: PIECES.PAWN,\n    [FEN_PIECES_BLACK.KNIGHT]: PIECES.KNIGHT,\n    [FEN_PIECES_BLACK.KING]: PIECES.KING,\n    [FEN_PIECES_BLACK.QUEEN]: PIECES.QUEEN,\n    [FEN_PIECES_BLACK.ROOK]: PIECES.ROOK,\n    [FEN_PIECES_BLACK.BISHOP]: PIECES.BISHOP\n  };\n  return FEN_PIECE_MAP[letter.toLowerCase()] || \"\";\n}\n\n/**\r\n * Converts the FEN piece notation to a piece that we can use in the square component.\r\n * @param {string} value - The FEN piece notation.\r\n * @returns {string} - The piece with color information.\r\n */\n_c5 = ConvertFENtoPiece;\nexport function ConvertFENPieceToPiece(value) {\n  if (IsUpperCase(value)) {\n    return `${COLORS.WHITE}-${ConvertFENtoPiece(value)}`;\n  }\n  if (IsLowerCase(value)) {\n    return `${COLORS.BLACK}-${ConvertFENtoPiece(value)}`;\n  }\n  return \"\";\n}\n\n/**\r\n * Converts a string in FEN format to a normal string, e.g., 'p6p' => 'p      p'\r\n * @param {string} value - The FEN string.\r\n * @returns {string} - The converted string.\r\n */\n_c6 = ConvertFENPieceToPiece;\nexport function ConvertFenToString(value) {\n  return value.split('').reduce((result, char) => {\n    if (IsDigit(char)) {\n      return result + EMPTY_SQUARE_PIECE.repeat(Number(char));\n    }\n    return result + char;\n  }, '');\n}\n\n/**\r\n * Checks if two squares are on the same row.\r\n * @param {object} square1 - The first square.\r\n * @param {object} square2 - The second square.\r\n * @returns {boolean} - True if both squares are on the same row, false otherwise.\r\n */\n_c7 = ConvertFenToString;\nfunction checkIfTwoSquaresAreOnTheSameRow(square1, square2) {\n  return square1.props.x == square2.props.x;\n}\n\n/**\r\n * Checks if the square is on the given row number.\r\n * @param {object} square - The square to check.\r\n * @param {number} rowNumber - The row number to check against.\r\n * @returns {boolean} - True if the square is on the given row, false otherwise.\r\n */\nfunction isSquareOnRow(square, rowNumber) {\n  return square.props.x == rowNumber;\n}\n\n/**\r\n * Gets the piece from a square.\r\n * @param {object} square - The square to get the piece from.\r\n * @returns {string} - The piece on the square.\r\n */\nexport function getPiece(square) {\n  return square.props.piece.split(PIECE_DELIMITER)[PIECE_PIECE_INDEX];\n}\n\n/**\r\n * Checks if the given square has the specified piece.\r\n * @param {object} square - The square to check.\r\n * @param {string} piece - The piece to check for.\r\n * @returns {boolean} - True if the square has the specified piece, false otherwise.\r\n */\nexport function doesTheSquareHasThePiece(square, piece) {\n  return getPiece(square) == piece;\n}\n\n/**\r\n * Gets the color of the piece on a square.\r\n * @param {object} square - The square to get the piece color from.\r\n * @returns {string} - The color of the piece.\r\n */\nexport function getPieceColor(square) {\n  return square.props.piece.split(PIECE_DELIMITER)[PIECE_COLOR_INDEX];\n}\n\n/**\r\n * Checks if the given color is white.\r\n * @param {string} color - The color to check.\r\n * @returns {boolean} - True if the color is white, false otherwise.\r\n */\nexport function isColorWhite(color) {\n  return color == COLORS.WHITE;\n}\n\n/**\r\n * Checks if the given color is black.\r\n * @param {string} color - The color to check.\r\n * @returns {boolean} - True if the color is black, false otherwise.\r\n */\nexport function isColorBlack(color) {\n  return color == COLORS.BLACK;\n}\n\n/**\r\n * Checks if two squares have a pice with the same color.\r\n * @param {object} square1 - The first square.\r\n * @param {object} square2 - The second square.\r\n * @returns {boolean} - True if the pieces color is the same, false otherwise.\r\n */\nexport function areSameColor(square1, square2) {\n  if (!square1 || !square2) {\n    return false;\n  }\n  return getPieceColor(square1) == getPieceColor(square2);\n}\n\n/**\r\n * Checks if two squares have a pice with the same color.\r\n * @param {object} square - The first square.\r\n * @returns {boolean} - True if the pieces color is the same, false otherwise.\r\n */\nexport function isSquareAvailable(square) {\n  return square && !square.props.piece;\n}\n\n/**\r\n * Determines if castling is possible.\r\n * @param {string} castlingType - The type of castling (long or short).\r\n * @param {boolean} [withWhite=true] - True if checking for white's castling, false otherwise.\r\n * @returns {boolean} - True if castling is possible, false otherwise.\r\n */\nfunction areWeCastling(castlingType, withWhite = true) {\n  const row = withWhite ? CASTLE_ROW_WHITE : CASTLE_ROW_BLACK;\n  const pieces = withWhite ? FEN_PIECES_WHITE : FEN_PIECES_BLACK;\n  const [rookCol, kingCol, pathCols] = castlingType === CASTLING_TYPES.LONG ? [CASTLE_ROOK_INITIAL_COL_LONG, CASTLE_KING_INITIAL_COL, CASTLE_PATH_COLS_LONG] : [CASTLE_ROOK_INITIAL_COL_SHORT, CASTLE_KING_INITIAL_COL, CASTLE_PATH_COLS_SHORT];\n  return BoardPosition[row][rookCol] === pieces.ROOK && BoardPosition[row][kingCol] === pieces.KING && pathCols.every(col => BoardPosition[row][col] === EMPTY_SQUARE_PIECE);\n}\n\n/**\r\n * Updates a column on a row with a new value.\r\n * @param {array} row - The row to update.\r\n * @param {number} colIndex - The column index to update.\r\n * @param {string} newValue - The new value to set.\r\n * @returns {array} - The updated row.\r\n */\nfunction updateColumnOnARow(row, colIndex, newValue) {\n  row[colIndex] = newValue;\n  return row;\n}\n\n/**\r\n * Removes the current square's piece and handles castling if applicable.\r\n * @param {object} square - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @param {array} row - The row to update.\r\n * @returns {array} - The updated row.\r\n */\nfunction handleSquareOnCurrentRow(square, targetSquare, row) {\n  return checkIfTwoSquaresAreOnTheSameRow(square, targetSquare) ? handleSquareAndTargetSquareOnTheSameRow(square, targetSquare, row) : updateColumnOnARow(row, square.props.y, EMPTY_SQUARE_PIECE);\n}\n\n/**\r\n * Updates the target square with the current square's piece.\r\n * @param {object} square - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @param {array} row - The row to update.\r\n * @returns {array} - The updated row.\r\n */\nfunction handleTargetSquareOnCurrentRow(square, targetSquare, row) {\n  return updateColumnOnARow(row, targetSquare.props.y, ConvertPieceToFENPiece(square.props.piece));\n}\n\n/**\r\n * Handles the scenario where the current square and target square are on the same row.\r\n * @param {object} square - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @param {array} row - The row to update.\r\n * @returns {array} - The updated row.\r\n */\nfunction handleSquareAndTargetSquareOnTheSameRow(square, targetSquare, row) {\n  if (doesTheSquareHasThePiece(square, PIECES.KING) && areWeCastling(square, targetSquare)) {\n    return handleCastling(square, row);\n  }\n  return SidewaysCapture(row, Number(square.props.y), Number(targetSquare.props.y), square.props.piece);\n}\n\n/**\r\n * Performs castling, swapping the rook and the king.\r\n * @param {object} square - The current square.\r\n * @param {array} row - The row to update.\r\n * @returns {array} - The updated row.\r\n */\nfunction handleCastling(square, row) {\n  const color = getPieceColor(square);\n  const isWhite = isColorWhite(color);\n  const kingPiece = isWhite ? FEN_PIECES_WHITE.KING : FEN_PIECES_BLACK.KING;\n  const rookPiece = isWhite ? FEN_PIECES_WHITE.ROOK : FEN_PIECES_BLACK.ROOK;\n  Object.values(CASTLING_TYPES).forEach(type => {\n    if (areWeCastling(type, isWhite)) {\n      const [emptySquares, kingFinalCol, rookFinalCol] = type === CASTLING_TYPES.LONG ? [EMPTY_SQUARES_AFTER_LONG_CASTLE, CASTLE_KING_FINAL_COL_LONG, CASTLE_ROOK_FINAL_COL_LONG] : [EMPTY_SQUARES_AFTER_SHORT_CASTLE, CASTLE_KING_FINAL_COL_SHORT, CASTLE_ROOK_FINAL_COL_SHORT];\n      emptySquares.forEach(col => row[col] = EMPTY_SQUARE_PIECE);\n      row[kingFinalCol] = kingPiece;\n      row[rookFinalCol] = rookPiece;\n    }\n  });\n  return row;\n}\n\n/**\r\n * Updates the current position to a new position after making the move.\r\n * @param {object} square - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @param {array} position - The current position.\r\n * @returns {array} - The updated position.\r\n */\nexport function UpdatePosition(square, targetSquare, position) {\n  return position.map((row, rowIndex) => {\n    if (isSquareOnRow(square, rowIndex)) {\n      row = handleSquareOnCurrentRow(square, targetSquare, row);\n    }\n    if (isSquareOnRow(targetSquare, rowIndex)) {\n      row = handleTargetSquareOnCurrentRow(square, targetSquare, row);\n    }\n    return row;\n  });\n}\n\n/**\r\n * Modifies the row to capture pieces sideways (square and target square are on the same row).\r\n * @param {array} row - The row to update.\r\n * @param {number} colIndex - The column index of the square.\r\n * @param {number} targetColIndex - The column index of the target square.\r\n * @param {string} value - The value to place at the target column index.\r\n * @returns {array} - The updated row.\r\n */\n_c8 = UpdatePosition;\nfunction SidewaysCapture(row, colIndex, targetColIndex, value) {\n  return row.map((col, index) => {\n    if (index === colIndex) return EMPTY_SQUARE_PIECE;\n    if (index === targetColIndex) return ConvertPieceToFENPiece(value);\n    return col;\n  });\n}\n\n/**\r\n * Converts the piece from format {color-piece} to FEN format (a single letter).\r\n * @param {string} value - The piece in {color-piece} format.\r\n * @returns {string} - The piece in FEN format.\r\n */\n_c9 = SidewaysCapture;\nfunction ConvertPieceToFENPiece(value) {\n  const [color, piece] = value.split(PIECE_DELIMITER);\n  const pieceMapping = {\n    [PIECES.PAWN]: FEN_PIECES_BLACK.PAWN,\n    [PIECES.KNIGHT]: FEN_PIECES_BLACK.KNIGHT,\n    [PIECES.BISHOP]: FEN_PIECES_BLACK.BISHOP,\n    [PIECES.ROOK]: FEN_PIECES_BLACK.ROOK,\n    [PIECES.QUEEN]: FEN_PIECES_BLACK.QUEEN,\n    [PIECES.KING]: FEN_PIECES_BLACK.KING\n  };\n  const fenPiece = pieceMapping[piece];\n  return isColorWhite(color) ? fenPiece.toUpperCase() : fenPiece;\n}\n_c10 = ConvertPieceToFENPiece;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10;\n$RefreshReg$(_c, \"IsUpperCase\");\n$RefreshReg$(_c2, \"IsLowerCase\");\n$RefreshReg$(_c3, \"IsDigit\");\n$RefreshReg$(_c4, \"ParseFEN\");\n$RefreshReg$(_c5, \"ConvertFENtoPiece\");\n$RefreshReg$(_c6, \"ConvertFENPieceToPiece\");\n$RefreshReg$(_c7, \"ConvertFenToString\");\n$RefreshReg$(_c8, \"UpdatePosition\");\n$RefreshReg$(_c9, \"SidewaysCapture\");\n$RefreshReg$(_c10, \"ConvertPieceToFENPiece\");","map":{"version":3,"names":["PIECES","FEN_PIECES_BLACK","COLORS","CASTLE_ROW_WHITE","CASTLE_ROW_BLACK","CASTLE_KING_INITIAL_COL","CASTLE_ROOK_INITIAL_COL_LONG","CASTLE_ROOK_INITIAL_COL_SHORT","CASTLE_PATH_COLS_LONG","CASTLE_PATH_COLS_SHORT","PIECE_COLOR_INDEX","PIECE_PIECE_INDEX","FEN_PIECES_WHITE","EMPTY_SQUARE_PIECE","CASTLE_ROOK_FINAL_COL_LONG","CASTLE_ROOK_FINAL_COL_SHORT","CASTLE_KING_FINAL_COL_LONG","CASTLE_KING_FINAL_COL_SHORT","EMPTY_SQUARES_AFTER_LONG_CASTLE","EMPTY_SQUARES_AFTER_SHORT_CASTLE","BoardPosition","PIECE_DELIMITER","CASTLING_TYPES","IsUpperCase","value","charCodeAt","_c","IsLowerCase","_c2","IsDigit","_c3","ParseFEN","fen","fenParts","split","length","Error","fenBoard","fenTurn","fenCastling","fenEnPassant","fenHalfMoves","fenFullMoves","Number","_c4","ConvertFENtoPiece","letter","FEN_PIECE_MAP","PAWN","KNIGHT","KING","QUEEN","ROOK","BISHOP","toLowerCase","_c5","ConvertFENPieceToPiece","WHITE","BLACK","_c6","ConvertFenToString","reduce","result","char","repeat","_c7","checkIfTwoSquaresAreOnTheSameRow","square1","square2","props","x","isSquareOnRow","square","rowNumber","getPiece","piece","doesTheSquareHasThePiece","getPieceColor","isColorWhite","color","isColorBlack","areSameColor","isSquareAvailable","areWeCastling","castlingType","withWhite","row","pieces","rookCol","kingCol","pathCols","LONG","every","col","updateColumnOnARow","colIndex","newValue","handleSquareOnCurrentRow","targetSquare","handleSquareAndTargetSquareOnTheSameRow","y","handleTargetSquareOnCurrentRow","ConvertPieceToFENPiece","handleCastling","SidewaysCapture","isWhite","kingPiece","rookPiece","Object","values","forEach","type","emptySquares","kingFinalCol","rookFinalCol","UpdatePosition","position","map","rowIndex","_c8","targetColIndex","index","_c9","pieceMapping","fenPiece","toUpperCase","_c10","$RefreshReg$"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/Chess-React.js-/src/HelperMethods.js"],"sourcesContent":["import {\r\n    PIECES, FEN_PIECES_BLACK, COLORS, CASTLE_ROW_WHITE, CASTLE_ROW_BLACK, CASTLE_KING_INITIAL_COL, CASTLE_ROOK_INITIAL_COL_LONG, CASTLE_ROOK_INITIAL_COL_SHORT,\r\n    CASTLE_PATH_COLS_LONG, CASTLE_PATH_COLS_SHORT, PIECE_COLOR_INDEX, PIECE_PIECE_INDEX, FEN_PIECES_WHITE, EMPTY_SQUARE_PIECE, CASTLE_ROOK_FINAL_COL_LONG,\r\n    CASTLE_ROOK_FINAL_COL_SHORT, CASTLE_KING_FINAL_COL_LONG, CASTLE_KING_FINAL_COL_SHORT, EMPTY_SQUARES_AFTER_LONG_CASTLE, EMPTY_SQUARES_AFTER_SHORT_CASTLE,\r\n    BoardPosition, PIECE_DELIMITER, CASTLING_TYPES\r\n} from './globalVariables'\r\n\r\n/**\r\n * Checks if a character is Uppercase using the ASCII table; 65 (A) to 90 (Z)\r\n * @param {string} value - The character to check.\r\n * @returns {boolean} - True if the character is uppercase, false otherwise.\r\n */\r\nexport function IsUpperCase(value) {\r\n    return value.charCodeAt(0) >= 65 && value.charCodeAt(0) <= 90;\r\n}\r\n\r\n/**\r\n * Checks if a character is Lowercase using the ASCII table; 97 (a) to 122 (z)\r\n * @param {string} value - The character to check.\r\n * @returns {boolean} - True if the character is lowercase, false otherwise.\r\n */\r\nexport function IsLowerCase(value) {\r\n    return value.charCodeAt(0) >= 97 && value.charCodeAt(0) <= 122;\r\n}\r\n\r\n/**\r\n * Checks if a character is a Digit using the ASCII table; 48 (0) to 57 (9)\r\n * @param {string} value - The character to check.\r\n * @returns {boolean} - True if the character is a digit, false otherwise.\r\n */\r\nexport function IsDigit(value) {\r\n    return value.charCodeAt(0) >= 48 && value.charCodeAt(0) <= 57;\r\n}\r\n\r\n/**\r\n * Splits the FEN string into its individual components.\r\n * @param {string} fen - The FEN string.\r\n * @returns {object} - An object containing the parts of the FEN string.\r\n * @throws {Error} - Throws an error if the FEN string is invalid.\r\n */\r\nexport function ParseFEN(fen) {\r\n    const fenParts = fen.split(EMPTY_SQUARE_PIECE);\r\n    if (fenParts.length !== 6) {\r\n        throw new Error('Invalid FEN');\r\n    }\r\n    const [fenBoard, fenTurn, fenCastling, fenEnPassant, fenHalfMoves, fenFullMoves] = fenParts;\r\n    return {\r\n        fenBoard,\r\n        fenTurn,\r\n        fenCastling,\r\n        fenEnPassant,\r\n        fenHalfMoves: Number(fenHalfMoves),\r\n        fenFullMoves: Number(fenFullMoves)\r\n    };\r\n}\r\n\r\n/**\r\n * Converts FEN piece notation to an actual piece.\r\n * @param {string} letter - The FEN piece notation.\r\n * @returns {string} - The corresponding piece.\r\n */\r\nexport function ConvertFENtoPiece(letter) {\r\n    const FEN_PIECE_MAP = {\r\n        [FEN_PIECES_BLACK.PAWN]: PIECES.PAWN,\r\n        [FEN_PIECES_BLACK.KNIGHT]: PIECES.KNIGHT,\r\n        [FEN_PIECES_BLACK.KING]: PIECES.KING,\r\n        [FEN_PIECES_BLACK.QUEEN]: PIECES.QUEEN,\r\n        [FEN_PIECES_BLACK.ROOK]: PIECES.ROOK,\r\n        [FEN_PIECES_BLACK.BISHOP]: PIECES.BISHOP,\r\n    };\r\n\r\n    return FEN_PIECE_MAP[letter.toLowerCase()] || \"\";\r\n}\r\n\r\n/**\r\n * Converts the FEN piece notation to a piece that we can use in the square component.\r\n * @param {string} value - The FEN piece notation.\r\n * @returns {string} - The piece with color information.\r\n */\r\nexport function ConvertFENPieceToPiece(value) {\r\n    if (IsUpperCase(value)) {\r\n        return `${COLORS.WHITE}-${ConvertFENtoPiece(value)}`;\r\n    }\r\n\r\n    if (IsLowerCase(value)) {\r\n        return `${COLORS.BLACK}-${ConvertFENtoPiece(value)}`;\r\n    }\r\n\r\n    return \"\";\r\n}\r\n\r\n/**\r\n * Converts a string in FEN format to a normal string, e.g., 'p6p' => 'p      p'\r\n * @param {string} value - The FEN string.\r\n * @returns {string} - The converted string.\r\n */\r\nexport function ConvertFenToString(value) {\r\n    return value.split('').reduce((result, char) => {\r\n        if (IsDigit(char)) {\r\n            return result + EMPTY_SQUARE_PIECE.repeat(Number(char));\r\n        }\r\n        return result + char;\r\n    }, '');\r\n}\r\n\r\n/**\r\n * Checks if two squares are on the same row.\r\n * @param {object} square1 - The first square.\r\n * @param {object} square2 - The second square.\r\n * @returns {boolean} - True if both squares are on the same row, false otherwise.\r\n */\r\nfunction checkIfTwoSquaresAreOnTheSameRow(square1, square2) {\r\n    return square1.props.x == square2.props.x;\r\n}\r\n\r\n/**\r\n * Checks if the square is on the given row number.\r\n * @param {object} square - The square to check.\r\n * @param {number} rowNumber - The row number to check against.\r\n * @returns {boolean} - True if the square is on the given row, false otherwise.\r\n */\r\nfunction isSquareOnRow(square, rowNumber) {\r\n    return square.props.x == rowNumber;\r\n}\r\n\r\n/**\r\n * Gets the piece from a square.\r\n * @param {object} square - The square to get the piece from.\r\n * @returns {string} - The piece on the square.\r\n */\r\nexport function getPiece(square) {\r\n    return square.props.piece.split(PIECE_DELIMITER)[PIECE_PIECE_INDEX];\r\n}\r\n\r\n/**\r\n * Checks if the given square has the specified piece.\r\n * @param {object} square - The square to check.\r\n * @param {string} piece - The piece to check for.\r\n * @returns {boolean} - True if the square has the specified piece, false otherwise.\r\n */\r\nexport function doesTheSquareHasThePiece(square, piece) {\r\n    return getPiece(square) == piece;\r\n}\r\n\r\n/**\r\n * Gets the color of the piece on a square.\r\n * @param {object} square - The square to get the piece color from.\r\n * @returns {string} - The color of the piece.\r\n */\r\nexport function getPieceColor(square) {\r\n    return square.props.piece.split(PIECE_DELIMITER)[PIECE_COLOR_INDEX];\r\n}\r\n\r\n/**\r\n * Checks if the given color is white.\r\n * @param {string} color - The color to check.\r\n * @returns {boolean} - True if the color is white, false otherwise.\r\n */\r\nexport function isColorWhite(color) {\r\n    return color == COLORS.WHITE;\r\n}\r\n\r\n/**\r\n * Checks if the given color is black.\r\n * @param {string} color - The color to check.\r\n * @returns {boolean} - True if the color is black, false otherwise.\r\n */\r\nexport function isColorBlack(color) {\r\n    return color == COLORS.BLACK\r\n}\r\n\r\n/**\r\n * Checks if two squares have a pice with the same color.\r\n * @param {object} square1 - The first square.\r\n * @param {object} square2 - The second square.\r\n * @returns {boolean} - True if the pieces color is the same, false otherwise.\r\n */\r\nexport function areSameColor(square1, square2) {\r\n    if (!square1 || !square2) {\r\n        return false\r\n    }\r\n\r\n    return getPieceColor(square1) == getPieceColor(square2)\r\n}\r\n\r\n/**\r\n * Checks if two squares have a pice with the same color.\r\n * @param {object} square - The first square.\r\n * @returns {boolean} - True if the pieces color is the same, false otherwise.\r\n */\r\nexport function isSquareAvailable(square) {\r\n    return square && !square.props.piece\r\n}\r\n\r\n/**\r\n * Determines if castling is possible.\r\n * @param {string} castlingType - The type of castling (long or short).\r\n * @param {boolean} [withWhite=true] - True if checking for white's castling, false otherwise.\r\n * @returns {boolean} - True if castling is possible, false otherwise.\r\n */\r\nfunction areWeCastling(castlingType, withWhite = true) {\r\n    const row = withWhite ? CASTLE_ROW_WHITE : CASTLE_ROW_BLACK;\r\n    const pieces = withWhite ? FEN_PIECES_WHITE : FEN_PIECES_BLACK;\r\n    const [rookCol, kingCol, pathCols] = castlingType === CASTLING_TYPES.LONG ?\r\n        [CASTLE_ROOK_INITIAL_COL_LONG, CASTLE_KING_INITIAL_COL, CASTLE_PATH_COLS_LONG] :\r\n        [CASTLE_ROOK_INITIAL_COL_SHORT, CASTLE_KING_INITIAL_COL, CASTLE_PATH_COLS_SHORT];\r\n\r\n    return BoardPosition[row][rookCol] === pieces.ROOK &&\r\n        BoardPosition[row][kingCol] === pieces.KING &&\r\n        pathCols.every(col => BoardPosition[row][col] === EMPTY_SQUARE_PIECE);\r\n}\r\n\r\n/**\r\n * Updates a column on a row with a new value.\r\n * @param {array} row - The row to update.\r\n * @param {number} colIndex - The column index to update.\r\n * @param {string} newValue - The new value to set.\r\n * @returns {array} - The updated row.\r\n */\r\nfunction updateColumnOnARow(row, colIndex, newValue) {\r\n    row[colIndex] = newValue;\r\n    return row;\r\n}\r\n\r\n/**\r\n * Removes the current square's piece and handles castling if applicable.\r\n * @param {object} square - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @param {array} row - The row to update.\r\n * @returns {array} - The updated row.\r\n */\r\nfunction handleSquareOnCurrentRow(square, targetSquare, row) {\r\n    return checkIfTwoSquaresAreOnTheSameRow(square, targetSquare) ?\r\n        handleSquareAndTargetSquareOnTheSameRow(square, targetSquare, row) :\r\n        updateColumnOnARow(row, square.props.y, EMPTY_SQUARE_PIECE);\r\n}\r\n\r\n/**\r\n * Updates the target square with the current square's piece.\r\n * @param {object} square - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @param {array} row - The row to update.\r\n * @returns {array} - The updated row.\r\n */\r\nfunction handleTargetSquareOnCurrentRow(square, targetSquare, row) {\r\n    return updateColumnOnARow(row, targetSquare.props.y, ConvertPieceToFENPiece(square.props.piece));\r\n}\r\n\r\n/**\r\n * Handles the scenario where the current square and target square are on the same row.\r\n * @param {object} square - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @param {array} row - The row to update.\r\n * @returns {array} - The updated row.\r\n */\r\nfunction handleSquareAndTargetSquareOnTheSameRow(square, targetSquare, row) {\r\n    if (doesTheSquareHasThePiece(square, PIECES.KING) && areWeCastling(square, targetSquare)) {\r\n        return handleCastling(square, row);\r\n    }\r\n    return SidewaysCapture(row, Number(square.props.y), Number(targetSquare.props.y), square.props.piece);\r\n}\r\n\r\n/**\r\n * Performs castling, swapping the rook and the king.\r\n * @param {object} square - The current square.\r\n * @param {array} row - The row to update.\r\n * @returns {array} - The updated row.\r\n */\r\nfunction handleCastling(square, row) {\r\n    const color = getPieceColor(square);\r\n    const isWhite = isColorWhite(color);\r\n    const kingPiece = isWhite ? FEN_PIECES_WHITE.KING : FEN_PIECES_BLACK.KING;\r\n    const rookPiece = isWhite ? FEN_PIECES_WHITE.ROOK : FEN_PIECES_BLACK.ROOK;\r\n\r\n    Object.values(CASTLING_TYPES).forEach(type => {\r\n        if (areWeCastling(type, isWhite)) {\r\n            const [emptySquares, kingFinalCol, rookFinalCol] = type === CASTLING_TYPES.LONG ?\r\n                [EMPTY_SQUARES_AFTER_LONG_CASTLE, CASTLE_KING_FINAL_COL_LONG, CASTLE_ROOK_FINAL_COL_LONG] :\r\n                [EMPTY_SQUARES_AFTER_SHORT_CASTLE, CASTLE_KING_FINAL_COL_SHORT, CASTLE_ROOK_FINAL_COL_SHORT];\r\n            emptySquares.forEach(col => row[col] = EMPTY_SQUARE_PIECE);\r\n            row[kingFinalCol] = kingPiece;\r\n            row[rookFinalCol] = rookPiece;\r\n        }\r\n    });\r\n\r\n    return row;\r\n}\r\n\r\n/**\r\n * Updates the current position to a new position after making the move.\r\n * @param {object} square - The current square.\r\n * @param {object} targetSquare - The target square.\r\n * @param {array} position - The current position.\r\n * @returns {array} - The updated position.\r\n */\r\nexport function UpdatePosition(square, targetSquare, position) {\r\n    return position.map((row, rowIndex) => {\r\n        if (isSquareOnRow(square, rowIndex)) {\r\n            row = handleSquareOnCurrentRow(square, targetSquare, row);\r\n        }\r\n        if (isSquareOnRow(targetSquare, rowIndex)) {\r\n            row = handleTargetSquareOnCurrentRow(square, targetSquare, row);\r\n        }\r\n        return row;\r\n    });\r\n}\r\n\r\n/**\r\n * Modifies the row to capture pieces sideways (square and target square are on the same row).\r\n * @param {array} row - The row to update.\r\n * @param {number} colIndex - The column index of the square.\r\n * @param {number} targetColIndex - The column index of the target square.\r\n * @param {string} value - The value to place at the target column index.\r\n * @returns {array} - The updated row.\r\n */\r\nfunction SidewaysCapture(row, colIndex, targetColIndex, value) {\r\n    return row.map((col, index) => {\r\n        if (index === colIndex) return EMPTY_SQUARE_PIECE;\r\n        if (index === targetColIndex) return ConvertPieceToFENPiece(value);\r\n        return col;\r\n    });\r\n}\r\n\r\n/**\r\n * Converts the piece from format {color-piece} to FEN format (a single letter).\r\n * @param {string} value - The piece in {color-piece} format.\r\n * @returns {string} - The piece in FEN format.\r\n */\r\nfunction ConvertPieceToFENPiece(value) {\r\n    const [color, piece] = value.split(PIECE_DELIMITER);\r\n    const pieceMapping = {\r\n        [PIECES.PAWN]: FEN_PIECES_BLACK.PAWN,\r\n        [PIECES.KNIGHT]: FEN_PIECES_BLACK.KNIGHT,\r\n        [PIECES.BISHOP]: FEN_PIECES_BLACK.BISHOP,\r\n        [PIECES.ROOK]: FEN_PIECES_BLACK.ROOK,\r\n        [PIECES.QUEEN]: FEN_PIECES_BLACK.QUEEN,\r\n        [PIECES.KING]: FEN_PIECES_BLACK.KING,\r\n    };\r\n\r\n    const fenPiece = pieceMapping[piece];\r\n    return isColorWhite(color) ? fenPiece.toUpperCase() : fenPiece;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}