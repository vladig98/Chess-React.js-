{"ast":null,"code":"// Board dimensions and piece delimiter\nexport const DIM = 8; // 8x8 Board\nexport const PIECE_DELIMITER = '-'; // Format: {color-piece}, e.g., {black-pawn}\n\n// Color options (ENUM)\nexport const COLORS = Object.freeze({\n  WHITE: 'white',\n  BLACK: 'black'\n});\n\n// Piece names (ENUM)\nexport const PIECES = Object.freeze({\n  PAWN: \"pawn\",\n  ROOK: \"rook\",\n  KNIGHT: \"knight\",\n  BISHOP: \"bishop\",\n  KING: \"king\",\n  QUEEN: \"queen\"\n});\n\n// Quick access to kings (ENUM)\nexport const KINGS = Object.freeze({\n  BLACK_KING: `${COLORS.BLACK}${PIECE_DELIMITER}${PIECES.KING}`,\n  WHITE_KING: `${COLORS.WHITE}${PIECE_DELIMITER}${PIECES.KING}`\n});\n\n// Castling rights\nexport let CastlingRights = {\n  whiteShortCastle: false,\n  whiteLongCastle: false,\n  blackShortCastle: false,\n  blackLongCastle: false\n};\n\n// En Passant information\nexport let EnPassant = {\n  isPossible: false,\n  x: -1,\n  y: -1\n};\n\n// Current square selection\nexport let CurrentSquareSelection = {\n  x: -1,\n  y: -1\n};\n\n// Game state\nexport let PossibleMoves = [];\nexport let HalfMoves = 0;\nexport let FullMoves = 0;\nexport let IsWhiteToMove = false;\nexport function updateIsWhiteToMove(value) {\n  IsWhiteToMove = value;\n}\nexport function updateHalfMoves(value) {\n  HalfMoves = value;\n}\nexport function updateFullMoves(value) {\n  FullMoves = value;\n}\n\n// Board position\nexport let BoardPosition = Array.from({\n  length: DIM\n}, () => Array(DIM).fill(EMPTY_SQUARE_PIECE));\n\n// Starting positions and squares\nexport const WHITE_PAWN_STARTING_SQUARE = 6;\nexport const BLACK_PAWN_STARTING_SQUARE = 1;\nexport const WHITE_EN_PASSANT_SQUARE = 3;\nexport const BLACK_EN_PASSANT_SQUARE = 4;\n\n// FEN piece notations\nexport const FEN_PIECES_WHITE = Object.freeze({\n  PAWN: \"P\",\n  ROOK: \"R\",\n  KNIGHT: \"N\",\n  BISHOP: \"B\",\n  KING: \"K\",\n  QUEEN: \"Q\"\n});\nexport const FEN_PIECES_BLACK = Object.freeze({\n  PAWN: \"p\",\n  ROOK: \"r\",\n  KNIGHT: \"n\",\n  BISHOP: \"b\",\n  KING: \"k\",\n  QUEEN: \"q\"\n});\n\n// Empty square representation\nexport const EMPTY_SQUARE_PIECE = ' ';\n\n// Castling constants\nexport const CASTLE_ROW_WHITE = 7;\nexport const CASTLE_ROW_BLACK = 0;\nexport const CASTLE_KING_INITIAL_COL = 4;\nexport const CASTLE_KING_FINAL_COL_LONG = 2;\nexport const CASTLE_KING_FINAL_COL_SHORT = 6;\nexport const CASTLE_ROOK_INITIAL_COL_LONG = 0;\nexport const CASTLE_ROOK_INITIAL_COL_SHORT = 7;\nexport const CASTLE_ROOK_FINAL_COL_LONG = 3;\nexport const CASTLE_ROOK_FINAL_COL_SHORT = 5;\nexport const CASTLE_PATH_COLS_LONG = [1, 2, 3];\nexport const CASTLE_PATH_COLS_SHORT = [5, 6];\nexport const EMPTY_SQUARES_AFTER_LONG_CASTLE = [0, 1, 4];\nexport const EMPTY_SQUARES_AFTER_SHORT_CASTLE = [4, 7];\n\n// Indices for piece color and type\nexport const PIECE_COLOR_INDEX = 0;\nexport const PIECE_PIECE_INDEX = 1;\n\n// Castling types\nexport const CASTLING_TYPES = Object.freeze({\n  LONG: \"long\",\n  SHORT: \"short\"\n});","map":{"version":3,"names":["DIM","PIECE_DELIMITER","COLORS","Object","freeze","WHITE","BLACK","PIECES","PAWN","ROOK","KNIGHT","BISHOP","KING","QUEEN","KINGS","BLACK_KING","WHITE_KING","CastlingRights","whiteShortCastle","whiteLongCastle","blackShortCastle","blackLongCastle","EnPassant","isPossible","x","y","CurrentSquareSelection","PossibleMoves","HalfMoves","FullMoves","IsWhiteToMove","updateIsWhiteToMove","value","updateHalfMoves","updateFullMoves","BoardPosition","Array","from","length","fill","EMPTY_SQUARE_PIECE","WHITE_PAWN_STARTING_SQUARE","BLACK_PAWN_STARTING_SQUARE","WHITE_EN_PASSANT_SQUARE","BLACK_EN_PASSANT_SQUARE","FEN_PIECES_WHITE","FEN_PIECES_BLACK","CASTLE_ROW_WHITE","CASTLE_ROW_BLACK","CASTLE_KING_INITIAL_COL","CASTLE_KING_FINAL_COL_LONG","CASTLE_KING_FINAL_COL_SHORT","CASTLE_ROOK_INITIAL_COL_LONG","CASTLE_ROOK_INITIAL_COL_SHORT","CASTLE_ROOK_FINAL_COL_LONG","CASTLE_ROOK_FINAL_COL_SHORT","CASTLE_PATH_COLS_LONG","CASTLE_PATH_COLS_SHORT","EMPTY_SQUARES_AFTER_LONG_CASTLE","EMPTY_SQUARES_AFTER_SHORT_CASTLE","PIECE_COLOR_INDEX","PIECE_PIECE_INDEX","CASTLING_TYPES","LONG","SHORT"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/Chess-React.js-/src/globalVariables.js"],"sourcesContent":["// Board dimensions and piece delimiter\r\nexport const DIM = 8; // 8x8 Board\r\nexport const PIECE_DELIMITER = '-'; // Format: {color-piece}, e.g., {black-pawn}\r\n\r\n// Color options (ENUM)\r\nexport const COLORS = Object.freeze({\r\n    WHITE: 'white',\r\n    BLACK: 'black'\r\n});\r\n\r\n// Piece names (ENUM)\r\nexport const PIECES = Object.freeze({\r\n    PAWN: \"pawn\",\r\n    ROOK: \"rook\",\r\n    KNIGHT: \"knight\",\r\n    BISHOP: \"bishop\",\r\n    KING: \"king\",\r\n    QUEEN: \"queen\"\r\n});\r\n\r\n// Quick access to kings (ENUM)\r\nexport const KINGS = Object.freeze({\r\n    BLACK_KING: `${COLORS.BLACK}${PIECE_DELIMITER}${PIECES.KING}`,\r\n    WHITE_KING: `${COLORS.WHITE}${PIECE_DELIMITER}${PIECES.KING}`\r\n});\r\n\r\n// Castling rights\r\nexport let CastlingRights = {\r\n    whiteShortCastle: false,\r\n    whiteLongCastle: false,\r\n    blackShortCastle: false,\r\n    blackLongCastle: false\r\n};\r\n\r\n// En Passant information\r\nexport let EnPassant = {\r\n    isPossible: false,\r\n    x: -1,\r\n    y: -1\r\n};\r\n\r\n// Current square selection\r\nexport let CurrentSquareSelection = {\r\n    x: -1,\r\n    y: -1\r\n};\r\n\r\n// Game state\r\nexport let PossibleMoves = [];\r\nexport let HalfMoves = 0;\r\nexport let FullMoves = 0;\r\nexport let IsWhiteToMove = false;\r\n\r\nexport function updateIsWhiteToMove(value) {\r\n    IsWhiteToMove = value;\r\n}\r\n\r\nexport function updateHalfMoves(value) {\r\n    HalfMoves = value;\r\n}\r\n\r\nexport function updateFullMoves(value) {\r\n    FullMoves = value;\r\n}\r\n\r\n// Board position\r\nexport let BoardPosition = Array.from({ length: DIM }, () => Array(DIM).fill(EMPTY_SQUARE_PIECE));\r\n\r\n// Starting positions and squares\r\nexport const WHITE_PAWN_STARTING_SQUARE = 6;\r\nexport const BLACK_PAWN_STARTING_SQUARE = 1;\r\nexport const WHITE_EN_PASSANT_SQUARE = 3;\r\nexport const BLACK_EN_PASSANT_SQUARE = 4;\r\n\r\n// FEN piece notations\r\nexport const FEN_PIECES_WHITE = Object.freeze({\r\n    PAWN: \"P\",\r\n    ROOK: \"R\",\r\n    KNIGHT: \"N\",\r\n    BISHOP: \"B\",\r\n    KING: \"K\",\r\n    QUEEN: \"Q\"\r\n});\r\nexport const FEN_PIECES_BLACK = Object.freeze({\r\n    PAWN: \"p\",\r\n    ROOK: \"r\",\r\n    KNIGHT: \"n\",\r\n    BISHOP: \"b\",\r\n    KING: \"k\",\r\n    QUEEN: \"q\"\r\n});\r\n\r\n// Empty square representation\r\nexport const EMPTY_SQUARE_PIECE = ' ';\r\n\r\n// Castling constants\r\nexport const CASTLE_ROW_WHITE = 7;\r\nexport const CASTLE_ROW_BLACK = 0;\r\nexport const CASTLE_KING_INITIAL_COL = 4;\r\nexport const CASTLE_KING_FINAL_COL_LONG = 2;\r\nexport const CASTLE_KING_FINAL_COL_SHORT = 6;\r\nexport const CASTLE_ROOK_INITIAL_COL_LONG = 0;\r\nexport const CASTLE_ROOK_INITIAL_COL_SHORT = 7;\r\nexport const CASTLE_ROOK_FINAL_COL_LONG = 3;\r\nexport const CASTLE_ROOK_FINAL_COL_SHORT = 5;\r\nexport const CASTLE_PATH_COLS_LONG = [1, 2, 3];\r\nexport const CASTLE_PATH_COLS_SHORT = [5, 6];\r\nexport const EMPTY_SQUARES_AFTER_LONG_CASTLE = [0, 1, 4];\r\nexport const EMPTY_SQUARES_AFTER_SHORT_CASTLE = [4, 7];\r\n\r\n// Indices for piece color and type\r\nexport const PIECE_COLOR_INDEX = 0;\r\nexport const PIECE_PIECE_INDEX = 1;\r\n\r\n// Castling types\r\nexport const CASTLING_TYPES = Object.freeze({\r\n    LONG: \"long\",\r\n    SHORT: \"short\"\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}