{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vladi Gotsin\\\\Desktop\\\\react\\\\Chess-React.js-\\\\src\\\\Board.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport React from 'react';\nimport { Square } from \"./Square.js\";\nimport { ConvertFENPieceToPiece, ConvertFenToString, UpdatePosition, ParseFEN } from \"./HelperMethods.js\";\n\n/*\r\nTODO:\r\nCode Reusability: refactor some of the repeated code and generate new functions if needed\r\nConsistency and Naming: Have better and more consistent names for variables and functions\r\nDocumentation: add more comments to understand what is going on\r\nTesting: add unit tests\r\nImplementations: add promotions, implement endgames (mate, stalemate, draws repeation, 50 moves rule)\r\nBugs: Fix bugs (if any)\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DIM = 8; //8x8 Board\nconst BLACK_KING = 'black-king';\nconst WHITE_KING = 'white-king';\nconst PIECE_DELIMITER = '-';\nconst WHITE = 'white';\nconst BLACK = 'black';\nconst PAWN = 'pawn';\nconst ROOK = 'rook';\nconst KNIGHT = 'knight';\nconst BISHOP = 'bishop';\nconst KING = 'king';\nconst QUEEN = 'queen';\nexport function Board() {\n  _s();\n  //<summary>\n  //FEN - Forsyth-Edwards Notation\n  //small letters - black pieces\n  //capital letters - white pieces\n  //numbers - empty board squares\n  //(/) - separates each board row\n  //first letter after the board indicates whose turn it is to move (w - white, b - black)\n  //next letters indicate castling rights, k - kingside, q - queenside, (-) - no castling allowed for any side\n  //en passant square - when a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square\n  //the number of half turns (white moves, then black moves = 2 half moves) that were made without a pawn move or a capture of a piece (50-move rule when reaches 100)\n  //the number of full moves (white moves, then black moves = 1 full move); increase after every black half move\n  //</summary>\n  //starting position\n  //'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\n  const [fen, setFen] = useState('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0');\n  const [boardPosition, setBoardPosition] = useState([[]]);\n  const [nextTurn, setNextTurn] = useState('');\n  const [WCastleK, setWCastleK] = useState(true);\n  const [WCastleQ, setWCastleQ] = useState(true);\n  const [BCastleK, setBCastleK] = useState(true);\n  const [BCastleQ, setBCastleQ] = useState(true);\n  const [enPassant, setEnPassant] = useState('');\n  const [halfMoves, setHalfMoves] = useState(0);\n  const [fullMoves, setFullMoves] = useState(0);\n  const [boardSquare, setBoardSquare] = useState([]);\n  const [possibleMoves, setPossibleMoves] = useState([]);\n  const [selectedSquareX, setSelectedSquareX] = useState('');\n  const [selectedSquareY, setSelectedSquareY] = useState('');\n  const [canWhiteShortCastle, setCanWhiteShortCastle] = useState(true);\n  const [canWhiteLongCastle, setCanWhiteLongCastle] = useState(true);\n  const [canBlackShortCastle, setCanBlackShortCastle] = useState(true);\n  const [canBlackLongCastle, setCanBlackLongCastle] = useState(true);\n  const [enPassantPossible, setEnPassantPossible] = useState(false);\n  const [enPassantX, setEnPassantX] = useState('');\n  const [enPassantY, setEnPassantY] = useState('');\n  const [isWhiteToMove, setIsWhiteToMove] = useState(true);\n\n  //called when the page loads.we need to parse the FEN to fill in the board\n  useEffect(() => {\n    console.log('Processing FEN');\n    fenParser();\n  }, []);\n\n  // useEffect(() => {\n  //     //console.log(possibleMoves)\n  // }, [possibleMoves])\n\n  // useEffect(() => {\n  //     console.log('Board position after update', boardPosition)\n  // }, [boardPosition])\n\n  useEffect(() => {\n    console.log('Board position after update', boardPosition);\n  }, [fen, boardPosition, enPassant, boardSquare, possibleMoves, selectedSquareX, selectedSquareY, canWhiteShortCastle, canWhiteLongCastle, canBlackShortCastle, canBlackLongCastle, enPassantPossible, enPassantX, enPassantY, isWhiteToMove]);\n\n  //parses the FEN for the initial board state\n  function fenParser() {\n    //parses the FEN string to variables\n    const {\n      fenBoard,\n      fenTurn,\n      fenCastling,\n      fenEnPassant,\n      fenHalfMoves,\n      fenFullMoves\n    } = ParseFEN(fen);\n    const fenRows = fenBoard.split('/');\n    let arr = [];\n\n    //splits all rows and creates a matrix for the board\n    for (let row of fenRows) {\n      const tokens = row.split('');\n      let r = [];\n      for (let i = 0; i < tokens.length; i++) {\n        if (Number(tokens[i])) {\n          for (let j = 0; j < Number(tokens[i]); j++) {\n            r.push(' ');\n          }\n        } else {\n          r.push(tokens[i]);\n        }\n      }\n      arr.push(r);\n    }\n\n    //generates a Square component for each element in the matrix created above\n    let boardSquares = [];\n    let squareColorIsWhite = true;\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0; j < arr[i].length; j++) {\n        let color = squareColorIsWhite ? \"\" : \"dark\";\n        boardSquares.push(\n        /*#__PURE__*/\n        // <Square\n        //     getPossibleMoves={getPossibleMoves}\n        //     key={`${i}-${j}`}\n        //     x={i}\n        //     y={j}\n        //     piece={ConvertFENPieceToPiece(arr[i][j])}\n        //     color={color}\n        //     selectedSquareX={selectedSquareX}\n        //     setSelectedSquareX={updateSelectedSquareX}\n        //     selectedSquareY={selectedSquareY}\n        //     setSelectedSquareY={updateSelectedSquareY}\n        //     possibleMoves={possibleMoves}\n        //     updatePossibleMoves={updatePossibleMoves}\n        //     movePiece={movePiece}\n        // />\n        _jsxDEV(Square, {\n          x: i,\n          y: j,\n          piece: ConvertFENPieceToPiece(arr[i][j]),\n          color: color,\n          fen: fen,\n          setFen: setFen,\n          boardPosition: boardPosition,\n          setBoardPosition: setBoardPosition,\n          nextTurn: nextTurn,\n          setNextTurn: setNextTurn,\n          WCastleK: WCastleK,\n          setWCastleK: setWCastleK,\n          WCastleQ: WCastleQ,\n          setWCastleQ: setWCastleQ,\n          BCastleK: BCastleK,\n          setBCastleK: setBCastleK,\n          BCastleQ: BCastleQ,\n          setBCastleQ: setBCastleQ,\n          enPassant: enPassant,\n          setEnPassant: setEnPassant,\n          halfMoves: halfMoves,\n          setHalfMoves: setHalfMoves,\n          fullMoves: fullMoves,\n          setFullMoves: setFullMoves,\n          boardSquare: boardSquare,\n          setBoardSquare: setBoardSquare,\n          possibleMoves: possibleMoves,\n          setPossibleMoves: setPossibleMoves,\n          selectedSquareX: selectedSquareX,\n          setSelectedSquareX: setSelectedSquareX,\n          selectedSquareY: selectedSquareY,\n          setSelectedSquareY: setSelectedSquareY,\n          canWhiteShortCastle: canWhiteShortCastle,\n          setCanWhiteShortCastle: setCanWhiteShortCastle,\n          canWhiteLongCastle: canWhiteLongCastle,\n          setCanWhiteLongCastle: setCanWhiteLongCastle,\n          canBlackShortCastle: canBlackShortCastle,\n          setCanBlackShortCastle: setCanBlackShortCastle,\n          canBlackLongCastle: canBlackLongCastle,\n          setCanBlackLongCastle: setCanBlackLongCastle,\n          enPassantPossible: enPassantPossible,\n          setEnPassantPossible: setEnPassantPossible,\n          enPassantX: enPassantX,\n          setEnPassantX: setEnPassantX,\n          enPassantY: enPassantY,\n          setEnPassantY: setEnPassantY,\n          isWhiteToMove: isWhiteToMove,\n          setIsWhiteToMove: setIsWhiteToMove,\n          fenParser: fenParser,\n          isWhiteInCheck: isWhiteInCheck,\n          isBlackInCheck: isBlackInCheck,\n          movePiece: movePiece,\n          updatePossibleMoves: updatePossibleMoves,\n          updateSelectedSquareX: updateSelectedSquareX,\n          updateSelectedSquareY: updateSelectedSquareY,\n          getATargetSquareByLocation: getATargetSquareByLocation,\n          getATargetSquareByPiece: getATargetSquareByPiece,\n          isSquareAvailable: isSquareAvailable,\n          isPawnOnStartingSquare: isPawnOnStartingSquare,\n          areSameColor: areSameColor,\n          doesTheSquareHasThePiece: doesTheSquareHasThePiece,\n          isPawnOnEnPassantSquare: isPawnOnEnPassantSquare,\n          isColorWhite: isColorWhite,\n          isColorBlack: isColorBlack,\n          checkIfCanWhiteLongCastle: checkIfCanWhiteLongCastle,\n          checkIfCanWhiteShortCastle: checkIfCanWhiteShortCastle,\n          checkIfCanBlackLongCastle: checkIfCanBlackLongCastle,\n          checkIfCanBlackShortCastle: checkIfCanBlackShortCastle,\n          convertCoordinatesToLocation: convertCoordinatesToLocation,\n          getPawnsPossibleMoves: getPawnsPossibleMoves,\n          getRooksPossibleMoves: getRooksPossibleMoves,\n          getBishopPossibleMoves: getBishopPossibleMoves,\n          getKnightPossibleMoves: getKnightPossibleMoves,\n          getKingPossibleMoves: getKingPossibleMoves,\n          getQueenPossibleMoves: getQueenPossibleMoves,\n          getPieceColor: getPieceColor,\n          getPiece: getPiece,\n          filterMovesIfInCheck: filterMovesIfInCheck,\n          filterMovesThatAllowIllegalCastling: filterMovesThatAllowIllegalCastling,\n          removeEmptyMoves: removeEmptyMoves,\n          getPossibleMoves: getPossibleMoves\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this));\n        squareColorIsWhite = !squareColorIsWhite;\n      }\n      squareColorIsWhite = !squareColorIsWhite;\n    }\n    let castles = fenCastling.split(\"\");\n\n    //parses the castling options from the FEN string\n    for (let i = 0; i < castles.length; i++) {\n      let castling = castles[i];\n      switch (castling) {\n        case \"K\":\n          setCanWhiteShortCastle(true);\n          break;\n        case \"k\":\n          setCanBlackShortCastle(true);\n          break;\n        case \"Q\":\n          setCanWhiteLongCastle(true);\n          break;\n        case \"q\":\n          setCanBlackLongCastle(true);\n          break;\n        default:\n          break;\n      }\n    }\n\n    //updates the state\n    setBoardPosition(arr);\n    setNextTurn(fenTurn);\n    setEnPassant(fenEnPassant);\n    setHalfMoves(fenHalfMoves);\n    setFullMoves(fenFullMoves);\n    setBoardSquare(boardSquares);\n    console.log('State updated');\n  }\n  function isWhiteInCheck(square, pseudo) {\n    let squares = boardSquare;\n    if (pseudo) {\n      const updatedSquares = squares.map(s => {\n        if (s.x === pseudo.x && s.y === pseudo.y) {\n          // Return a new Square component with the updated piece\n          return /*#__PURE__*/React.cloneElement(s, {\n            piece: pseudo.piece\n          });\n        } else {\n          // For other squares, return the original Square component\n          return s;\n        }\n      });\n      squares = updatedSquares;\n    }\n\n    //check for attackers in front of the white king\n    for (let i = square.x - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.x == i && s.y == square.y);\n      if (piece.piece.split(\"-\")[0] != \"white\") {\n        if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from behind\")\n          return true;\n        } else {\n          if (piece.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers behind the white king\n    for (let i = square.x + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.x == i && s.y == square.y);\n      if (piece.piece.split(\"-\")[0] != \"white\") {\n        if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the front\")\n          return true;\n        } else {\n          if (piece.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the left of the white king\n    for (let i = square.y - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.x == square.x && s.y == i);\n      if (piece.piece.split(\"-\")[0] != \"white\") {\n        if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the left\")\n          return true;\n        } else {\n          if (piece.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the right of the white king\n    for (let i = square.y + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.x == square.x && s.y == i);\n      if (piece.piece.split(\"-\")[0] != \"white\") {\n        if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the right\")\n          return true;\n        } else {\n          if (piece.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.x == square.x - i && s.y == square.y - i);\n      if (piece) {\n        if (piece.piece.split(\"-\")[0] != \"white\") {\n          if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\" || piece.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.x - square.x == -1 && piece.y - square.y == -1) {\n                //console.log(\"in check from top half of counterclockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from top half of counterclockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.x == square.x + i && s.y == square.y + i);\n      if (piece) {\n        if (piece.piece.split(\"-\")[0] != \"white\") {\n          if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\") {\n            return true;\n          } else {\n            if (piece.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.x == square.x - i && s.y == square.y + i);\n      if (piece) {\n        if (piece.piece.split(\"-\")[0] != \"white\") {\n          if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\" || piece.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.x - square.x == -1 && piece.y - square.y == 1) {\n                //console.log(\"in check from top half of clockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from top half of clockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.x == square.x + i && s.y == square.y - i);\n      if (piece) {\n        if (piece.piece.split(\"-\")[0] != \"white\") {\n          if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\") {\n            return true;\n          } else {\n            if (piece.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for knights check\n    let knight1 = squares.find(s => s.x == square.x - 2 && s.y == square.y - 1);\n    let knight2 = squares.find(s => s.x == square.x - 2 && s.y == square.y + 1);\n    let knight3 = squares.find(s => s.x == square.x + 2 && s.y == square.y - 1);\n    let knight4 = squares.find(s => s.x == square.x + 2 && s.y == square.y + 1);\n    let knight5 = squares.find(s => s.x == square.x - 1 && s.y == square.y + 2);\n    let knight6 = squares.find(s => s.x == square.x - 1 && s.y == square.y - 2);\n    let knight7 = squares.find(s => s.x == square.x + 1 && s.y == square.y + 2);\n    let knight8 = squares.find(s => s.x == square.x + 1 && s.y == square.y - 2);\n    if (knight1) {\n      if (knight1.piece.split(\"-\")[1] == \"knight\") {\n        if (knight1.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 1\")\n          return true;\n        }\n      }\n    }\n    if (knight2) {\n      if (knight2.piece.split(\"-\")[1] == \"knight\") {\n        if (knight2.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 2\")\n          return true;\n        }\n      }\n    }\n    if (knight3) {\n      if (knight3.piece.split(\"-\")[1] == \"knight\") {\n        if (knight3.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 3\")\n          return true;\n        }\n      }\n    }\n    if (knight4) {\n      if (knight4.piece.split(\"-\")[1] == \"knight\") {\n        if (knight4.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 4\")\n          return true;\n        }\n      }\n    }\n    if (knight5) {\n      if (knight5.piece.split(\"-\")[1] == \"knight\") {\n        if (knight5.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 5\")\n          return true;\n        }\n      }\n    }\n    if (knight6) {\n      if (knight6.piece.split(\"-\")[1] == \"knight\") {\n        if (knight6.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 6\")\n          return true;\n        }\n      }\n    }\n    if (knight7) {\n      if (knight7.piece.split(\"-\")[1] == \"knight\") {\n        if (knight7.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 7\")\n          return true;\n        }\n      }\n    }\n    if (knight8) {\n      if (knight8.piece.split(\"-\")[1] == \"knight\") {\n        if (knight8.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 8\")\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  function isBlackInCheck(square, pseudo) {\n    let squares = boardSquare;\n    if (pseudo) {\n      const updatedSquares = squares.map(s => {\n        if (s.x === pseudo.x && s.y === pseudo.y) {\n          // Return a new Square component with the updated piece\n          return /*#__PURE__*/React.cloneElement(s, {\n            piece: pseudo.piece\n          });\n        } else {\n          // For other squares, return the original Square component\n          return s;\n        }\n      });\n      squares = updatedSquares;\n    }\n\n    //check for attackers behind the black king\n    for (let i = square.x - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.x == i && s.y == square.y);\n      if (piece.piece.split(\"-\")[0] != \"black\") {\n        if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from behind\")\n          return true;\n        } else {\n          if (piece.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers in front of the black king\n    for (let i = square.x + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.x == i && s.y == square.y);\n      if (piece.piece.split(\"-\")[0] != \"black\") {\n        if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the front\")\n          return true;\n        } else {\n          if (piece.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the left of the black king\n    for (let i = square.y - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.x == square.x && s.y == i);\n      if (piece.piece.split(\"-\")[0] != \"black\") {\n        if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the left\")\n          return true;\n        } else {\n          if (piece.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the right of the black king\n    for (let i = square.y + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.x == square.x && s.y == i);\n      if (piece.piece.split(\"-\")[0] != \"black\") {\n        if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the right\")\n          return true;\n        } else {\n          if (piece.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.x == square.x - i && s.y == square.y - i);\n      if (piece) {\n        if (piece.piece.split(\"-\")[0] != \"black\") {\n          if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\") {\n            //console.log(\"in check from top half of counterclockwise diagonal\")\n            return true;\n          } else {\n            if (piece.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.x == square.x + i && s.y == square.y + i);\n      if (piece) {\n        if (piece.piece.split(\"-\")[0] != \"black\") {\n          if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\" || piece.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.x - square.x == 1 && piece.y - square.y == 1) {\n                //console.log(\"in check from bottom half of counterclockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from bottom half of counterclockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.x == square.x - i && s.y == square.y + i);\n      if (piece) {\n        if (piece.piece.split(\"-\")[0] != \"black\") {\n          if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\") {\n            //console.log(\"in check from top half of clockwise diagonal\")\n            return true;\n          } else {\n            if (piece.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.x == square.x + i && s.y == square.y - i);\n      if (piece) {\n        if (piece.piece.split(\"-\")[0] != \"black\") {\n          if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\" || piece.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.x - square.x == 1 && piece.y - square.y == -1) {\n                //console.log(\"in check from bottom half of clockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from bottom half of clockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for knights check\n    let knight1 = squares.find(s => s.x == square.x - 2 && s.y == square.y - 1);\n    let knight2 = squares.find(s => s.x == square.x - 2 && s.y == square.y + 1);\n    let knight3 = squares.find(s => s.x == square.x + 2 && s.y == square.y - 1);\n    let knight4 = squares.find(s => s.x == square.x + 2 && s.y == square.y + 1);\n    let knight5 = squares.find(s => s.x == square.x - 1 && s.y == square.y + 2);\n    let knight6 = squares.find(s => s.x == square.x - 1 && s.y == square.y - 2);\n    let knight7 = squares.find(s => s.x == square.x + 1 && s.y == square.y + 2);\n    let knight8 = squares.find(s => s.x == square.x + 1 && s.y == square.y - 2);\n    if (knight1) {\n      if (knight1.piece.split(\"-\")[1] == \"knight\") {\n        if (knight1.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 1\")\n          return true;\n        }\n      }\n    }\n    if (knight2) {\n      if (knight2.piece.split(\"-\")[1] == \"knight\") {\n        if (knight2.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 2\")\n          return true;\n        }\n      }\n    }\n    if (knight3) {\n      if (knight3.piece.split(\"-\")[1] == \"knight\") {\n        if (knight3.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 3\")\n          return true;\n        }\n      }\n    }\n    if (knight4) {\n      if (knight4.piece.split(\"-\")[1] == \"knight\") {\n        if (knight4.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 4\")\n          return true;\n        }\n      }\n    }\n    if (knight5) {\n      if (knight5.piece.split(\"-\")[1] == \"knight\") {\n        if (knight5.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 5\")\n          return true;\n        }\n      }\n    }\n    if (knight6) {\n      if (knight6.piece.split(\"-\")[1] == \"knight\") {\n        if (knight6.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 6\")\n          return true;\n        }\n      }\n    }\n    if (knight7) {\n      if (knight7.piece.split(\"-\")[1] == \"knight\") {\n        if (knight7.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 7\")\n          return true;\n        }\n      }\n    }\n    if (knight8) {\n      if (knight8.piece.split(\"-\")[1] == \"knight\") {\n        if (knight8.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 8\")\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  function movePiece(x, y) {\n    let squares = boardSquare;\n    let targetSquare = getATargetSquareByLocation(x, y);\n    let square = squares.find(s => s.x == selectedSquareX && s.y == selectedSquareY);\n    let color = getPieceColor(square);\n    let piece = getPiece(square);\n\n    //disable castling if the king moves\n    if (piece == \"king\") {\n      if (isColorWhite(color)) {\n        setCanWhiteLongCastle(false);\n        setCanWhiteShortCastle(false);\n      } else {\n        setCanBlackLongCastle(false);\n        setCanBlackShortCastle(false);\n      }\n    }\n\n    //disable castling if the rook moves\n    if (piece == \"rook\") {\n      if (square.x == 7 && square.y == 7) {\n        setCanWhiteShortCastle(false);\n      }\n      if (square.x == 0 && square.y == 7) {\n        setCanBlackShortCastle(false);\n      }\n      if (square.x == 7 && square.y == 0) {\n        setCanWhiteLongCastle(false);\n      }\n      if (square.x == 0 && square.y == 0) {\n        setCanBlackLongCastle(false);\n      }\n    }\n    let p = UpdatePosition(square, targetSquare, position);\n\n    //capturing enPassant\n    if (enPassantX && enPassantY && enPassantPossible) {\n      let enPassantTargetSquare = color == \"white\" ? squares.find(s => s.x == x + 1 && s.y == y) : squares.find(s => s.x == x - 1 && s.y == y);\n      let enPassantSquare = /*#__PURE__*/_jsxDEV(Square, {\n        x: square.x,\n        y: square.y,\n        piece: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 802,\n        columnNumber: 35\n      }, this);\n      p = UpdatePosition(enPassantSquare, enPassantTargetSquare, p);\n    }\n\n    //TODO: ensure p matches the new board Position format\n    //setBoardPosition(p)\n    setPossibleMoves([]);\n    setIsWhiteToMove(!isWhiteToMove);\n\n    //enabling en passant\n    if (piece == \"pawn\") {\n      if (Math.abs(square.x - targetSquare.x) == 2) {\n        let enPassant1 = squares.find(s => s.x == targetSquare.x && s.y == targetSquare.y - 1);\n        let enPassant2 = squares.find(s => s.x == targetSquare.x && s.y == targetSquare.y + 1);\n        if (enPassant1) {\n          if (enPassant1.piece.split(\"-\")[1] == \"pawn\") {\n            if (enPassant1.piece.split(\"-\")[0] != color) {\n              setEnPassantPossible(true);\n              setEnPassantX(targetSquare.x);\n              setEnPassantY(targetSquare.y);\n              return;\n            }\n          }\n        }\n        if (enPassant2) {\n          if (enPassant2.piece.split(\"-\")[1] == \"pawn\") {\n            if (enPassant2.piece.split(\"-\")[0] != color) {\n              setEnPassantPossible(true);\n              setEnPassantX(targetSquare.x);\n              setEnPassantY(targetSquare.y);\n              return;\n            }\n          }\n        }\n      }\n    }\n    setEnPassantPossible(false);\n    setEnPassantX('');\n    setEnPassantY('');\n  }\n\n  //updates the state with the possible moves\n  function updatePossibleMoves(moves) {\n    setPossibleMoves(moves);\n  }\n  ;\n\n  //updates the state with the selectedSquare X coordinates\n  function updateSelectedSquareX(x) {\n    setSelectedSquareX(x);\n  }\n\n  //updates the state with the selectedSquare Y coordinates\n  function updateSelectedSquareY(y) {\n    setSelectedSquareY(y);\n  }\n\n  //retrieves a speecific square from the board using x and y coordinates (location)\n  function getATargetSquareByLocation(x, y) {\n    let squares = boardSquare;\n    return squares.find(s => s.x === x && s.y === y);\n  }\n\n  //retrieves a speecific square from the board that has a certain piece\n  function getATargetSquareByPiece(piece) {\n    let squares = boardSquare;\n    return squares.find(s => s.piece == piece);\n  }\n\n  //check if a specific square has a piece assigned to it\n  function isSquareAvailable(square) {\n    return square && !square.piece;\n  }\n\n  //checks if a pawn is on its starting square and allows a 2-squares move\n  function isPawnOnStartingSquare(pawn) {\n    return isColorWhite(pawn.piece.split(PIECE_DELIMITER)[0]) ? pawn.x == 6 : pawn.x == 1;\n  }\n\n  //checks if two pieces have the same color\n  function areSameColor(square1, square2) {\n    if (!square1 || !square2) {\n      return;\n    }\n    let color1 = square1.piece.split(PIECE_DELIMITER)[0];\n    let color2 = square2.piece.split(PIECE_DELIMITER)[0];\n    return color1 == color2;\n  }\n\n  //checks if a square contains a certain piece\n  function doesTheSquareHasThePiece(square, piece) {\n    let p = getPiece(square);\n    return p == piece;\n  }\n\n  //cheks if a pawn is on En Passant square\n  function isPawnOnEnPassantSquare(pawn) {\n    return isColorWhite(pawn.piece.split(PIECE_DELIMITER)[0]) ? pawn.x == 3 : pawn.x == 4;\n  }\n\n  //checks if a color is white\n  function isColorWhite(color) {\n    return color == WHITE;\n  }\n\n  //checks if a color is black\n  function isColorBlack(color) {\n    return color == BLACK;\n  }\n\n  //checks if white is allowed to long castle\n  function checkIfCanWhiteLongCastle() {\n    return canWhiteLongCastle && boardPosition[7][0] == 'R' && boardPosition[7][1] == '' && boardPosition[7][2] == '' && boardPosition[7][3] == '';\n  }\n\n  //checks if white is allowed to short castle\n  function checkIfCanWhiteShortCastle() {\n    return canWhiteShortCastle && boardPosition[7][7] == 'R' && boardPosition[7][6] == '' && boardPosition[7][5] == '';\n  }\n\n  //checks if black is allowed to long castle\n  function checkIfCanBlackLongCastle() {\n    return canBlackLongCastle && boardPosition[0][0] == 'r' && boardPosition[0][1] == '' && boardPosition[0][2] == '' && boardPosition[0][3] == '';\n  }\n\n  //checks if black is allowed to short castle\n  function checkIfCanBlackShortCastle() {\n    return canBlackShortCastle && boardPosition[7][7] == 'r' && boardPosition[7][6] == '' && boardPosition[7][5] == '';\n  }\n\n  //converts board coordinates to X and Y position on the board, e.g., a8 = 0, 0\n  function convertCoordinatesToLocation(coordinates) {\n    let tokens = coordinates.split('');\n\n    //skip invalid coordinates\n    if (tokens.length != 2) {\n      return;\n    }\n    let letter = tokens[0].toString().toUpperCase();\n    let number = tokens[1];\n\n    //65 is the ASCII code for capital A which will give us 0 if we have A as a coordinate; A-F will give us 0-7 for x\n    //reverse the numbers since we draw the board top down\n    return {\n      x: letter.charCodeAt(0) - 65,\n      y: DIM - Number(number)\n    };\n  }\n\n  //gets all possible moves for a pawn\n  function getPawnsPossibleMoves(square) {\n    let color = getPieceColor(square); //get the piece color\n\n    let moves = [];\n    let position1Offset = 1;\n    let position2Offset = 2;\n\n    //flips the direction if the color is white\n    if (isColorWhite(color)) {\n      position1Offset *= -1;\n      position2Offset *= -1;\n    }\n\n    //get all forwards moves + the double move at the start\n    let targetPiece1 = getATargetSquareByLocation(square.x + position1Offset, square.y); //move pawn 1 square ahead\n    let targetPiece2 = getATargetSquareByLocation(square.x + position2Offset, square.y); //move pawn 2 squares ahead\n\n    //get potential neighbors to capture\n    let neighbor1 = getATargetSquareByLocation(square.x + position1Offset, square.y + position1Offset);\n    let neighbor2 = getATargetSquareByLocation(square.x + position1Offset, square.y + position1Offset * -1);\n\n    //get the En Passant coordinates\n    let enPassantCordinates = convertCoordinatesToLocation(enPassant);\n    let enPassantSquare = enPassantCordinates ? getATargetSquareByLocation(enPassantCordinates.x, enPassantCordinates.y) : '';\n    let isTheSquareInFrontAvailable = isSquareAvailable(targetPiece1);\n\n    //push the one move forward for a pawn\n    if (isTheSquareInFrontAvailable) {\n      moves.push(targetPiece1);\n    }\n\n    //two moves are allowed only if the two squares above are free/empty\n    //allowed if pawn hasn't moved before\n    if (isTheSquareInFrontAvailable && isSquareAvailable(targetPiece2) && isPawnOnStartingSquare(square)) {\n      moves.push(targetPiece2);\n    }\n\n    //push neighbour if there is a piece to capture and it's a different color than the pawn\n    if (!isSquareAvailable(neighbor1) && !areSameColor(neighbor1, square)) {\n      moves.push(neighbor1);\n    }\n\n    //push neighbour if there is a piece to capture and it's a different color than the pawn\n    if (!isSquareAvailable(neighbor2) && !areSameColor(neighbor2, square)) {\n      moves.push(neighbor2);\n    }\n\n    //add En Passant\n    if (enPassantSquare) {\n      moves.push(enPassantSquare);\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a rook\n  function getRooksPossibleMoves(square) {\n    let moves = [];\n    for (let i = square.x + 1; i < DIM; i++) {\n      let targetSquare = getATargetSquareByLocation(i, square.y);\n      if (isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    for (let i = square.x - 1; i >= 0; i--) {\n      let targetSquare = getATargetSquareByLocation(i, square.y);\n      if (isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    for (let i = square.y + 1; i < DIM; i++) {\n      let targetSquare = getATargetSquareByLocation(square.x, i);\n      if (isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    for (let i = square.y - 1; i >= 0; i--) {\n      let targetSquare = getATargetSquareByLocation(square.x, i);\n      if (isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a bishop\n  function getBishopPossibleMoves(square) {\n    let moves = [];\n    let counter = 0;\n    for (let i = 1; i <= DIM; i++) {\n      if (counter == 5) {\n        break;\n      }\n      let target1 = getATargetSquareByLocation(square.x - i, square.y - i);\n      let target2 = getATargetSquareByLocation(square.x - i, square.y + i);\n      let target3 = getATargetSquareByLocation(square.x + i, square.y + i);\n      let target4 = getATargetSquareByLocation(square.x + i, square.y - i);\n      if (target1 && isSquareAvailable(target1) && counter < 1) {\n        moves.push(target1);\n      } else {\n        if (!areSameColor(square, target1)) {\n          moves.push(target1);\n        }\n        counter++;\n      }\n      if (target2 && isSquareAvailable(target2) && counter < 2) {\n        moves.push(target2);\n      } else {\n        if (!areSameColor(square, target2)) {\n          moves.push(target2);\n        }\n        counter++;\n      }\n      if (target3 && isSquareAvailable(target3) && counter < 3) {\n        moves.push(target3);\n      } else {\n        if (!areSameColor(square, target3)) {\n          moves.push(target3);\n        }\n        counter++;\n      }\n      if (target4 && isSquareAvailable(target4) && counter < 4) {\n        moves.push(target4);\n      } else {\n        if (!areSameColor(square, target4)) {\n          moves.push(target4);\n        }\n        counter++;\n      }\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a knight\n  function getKnightPossibleMoves(square) {\n    let offset = 1;\n    let doubleOffset = 2 * offset;\n    let moves = [];\n    for (let i = 0; i < 8; i++) {\n      if (i != 0 && i % 2 == 0) {\n        offset *= -1;\n      }\n      let targetX = square.x + offset;\n      let targetY = square.y + doubleOffset;\n      let target = getATargetSquareByLocation(targetX, targetY);\n      if (target && isSquareAvailable(target)) {\n        moves.push(target);\n      } else {\n        if (!areSameColor(square, target)) {\n          moves.push(target);\n        }\n      }\n      doubleOffset *= -1;\n      if (i == 4) {\n        offset *= 2;\n        doubleOffset /= 2;\n      }\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a king\n  function getKingPossibleMoves(square) {\n    let moves = [];\n    let color = getPieceColor(square);\n\n    //gets all possible 1-square moves for the king\n    for (let i = -1; i < 2; i++) {\n      for (let j = -1; j < 2; j++) {\n        let targetPiece = getATargetSquareByLocation(square.x + i, square.y + j);\n        if (targetPiece && isSquareAvailable(targetPiece)) {\n          moves.push(targetPiece);\n        } else {\n          if (!areSameColor(square, targetPiece)) {\n            moves.push(targetPiece);\n          }\n        }\n      }\n    }\n\n    //Castling logic\n    const longCastleSquare = getATargetSquareByLocation(square.x, square.y - 2);\n    const shortCastleSquare = getATargetSquareByLocation(square.x, square.y + 2);\n    if (isColorWhite(color) && checkIfCanWhiteLongCastle()) {\n      moves.push(longCastleSquare);\n    }\n    if (isColorWhite(color) && checkIfCanWhiteShortCastle()) {\n      moves.push(shortCastleSquare);\n    }\n    if (isColorBlack(color) && checkIfCanBlackLongCastle()) {\n      moves.push(longCastleSquare);\n    }\n    if (isColorBlack(color) && checkIfCanBlackShortCastle()) {\n      moves.push(shortCastleSquare);\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a queen\n  function getQueenPossibleMoves(square) {\n    let moves = [];\n\n    //a queen has the same moves as a bishop and a rook\n    const rookMoves = getRooksPossibleMoves(square).moves;\n    const bishopMoves = getBishopPossibleMoves(square).moves;\n\n    // Concatenate the arrays of moves\n    moves.push(...rookMoves, ...bishopMoves);\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets the piece color\n  function getPieceColor(square) {\n    return square.piece.split(PIECE_DELIMITER)[0];\n  }\n\n  //gets the piece\n  function getPiece(square) {\n    return square.piece.split(PIECE_DELIMITER)[1];\n  }\n\n  //removes moves that do not deal with a check\n  function filterMovesIfInCheck(possibleMoves) {\n    let blackKing = getATargetSquareByPiece(BLACK_KING); //get the black king\n    let whiteKing = getATargetSquareByPiece(WHITE_KING); //get the white king\n\n    for (let i = 0; i < possibleMoves.length; i++) {\n      for (let j = 0; j < possibleMoves[i].moves; j++) {\n        if (possibleMoves[i].piece.piece == BLACK_KING) {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].moves[j].x,\n            y: possibleMoves[i].moves[j].y,\n            piece: \"black-king\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1256,\n            columnNumber: 32\n          }, this);\n          let pseudo = /*#__PURE__*/_jsxDEV(Square, {\n            x: blackKing.x,\n            y: blackKing.y,\n            piece: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1257,\n            columnNumber: 34\n          }, this);\n          let isInCheck = isBlackInCheck(move, pseudo);\n          if (isInCheck) {\n            possibleMoves[i].moves.splice(j, 1);\n            j--;\n          }\n        } else if (possibleMoves[i].piece.piece == WHITE_KING) {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].moves[j].x,\n            y: possibleMoves[i].moves[j].y,\n            piece: \"white-king\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1265,\n            columnNumber: 32\n          }, this);\n          let pseudo = /*#__PURE__*/_jsxDEV(Square, {\n            x: whiteKing.x,\n            y: whiteKing.y,\n            piece: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1266,\n            columnNumber: 34\n          }, this);\n          let isInCheck = isWhiteInCheck(move, pseudo);\n          if (isInCheck) {\n            possibleMoves[i].moves.splice(j, 1);\n            j--;\n          }\n        } else {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].moves[j].x,\n            y: possibleMoves[i].moves[j].y,\n            piece: possibleMoves[i].piece.piece\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1274,\n            columnNumber: 32\n          }, this);\n          let isInCheck = isBlackInCheck(blackKing, move) ? true : isWhiteInCheck(whiteKing, move);\n          if (isInCheck) {\n            possibleMoves[i].moves.splice(j, 1);\n            j--;\n          }\n        }\n      }\n    }\n    return possibleMoves;\n  }\n\n  //removes moves that allow illigal castling (castles through check for example)\n  function filterMovesThatAllowIllegalCastling(possibleMoves) {\n    let blackKing = getATargetSquareByPiece(BLACK_KING); //get the black king\n    let whiteKing = getATargetSquareByPiece(WHITE_KING); //get the white king\n\n    for (let i = 0; i < possibleMoves.length; i++) {\n      let whiteCastle1 = possibleMoves[i].moves.find(m => m.x == 7 && m.y == 6); //sqaure where king will be after short castle (white)\n      let whiteCastle2 = possibleMoves[i].moves.find(m => m.x == 7 && m.y == 2); //sqaure where king will be after long castle (white)\n      let blackCastle1 = possibleMoves[i].moves.find(m => m.x == 0 && m.y == 6); //square where king will be after shot castle (black)\n      let blackCastle2 = possibleMoves[i].moves.find(m => m.x == 0 && m.y == 2); //square where king will be after long castle (black)\n\n      if (possibleMoves[i].piece == blackKing || possibleMoves[i].piece == whiteKing) {\n        if (whiteCastle1) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.x == 7 && m.y == 5);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n        if (whiteCastle2) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.x == 7 && m.y == 3);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n        if (blackCastle1) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.x == 0 && m.y == 5);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n        if (blackCastle2) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.x == 0 && m.y == 3);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n      }\n\n      //prevents black to castle if in check\n      if (isBlackInCheck(blackKing)) {\n        if (blackCastle1) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove), 1);\n        }\n        if (blackCastle2) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove2), 1);\n        }\n      }\n\n      //prevents white to castle if in check\n      if (isWhiteInCheck(whiteKing)) {\n        if (whiteCastle1) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove), 1);\n        }\n        if (whiteCastle2) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove2), 1);\n        }\n      }\n    }\n    return possibleMoves;\n  }\n\n  //removes empty/undefined values for generated moves\n  function removeEmptyMoves(possibleMoves) {\n    for (let i = 0; i < possibleMoves.length; i++) {\n      if (possibleMoves[i].moves.length == 0) {\n        possibleMoves.splice(i, 1);\n        i--;\n        continue;\n      }\n      for (let j = 0; j < possibleMoves[i].moves.length; j++) {\n        if (!possibleMoves[i].moves[j]) {\n          possibleMoves[i].moves.splice(j, 1);\n          j--;\n        }\n      }\n    }\n    return possibleMoves;\n  }\n\n  //gets all possible/legal moves\n  function getPossibleMoves(x, y) {\n    let square = getATargetSquareByLocation(x, y);\n    // console.log(square)\n    // console.log(fen, boardPosition, enPassant, boardSquare, possibleMoves,\n    //     selectedSquareX, selectedSquareY, canWhiteShortCastle, canWhiteLongCastle,\n    //     canBlackShortCastle, canBlackLongCastle, enPassantPossible, enPassantX, enPassantY, isWhiteToMove)\n    console.log('Starting to get possible moves');\n    let possiblePieceMoves = [];\n\n    //if the square has a piece\n    if (square.piece) {\n      let color = getPieceColor(square); //get the piece color\n\n      //don't collect possible moves if it's black to move and you're trying to move a white piece\n      if (isColorWhite(color) && !isWhiteToMove) {\n        return;\n      }\n\n      //don't collect possible moves if it's white to move and you're trying to move a black piece\n      if (isColorBlack(color) && isWhiteToMove) {\n        return;\n      }\n\n      //get all possible moves for each piece\n      possiblePieceMoves.push(getPawnsPossibleMoves(square));\n      possiblePieceMoves.push(getRooksPossibleMoves(square));\n      possiblePieceMoves.push(getBishopPossibleMoves(square));\n      possiblePieceMoves.push(getKnightPossibleMoves(square));\n      possiblePieceMoves.push(getKingPossibleMoves(square));\n      possiblePieceMoves.push(getQueenPossibleMoves(square));\n\n      //filter empty moves\n      possiblePieceMoves = removeEmptyMoves(possiblePieceMoves);\n\n      //filter possible moves\n      possiblePieceMoves = filterMovesIfInCheck(possiblePieceMoves);\n      possiblePieceMoves = filterMovesThatAllowIllegalCastling(possiblePieceMoves);\n    }\n    console.log(\"Possible Moves:\", possiblePieceMoves);\n    updatePossibleMoves(possiblePieceMoves);\n  }\n\n  //renders the board\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessGrid\",\n      children: boardSquare.map(sqr => sqr)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1422,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Board, \"btfBPEn5+RmeFxzDs2DGlPSAQiQ=\");\n_c = Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useState","useEffect","React","Square","ConvertFENPieceToPiece","ConvertFenToString","UpdatePosition","ParseFEN","jsxDEV","_jsxDEV","Fragment","_Fragment","DIM","BLACK_KING","WHITE_KING","PIECE_DELIMITER","WHITE","BLACK","PAWN","ROOK","KNIGHT","BISHOP","KING","QUEEN","Board","_s","fen","setFen","boardPosition","setBoardPosition","nextTurn","setNextTurn","WCastleK","setWCastleK","WCastleQ","setWCastleQ","BCastleK","setBCastleK","BCastleQ","setBCastleQ","enPassant","setEnPassant","halfMoves","setHalfMoves","fullMoves","setFullMoves","boardSquare","setBoardSquare","possibleMoves","setPossibleMoves","selectedSquareX","setSelectedSquareX","selectedSquareY","setSelectedSquareY","canWhiteShortCastle","setCanWhiteShortCastle","canWhiteLongCastle","setCanWhiteLongCastle","canBlackShortCastle","setCanBlackShortCastle","canBlackLongCastle","setCanBlackLongCastle","enPassantPossible","setEnPassantPossible","enPassantX","setEnPassantX","enPassantY","setEnPassantY","isWhiteToMove","setIsWhiteToMove","console","log","fenParser","fenBoard","fenTurn","fenCastling","fenEnPassant","fenHalfMoves","fenFullMoves","fenRows","split","arr","row","tokens","r","i","length","Number","j","push","boardSquares","squareColorIsWhite","color","x","y","piece","isWhiteInCheck","isBlackInCheck","movePiece","updatePossibleMoves","updateSelectedSquareX","updateSelectedSquareY","getATargetSquareByLocation","getATargetSquareByPiece","isSquareAvailable","isPawnOnStartingSquare","areSameColor","doesTheSquareHasThePiece","isPawnOnEnPassantSquare","isColorWhite","isColorBlack","checkIfCanWhiteLongCastle","checkIfCanWhiteShortCastle","checkIfCanBlackLongCastle","checkIfCanBlackShortCastle","convertCoordinatesToLocation","getPawnsPossibleMoves","getRooksPossibleMoves","getBishopPossibleMoves","getKnightPossibleMoves","getKingPossibleMoves","getQueenPossibleMoves","getPieceColor","getPiece","filterMovesIfInCheck","filterMovesThatAllowIllegalCastling","removeEmptyMoves","getPossibleMoves","fileName","_jsxFileName","lineNumber","columnNumber","castles","castling","square","pseudo","squares","updatedSquares","map","s","cloneElement","find","knight1","knight2","knight3","knight4","knight5","knight6","knight7","knight8","targetSquare","p","position","enPassantTargetSquare","enPassantSquare","Math","abs","enPassant1","enPassant2","moves","pawn","square1","square2","color1","color2","coordinates","letter","toString","toUpperCase","number","charCodeAt","position1Offset","position2Offset","targetPiece1","targetPiece2","neighbor1","neighbor2","enPassantCordinates","isTheSquareInFrontAvailable","counter","target1","target2","target3","target4","offset","doubleOffset","targetX","targetY","target","targetPiece","longCastleSquare","shortCastleSquare","rookMoves","bishopMoves","blackKing","whiteKing","move","isInCheck","splice","whiteCastle1","m","whiteCastle2","blackCastle1","blackCastle2","pieceAcross","indexOf","castleMove","castleMove2","possiblePieceMoves","children","className","sqr","_c","$RefreshReg$"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/Chess-React.js-/src/Board.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport React from 'react';\r\nimport { Square } from \"./Square.js\"\r\nimport { ConvertFENPieceToPiece, ConvertFenToString, UpdatePosition, ParseFEN } from \"./HelperMethods.js\";\r\n\r\n\r\n/*\r\nTODO:\r\nCode Reusability: refactor some of the repeated code and generate new functions if needed\r\nConsistency and Naming: Have better and more consistent names for variables and functions\r\nDocumentation: add more comments to understand what is going on\r\nTesting: add unit tests\r\nImplementations: add promotions, implement endgames (mate, stalemate, draws repeation, 50 moves rule)\r\nBugs: Fix bugs (if any)\r\n*/\r\n\r\nconst DIM = 8; //8x8 Board\r\nconst BLACK_KING = 'black-king';\r\nconst WHITE_KING = 'white-king';\r\nconst PIECE_DELIMITER = '-';\r\nconst WHITE = 'white';\r\nconst BLACK = 'black';\r\nconst PAWN = 'pawn';\r\nconst ROOK = 'rook';\r\nconst KNIGHT = 'knight';\r\nconst BISHOP = 'bishop';\r\nconst KING = 'king';\r\nconst QUEEN = 'queen';\r\n\r\nexport function Board() {\r\n    //<summary>\r\n    //FEN - Forsyth-Edwards Notation\r\n    //small letters - black pieces\r\n    //capital letters - white pieces\r\n    //numbers - empty board squares\r\n    //(/) - separates each board row\r\n    //first letter after the board indicates whose turn it is to move (w - white, b - black)\r\n    //next letters indicate castling rights, k - kingside, q - queenside, (-) - no castling allowed for any side\r\n    //en passant square - when a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square\r\n    //the number of half turns (white moves, then black moves = 2 half moves) that were made without a pawn move or a capture of a piece (50-move rule when reaches 100)\r\n    //the number of full moves (white moves, then black moves = 1 full move); increase after every black half move\r\n    //</summary>\r\n    //starting position\r\n    //'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\r\n    const [fen, setFen] = useState('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0')\r\n    const [boardPosition, setBoardPosition] = useState([[]])\r\n    const [nextTurn, setNextTurn] = useState('')\r\n    const [WCastleK, setWCastleK] = useState(true)\r\n    const [WCastleQ, setWCastleQ] = useState(true)\r\n    const [BCastleK, setBCastleK] = useState(true)\r\n    const [BCastleQ, setBCastleQ] = useState(true)\r\n    const [enPassant, setEnPassant] = useState('')\r\n    const [halfMoves, setHalfMoves] = useState(0)\r\n    const [fullMoves, setFullMoves] = useState(0)\r\n    const [boardSquare, setBoardSquare] = useState([])\r\n    const [possibleMoves, setPossibleMoves] = useState([])\r\n    const [selectedSquareX, setSelectedSquareX] = useState('')\r\n    const [selectedSquareY, setSelectedSquareY] = useState('')\r\n    const [canWhiteShortCastle, setCanWhiteShortCastle] = useState(true)\r\n    const [canWhiteLongCastle, setCanWhiteLongCastle] = useState(true)\r\n    const [canBlackShortCastle, setCanBlackShortCastle] = useState(true)\r\n    const [canBlackLongCastle, setCanBlackLongCastle] = useState(true)\r\n    const [enPassantPossible, setEnPassantPossible] = useState(false)\r\n    const [enPassantX, setEnPassantX] = useState('')\r\n    const [enPassantY, setEnPassantY] = useState('')\r\n    const [isWhiteToMove, setIsWhiteToMove] = useState(true)\r\n\r\n    //called when the page loads.we need to parse the FEN to fill in the board\r\n    useEffect(() => {\r\n        console.log('Processing FEN')\r\n        fenParser()\r\n    }, [])\r\n\r\n    // useEffect(() => {\r\n    //     //console.log(possibleMoves)\r\n    // }, [possibleMoves])\r\n\r\n    // useEffect(() => {\r\n    //     console.log('Board position after update', boardPosition)\r\n    // }, [boardPosition])\r\n\r\n    useEffect(() => {\r\n        console.log('Board position after update', boardPosition)\r\n    }, [fen, boardPosition, enPassant, boardSquare, possibleMoves,\r\n        selectedSquareX, selectedSquareY, canWhiteShortCastle, canWhiteLongCastle,\r\n        canBlackShortCastle, canBlackLongCastle, enPassantPossible, enPassantX, enPassantY, isWhiteToMove])\r\n\r\n    //parses the FEN for the initial board state\r\n    function fenParser() {\r\n        //parses the FEN string to variables\r\n        const { fenBoard, fenTurn, fenCastling, fenEnPassant, fenHalfMoves, fenFullMoves } = ParseFEN(fen)\r\n\r\n        const fenRows = fenBoard.split('/')\r\n\r\n        let arr = [];\r\n\r\n        //splits all rows and creates a matrix for the board\r\n        for (let row of fenRows) {\r\n            const tokens = row.split('')\r\n\r\n            let r = []\r\n\r\n            for (let i = 0; i < tokens.length; i++) {\r\n                if (Number(tokens[i])) {\r\n                    for (let j = 0; j < Number(tokens[i]); j++) {\r\n                        r.push(' ')\r\n                    }\r\n                } else {\r\n                    r.push(tokens[i])\r\n                }\r\n            }\r\n\r\n            arr.push(r)\r\n        }\r\n\r\n        //generates a Square component for each element in the matrix created above\r\n        let boardSquares = [];\r\n        let squareColorIsWhite = true;\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            for (let j = 0; j < arr[i].length; j++) {\r\n                let color = squareColorIsWhite ? \"\" : \"dark\";\r\n                boardSquares.push(\r\n                    // <Square\r\n                    //     getPossibleMoves={getPossibleMoves}\r\n                    //     key={`${i}-${j}`}\r\n                    //     x={i}\r\n                    //     y={j}\r\n                    //     piece={ConvertFENPieceToPiece(arr[i][j])}\r\n                    //     color={color}\r\n                    //     selectedSquareX={selectedSquareX}\r\n                    //     setSelectedSquareX={updateSelectedSquareX}\r\n                    //     selectedSquareY={selectedSquareY}\r\n                    //     setSelectedSquareY={updateSelectedSquareY}\r\n                    //     possibleMoves={possibleMoves}\r\n                    //     updatePossibleMoves={updatePossibleMoves}\r\n                    //     movePiece={movePiece}\r\n                    // />\r\n                    <Square\r\n                        key={`${i}-${j}`}\r\n                        x={i}\r\n                        y={j}\r\n                        piece={ConvertFENPieceToPiece(arr[i][j])}\r\n                        color={color}\r\n                        fen={fen} setFen={setFen}\r\n                        boardPosition={boardPosition} setBoardPosition={setBoardPosition}\r\n                        nextTurn={nextTurn} setNextTurn={setNextTurn}\r\n                        WCastleK={WCastleK} setWCastleK={setWCastleK}\r\n                        WCastleQ={WCastleQ} setWCastleQ={setWCastleQ}\r\n                        BCastleK={BCastleK} setBCastleK={setBCastleK}\r\n                        BCastleQ={BCastleQ} setBCastleQ={setBCastleQ}\r\n                        enPassant={enPassant} setEnPassant={setEnPassant}\r\n                        halfMoves={halfMoves} setHalfMoves={setHalfMoves}\r\n                        fullMoves={fullMoves} setFullMoves={setFullMoves}\r\n                        boardSquare={boardSquare} setBoardSquare={setBoardSquare}\r\n                        possibleMoves={possibleMoves} setPossibleMoves={setPossibleMoves}\r\n                        selectedSquareX={selectedSquareX} setSelectedSquareX={setSelectedSquareX}\r\n                        selectedSquareY={selectedSquareY} setSelectedSquareY={setSelectedSquareY}\r\n                        canWhiteShortCastle={canWhiteShortCastle} setCanWhiteShortCastle={setCanWhiteShortCastle}\r\n                        canWhiteLongCastle={canWhiteLongCastle} setCanWhiteLongCastle={setCanWhiteLongCastle}\r\n                        canBlackShortCastle={canBlackShortCastle} setCanBlackShortCastle={setCanBlackShortCastle}\r\n                        canBlackLongCastle={canBlackLongCastle} setCanBlackLongCastle={setCanBlackLongCastle}\r\n                        enPassantPossible={enPassantPossible} setEnPassantPossible={setEnPassantPossible}\r\n                        enPassantX={enPassantX} setEnPassantX={setEnPassantX}\r\n                        enPassantY={enPassantY} setEnPassantY={setEnPassantY}\r\n                        isWhiteToMove={isWhiteToMove} setIsWhiteToMove={setIsWhiteToMove}\r\n                        fenParser={fenParser} isWhiteInCheck={isWhiteInCheck}\r\n                        isBlackInCheck={isBlackInCheck} movePiece={movePiece}\r\n                        updatePossibleMoves={updatePossibleMoves} updateSelectedSquareX={updateSelectedSquareX}\r\n                        updateSelectedSquareY={updateSelectedSquareY} getATargetSquareByLocation={getATargetSquareByLocation}\r\n                        getATargetSquareByPiece={getATargetSquareByPiece} isSquareAvailable={isSquareAvailable}\r\n                        isPawnOnStartingSquare={isPawnOnStartingSquare} areSameColor={areSameColor}\r\n                        doesTheSquareHasThePiece={doesTheSquareHasThePiece} isPawnOnEnPassantSquare={isPawnOnEnPassantSquare}\r\n                        isColorWhite={isColorWhite} isColorBlack={isColorBlack} checkIfCanWhiteLongCastle={checkIfCanWhiteLongCastle}\r\n                        checkIfCanWhiteShortCastle={checkIfCanWhiteShortCastle} checkIfCanBlackLongCastle={checkIfCanBlackLongCastle}\r\n                        checkIfCanBlackShortCastle={checkIfCanBlackShortCastle} convertCoordinatesToLocation={convertCoordinatesToLocation}\r\n                        getPawnsPossibleMoves={getPawnsPossibleMoves} getRooksPossibleMoves={getRooksPossibleMoves}\r\n                        getBishopPossibleMoves={getBishopPossibleMoves} getKnightPossibleMoves={getKnightPossibleMoves}\r\n                        getKingPossibleMoves={getKingPossibleMoves} getQueenPossibleMoves={getQueenPossibleMoves}\r\n                        getPieceColor={getPieceColor} getPiece={getPiece} filterMovesIfInCheck={filterMovesIfInCheck}\r\n                        filterMovesThatAllowIllegalCastling={filterMovesThatAllowIllegalCastling} removeEmptyMoves={removeEmptyMoves}\r\n                        getPossibleMoves={getPossibleMoves}\r\n                    />\r\n                )\r\n                squareColorIsWhite = !squareColorIsWhite;\r\n            }\r\n            squareColorIsWhite = !squareColorIsWhite;\r\n        }\r\n\r\n        let castles = fenCastling.split(\"\");\r\n\r\n        //parses the castling options from the FEN string\r\n        for (let i = 0; i < castles.length; i++) {\r\n            let castling = castles[i]\r\n\r\n            switch (castling) {\r\n                case \"K\":\r\n                    setCanWhiteShortCastle(true)\r\n                    break;\r\n                case \"k\":\r\n                    setCanBlackShortCastle(true)\r\n                    break;\r\n                case \"Q\":\r\n                    setCanWhiteLongCastle(true)\r\n                    break;\r\n                case \"q\":\r\n                    setCanBlackLongCastle(true)\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        //updates the state\r\n        setBoardPosition(arr)\r\n        setNextTurn(fenTurn)\r\n        setEnPassant(fenEnPassant)\r\n        setHalfMoves(fenHalfMoves)\r\n        setFullMoves(fenFullMoves)\r\n        setBoardSquare(boardSquares)\r\n        console.log('State updated')\r\n    }\r\n\r\n    function isWhiteInCheck(square, pseudo) {\r\n        let squares = boardSquare\r\n\r\n        if (pseudo) {\r\n            const updatedSquares = squares.map(s => {\r\n                if (s.x === pseudo.x && s.y === pseudo.y) {\r\n                    // Return a new Square component with the updated piece\r\n                    return React.cloneElement(s, { piece: pseudo.piece });\r\n                } else {\r\n                    // For other squares, return the original Square component\r\n                    return s;\r\n                }\r\n            });\r\n\r\n            squares = updatedSquares;\r\n        }\r\n\r\n        //check for attackers in front of the white king\r\n        for (let i = square.x - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.x == i && s.y == square.y)\r\n            if (piece.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from behind\")\r\n                    return true\r\n                } else {\r\n                    if (piece.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers behind the white king\r\n        for (let i = square.x + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.x == i && s.y == square.y)\r\n            if (piece.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the front\")\r\n                    return true\r\n                } else {\r\n                    if (piece.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the left of the white king\r\n        for (let i = square.y - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.x == square.x && s.y == i)\r\n            if (piece.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the left\")\r\n                    return true\r\n                } else {\r\n                    if (piece.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the right of the white king\r\n        for (let i = square.y + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.x == square.x && s.y == i)\r\n            if (piece.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the right\")\r\n                    return true\r\n                } else {\r\n                    if (piece.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.x == square.x - i && s.y == square.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\" || piece.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.x - square.x == -1 && piece.y - square.y == -1) {\r\n                                //console.log(\"in check from top half of counterclockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from top half of counterclockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.x == square.x + i && s.y == square.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\") {\r\n                        return true\r\n                    } else {\r\n                        if (piece.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.x == square.x - i && s.y == square.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\" || piece.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.x - square.x == -1 && piece.y - square.y == 1) {\r\n                                //console.log(\"in check from top half of clockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from top half of clockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.x == square.x + i && s.y == square.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\") {\r\n                        return true;\r\n                    } else {\r\n                        if (piece.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for knights check\r\n        let knight1 = squares.find(s => s.x == square.x - 2 && s.y == square.y - 1)\r\n        let knight2 = squares.find(s => s.x == square.x - 2 && s.y == square.y + 1)\r\n        let knight3 = squares.find(s => s.x == square.x + 2 && s.y == square.y - 1)\r\n        let knight4 = squares.find(s => s.x == square.x + 2 && s.y == square.y + 1)\r\n        let knight5 = squares.find(s => s.x == square.x - 1 && s.y == square.y + 2)\r\n        let knight6 = squares.find(s => s.x == square.x - 1 && s.y == square.y - 2)\r\n        let knight7 = squares.find(s => s.x == square.x + 1 && s.y == square.y + 2)\r\n        let knight8 = squares.find(s => s.x == square.x + 1 && s.y == square.y - 2)\r\n\r\n        if (knight1) {\r\n            if (knight1.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight1.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 1\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight2) {\r\n            if (knight2.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight2.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 2\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight3) {\r\n            if (knight3.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight3.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 3\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight4) {\r\n            if (knight4.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight4.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 4\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight5) {\r\n            if (knight5.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight5.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 5\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight6) {\r\n            if (knight6.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight6.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 6\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight7) {\r\n            if (knight7.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight7.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 7\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight8) {\r\n            if (knight8.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight8.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 8\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function isBlackInCheck(square, pseudo) {\r\n        let squares = boardSquare\r\n\r\n        if (pseudo) {\r\n            const updatedSquares = squares.map(s => {\r\n                if (s.x === pseudo.x && s.y === pseudo.y) {\r\n                    // Return a new Square component with the updated piece\r\n                    return React.cloneElement(s, { piece: pseudo.piece });\r\n                } else {\r\n                    // For other squares, return the original Square component\r\n                    return s;\r\n                }\r\n            });\r\n\r\n            squares = updatedSquares;\r\n        }\r\n\r\n        //check for attackers behind the black king\r\n        for (let i = square.x - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.x == i && s.y == square.y)\r\n            if (piece.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from behind\")\r\n                    return true\r\n                } else {\r\n                    if (piece.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers in front of the black king\r\n        for (let i = square.x + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.x == i && s.y == square.y)\r\n            if (piece.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the front\")\r\n                    return true\r\n                } else {\r\n                    if (piece.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the left of the black king\r\n        for (let i = square.y - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.x == square.x && s.y == i)\r\n            if (piece.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the left\")\r\n                    return true\r\n                } else {\r\n                    if (piece.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the right of the black king\r\n        for (let i = square.y + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.x == square.x && s.y == i)\r\n            if (piece.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the right\")\r\n                    return true\r\n                } else {\r\n                    if (piece.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.x == square.x - i && s.y == square.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\") {\r\n                        //console.log(\"in check from top half of counterclockwise diagonal\")\r\n                        return true\r\n                    } else {\r\n                        if (piece.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.x == square.x + i && s.y == square.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\" || piece.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.x - square.x == 1 && piece.y - square.y == 1) {\r\n                                //console.log(\"in check from bottom half of counterclockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from bottom half of counterclockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.x == square.x - i && s.y == square.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\") {\r\n                        //console.log(\"in check from top half of clockwise diagonal\")\r\n                        return true\r\n                    } else {\r\n                        if (piece.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.x == square.x + i && s.y == square.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.piece.split(\"-\")[1] == \"queen\" || piece.piece.split(\"-\")[1] == \"bishop\" || piece.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.x - square.x == 1 && piece.y - square.y == -1) {\r\n                                //console.log(\"in check from bottom half of clockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from bottom half of clockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for knights check\r\n        let knight1 = squares.find(s => s.x == square.x - 2 && s.y == square.y - 1)\r\n        let knight2 = squares.find(s => s.x == square.x - 2 && s.y == square.y + 1)\r\n        let knight3 = squares.find(s => s.x == square.x + 2 && s.y == square.y - 1)\r\n        let knight4 = squares.find(s => s.x == square.x + 2 && s.y == square.y + 1)\r\n        let knight5 = squares.find(s => s.x == square.x - 1 && s.y == square.y + 2)\r\n        let knight6 = squares.find(s => s.x == square.x - 1 && s.y == square.y - 2)\r\n        let knight7 = squares.find(s => s.x == square.x + 1 && s.y == square.y + 2)\r\n        let knight8 = squares.find(s => s.x == square.x + 1 && s.y == square.y - 2)\r\n\r\n        if (knight1) {\r\n            if (knight1.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight1.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 1\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight2) {\r\n            if (knight2.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight2.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 2\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight3) {\r\n            if (knight3.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight3.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 3\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight4) {\r\n            if (knight4.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight4.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 4\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight5) {\r\n            if (knight5.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight5.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 5\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight6) {\r\n            if (knight6.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight6.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 6\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight7) {\r\n            if (knight7.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight7.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 7\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight8) {\r\n            if (knight8.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight8.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 8\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function movePiece(x, y) {\r\n        let squares = boardSquare;\r\n\r\n        let targetSquare = getATargetSquareByLocation(x, y)\r\n        let square = squares.find(s => s.x == selectedSquareX && s.y == selectedSquareY)\r\n\r\n        let color = getPieceColor(square)\r\n        let piece = getPiece(square)\r\n\r\n        //disable castling if the king moves\r\n        if (piece == \"king\") {\r\n            if (isColorWhite(color)) {\r\n                setCanWhiteLongCastle(false)\r\n                setCanWhiteShortCastle(false)\r\n            } else {\r\n                setCanBlackLongCastle(false)\r\n                setCanBlackShortCastle(false)\r\n            }\r\n        }\r\n\r\n        //disable castling if the rook moves\r\n        if (piece == \"rook\") {\r\n            if (square.x == 7 && square.y == 7) {\r\n                setCanWhiteShortCastle(false)\r\n            }\r\n\r\n            if (square.x == 0 && square.y == 7) {\r\n                setCanBlackShortCastle(false)\r\n            }\r\n\r\n            if (square.x == 7 && square.y == 0) {\r\n                setCanWhiteLongCastle(false)\r\n            }\r\n\r\n            if (square.x == 0 && square.y == 0) {\r\n                setCanBlackLongCastle(false)\r\n            }\r\n        }\r\n\r\n        let p = UpdatePosition(square, targetSquare, position)\r\n\r\n        //capturing enPassant\r\n        if (enPassantX && enPassantY && enPassantPossible) {\r\n            let enPassantTargetSquare = color == \"white\" ? squares.find(s => s.x == x + 1 && s.y == y) : squares.find(s => s.x == x - 1 && s.y == y)\r\n            let enPassantSquare = <Square x={square.x} y={square.y} piece={\"\"} />\r\n\r\n            p = UpdatePosition(enPassantSquare, enPassantTargetSquare, p)\r\n        }\r\n\r\n        //TODO: ensure p matches the new board Position format\r\n        //setBoardPosition(p)\r\n        setPossibleMoves([])\r\n        setIsWhiteToMove(!isWhiteToMove)\r\n\r\n        //enabling en passant\r\n        if (piece == \"pawn\") {\r\n            if (Math.abs(square.x - targetSquare.x) == 2) {\r\n                let enPassant1 = squares.find(s => s.x == targetSquare.x && s.y == targetSquare.y - 1)\r\n                let enPassant2 = squares.find(s => s.x == targetSquare.x && s.y == targetSquare.y + 1)\r\n\r\n                if (enPassant1) {\r\n                    if (enPassant1.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (enPassant1.piece.split(\"-\")[0] != color) {\r\n                            setEnPassantPossible(true)\r\n                            setEnPassantX(targetSquare.x)\r\n                            setEnPassantY(targetSquare.y)\r\n                            return\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (enPassant2) {\r\n                    if (enPassant2.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (enPassant2.piece.split(\"-\")[0] != color) {\r\n                            setEnPassantPossible(true)\r\n                            setEnPassantX(targetSquare.x)\r\n                            setEnPassantY(targetSquare.y)\r\n                            return\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        setEnPassantPossible(false)\r\n        setEnPassantX('')\r\n        setEnPassantY('')\r\n    }\r\n\r\n    //updates the state with the possible moves\r\n    function updatePossibleMoves(moves) {\r\n        setPossibleMoves(moves)\r\n    };\r\n\r\n    //updates the state with the selectedSquare X coordinates\r\n    function updateSelectedSquareX(x) {\r\n        setSelectedSquareX(x)\r\n    }\r\n\r\n    //updates the state with the selectedSquare Y coordinates\r\n    function updateSelectedSquareY(y) {\r\n        setSelectedSquareY(y)\r\n    }\r\n\r\n    //retrieves a speecific square from the board using x and y coordinates (location)\r\n    function getATargetSquareByLocation(x, y) {\r\n        let squares = boardSquare\r\n\r\n        return squares.find(s => s.x === x && s.y === y);\r\n    }\r\n\r\n    //retrieves a speecific square from the board that has a certain piece\r\n    function getATargetSquareByPiece(piece) {\r\n        let squares = boardSquare\r\n\r\n        return squares.find(s => s.piece == piece);\r\n    }\r\n\r\n    //check if a specific square has a piece assigned to it\r\n    function isSquareAvailable(square) {\r\n        return square && !square.piece\r\n    }\r\n\r\n    //checks if a pawn is on its starting square and allows a 2-squares move\r\n    function isPawnOnStartingSquare(pawn) {\r\n        return isColorWhite(pawn.piece.split(PIECE_DELIMITER)[0]) ? pawn.x == 6 : pawn.x == 1\r\n    }\r\n\r\n    //checks if two pieces have the same color\r\n    function areSameColor(square1, square2) {\r\n        if (!square1 || !square2) {\r\n            return\r\n        }\r\n\r\n        let color1 = square1.piece.split(PIECE_DELIMITER)[0];\r\n        let color2 = square2.piece.split(PIECE_DELIMITER)[0];\r\n\r\n        return color1 == color2\r\n    }\r\n\r\n    //checks if a square contains a certain piece\r\n    function doesTheSquareHasThePiece(square, piece) {\r\n        let p = getPiece(square)\r\n\r\n        return p == piece\r\n    }\r\n\r\n    //cheks if a pawn is on En Passant square\r\n    function isPawnOnEnPassantSquare(pawn) {\r\n        return isColorWhite(pawn.piece.split(PIECE_DELIMITER)[0]) ? pawn.x == 3 : pawn.x == 4\r\n    }\r\n\r\n    //checks if a color is white\r\n    function isColorWhite(color) {\r\n        return color == WHITE\r\n    }\r\n\r\n    //checks if a color is black\r\n    function isColorBlack(color) {\r\n        return color == BLACK\r\n    }\r\n\r\n    //checks if white is allowed to long castle\r\n    function checkIfCanWhiteLongCastle() {\r\n        return canWhiteLongCastle &&\r\n            boardPosition[7][0] == 'R' &&\r\n            boardPosition[7][1] == '' &&\r\n            boardPosition[7][2] == '' &&\r\n            boardPosition[7][3] == '';\r\n    }\r\n\r\n    //checks if white is allowed to short castle\r\n    function checkIfCanWhiteShortCastle() {\r\n        return canWhiteShortCastle &&\r\n            boardPosition[7][7] == 'R' &&\r\n            boardPosition[7][6] == '' &&\r\n            boardPosition[7][5] == '';\r\n    }\r\n\r\n    //checks if black is allowed to long castle\r\n    function checkIfCanBlackLongCastle() {\r\n        return canBlackLongCastle &&\r\n            boardPosition[0][0] == 'r' &&\r\n            boardPosition[0][1] == '' &&\r\n            boardPosition[0][2] == '' &&\r\n            boardPosition[0][3] == '';\r\n    }\r\n\r\n    //checks if black is allowed to short castle\r\n    function checkIfCanBlackShortCastle() {\r\n        return canBlackShortCastle &&\r\n            boardPosition[7][7] == 'r' &&\r\n            boardPosition[7][6] == '' &&\r\n            boardPosition[7][5] == '';\r\n    }\r\n\r\n    //converts board coordinates to X and Y position on the board, e.g., a8 = 0, 0\r\n    function convertCoordinatesToLocation(coordinates) {\r\n        let tokens = coordinates.split('')\r\n\r\n        //skip invalid coordinates\r\n        if (tokens.length != 2) {\r\n            return\r\n        }\r\n\r\n        let letter = tokens[0].toString().toUpperCase()\r\n        let number = tokens[1]\r\n\r\n        //65 is the ASCII code for capital A which will give us 0 if we have A as a coordinate; A-F will give us 0-7 for x\r\n        //reverse the numbers since we draw the board top down\r\n        return { x: letter.charCodeAt(0) - 65, y: DIM - Number(number) }\r\n    }\r\n\r\n    //gets all possible moves for a pawn\r\n    function getPawnsPossibleMoves(square) {\r\n        let color = getPieceColor(square) //get the piece color\r\n\r\n        let moves = []\r\n\r\n        let position1Offset = 1\r\n        let position2Offset = 2\r\n\r\n        //flips the direction if the color is white\r\n        if (isColorWhite(color)) {\r\n            position1Offset *= -1\r\n            position2Offset *= -1\r\n        }\r\n\r\n        //get all forwards moves + the double move at the start\r\n        let targetPiece1 = getATargetSquareByLocation(square.x + position1Offset, square.y) //move pawn 1 square ahead\r\n        let targetPiece2 = getATargetSquareByLocation(square.x + position2Offset, square.y) //move pawn 2 squares ahead\r\n\r\n        //get potential neighbors to capture\r\n        let neighbor1 = getATargetSquareByLocation(square.x + position1Offset, square.y + position1Offset)\r\n        let neighbor2 = getATargetSquareByLocation(square.x + position1Offset, square.y + (position1Offset * -1))\r\n\r\n        //get the En Passant coordinates\r\n        let enPassantCordinates = convertCoordinatesToLocation(enPassant)\r\n        let enPassantSquare = enPassantCordinates ? getATargetSquareByLocation(enPassantCordinates.x, enPassantCordinates.y) : ''\r\n\r\n        let isTheSquareInFrontAvailable = isSquareAvailable(targetPiece1)\r\n\r\n        //push the one move forward for a pawn\r\n        if (isTheSquareInFrontAvailable) {\r\n            moves.push(targetPiece1)\r\n        }\r\n\r\n        //two moves are allowed only if the two squares above are free/empty\r\n        //allowed if pawn hasn't moved before\r\n        if (isTheSquareInFrontAvailable && isSquareAvailable(targetPiece2) && isPawnOnStartingSquare(square)) {\r\n            moves.push(targetPiece2)\r\n        }\r\n\r\n        //push neighbour if there is a piece to capture and it's a different color than the pawn\r\n        if (!isSquareAvailable(neighbor1) && !areSameColor(neighbor1, square)) {\r\n            moves.push(neighbor1)\r\n        }\r\n\r\n        //push neighbour if there is a piece to capture and it's a different color than the pawn\r\n        if (!isSquareAvailable(neighbor2) && !areSameColor(neighbor2, square)) {\r\n            moves.push(neighbor2)\r\n        }\r\n\r\n        //add En Passant\r\n        if (enPassantSquare) {\r\n            moves.push(enPassantSquare)\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a rook\r\n    function getRooksPossibleMoves(square) {\r\n        let moves = []\r\n\r\n        for (let i = square.x + 1; i < DIM; i++) {\r\n            let targetSquare = getATargetSquareByLocation(i, square.y)\r\n\r\n            if (isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break\r\n            }\r\n        }\r\n\r\n        for (let i = square.x - 1; i >= 0; i--) {\r\n            let targetSquare = getATargetSquareByLocation(i, square.y)\r\n\r\n            if (isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = square.y + 1; i < DIM; i++) {\r\n            let targetSquare = getATargetSquareByLocation(square.x, i)\r\n\r\n            if (isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break\r\n            }\r\n        }\r\n\r\n        for (let i = square.y - 1; i >= 0; i--) {\r\n            let targetSquare = getATargetSquareByLocation(square.x, i)\r\n\r\n            if (isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break\r\n            }\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a bishop\r\n    function getBishopPossibleMoves(square) {\r\n        let moves = []\r\n\r\n        let counter = 0;\r\n\r\n        for (let i = 1; i <= DIM; i++) {\r\n            if (counter == 5) {\r\n                break;\r\n            }\r\n\r\n            let target1 = getATargetSquareByLocation(square.x - i, square.y - i)\r\n            let target2 = getATargetSquareByLocation(square.x - i, square.y + i)\r\n            let target3 = getATargetSquareByLocation(square.x + i, square.y + i)\r\n            let target4 = getATargetSquareByLocation(square.x + i, square.y - i)\r\n\r\n            if (target1 && isSquareAvailable(target1) && counter < 1) {\r\n                moves.push(target1)\r\n            } else {\r\n                if (!areSameColor(square, target1)) {\r\n                    moves.push(target1)\r\n                }\r\n                counter++;\r\n            }\r\n\r\n            if (target2 && isSquareAvailable(target2) && counter < 2) {\r\n                moves.push(target2)\r\n            } else {\r\n                if (!areSameColor(square, target2)) {\r\n                    moves.push(target2)\r\n                }\r\n                counter++;\r\n            }\r\n\r\n            if (target3 && isSquareAvailable(target3) && counter < 3) {\r\n                moves.push(target3)\r\n            } else {\r\n                if (!areSameColor(square, target3)) {\r\n                    moves.push(target3)\r\n                }\r\n                counter++;\r\n            }\r\n\r\n            if (target4 && isSquareAvailable(target4) && counter < 4) {\r\n                moves.push(target4)\r\n            } else {\r\n                if (!areSameColor(square, target4)) {\r\n                    moves.push(target4)\r\n                }\r\n                counter++;\r\n            }\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a knight\r\n    function getKnightPossibleMoves(square) {\r\n        let offset = 1;\r\n        let doubleOffset = 2 * offset;\r\n\r\n        let moves = []\r\n\r\n        for (let i = 0; i < 8; i++) {\r\n            if (i != 0 && i % 2 == 0) {\r\n                offset *= -1;\r\n            }\r\n\r\n            let targetX = square.x + offset;\r\n            let targetY = square.y + doubleOffset;\r\n\r\n            let target = getATargetSquareByLocation(targetX, targetY)\r\n\r\n            if (target && isSquareAvailable(target)) {\r\n                moves.push(target)\r\n            } else {\r\n                if (!areSameColor(square, target)) {\r\n                    moves.push(target)\r\n                }\r\n            }\r\n\r\n            doubleOffset *= -1\r\n\r\n            if (i == 4) {\r\n                offset *= 2\r\n                doubleOffset /= 2\r\n            }\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a king\r\n    function getKingPossibleMoves(square) {\r\n        let moves = []\r\n\r\n        let color = getPieceColor(square)\r\n\r\n        //gets all possible 1-square moves for the king\r\n        for (let i = -1; i < 2; i++) {\r\n            for (let j = -1; j < 2; j++) {\r\n                let targetPiece = getATargetSquareByLocation(square.x + i, square.y + j)\r\n\r\n                if (targetPiece && isSquareAvailable(targetPiece)) {\r\n                    moves.push(targetPiece)\r\n                } else {\r\n                    if (!areSameColor(square, targetPiece)) {\r\n                        moves.push(targetPiece)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //Castling logic\r\n        const longCastleSquare = getATargetSquareByLocation(square.x, square.y - 2)\r\n        const shortCastleSquare = getATargetSquareByLocation(square.x, square.y + 2)\r\n\r\n        if (isColorWhite(color) && checkIfCanWhiteLongCastle()) {\r\n            moves.push(longCastleSquare)\r\n        }\r\n\r\n        if (isColorWhite(color) && checkIfCanWhiteShortCastle()) {\r\n            moves.push(shortCastleSquare)\r\n        }\r\n\r\n        if (isColorBlack(color) && checkIfCanBlackLongCastle()) {\r\n            moves.push(longCastleSquare)\r\n        }\r\n\r\n        if (isColorBlack(color) && checkIfCanBlackShortCastle()) {\r\n            moves.push(shortCastleSquare)\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a queen\r\n    function getQueenPossibleMoves(square) {\r\n        let moves = []\r\n\r\n        //a queen has the same moves as a bishop and a rook\r\n        const rookMoves = getRooksPossibleMoves(square).moves;\r\n        const bishopMoves = getBishopPossibleMoves(square).moves;\r\n\r\n        // Concatenate the arrays of moves\r\n        moves.push(...rookMoves, ...bishopMoves);\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets the piece color\r\n    function getPieceColor(square) {\r\n        return square.piece.split(PIECE_DELIMITER)[0]\r\n    }\r\n\r\n    //gets the piece\r\n    function getPiece(square) {\r\n        return square.piece.split(PIECE_DELIMITER)[1]\r\n    }\r\n\r\n    //removes moves that do not deal with a check\r\n    function filterMovesIfInCheck(possibleMoves) {\r\n        let blackKing = getATargetSquareByPiece(BLACK_KING) //get the black king\r\n        let whiteKing = getATargetSquareByPiece(WHITE_KING) //get the white king\r\n\r\n        for (let i = 0; i < possibleMoves.length; i++) {\r\n            for (let j = 0; j < possibleMoves[i].moves; j++) {\r\n                if (possibleMoves[i].piece.piece == BLACK_KING) {\r\n                    let move = <Square x={possibleMoves[i].moves[j].x} y={possibleMoves[i].moves[j].y} piece={\"black-king\"} />\r\n                    let pseudo = <Square x={blackKing.x} y={blackKing.y} piece={\"\"} />\r\n                    let isInCheck = isBlackInCheck(move, pseudo)\r\n\r\n                    if (isInCheck) {\r\n                        possibleMoves[i].moves.splice(j, 1);\r\n                        j--;\r\n                    }\r\n                } else if (possibleMoves[i].piece.piece == WHITE_KING) {\r\n                    let move = <Square x={possibleMoves[i].moves[j].x} y={possibleMoves[i].moves[j].y} piece={\"white-king\"} />\r\n                    let pseudo = <Square x={whiteKing.x} y={whiteKing.y} piece={\"\"} />\r\n                    let isInCheck = isWhiteInCheck(move, pseudo)\r\n\r\n                    if (isInCheck) {\r\n                        possibleMoves[i].moves.splice(j, 1);\r\n                        j--;\r\n                    }\r\n                } else {\r\n                    let move = <Square x={possibleMoves[i].moves[j].x} y={possibleMoves[i].moves[j].y} piece={possibleMoves[i].piece.piece} />\r\n                    let isInCheck = isBlackInCheck(blackKing, move) ? true : isWhiteInCheck(whiteKing, move)\r\n\r\n                    if (isInCheck) {\r\n                        possibleMoves[i].moves.splice(j, 1);\r\n                        j--;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return possibleMoves\r\n    }\r\n\r\n    //removes moves that allow illigal castling (castles through check for example)\r\n    function filterMovesThatAllowIllegalCastling(possibleMoves) {\r\n        let blackKing = getATargetSquareByPiece(BLACK_KING) //get the black king\r\n        let whiteKing = getATargetSquareByPiece(WHITE_KING) //get the white king\r\n\r\n        for (let i = 0; i < possibleMoves.length; i++) {\r\n            let whiteCastle1 = possibleMoves[i].moves.find(m => m.x == 7 && m.y == 6) //sqaure where king will be after short castle (white)\r\n            let whiteCastle2 = possibleMoves[i].moves.find(m => m.x == 7 && m.y == 2) //sqaure where king will be after long castle (white)\r\n            let blackCastle1 = possibleMoves[i].moves.find(m => m.x == 0 && m.y == 6) //square where king will be after shot castle (black)\r\n            let blackCastle2 = possibleMoves[i].moves.find(m => m.x == 0 && m.y == 2) //square where king will be after long castle (black)\r\n\r\n            if (possibleMoves[i].piece == blackKing || possibleMoves[i].piece == whiteKing) {\r\n                if (whiteCastle1) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.x == 7 && m.y == 5)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n\r\n                if (whiteCastle2) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.x == 7 && m.y == 3)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n\r\n                if (blackCastle1) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.x == 0 && m.y == 5)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n\r\n                if (blackCastle2) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.x == 0 && m.y == 3)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n            }\r\n\r\n            //prevents black to castle if in check\r\n            if (isBlackInCheck(blackKing)) {\r\n                if (blackCastle1) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove), 1)\r\n                }\r\n\r\n                if (blackCastle2) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove2), 1)\r\n                }\r\n            }\r\n\r\n            //prevents white to castle if in check\r\n            if (isWhiteInCheck(whiteKing)) {\r\n                if (whiteCastle1) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove), 1)\r\n                }\r\n\r\n                if (whiteCastle2) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove2), 1)\r\n                }\r\n            }\r\n        }\r\n\r\n        return possibleMoves\r\n    }\r\n\r\n    //removes empty/undefined values for generated moves\r\n    function removeEmptyMoves(possibleMoves) {\r\n        for (let i = 0; i < possibleMoves.length; i++) {\r\n            if (possibleMoves[i].moves.length == 0) {\r\n                possibleMoves.splice(i, 1)\r\n                i--;\r\n                continue;\r\n            }\r\n\r\n            for (let j = 0; j < possibleMoves[i].moves.length; j++) {\r\n                if (!possibleMoves[i].moves[j]) {\r\n                    possibleMoves[i].moves.splice(j, 1);\r\n                    j--;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possibleMoves\r\n    }\r\n\r\n    //gets all possible/legal moves\r\n    function getPossibleMoves(x, y) {\r\n        let square = getATargetSquareByLocation(x, y)\r\n        // console.log(square)\r\n        // console.log(fen, boardPosition, enPassant, boardSquare, possibleMoves,\r\n        //     selectedSquareX, selectedSquareY, canWhiteShortCastle, canWhiteLongCastle,\r\n        //     canBlackShortCastle, canBlackLongCastle, enPassantPossible, enPassantX, enPassantY, isWhiteToMove)\r\n        console.log('Starting to get possible moves')\r\n        let possiblePieceMoves = [];\r\n\r\n        //if the square has a piece\r\n        if (square.piece) {\r\n            let color = getPieceColor(square); //get the piece color\r\n\r\n            //don't collect possible moves if it's black to move and you're trying to move a white piece\r\n            if (isColorWhite(color) && !isWhiteToMove) {\r\n                return\r\n            }\r\n\r\n            //don't collect possible moves if it's white to move and you're trying to move a black piece\r\n            if (isColorBlack(color) && isWhiteToMove) {\r\n                return\r\n            }\r\n\r\n            //get all possible moves for each piece\r\n            possiblePieceMoves.push(getPawnsPossibleMoves(square))\r\n            possiblePieceMoves.push(getRooksPossibleMoves(square))\r\n            possiblePieceMoves.push(getBishopPossibleMoves(square))\r\n            possiblePieceMoves.push(getKnightPossibleMoves(square))\r\n            possiblePieceMoves.push(getKingPossibleMoves(square))\r\n            possiblePieceMoves.push(getQueenPossibleMoves(square))\r\n\r\n            //filter empty moves\r\n            possiblePieceMoves = removeEmptyMoves(possiblePieceMoves);\r\n\r\n            //filter possible moves\r\n            possiblePieceMoves = filterMovesIfInCheck(possiblePieceMoves)\r\n            possiblePieceMoves = filterMovesThatAllowIllegalCastling(possiblePieceMoves)\r\n        }\r\n\r\n        console.log(\"Possible Moves:\", possiblePieceMoves);\r\n        updatePossibleMoves(possiblePieceMoves);\r\n    }\r\n\r\n    //renders the board\r\n    return (\r\n        <>\r\n            <div className=\"chessGrid\">\r\n                {boardSquare.map((sqr) => sqr)}\r\n            </div>\r\n        </>\r\n    );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}