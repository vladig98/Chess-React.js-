{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vladi Gotsin\\\\Desktop\\\\react\\\\Chess-React.js-\\\\src\\\\Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport * as HelperMethods from \"./HelperMethods.js\";\nimport * as GlobalVariables from \"./globalVariables.js\";\nimport * as MoveHandling from './MoveHandler.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board() {\n  _s();\n  /// <summary>\n  /// FEN - Forsyth-Edwards Notation\n  /// small letters - black pieces\n  /// capital letters - white pieces\n  /// numbers - empty board squares\n  /// (/) - separates each board row\n  /// first letter after the board indicates whose turn it is to move (w - white, b - black)\n  /// next letters indicate castling rights, k - king-side, q - queen-side, (-) - no castling allowed for any side\n  /// en passant square - when a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square\n  /// the number of half turns (white moves, then black moves = 2 half moves) that were made without a pawn move or a capture of a piece (50-move rule when reaches 100)\n  /// the number of full moves (white moves, then black moves = 1 full move); increase after every black half move\n  /// </summary>\n  /// <example>\n  /// Starting position:\n  /// 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\n  /// Examples of FEN positions:\n  /// 'r1bqk2r/pppp1ppp/2n5/8/1bBPn3/2N2N2/PP3PPP/R1BQK2R w KQkq - 0 8'\n  /// 'r1bqk2r/pppp1ppp/2n2n2/2b5/2BPP3/5N2/PP3PPP/RNBQK2R b KQkq - 0 6'\n  /// 'r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21'\n  /// </example>\n  const [fen, setFen] = useState('r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21');\n\n  /// <summary>\n  /// State to manage possible moves for a piece.\n  /// </summary>\n  const [isPossibleMove, setIsPossibleMove] = useState([]);\n\n  /// <summary>\n  /// State to manage the squares on the board.\n  /// </summary>\n  const [boardSquares, setBoardSquares] = useState([]);\n\n  /// <summary>\n  /// Reference to the isPossibleMove state to avoid stale closures.\n  /// </summary>\n  const isPossibleMoveRef = useRef(isPossibleMove);\n\n  /// <summary>\n  /// Reference to the boardSquares state to avoid stale closures.\n  /// </summary>\n  const boardSquaresRef = useRef(boardSquares);\n\n  /**\r\n   * Updates the reference to the isPossibleMove array whenever we set a new value to the array.\r\n   */\n  useEffect(() => {\n    isPossibleMoveRef.current = isPossibleMove;\n    setBoardSquares(HelperMethods.fenParser(fen, isPossibleMoveRef.current, getPossibleMoves, movePiece, resetPossibleMoves, false));\n  }, [isPossibleMove]);\n\n  /**\r\n   * Called when the page loads.\r\n   * Removes all circles from squares indicating that they can be clicked to move a piece there.\r\n   * Parses the FEN to fill in the board.\r\n   */\n  useEffect(() => {\n    resetPossibleMoves();\n    setBoardSquares(HelperMethods.fenParser(fen, isPossibleMoveRef.current, getPossibleMoves, movePiece, resetPossibleMoves));\n  }, []);\n\n  /**\r\n   * Parses the FEN and fills in the board with the new position when the FEN updates.\r\n   */\n  useEffect(() => {\n    setBoardSquares(HelperMethods.fenParser(fen, isPossibleMoveRef.current, getPossibleMoves, movePiece, resetPossibleMoves));\n  }, [fen]);\n\n  /**\r\n   * Updates the reference to the BoardSquares array whenever we set a new value to the array.\r\n   */\n  useEffect(() => {\n    boardSquaresRef.current = boardSquares;\n  }, [boardSquares]);\n\n  /**\r\n   * Updates the possible move array.\r\n   * If a square is a possible move, it will receive a circle indicating you can move there.\r\n   * \r\n   * @param {string} key - The key of the item to update.\r\n   * @param {boolean} value - The new value to set for the item.\r\n   */\n  const updateIsPossibleMove = useCallback((key, value) => {\n    setIsPossibleMove(prevState => prevState.map(item => item.key === key ? {\n      ...item,\n      value: value\n    } : item));\n  }, []);\n\n  /**\r\n  * Resets possible moves highlighting.\r\n  */\n  const resetPossibleMoves = useCallback(() => {\n    setIsPossibleMove(HelperMethods.createInitialPossibleMoves());\n  }, []);\n\n  /**\r\n   * Updates the `isPossibleMove` array based on the `PossibleMoves` array and forces a component update \r\n   * of the square to visually indicate the circles showing a move is possible.\r\n   * \r\n   * This function iterates through the `PossibleMoves` array to find moves that match the currently \r\n   * selected square. For each matching move, it updates the `isPossibleMove` array to true, indicating \r\n   * that a move is possible, which will trigger the visual indication on the chessboard.\r\n   */\n  const updatePossibleMovesVisually = useCallback(() => {\n    for (let i = 0; i < GlobalVariables.PossibleMoves.length; i++) {\n      if (HelperMethods.checkIfAMoveIsEqualToTheCurrentSelectedSquare(GlobalVariables.PossibleMoves[i].piece)) {\n        for (let j = 0; j < GlobalVariables.PossibleMoves[i].moves.length; j++) {\n          updateIsPossibleMove(`${GlobalVariables.PossibleMoves[i].moves[j].props.x}${GlobalVariables.PIECE_DELIMITER}${GlobalVariables.PossibleMoves[i].moves[j].props.y}`, true);\n        }\n      }\n    }\n  }, [updateIsPossibleMove]);\n\n  /**\r\n   * Moves a piece on the board.\r\n   * @param {number} x - The x coordinate of the target square.\r\n   * @param {number} y - The y coordinate of the target square.\r\n   */\n  const movePiece = useCallback((x, y) => {\n    const squares = boardSquaresRef.current;\n    const targetSquare = HelperMethods.getATargetSquareByLocation(x, y, squares);\n    const square = squares.find(s => HelperMethods.checkIfAMoveIsEqualToTheCurrentSelectedSquare(s));\n    HelperMethods.disableCastlingIfKingOrRookMoves(square);\n    let updatedPosition = HelperMethods.updateBoardPosition(square, targetSquare);\n    updatedPosition = HelperMethods.captureEnPassant(square, targetSquare);\n    HelperMethods.updateBoardState(updatedPosition);\n    HelperMethods.resetPossibleMovesAndToggleTurn();\n    HelperMethods.enableEnPassant(square, targetSquare);\n    HelperMethods.updateMoveCounters();\n    HelperMethods.generateANewFen();\n  }, [boardSquaresRef]);\n\n  /**\r\n   * Retrieves and updates the possible moves for all pieces on the board.\r\n   */\n  const getPossibleMoves = useCallback(() => {\n    const squares = boardSquaresRef.current;\n    let possiblePieceMoves = [];\n    squares.forEach(square => {\n      if (square.props.piece) {\n        const color = HelperMethods.getPieceColor(square);\n        if (MoveHandling.isMoveAllowed(color)) {\n          possiblePieceMoves.push(...MoveHandling.collectPossibleMoves(square, squares));\n        }\n      }\n    });\n    console.log(\"Possible Moves:\", possiblePieceMoves);\n    console.log('Moves count', possiblePieceMoves.reduce((sum, pieceMove) => sum + pieceMove.moves.length, 0));\n    MoveHandling.updatePossibleMoves(possiblePieceMoves);\n    updatePossibleMovesVisually();\n  }, [updatePossibleMovesVisually]);\n  const renderedBoardSquares = useMemo(() => {\n    return boardSquares.map(sqr => sqr);\n  }, [boardSquares]);\n\n  //renders the board\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chessGrid\",\n    children: renderedBoardSquares\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 9\n  }, this);\n}\n_s(Board, \"Ez5AP+wvMNFsQGoEE9bcHB1cP24=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useEffect","useRef","HelperMethods","GlobalVariables","MoveHandling","jsxDEV","_jsxDEV","Board","_s","fen","setFen","isPossibleMove","setIsPossibleMove","boardSquares","setBoardSquares","isPossibleMoveRef","boardSquaresRef","current","fenParser","getPossibleMoves","movePiece","resetPossibleMoves","updateIsPossibleMove","useCallback","key","value","prevState","map","item","createInitialPossibleMoves","updatePossibleMovesVisually","i","PossibleMoves","length","checkIfAMoveIsEqualToTheCurrentSelectedSquare","piece","j","moves","props","x","PIECE_DELIMITER","y","squares","targetSquare","getATargetSquareByLocation","square","find","s","disableCastlingIfKingOrRookMoves","updatedPosition","updateBoardPosition","captureEnPassant","updateBoardState","resetPossibleMovesAndToggleTurn","enableEnPassant","updateMoveCounters","generateANewFen","possiblePieceMoves","forEach","color","getPieceColor","isMoveAllowed","push","collectPossibleMoves","console","log","reduce","sum","pieceMove","updatePossibleMoves","renderedBoardSquares","useMemo","sqr","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/Chess-React.js-/src/Board.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport * as HelperMethods from \"./HelperMethods.js\";\r\nimport * as GlobalVariables from \"./globalVariables.js\"\r\nimport * as MoveHandling from './MoveHandler.js'\r\n\r\nfunction Board() {\r\n    /// <summary>\r\n    /// FEN - Forsyth-Edwards Notation\r\n    /// small letters - black pieces\r\n    /// capital letters - white pieces\r\n    /// numbers - empty board squares\r\n    /// (/) - separates each board row\r\n    /// first letter after the board indicates whose turn it is to move (w - white, b - black)\r\n    /// next letters indicate castling rights, k - king-side, q - queen-side, (-) - no castling allowed for any side\r\n    /// en passant square - when a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square\r\n    /// the number of half turns (white moves, then black moves = 2 half moves) that were made without a pawn move or a capture of a piece (50-move rule when reaches 100)\r\n    /// the number of full moves (white moves, then black moves = 1 full move); increase after every black half move\r\n    /// </summary>\r\n    /// <example>\r\n    /// Starting position:\r\n    /// 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\r\n    /// Examples of FEN positions:\r\n    /// 'r1bqk2r/pppp1ppp/2n5/8/1bBPn3/2N2N2/PP3PPP/R1BQK2R w KQkq - 0 8'\r\n    /// 'r1bqk2r/pppp1ppp/2n2n2/2b5/2BPP3/5N2/PP3PPP/RNBQK2R b KQkq - 0 6'\r\n    /// 'r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21'\r\n    /// </example>\r\n    const [fen, setFen] = useState('r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21');\r\n\r\n    /// <summary>\r\n    /// State to manage possible moves for a piece.\r\n    /// </summary>\r\n    const [isPossibleMove, setIsPossibleMove] = useState([]);\r\n\r\n    /// <summary>\r\n    /// State to manage the squares on the board.\r\n    /// </summary>\r\n    const [boardSquares, setBoardSquares] = useState([]);\r\n\r\n    /// <summary>\r\n    /// Reference to the isPossibleMove state to avoid stale closures.\r\n    /// </summary>\r\n    const isPossibleMoveRef = useRef(isPossibleMove);\r\n\r\n    /// <summary>\r\n    /// Reference to the boardSquares state to avoid stale closures.\r\n    /// </summary>\r\n    const boardSquaresRef = useRef(boardSquares);\r\n\r\n    /**\r\n     * Updates the reference to the isPossibleMove array whenever we set a new value to the array.\r\n     */\r\n    useEffect(() => {\r\n        isPossibleMoveRef.current = isPossibleMove;\r\n        setBoardSquares(HelperMethods.fenParser(fen, isPossibleMoveRef.current, getPossibleMoves, movePiece, resetPossibleMoves, false));\r\n    }, [isPossibleMove]);\r\n\r\n    /**\r\n     * Called when the page loads.\r\n     * Removes all circles from squares indicating that they can be clicked to move a piece there.\r\n     * Parses the FEN to fill in the board.\r\n     */\r\n    useEffect(() => {\r\n        resetPossibleMoves();\r\n        setBoardSquares(HelperMethods.fenParser(fen, isPossibleMoveRef.current, getPossibleMoves, movePiece, resetPossibleMoves));\r\n    }, []);\r\n\r\n    /**\r\n     * Parses the FEN and fills in the board with the new position when the FEN updates.\r\n     */\r\n    useEffect(() => {\r\n        setBoardSquares(HelperMethods.fenParser(fen, isPossibleMoveRef.current, getPossibleMoves, movePiece, resetPossibleMoves));\r\n    }, [fen]);\r\n\r\n    /**\r\n     * Updates the reference to the BoardSquares array whenever we set a new value to the array.\r\n     */\r\n    useEffect(() => {\r\n        boardSquaresRef.current = boardSquares;\r\n    }, [boardSquares]);\r\n\r\n    /**\r\n     * Updates the possible move array.\r\n     * If a square is a possible move, it will receive a circle indicating you can move there.\r\n     * \r\n     * @param {string} key - The key of the item to update.\r\n     * @param {boolean} value - The new value to set for the item.\r\n     */\r\n    const updateIsPossibleMove = useCallback((key, value) => {\r\n        setIsPossibleMove(prevState =>\r\n            prevState.map(item =>\r\n                item.key === key ? { ...item, value: value } : item\r\n            )\r\n        );\r\n    }, []);\r\n\r\n    /**\r\n    * Resets possible moves highlighting.\r\n    */\r\n    const resetPossibleMoves = useCallback(() => {\r\n        setIsPossibleMove(HelperMethods.createInitialPossibleMoves());\r\n    }, []);\r\n\r\n    /**\r\n     * Updates the `isPossibleMove` array based on the `PossibleMoves` array and forces a component update \r\n     * of the square to visually indicate the circles showing a move is possible.\r\n     * \r\n     * This function iterates through the `PossibleMoves` array to find moves that match the currently \r\n     * selected square. For each matching move, it updates the `isPossibleMove` array to true, indicating \r\n     * that a move is possible, which will trigger the visual indication on the chessboard.\r\n     */\r\n    const updatePossibleMovesVisually = useCallback(() => {\r\n        for (let i = 0; i < GlobalVariables.PossibleMoves.length; i++) {\r\n            if (HelperMethods.checkIfAMoveIsEqualToTheCurrentSelectedSquare(GlobalVariables.PossibleMoves[i].piece)) {\r\n                for (let j = 0; j < GlobalVariables.PossibleMoves[i].moves.length; j++) {\r\n                    updateIsPossibleMove(`${GlobalVariables.PossibleMoves[i].moves[j].props.x}${GlobalVariables.PIECE_DELIMITER}${GlobalVariables.PossibleMoves[i].moves[j].props.y}`, true);\r\n                }\r\n            }\r\n        }\r\n    }, [updateIsPossibleMove]);\r\n\r\n    /**\r\n     * Moves a piece on the board.\r\n     * @param {number} x - The x coordinate of the target square.\r\n     * @param {number} y - The y coordinate of the target square.\r\n     */\r\n    const movePiece = useCallback((x, y) => {\r\n        const squares = boardSquaresRef.current;\r\n\r\n        const targetSquare = HelperMethods.getATargetSquareByLocation(x, y, squares);\r\n        const square = squares.find(s => HelperMethods.checkIfAMoveIsEqualToTheCurrentSelectedSquare(s));\r\n\r\n        HelperMethods.disableCastlingIfKingOrRookMoves(square);\r\n\r\n        let updatedPosition = HelperMethods.updateBoardPosition(square, targetSquare);\r\n        updatedPosition = HelperMethods.captureEnPassant(square, targetSquare);\r\n\r\n        HelperMethods.updateBoardState(updatedPosition);\r\n        HelperMethods.resetPossibleMovesAndToggleTurn();\r\n\r\n        HelperMethods.enableEnPassant(square, targetSquare);\r\n        HelperMethods.updateMoveCounters();\r\n\r\n        HelperMethods.generateANewFen();\r\n    }, [boardSquaresRef]);\r\n\r\n    /**\r\n     * Retrieves and updates the possible moves for all pieces on the board.\r\n     */\r\n    const getPossibleMoves = useCallback(() => {\r\n        const squares = boardSquaresRef.current;\r\n        let possiblePieceMoves = [];\r\n\r\n        squares.forEach(square => {\r\n            if (square.props.piece) {\r\n                const color = HelperMethods.getPieceColor(square);\r\n\r\n                if (MoveHandling.isMoveAllowed(color)) {\r\n                    possiblePieceMoves.push(...MoveHandling.collectPossibleMoves(square, squares));\r\n                }\r\n            }\r\n        });\r\n\r\n        console.log(\"Possible Moves:\", possiblePieceMoves);\r\n        console.log('Moves count', possiblePieceMoves.reduce((sum, pieceMove) => sum + pieceMove.moves.length, 0));\r\n\r\n        MoveHandling.updatePossibleMoves(possiblePieceMoves);\r\n        updatePossibleMovesVisually();\r\n    }, [updatePossibleMovesVisually]);\r\n\r\n    const renderedBoardSquares = useMemo(() => {\r\n        return boardSquares.map((sqr) => sqr);\r\n    }, [boardSquares]);\r\n\r\n    //renders the board\r\n    return (\r\n        <div className=\"chessGrid\">\r\n            {renderedBoardSquares}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}