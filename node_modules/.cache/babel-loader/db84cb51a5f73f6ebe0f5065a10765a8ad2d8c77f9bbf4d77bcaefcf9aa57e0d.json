{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vladi Gotsin\\\\Desktop\\\\react\\\\Chess-React.js-\\\\src\\\\Square.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback } from 'react';\nimport { CurrentSquareSelection, PossibleMoves } from \"./globalVariables.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Square = ({\n  getPossibleMoves,\n  x,\n  y,\n  piece,\n  color,\n  movePiece,\n  isPossibleMove,\n  resetPossibleMoves\n}) => {\n  _s();\n  /**\r\n  * Checks if a character is Uppercase using the ASCII table; 65 (A) to 90 (Z)\r\n  * @param {string} value - The character to check.\r\n  * @returns {boolean} - True if the character is uppercase, false otherwise.\r\n  */\n  const reset = useCallback((newX = -1, newY = -1) => {\n    CurrentSquareSelection.x = newX;\n    CurrentSquareSelection.y = newY;\n    resetPossibleMoves();\n  }, [resetPossibleMoves]);\n  const getCurrentSelection = useCallback(() => {\n    return PossibleMoves.find(m => m.piece.props.x === CurrentSquareSelection.x && m.piece.props.y === CurrentSquareSelection.y);\n  }, []);\n  const checkIfCurrentSquareIsAPossibleMoveForTheCurrentSelection = useCallback(() => {\n    var _getCurrentSelection;\n    return (_getCurrentSelection = getCurrentSelection()) === null || _getCurrentSelection === void 0 ? void 0 : _getCurrentSelection.moves.some(m => m.props.x === x && m.props.y === y);\n  }, [getCurrentSelection, x, y]);\n  const isThisSquareCurrentlySelected = useCallback(() => {\n    return CurrentSquareSelection.x === x && CurrentSquareSelection.y === y;\n  }, [x, y]);\n  const handleClick = useCallback(() => {\n    if (checkIfCurrentSquareIsAPossibleMoveForTheCurrentSelection()) {\n      movePiece(x, y);\n      reset();\n    } else {\n      if (isThisSquareCurrentlySelected()) {\n        PossibleMoves.splice(0, PossibleMoves.length);\n        reset();\n      } else {\n        reset(x, y);\n        getPossibleMoves();\n      }\n    }\n  }, [checkIfCurrentSquareIsAPossibleMoveForTheCurrentSelection, isThisSquareCurrentlySelected, movePiece, getPossibleMoves, x, y, reset]);\n  const styles = ['chessSquare', 'piece', color, piece, isPossibleMove && \"possibleMove\"].filter(Boolean).join(\" \");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: handleClick,\n    className: styles\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n_s(Square, \"QGWHqhptNni0oYMMxF/ryvWtC9s=\");\n_c = Square;\nexport default _c2 = /*#__PURE__*/React.memo(Square);\nvar _c, _c2;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useCallback","CurrentSquareSelection","PossibleMoves","jsxDEV","_jsxDEV","Square","getPossibleMoves","x","y","piece","color","movePiece","isPossibleMove","resetPossibleMoves","_s","reset","newX","newY","getCurrentSelection","find","m","props","checkIfCurrentSquareIsAPossibleMoveForTheCurrentSelection","_getCurrentSelection","moves","some","isThisSquareCurrentlySelected","handleClick","splice","length","styles","filter","Boolean","join","onClick","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","_c2","memo","$RefreshReg$"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/Chess-React.js-/src/Square.js"],"sourcesContent":["import React, { useCallback } from 'react';\r\nimport { CurrentSquareSelection, PossibleMoves } from \"./globalVariables.js\";\r\n\r\nconst Square = ({\r\n    getPossibleMoves,\r\n    x,\r\n    y,\r\n    piece,\r\n    color,\r\n    movePiece,\r\n    isPossibleMove,\r\n    resetPossibleMoves\r\n}) => {\r\n\r\n    /**\r\n * Checks if a character is Uppercase using the ASCII table; 65 (A) to 90 (Z)\r\n * @param {string} value - The character to check.\r\n * @returns {boolean} - True if the character is uppercase, false otherwise.\r\n */\r\n    const reset = useCallback((newX = -1, newY = -1) => {\r\n        CurrentSquareSelection.x = newX;\r\n        CurrentSquareSelection.y = newY;\r\n        resetPossibleMoves();\r\n    }, [resetPossibleMoves]);\r\n\r\n    const getCurrentSelection = useCallback(() => {\r\n        return PossibleMoves.find(m => m.piece.props.x === CurrentSquareSelection.x && m.piece.props.y === CurrentSquareSelection.y);\r\n    }, []);\r\n\r\n    const checkIfCurrentSquareIsAPossibleMoveForTheCurrentSelection = useCallback(() => {\r\n        return getCurrentSelection()?.moves.some(m => m.props.x === x && m.props.y === y);\r\n    }, [getCurrentSelection, x, y]);\r\n\r\n    const isThisSquareCurrentlySelected = useCallback(() => {\r\n        return CurrentSquareSelection.x === x && CurrentSquareSelection.y === y;\r\n    }, [x, y]);\r\n\r\n    const handleClick = useCallback(() => {\r\n        if (checkIfCurrentSquareIsAPossibleMoveForTheCurrentSelection()) {\r\n            movePiece(x, y);\r\n            reset();\r\n        } else {\r\n            if (isThisSquareCurrentlySelected()) {\r\n                PossibleMoves.splice(0, PossibleMoves.length);\r\n                reset();\r\n            } else {\r\n                reset(x, y);\r\n                getPossibleMoves();\r\n            }\r\n        }\r\n    }, [checkIfCurrentSquareIsAPossibleMoveForTheCurrentSelection, isThisSquareCurrentlySelected, movePiece, getPossibleMoves, x, y, reset]);\r\n\r\n    const styles = ['chessSquare', 'piece', color, piece, isPossibleMove && \"possibleMove\"].filter(Boolean).join(\" \");\r\n\r\n    return (\r\n        <div onClick={handleClick} className={styles}>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(Square);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}