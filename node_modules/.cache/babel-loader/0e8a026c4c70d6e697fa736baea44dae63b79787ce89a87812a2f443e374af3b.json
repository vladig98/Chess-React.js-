{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vladi Gotsin\\\\Desktop\\\\react\\\\Chess-React.js-\\\\src\\\\Board.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef, createContext } from \"react\";\nimport React from 'react';\nimport Square from \"./Square.js\";\nimport { ConvertFENPieceToPiece, ConvertFenToString, UpdatePosition, ParseFEN, IsDigit } from \"./HelperMethods.js\";\nimport { DIM, PIECE_DELIMITER, KINGS, COLORS, PIECES, CastlingRights, EnPassant, CurrentSquareSelection, PossibleMoves, HalfMoves, FullMoves, IsWhiteToMove, updateIsWhiteToMove, updateHalfMoves, updateFullMoves, BoardPosition } from \"./globalVariables.js\";\n\n/*\r\nTODO:\r\nCode Reusability: refactor some of the repeated code and generate new functions if needed\r\nConsistency and Naming: Have better and more consistent names for variables and functions\r\nDocumentation: add more comments to understand what is going on\r\nTesting: add unit tests\r\nImplementations: add promotions, implement endgames (mate, stalemate, draws repeation, 50 moves rule)\r\nBugs: Fix bugs (if any)\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Board() {\n  _s();\n  //<summary>\n  //FEN - Forsyth-Edwards Notation\n  //small letters - black pieces\n  //capital letters - white pieces\n  //numbers - empty board squares\n  //(/) - separates each board row\n  //first letter after the board indicates whose turn it is to move (w - white, b - black)\n  //next letters indicate castling rights, k - kingside, q - queenside, (-) - no castling allowed for any side\n  //en passant square - when a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square\n  //the number of half turns (white moves, then black moves = 2 half moves) that were made without a pawn move or a capture of a piece (50-move rule when reaches 100)\n  //the number of full moves (white moves, then black moves = 1 full move); increase after every black half move\n  //</summary>\n  //starting position\n  //'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\n  const [fen, setFen] = useState('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0');\n  const [isPossibleMove, setIsPossibleMove] = useState([]);\n  const [boardSquares, setBoardSquares] = useState([]);\n  const isPossibleMoveRef = useRef(isPossibleMove);\n  const updateIsPossibleMove = (key, value) => {\n    setIsPossibleMove(prevState => prevState.map(item => item.key === key ? {\n      ...item,\n      value: value\n    } : item));\n  };\n  useEffect(() => {\n    isPossibleMoveRef.current = isPossibleMove;\n    fenParser(false);\n  }, [isPossibleMove]);\n\n  //called when the page loads.we need to parse the FEN to fill in the board\n  useEffect(() => {\n    resetPossibleMoves();\n    fenParser();\n  }, []);\n  useEffect(() => {\n    console.log(BoardPosition);\n    fenParser();\n  }, [fen]);\n  function resetPossibleMoves() {\n    const initialIsPossibleMove = [];\n    for (let i = 0; i < DIM; i++) {\n      for (let j = 0; j < DIM; j++) {\n        initialIsPossibleMove.push({\n          key: `${i}-${j}`,\n          value: false\n        });\n      }\n    }\n    setIsPossibleMove(initialIsPossibleMove);\n  }\n  function generateANewFen() {\n    let fenString = '';\n    for (let i = 0; i < BoardPosition.length; i++) {\n      let row = BoardPosition[i];\n      for (let j = 0; j < row.length; j++) {\n        let column = row[j];\n        if (column == ' ') {\n          if (IsDigit(fenString[fenString.length - 1])) {\n            let lastChar = fenString.slice(-1);\n            fenString = fenString.substring(0, fenString.length - 1);\n            fenString += Number(lastChar) + 1;\n          } else {\n            fenString += '1';\n          }\n        } else {\n          fenString += column;\n        }\n      }\n      fenString += '/';\n    }\n    fenString = fenString.substring(0, fenString.length - 1); //removes the last slash\n\n    fenString += IsWhiteToMove ? ' w' : ' b';\n    let castlingRules = '';\n    castlingRules += CastlingRights.whiteShortCastle ? 'K' : '';\n    castlingRules += CastlingRights.whiteLongCastle ? 'Q' : '';\n    castlingRules += CastlingRights.blackShortCastle ? 'k' : '';\n    castlingRules += CastlingRights.blackLongCastle ? 'q' : '';\n    fenString += castlingRules.length == 0 ? ' -' : ' ' + castlingRules;\n    fenString += EnPassant.isPossible ? ' ' + convertLocationToCoordinates(EnPassant.x, EnPassant.y) : ' -';\n    fenString += ' ' + HalfMoves;\n    fenString += ' ' + FullMoves;\n    setFen(fenString);\n  }\n\n  //parses the FEN for the initial board state\n  function fenParser(updateBoardPosition = true) {\n    //parses the FEN string to variables\n    const {\n      fenBoard,\n      fenTurn,\n      fenCastling,\n      fenEnPassant,\n      fenHalfMoves,\n      fenFullMoves\n    } = ParseFEN(fen);\n    const fenRows = fenBoard.split('/');\n    let arr = [];\n\n    //splits all rows and creates a matrix for the board\n    for (let row of fenRows) {\n      const tokens = row.split('');\n      let r = [];\n      for (let i = 0; i < tokens.length; i++) {\n        if (Number(tokens[i])) {\n          for (let j = 0; j < Number(tokens[i]); j++) {\n            r.push(' ');\n          }\n        } else {\n          r.push(tokens[i]);\n        }\n      }\n      arr.push(r);\n    }\n\n    //generates a Square component for each element in the matrix created above\n    let squareColorIsWhite = true;\n    let squares = [];\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0; j < arr[i].length; j++) {\n        let color = squareColorIsWhite ? \"\" : \"dark\";\n        const possibleMoveStatus = isPossibleMoveRef.current.find(item => item.key === `${i}-${j}`);\n\n        //boardSquares.push(\n        squares.push( /*#__PURE__*/_jsxDEV(Square, {\n          getPossibleMoves: getPossibleMoves,\n          x: i,\n          y: j,\n          piece: ConvertFENPieceToPiece(arr[i][j]),\n          color: color,\n          movePiece: movePiece,\n          isPossibleMove: possibleMoveStatus ? possibleMoveStatus.value : false,\n          resetPossibleMoves: resetPossibleMoves\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this));\n        squareColorIsWhite = !squareColorIsWhite;\n      }\n      squareColorIsWhite = !squareColorIsWhite;\n    }\n    setBoardSquares(squares);\n\n    // BoardSquares.splice(0, BoardSquares.length);\n    // BoardSquares.push(...squares)\n    // console.log(BoardSquares)\n\n    if (fenCastling.includes('K')) {\n      CastlingRights.whiteShortCastle = true;\n    }\n    if (fenCastling.includes('Q')) {\n      CastlingRights.whiteLongCastle = true;\n    }\n    if (fenCastling.includes('k')) {\n      CastlingRights.blackShortCastle = true;\n    }\n    if (fenCastling.includes('q')) {\n      CastlingRights.blackLongCastle = true;\n    }\n    fenTurn == 'w' ? updateIsWhiteToMove(true) : updateIsWhiteToMove(false);\n    updateHalfMoves(fenHalfMoves);\n    updateFullMoves(fenFullMoves);\n    if (updateBoardPosition) {\n      BoardPosition.splice(0, BoardPosition.length, ...arr);\n    }\n    if (!fenEnPassant.includes(PIECE_DELIMITER)) {\n      let location = convertCoordinatesToLocation(fenEnPassant);\n      EnPassant.isPossible = true;\n      EnPassant.x = location.x;\n      EnPassant.y = location.y;\n    }\n  }\n  function isWhiteInCheck(square, pseudo) {\n    let squares = boardSquares;\n    if (pseudo) {\n      const updatedSquares = squares.map(s => {\n        if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\n          // Return a new Square component with the updated piece\n          return /*#__PURE__*/React.cloneElement(s, {\n            piece: pseudo.props.piece\n          });\n        } else {\n          // For other squares, return the original Square component\n          return s;\n        }\n      });\n      squares = updatedSquares;\n    }\n\n    //check for attackers in front of the white king\n    for (let i = square.props.x - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from behind\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers behind the white king\n    for (let i = square.props.x + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the front\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the left of the white king\n    for (let i = square.props.y - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the left\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the right of the white king\n    for (let i = square.props.y + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the right\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == -1) {\n                //console.log(\"in check from top half of counterclockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from top half of counterclockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == 1) {\n                //console.log(\"in check from top half of clockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from top half of clockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for knights check\n    let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1);\n    let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1);\n    let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1);\n    let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1);\n    let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2);\n    let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2);\n    let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2);\n    let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2);\n    if (knight1) {\n      if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight1.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 1\")\n          return true;\n        }\n      }\n    }\n    if (knight2) {\n      if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight2.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 2\")\n          return true;\n        }\n      }\n    }\n    if (knight3) {\n      if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight3.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 3\")\n          return true;\n        }\n      }\n    }\n    if (knight4) {\n      if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight4.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 4\")\n          return true;\n        }\n      }\n    }\n    if (knight5) {\n      if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight5.props.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 5\")\n          return true;\n        }\n      }\n    }\n    if (knight6) {\n      if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight6.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 6\")\n          return true;\n        }\n      }\n    }\n    if (knight7) {\n      if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight7.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 7\")\n          return true;\n        }\n      }\n    }\n    if (knight8) {\n      if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight8.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 8\")\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  function isBlackInCheck(square, pseudo) {\n    let squares = boardSquares;\n    if (pseudo) {\n      const updatedSquares = squares.map(s => {\n        if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\n          // Return a new Square component with the updated piece\n          return /*#__PURE__*/React.cloneElement(s, {\n            piece: pseudo.props.piece\n          });\n        } else {\n          // For other squares, return the original Square component\n          return s;\n        }\n      });\n      squares = updatedSquares;\n    }\n\n    //check for attackers behind the black king\n    for (let i = square.props.x - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from behind\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers in front of the black king\n    for (let i = square.props.x + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the front\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the left of the black king\n    for (let i = square.props.y - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the left\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the right of the black king\n    for (let i = square.props.y + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the right\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            //console.log(\"in check from top half of counterclockwise diagonal\")\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == 1) {\n                //console.log(\"in check from bottom half of counterclockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from bottom half of counterclockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            //console.log(\"in check from top half of clockwise diagonal\")\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == -1) {\n                //console.log(\"in check from bottom half of clockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from bottom half of clockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for knights check\n    let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1);\n    let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1);\n    let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1);\n    let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1);\n    let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2);\n    let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2);\n    let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2);\n    let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2);\n    if (knight1) {\n      if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight1.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 1\")\n          return true;\n        }\n      }\n    }\n    if (knight2) {\n      if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight2.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 2\")\n          return true;\n        }\n      }\n    }\n    if (knight3) {\n      if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight3.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 3\")\n          return true;\n        }\n      }\n    }\n    if (knight4) {\n      if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight4.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 4\")\n          return true;\n        }\n      }\n    }\n    if (knight5) {\n      if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight5.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 5\")\n          return true;\n        }\n      }\n    }\n    if (knight6) {\n      if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight6.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 6\")\n          return true;\n        }\n      }\n    }\n    if (knight7) {\n      if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight7.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 7\")\n          return true;\n        }\n      }\n    }\n    if (knight8) {\n      if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight8.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 8\")\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  function movePiece(x, y) {\n    let squares = boardSquares;\n    let position = BoardPosition;\n    let targetSquare = getATargetSquareByLocation(x, y);\n    let square = squares.find(s => s.props.x == CurrentSquareSelection.x && s.props.y == CurrentSquareSelection.y);\n    let color = getPieceColor(square);\n    let piece = getPiece(square);\n\n    //disable castling if the king moves\n    if (piece == PIECES.KING) {\n      if (isColorWhite(color)) {\n        CastlingRights.whiteLongCastle = false;\n        CastlingRights.whiteShortCastle = false;\n      } else {\n        CastlingRights.blackLongCastle = false;\n        CastlingRights.blackShortCastle = false;\n      }\n    }\n\n    //disable castling if the rook moves\n    if (piece == PIECES.ROOK) {\n      if (square.props.x == 7 && square.props.y == 7) {\n        CastlingRights.whiteShortCastle = false;\n      }\n      if (square.props.x == 0 && square.props.y == 7) {\n        CastlingRights.blackShortCastle = false;\n      }\n      if (square.props.x == 7 && square.props.y == 0) {\n        CastlingRights.whiteLongCastle = false;\n      }\n      if (square.props.x == 0 && square.props.y == 0) {\n        CastlingRights.blackLongCastle = false;\n      }\n    }\n    let p = UpdatePosition(square, targetSquare, position);\n\n    //capturing enPassant\n    if (EnPassant.isPossible) {\n      let enPassantTargetSquare = color == COLORS.WHITE ? squares.find(s => s.props.x == x + 1 && s.props.y == y) : squares.find(s => s.props.x == x - 1 && s.props.y == y);\n      let enPassantSquare = /*#__PURE__*/_jsxDEV(Square, {\n        x: square.props.x,\n        y: square.props.y,\n        piece: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 793,\n        columnNumber: 35\n      }, this);\n      p = UpdatePosition(enPassantSquare, enPassantTargetSquare, p);\n    }\n\n    //TODO: ensure p matches the new board Position format\n    //setBoardPosition(p)\n    const updatedBoardPosition = p.map(row => [...row]);\n    BoardPosition.splice(0, BoardPosition.length, ...updatedBoardPosition);\n    PossibleMoves.splice(0, PossibleMoves.length);\n    updateIsWhiteToMove(!IsWhiteToMove);\n\n    //enabling en passant\n    if (piece == PIECES.PAWN) {\n      if (Math.abs(square.props.x - targetSquare.props.x) == 2) {\n        if (square.props.piece.split(PIECE_DELIMITER)[0] == COLORS.WHITE) {\n          EnPassant.isPossible = true;\n          EnPassant.x = square.props.x - 1;\n          EnPassant.y = square.props.y;\n        } else {\n          EnPassant.isPossible = true;\n          EnPassant.x = square.props.x + 1;\n          EnPassant.y = square.props.y;\n        }\n\n        // let enPassant1 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y - 1)\n        // let enPassant2 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y + 1)\n\n        // if (enPassant1) {\n        //     if (enPassant1.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\n        //         if (enPassant1.props.piece.split(PIECE_DELIMITER)[0] != color) {\n        //             EnPassant.isPossible = true\n        //             EnPassant.x = targetSquare.props.x\n        //             EnPassant.y = targetSquare.props.y\n        //             return\n        //         }\n        //     }\n        // }\n\n        // if (enPassant2) {\n        //     if (enPassant2.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\n        //         if (enPassant2.props.piece.split(PIECE_DELIMITER)[0] != color) {\n        //             EnPassant.isPossible = true\n        //             EnPassant.x = targetSquare.props.x\n        //             EnPassant.y = targetSquare.props.y\n        //             return\n        //         }\n        //     }\n        // }\n      } else {\n        EnPassant.isPossible = false;\n        EnPassant.x = -1;\n        EnPassant.y = -1;\n      }\n    } else {\n      EnPassant.isPossible = false;\n      EnPassant.x = -1;\n      EnPassant.y = -1;\n    }\n    updateFullMoves(FullMoves + 1);\n    generateANewFen();\n  }\n\n  //updates the state with the selectedSquare X coordinates\n  function updateSelectedSquareX(x) {\n    setSelectedSquareX(x);\n  }\n\n  //updates the state with the selectedSquare Y coordinates\n  function updateSelectedSquareY(y) {\n    setSelectedSquareY(y);\n  }\n\n  //retrieves a speecific square from the board using x and y coordinates (location)\n  function getATargetSquareByLocation(x, y) {\n    return boardSquares.find(s => s.props.x === x && s.props.y === y);\n  }\n\n  //retrieves a speecific square from the board that has a certain piece\n  function getATargetSquareByPiece(piece) {\n    return boardSquares.find(s => s.props.piece == piece);\n  }\n\n  //check if a specific square has a piece assigned to it\n  function isSquareAvailable(square) {\n    return square && !square.props.piece;\n  }\n\n  //checks if a pawn is on its starting square and allows a 2-squares move\n  function isPawnOnStartingSquare(pawn) {\n    return isColorWhite(pawn.props.piece.split(PIECE_DELIMITER)[0]) ? pawn.props.x == 6 : pawn.props.x == 1;\n  }\n\n  //checks if two pieces have the same color\n  function areSameColor(square1, square2) {\n    if (!square1 || !square2) {\n      return;\n    }\n    let color1 = square1.props.piece.split(PIECE_DELIMITER)[0];\n    let color2 = square2.props.piece.split(PIECE_DELIMITER)[0];\n    return color1 == color2;\n  }\n\n  //checks if a square contains a certain piece\n  function doesTheSquareHasThePiece(square, piece) {\n    let p = getPiece(square);\n    return p == piece;\n  }\n\n  //cheks if a pawn is on En Passant square\n  function isPawnOnEnPassantSquare(pawn) {\n    return isColorWhite(pawn.props.piece.split(PIECE_DELIMITER)[0]) ? pawn.props.x == 3 : pawn.props.x == 4;\n  }\n\n  //checks if a color is white\n  function isColorWhite(color) {\n    return color == COLORS.WHITE;\n  }\n\n  //checks if a color is black\n  function isColorBlack(color) {\n    return color == COLORS.BLACK;\n  }\n\n  //checks if white is allowed to long castle\n  function checkIfCanWhiteLongCastle() {\n    return CastlingRights.whiteLongCastle && BoardPosition[7][0] == 'R' && BoardPosition[7][1] == '' && BoardPosition[7][2] == '' && BoardPosition[7][3] == '';\n  }\n\n  //checks if white is allowed to short castle\n  function checkIfCanWhiteShortCastle() {\n    return CastlingRights.whiteShortCastle && BoardPosition[7][7] == 'R' && BoardPosition[7][6] == '' && BoardPosition[7][5] == '';\n  }\n\n  //checks if black is allowed to long castle\n  function checkIfCanBlackLongCastle() {\n    return CastlingRights.blackLongCastle && BoardPosition[0][0] == 'r' && BoardPosition[0][1] == '' && BoardPosition[0][2] == '' && BoardPosition[0][3] == '';\n  }\n\n  //checks if black is allowed to short castle\n  function checkIfCanBlackShortCastle() {\n    return CastlingRights.blackShortCastle && BoardPosition[7][7] == 'r' && BoardPosition[7][6] == '' && BoardPosition[7][5] == '';\n  }\n\n  //converts board coordinates to X and Y position on the board, e.g., a8 = 0, 0\n  function convertCoordinatesToLocation(coordinates) {\n    let tokens = coordinates.split('');\n\n    //skip invalid coordinates\n    if (tokens.length != 2) {\n      return;\n    }\n    let letter = tokens[0].toString().toUpperCase();\n    let number = tokens[1];\n\n    //65 is the ASCII code for capital A which will give us 0 if we have A as a coordinate; A-F will give us 0-7 for x\n    //reverse the numbers since we draw the board top down\n    return {\n      x: DIM - Number(number),\n      y: letter.charCodeAt(0) - 65\n    };\n  }\n  function convertLocationToCoordinates(x, y) {\n    return `${String.fromCharCode(y + 65)}${DIM - x}`.toLowerCase();\n  }\n\n  //gets all possible moves for a pawn\n  function getPawnsPossibleMoves(square) {\n    if (!doesTheSquareHasThePiece(square, PIECES.PAWN)) {\n      return;\n    }\n    let color = getPieceColor(square); //get the piece color\n\n    let moves = [];\n    let position1Offset = 1;\n    let position2Offset = 2;\n\n    //flips the direction if the color is white\n    if (isColorWhite(color)) {\n      position1Offset *= -1;\n      position2Offset *= -1;\n    }\n\n    //get all forwards moves + the double move at the start\n    let targetPiece1 = getATargetSquareByLocation(square.props.x + position1Offset, square.props.y); //move pawn 1 square ahead\n    let targetPiece2 = getATargetSquareByLocation(square.props.x + position2Offset, square.props.y); //move pawn 2 squares ahead\n\n    //get potential neighbors to capture\n    let neighbor1 = getATargetSquareByLocation(square.props.x + position1Offset, square.props.y + position1Offset);\n    let neighbor2 = getATargetSquareByLocation(square.props.x + position1Offset, square.props.y + position1Offset * -1);\n\n    //get the En Passant coordinates\n    let enPassantSquare = EnPassant.isPossible ? getATargetSquareByLocation(EnPassant.x, EnPassant.y) : '';\n    let isTheSquareInFrontAvailable = isSquareAvailable(targetPiece1);\n\n    //push the one move forward for a pawn\n    if (isTheSquareInFrontAvailable) {\n      moves.push(targetPiece1);\n    }\n\n    //two moves are allowed only if the two squares above are free/empty\n    //allowed if pawn hasn't moved before\n    if (isTheSquareInFrontAvailable && isSquareAvailable(targetPiece2) && isPawnOnStartingSquare(square)) {\n      moves.push(targetPiece2);\n    }\n\n    //push neighbour if there is a piece to capture and it's a different color than the pawn\n    if (!isSquareAvailable(neighbor1) && !areSameColor(neighbor1, square)) {\n      moves.push(neighbor1);\n    }\n\n    //push neighbour if there is a piece to capture and it's a different color than the pawn\n    if (!isSquareAvailable(neighbor2) && !areSameColor(neighbor2, square)) {\n      moves.push(neighbor2);\n    }\n\n    //add En Passant\n    if (enPassantSquare) {\n      moves.push(enPassantSquare);\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a rook\n  function getRooksPossibleMoves(square, skip = true) {\n    if (!doesTheSquareHasThePiece(square, PIECES.ROOK) && skip) {\n      return;\n    }\n    let moves = [];\n    for (let i = square.props.x + 1; i < DIM; i++) {\n      let targetSquare = getATargetSquareByLocation(i, square.props.y);\n      if (isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    for (let i = square.props.x - 1; i >= 0; i--) {\n      let targetSquare = getATargetSquareByLocation(i, square.props.y);\n      if (isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    for (let i = square.props.y + 1; i < DIM; i++) {\n      let targetSquare = getATargetSquareByLocation(square.props.x, i);\n      if (isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    for (let i = square.props.y - 1; i >= 0; i--) {\n      let targetSquare = getATargetSquareByLocation(square.props.x, i);\n      if (isSquareAvailable(targetSquare)) {\n        moves.push(targetSquare);\n      } else {\n        if (!areSameColor(square, targetSquare)) {\n          moves.push(targetSquare);\n        }\n        break;\n      }\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a bishop\n  function getBishopPossibleMoves(square, skip = true) {\n    if (!doesTheSquareHasThePiece(square, PIECES.BISHOP) && skip) {\n      return;\n    }\n    let moves = [];\n    let counter = 0;\n    for (let i = 1; i <= DIM; i++) {\n      if (counter == 4) {\n        break;\n      }\n      let target1 = getATargetSquareByLocation(square.props.x - i, square.props.y - i);\n      let target2 = getATargetSquareByLocation(square.props.x - i, square.props.y + i);\n      let target3 = getATargetSquareByLocation(square.props.x + i, square.props.y + i);\n      let target4 = getATargetSquareByLocation(square.props.x + i, square.props.y - i);\n      if (target1 && isSquareAvailable(target1) && counter < 1) {\n        moves.push(target1);\n      } else {\n        if (!areSameColor(square, target1)) {\n          moves.push(target1);\n        }\n        counter++;\n      }\n      if (target2 && isSquareAvailable(target2) && counter < 2) {\n        moves.push(target2);\n      } else {\n        if (!areSameColor(square, target2)) {\n          moves.push(target2);\n        }\n        counter++;\n      }\n      if (target3 && isSquareAvailable(target3) && counter < 3) {\n        moves.push(target3);\n      } else {\n        if (!areSameColor(square, target3)) {\n          moves.push(target3);\n        }\n        counter++;\n      }\n      if (target4 && isSquareAvailable(target4) && counter < 4) {\n        moves.push(target4);\n      } else {\n        if (!areSameColor(square, target4)) {\n          moves.push(target4);\n        }\n        counter++;\n      }\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a knight\n  function getKnightPossibleMoves(square) {\n    if (!doesTheSquareHasThePiece(square, PIECES.KNIGHT)) {\n      return;\n    }\n    let offset = 1;\n    let doubleOffset = 2 * offset;\n    let moves = [];\n    for (let i = 0; i < 8; i++) {\n      if (i != 0 && i % 2 == 0) {\n        offset *= -1;\n      }\n      let targetX = square.props.x + offset;\n      let targetY = square.props.y + doubleOffset;\n      let target = getATargetSquareByLocation(targetX, targetY);\n      if (target && isSquareAvailable(target)) {\n        moves.push(target);\n      } else {\n        if (!areSameColor(square, target)) {\n          moves.push(target);\n        }\n      }\n      doubleOffset *= -1;\n      if (i == 4) {\n        offset *= 2;\n        doubleOffset /= 2;\n      }\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a king\n  function getKingPossibleMoves(square) {\n    if (!doesTheSquareHasThePiece(square, PIECES.KING)) {\n      return;\n    }\n    let moves = [];\n    let color = getPieceColor(square);\n\n    //gets all possible 1-square moves for the king\n    for (let i = -1; i < 2; i++) {\n      for (let j = -1; j < 2; j++) {\n        let targetPiece = getATargetSquareByLocation(square.props.x + i, square.props.y + j);\n        if (targetPiece && isSquareAvailable(targetPiece)) {\n          moves.push(targetPiece);\n        } else {\n          if (!areSameColor(square, targetPiece)) {\n            moves.push(targetPiece);\n          }\n        }\n      }\n    }\n\n    //Castling logic\n    const longCastleSquare = getATargetSquareByLocation(square.props.x, square.props.y - 2);\n    const shortCastleSquare = getATargetSquareByLocation(square.props.x, square.props.y + 2);\n    if (isColorWhite(color) && checkIfCanWhiteLongCastle()) {\n      moves.push(longCastleSquare);\n    }\n    if (isColorWhite(color) && checkIfCanWhiteShortCastle()) {\n      moves.push(shortCastleSquare);\n    }\n    if (isColorBlack(color) && checkIfCanBlackLongCastle()) {\n      moves.push(longCastleSquare);\n    }\n    if (isColorBlack(color) && checkIfCanBlackShortCastle()) {\n      moves.push(shortCastleSquare);\n    }\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets all possible moves for a queen\n  function getQueenPossibleMoves(square) {\n    if (!doesTheSquareHasThePiece(square, PIECES.QUEEN)) {\n      return;\n    }\n    let moves = [];\n\n    //a queen has the same moves as a bishop and a rook\n    const rookMoves = getRooksPossibleMoves(square, false).moves;\n    const bishopMoves = getBishopPossibleMoves(square, false).moves;\n\n    // Concatenate the arrays of moves\n    moves.push(...rookMoves, ...bishopMoves);\n    return {\n      piece: square,\n      moves: moves\n    };\n  }\n\n  //gets the piece color\n  function getPieceColor(square) {\n    return square.props.piece.split(PIECE_DELIMITER)[0];\n  }\n\n  //gets the piece\n  function getPiece(square) {\n    return square.props.piece.split(PIECE_DELIMITER)[1];\n  }\n\n  //removes moves that do not deal with a check\n  function filterMovesIfInCheck(possibleMoves) {\n    let blackKing = getATargetSquareByPiece(KINGS.BLACK_KING); //get the black king\n    let whiteKing = getATargetSquareByPiece(KINGS.WHITE_KING); //get the white king\n\n    for (let i = 0; i < possibleMoves.length; i++) {\n      for (let j = 0; j < possibleMoves[i].moves; j++) {\n        if (possibleMoves[i].piece.props.piece == KINGS.BLACK_KING) {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].moves[j].props.x,\n            y: possibleMoves[i].moves[j].props.y,\n            piece: \"black-king\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1286,\n            columnNumber: 32\n          }, this);\n          let pseudo = /*#__PURE__*/_jsxDEV(Square, {\n            x: blackKing.props.x,\n            y: blackKing.props.y,\n            piece: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1287,\n            columnNumber: 34\n          }, this);\n          let isInCheck = isBlackInCheck(move, pseudo);\n          if (isInCheck) {\n            possibleMoves[i].moves.splice(j, 1);\n            j--;\n          }\n        } else if (possibleMoves[i].piece.props.piece == KINGS.WHITE_KING) {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].moves[j].props.x,\n            y: possibleMoves[i].moves[j].props.y,\n            piece: \"white-king\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1295,\n            columnNumber: 32\n          }, this);\n          let pseudo = /*#__PURE__*/_jsxDEV(Square, {\n            x: whiteKing.props.x,\n            y: whiteKing.props.y,\n            piece: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1296,\n            columnNumber: 34\n          }, this);\n          let isInCheck = isWhiteInCheck(move, pseudo);\n          if (isInCheck) {\n            possibleMoves[i].moves.splice(j, 1);\n            j--;\n          }\n        } else {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].moves[j].props.x,\n            y: possibleMoves[i].moves[j].props.y,\n            piece: possibleMoves[i].piece.props.piece\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1304,\n            columnNumber: 32\n          }, this);\n          let isInCheck = isBlackInCheck(blackKing, move) ? true : isWhiteInCheck(whiteKing, move);\n          if (isInCheck) {\n            possibleMoves[i].moves.splice(j, 1);\n            j--;\n          }\n        }\n      }\n    }\n    return possibleMoves;\n  }\n\n  //removes moves that allow illigal castling (castles through check for example)\n  function filterMovesThatAllowIllegalCastling(possibleMoves) {\n    let blackKing = getATargetSquareByPiece(KINGS.BLACK_KING); //get the black king\n    let whiteKing = getATargetSquareByPiece(KINGS.WHITE_KING); //get the white king\n\n    for (let i = 0; i < possibleMoves.length; i++) {\n      let whiteCastle1 = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 6); //sqaure where king will be after short castle (white)\n      let whiteCastle2 = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 2); //sqaure where king will be after long castle (white)\n      let blackCastle1 = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 6); //square where king will be after shot castle (black)\n      let blackCastle2 = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 2); //square where king will be after long castle (black)\n\n      if (possibleMoves[i].piece == blackKing || possibleMoves[i].piece == whiteKing) {\n        if (whiteCastle1) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 5);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n        if (whiteCastle2) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 3);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n        if (blackCastle1) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 5);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n        if (blackCastle2) {\n          let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 3);\n          if (!pieceAcross) {\n            possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1);\n          }\n        }\n      }\n\n      //prevents black to castle if in check\n      if (isBlackInCheck(blackKing)) {\n        if (blackCastle1) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove), 1);\n        }\n        if (blackCastle2) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove2), 1);\n        }\n      }\n\n      //prevents white to castle if in check\n      if (isWhiteInCheck(whiteKing)) {\n        if (whiteCastle1) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove), 1);\n        }\n        if (whiteCastle2) {\n          possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove2), 1);\n        }\n      }\n    }\n    return possibleMoves;\n  }\n\n  //removes empty/undefined values for generated moves\n  function removeEmptyMoves(possibleMoves) {\n    for (let i = 0; i < possibleMoves.length; i++) {\n      if (!possibleMoves[i]) {\n        possibleMoves.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (possibleMoves[i].moves.length == 0) {\n        possibleMoves.splice(i, 1);\n        i--;\n        continue;\n      }\n      for (let j = 0; j < possibleMoves[i].moves.length; j++) {\n        if (!possibleMoves[i].moves[j]) {\n          possibleMoves[i].moves.splice(j, 1);\n          j--;\n        }\n      }\n    }\n    return possibleMoves;\n  }\n  function updatePossibleMovesVisually() {\n    for (let i = 0; i < PossibleMoves.length; i++) {\n      if (PossibleMoves[i].piece.props.x == CurrentSquareSelection.x && PossibleMoves[i].piece.props.y == CurrentSquareSelection.y) {\n        for (let j = 0; j < PossibleMoves[i].moves.length; j++) {\n          updateIsPossibleMove(`${PossibleMoves[i].moves[j].props.x}-${PossibleMoves[i].moves[j].props.y}`, true);\n        }\n      }\n    }\n  }\n\n  //gets all possible/legal moves\n  function getPossibleMoves() {\n    //let square = getATargetSquareByLocation(x, y)\n    let possiblePieceMoves = [];\n    let squares = boardSquares;\n    for (let i = 0; i < squares.length; i++) {\n      let square = squares[i];\n\n      //if the square has a piece\n      if (square.props.piece) {\n        let color = getPieceColor(square); //get the piece color\n\n        //don't collect possible moves if it's black to move and you're trying to move a white piece\n        if (isColorWhite(color) && !IsWhiteToMove) {\n          //console.log(`Skipping because it's black to move and you're moving a white piece, x: ${square.props.x}, y: ${square.props.y}`)\n          continue;\n        }\n\n        //don't collect possible moves if it's white to move and you're trying to move a black piece\n        if (isColorBlack(color) && IsWhiteToMove) {\n          //console.log(`Skipping because it's white to move and you're moving a black piece, x: ${square.props.x}, y: ${square.props.y}`)\n          continue;\n        }\n\n        //console.log(`Getting possible moves, x: ${square.props.x}, y: ${square.props.y}`)\n        //get all possible moves for each piece\n        possiblePieceMoves.push(getPawnsPossibleMoves(square));\n        possiblePieceMoves.push(getRooksPossibleMoves(square));\n        possiblePieceMoves.push(getBishopPossibleMoves(square));\n        possiblePieceMoves.push(getKnightPossibleMoves(square));\n        possiblePieceMoves.push(getKingPossibleMoves(square));\n        possiblePieceMoves.push(getQueenPossibleMoves(square));\n\n        //filter empty moves\n        possiblePieceMoves = removeEmptyMoves(possiblePieceMoves);\n\n        //filter possible moves\n        possiblePieceMoves = filterMovesIfInCheck(possiblePieceMoves);\n        possiblePieceMoves = filterMovesThatAllowIllegalCastling(possiblePieceMoves);\n      }\n    }\n    console.log(\"Possible Moves:\", possiblePieceMoves);\n    console.log('Moves count', possiblePieceMoves.reduce((sum, pieceMove) => sum + pieceMove.moves.length, 0));\n    PossibleMoves.splice(0, PossibleMoves.length, ...possiblePieceMoves);\n    updatePossibleMovesVisually();\n  }\n\n  //renders the board\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessGrid\",\n      children: boardSquares.map(sqr => sqr)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1473,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Board, \"1wSimE903TIVwAHtlkybivawdBc=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useState","useEffect","useRef","createContext","React","Square","ConvertFENPieceToPiece","ConvertFenToString","UpdatePosition","ParseFEN","IsDigit","DIM","PIECE_DELIMITER","KINGS","COLORS","PIECES","CastlingRights","EnPassant","CurrentSquareSelection","PossibleMoves","HalfMoves","FullMoves","IsWhiteToMove","updateIsWhiteToMove","updateHalfMoves","updateFullMoves","BoardPosition","jsxDEV","_jsxDEV","Fragment","_Fragment","Board","_s","fen","setFen","isPossibleMove","setIsPossibleMove","boardSquares","setBoardSquares","isPossibleMoveRef","updateIsPossibleMove","key","value","prevState","map","item","current","fenParser","resetPossibleMoves","console","log","initialIsPossibleMove","i","j","push","generateANewFen","fenString","length","row","column","lastChar","slice","substring","Number","castlingRules","whiteShortCastle","whiteLongCastle","blackShortCastle","blackLongCastle","isPossible","convertLocationToCoordinates","x","y","updateBoardPosition","fenBoard","fenTurn","fenCastling","fenEnPassant","fenHalfMoves","fenFullMoves","fenRows","split","arr","tokens","r","squareColorIsWhite","squares","color","possibleMoveStatus","find","getPossibleMoves","piece","movePiece","fileName","_jsxFileName","lineNumber","columnNumber","includes","splice","location","convertCoordinatesToLocation","isWhiteInCheck","square","pseudo","updatedSquares","s","props","cloneElement","knight1","knight2","knight3","knight4","knight5","knight6","knight7","knight8","isBlackInCheck","position","targetSquare","getATargetSquareByLocation","getPieceColor","getPiece","KING","isColorWhite","ROOK","p","enPassantTargetSquare","WHITE","enPassantSquare","updatedBoardPosition","PAWN","Math","abs","updateSelectedSquareX","setSelectedSquareX","updateSelectedSquareY","setSelectedSquareY","getATargetSquareByPiece","isSquareAvailable","isPawnOnStartingSquare","pawn","areSameColor","square1","square2","color1","color2","doesTheSquareHasThePiece","isPawnOnEnPassantSquare","isColorBlack","BLACK","checkIfCanWhiteLongCastle","checkIfCanWhiteShortCastle","checkIfCanBlackLongCastle","checkIfCanBlackShortCastle","coordinates","letter","toString","toUpperCase","number","charCodeAt","String","fromCharCode","toLowerCase","getPawnsPossibleMoves","moves","position1Offset","position2Offset","targetPiece1","targetPiece2","neighbor1","neighbor2","isTheSquareInFrontAvailable","getRooksPossibleMoves","skip","getBishopPossibleMoves","BISHOP","counter","target1","target2","target3","target4","getKnightPossibleMoves","KNIGHT","offset","doubleOffset","targetX","targetY","target","getKingPossibleMoves","targetPiece","longCastleSquare","shortCastleSquare","getQueenPossibleMoves","QUEEN","rookMoves","bishopMoves","filterMovesIfInCheck","possibleMoves","blackKing","BLACK_KING","whiteKing","WHITE_KING","move","isInCheck","filterMovesThatAllowIllegalCastling","whiteCastle1","m","whiteCastle2","blackCastle1","blackCastle2","pieceAcross","indexOf","castleMove","castleMove2","removeEmptyMoves","updatePossibleMovesVisually","possiblePieceMoves","reduce","sum","pieceMove","children","className","sqr","_c","$RefreshReg$"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/Chess-React.js-/src/Board.js"],"sourcesContent":["import { useState, useEffect, useRef, createContext } from \"react\";\r\nimport React from 'react';\r\nimport Square from \"./Square.js\"\r\nimport { ConvertFENPieceToPiece, ConvertFenToString, UpdatePosition, ParseFEN, IsDigit } from \"./HelperMethods.js\";\r\nimport {\r\n    DIM, PIECE_DELIMITER, KINGS, COLORS, PIECES,\r\n    CastlingRights, EnPassant, CurrentSquareSelection, PossibleMoves,\r\n    HalfMoves, FullMoves, IsWhiteToMove, updateIsWhiteToMove, updateHalfMoves,\r\n    updateFullMoves, BoardPosition\r\n} from \"./globalVariables.js\"\r\n\r\n\r\n/*\r\nTODO:\r\nCode Reusability: refactor some of the repeated code and generate new functions if needed\r\nConsistency and Naming: Have better and more consistent names for variables and functions\r\nDocumentation: add more comments to understand what is going on\r\nTesting: add unit tests\r\nImplementations: add promotions, implement endgames (mate, stalemate, draws repeation, 50 moves rule)\r\nBugs: Fix bugs (if any)\r\n*/\r\n\r\nfunction Board() {\r\n    //<summary>\r\n    //FEN - Forsyth-Edwards Notation\r\n    //small letters - black pieces\r\n    //capital letters - white pieces\r\n    //numbers - empty board squares\r\n    //(/) - separates each board row\r\n    //first letter after the board indicates whose turn it is to move (w - white, b - black)\r\n    //next letters indicate castling rights, k - kingside, q - queenside, (-) - no castling allowed for any side\r\n    //en passant square - when a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square\r\n    //the number of half turns (white moves, then black moves = 2 half moves) that were made without a pawn move or a capture of a piece (50-move rule when reaches 100)\r\n    //the number of full moves (white moves, then black moves = 1 full move); increase after every black half move\r\n    //</summary>\r\n    //starting position\r\n    //'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\r\n    const [fen, setFen] = useState('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0')\r\n    const [isPossibleMove, setIsPossibleMove] = useState([])\r\n    const [boardSquares, setBoardSquares] = useState([])\r\n\r\n    const isPossibleMoveRef = useRef(isPossibleMove)\r\n\r\n    const updateIsPossibleMove = (key, value) => {\r\n        setIsPossibleMove(prevState =>\r\n            prevState.map(item =>\r\n                item.key === key ? { ...item, value: value } : item\r\n            )\r\n        );\r\n    };\r\n\r\n    useEffect(() => {\r\n        isPossibleMoveRef.current = isPossibleMove;\r\n        fenParser(false);\r\n    }, [isPossibleMove])\r\n\r\n    //called when the page loads.we need to parse the FEN to fill in the board\r\n    useEffect(() => {\r\n        resetPossibleMoves()\r\n        fenParser()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        console.log(BoardPosition)\r\n        fenParser()\r\n    }, [fen])\r\n\r\n    function resetPossibleMoves() {\r\n        const initialIsPossibleMove = [];\r\n        for (let i = 0; i < DIM; i++) {\r\n            for (let j = 0; j < DIM; j++) {\r\n                initialIsPossibleMove.push({ key: `${i}-${j}`, value: false });\r\n            }\r\n        }\r\n        setIsPossibleMove(initialIsPossibleMove);\r\n    }\r\n\r\n    function generateANewFen() {\r\n        let fenString = ''\r\n\r\n        for (let i = 0; i < BoardPosition.length; i++) {\r\n            let row = BoardPosition[i]\r\n            for (let j = 0; j < row.length; j++) {\r\n                let column = row[j]\r\n\r\n                if (column == ' ') {\r\n                    if (IsDigit(fenString[fenString.length - 1])) {\r\n                        let lastChar = fenString.slice(-1)\r\n                        fenString = fenString.substring(0, fenString.length - 1)\r\n                        fenString += Number(lastChar) + 1\r\n                    } else {\r\n                        fenString += '1'\r\n                    }\r\n                } else {\r\n                    fenString += column\r\n                }\r\n            }\r\n            fenString += '/'\r\n        }\r\n\r\n        fenString = fenString.substring(0, fenString.length - 1) //removes the last slash\r\n\r\n        fenString += IsWhiteToMove ? ' w' : ' b'\r\n\r\n        let castlingRules = ''\r\n\r\n        castlingRules += CastlingRights.whiteShortCastle ? 'K' : ''\r\n        castlingRules += CastlingRights.whiteLongCastle ? 'Q' : ''\r\n        castlingRules += CastlingRights.blackShortCastle ? 'k' : ''\r\n        castlingRules += CastlingRights.blackLongCastle ? 'q' : ''\r\n\r\n        fenString += castlingRules.length == 0 ? ' -' : ' ' + castlingRules\r\n\r\n        fenString += EnPassant.isPossible ? ' ' + convertLocationToCoordinates(EnPassant.x, EnPassant.y) : ' -'\r\n\r\n        fenString += ' ' + HalfMoves\r\n        fenString += ' ' + FullMoves\r\n\r\n        setFen(fenString)\r\n    }\r\n\r\n    //parses the FEN for the initial board state\r\n    function fenParser(updateBoardPosition = true) {\r\n        //parses the FEN string to variables\r\n        const { fenBoard, fenTurn, fenCastling, fenEnPassant, fenHalfMoves, fenFullMoves } = ParseFEN(fen)\r\n\r\n        const fenRows = fenBoard.split('/')\r\n\r\n        let arr = [];\r\n\r\n        //splits all rows and creates a matrix for the board\r\n        for (let row of fenRows) {\r\n            const tokens = row.split('')\r\n\r\n            let r = []\r\n\r\n            for (let i = 0; i < tokens.length; i++) {\r\n                if (Number(tokens[i])) {\r\n                    for (let j = 0; j < Number(tokens[i]); j++) {\r\n                        r.push(' ')\r\n                    }\r\n                } else {\r\n                    r.push(tokens[i])\r\n                }\r\n            }\r\n\r\n            arr.push(r)\r\n        }\r\n\r\n        //generates a Square component for each element in the matrix created above\r\n        let squareColorIsWhite = true;\r\n        let squares = []\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            for (let j = 0; j < arr[i].length; j++) {\r\n                let color = squareColorIsWhite ? \"\" : \"dark\";\r\n                const possibleMoveStatus = isPossibleMoveRef.current.find(item => item.key === `${i}-${j}`);\r\n\r\n                //boardSquares.push(\r\n                squares.push(\r\n                    <Square\r\n                        getPossibleMoves={getPossibleMoves}\r\n                        key={`${i}-${j}`}\r\n                        x={i}\r\n                        y={j}\r\n                        piece={ConvertFENPieceToPiece(arr[i][j])}\r\n                        color={color}\r\n                        movePiece={movePiece}\r\n                        isPossibleMove={possibleMoveStatus ? possibleMoveStatus.value : false}\r\n                        resetPossibleMoves={resetPossibleMoves}\r\n                    />\r\n                )\r\n                squareColorIsWhite = !squareColorIsWhite;\r\n            }\r\n            squareColorIsWhite = !squareColorIsWhite;\r\n        }\r\n\r\n        setBoardSquares(squares)\r\n\r\n        // BoardSquares.splice(0, BoardSquares.length);\r\n        // BoardSquares.push(...squares)\r\n        // console.log(BoardSquares)\r\n\r\n        if (fenCastling.includes('K')) {\r\n            CastlingRights.whiteShortCastle = true;\r\n        }\r\n        if (fenCastling.includes('Q')) {\r\n            CastlingRights.whiteLongCastle = true;\r\n        }\r\n        if (fenCastling.includes('k')) {\r\n            CastlingRights.blackShortCastle = true;\r\n        }\r\n        if (fenCastling.includes('q')) {\r\n            CastlingRights.blackLongCastle = true;\r\n        }\r\n\r\n        fenTurn == 'w' ? updateIsWhiteToMove(true) : updateIsWhiteToMove(false)\r\n        updateHalfMoves(fenHalfMoves)\r\n        updateFullMoves(fenFullMoves)\r\n\r\n        if (updateBoardPosition) {\r\n            BoardPosition.splice(0, BoardPosition.length, ...arr)\r\n        }\r\n\r\n        if (!fenEnPassant.includes(PIECE_DELIMITER)) {\r\n            let location = convertCoordinatesToLocation(fenEnPassant)\r\n\r\n            EnPassant.isPossible = true\r\n            EnPassant.x = location.x\r\n            EnPassant.y = location.y\r\n        }\r\n    }\r\n\r\n    function isWhiteInCheck(square, pseudo) {\r\n        let squares = boardSquares\r\n\r\n        if (pseudo) {\r\n            const updatedSquares = squares.map(s => {\r\n                if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\r\n                    // Return a new Square component with the updated piece\r\n                    return React.cloneElement(s, { piece: pseudo.props.piece });\r\n                } else {\r\n                    // For other squares, return the original Square component\r\n                    return s;\r\n                }\r\n            });\r\n\r\n            squares = updatedSquares;\r\n        }\r\n\r\n        //check for attackers in front of the white king\r\n        for (let i = square.props.x - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from behind\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers behind the white king\r\n        for (let i = square.props.x + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the front\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the left of the white king\r\n        for (let i = square.props.y - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the left\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the right of the white king\r\n        for (let i = square.props.y + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the right\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == -1) {\r\n                                //console.log(\"in check from top half of counterclockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from top half of counterclockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        return true\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == 1) {\r\n                                //console.log(\"in check from top half of clockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from top half of clockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        return true;\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for knights check\r\n        let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1)\r\n        let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1)\r\n        let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1)\r\n        let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1)\r\n        let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2)\r\n        let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2)\r\n        let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2)\r\n        let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2)\r\n\r\n        if (knight1) {\r\n            if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight1.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 1\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight2) {\r\n            if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight2.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 2\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight3) {\r\n            if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight3.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 3\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight4) {\r\n            if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight4.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 4\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight5) {\r\n            if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight5.props.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 5\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight6) {\r\n            if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight6.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 6\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight7) {\r\n            if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight7.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 7\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight8) {\r\n            if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight8.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 8\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function isBlackInCheck(square, pseudo) {\r\n        let squares = boardSquares\r\n\r\n        if (pseudo) {\r\n            const updatedSquares = squares.map(s => {\r\n                if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\r\n                    // Return a new Square component with the updated piece\r\n                    return React.cloneElement(s, { piece: pseudo.props.piece });\r\n                } else {\r\n                    // For other squares, return the original Square component\r\n                    return s;\r\n                }\r\n            });\r\n\r\n            squares = updatedSquares;\r\n        }\r\n\r\n        //check for attackers behind the black king\r\n        for (let i = square.props.x - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from behind\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers in front of the black king\r\n        for (let i = square.props.x + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the front\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the left of the black king\r\n        for (let i = square.props.y - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the left\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the right of the black king\r\n        for (let i = square.props.y + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the right\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        //console.log(\"in check from top half of counterclockwise diagonal\")\r\n                        return true\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == 1) {\r\n                                //console.log(\"in check from bottom half of counterclockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from bottom half of counterclockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        //console.log(\"in check from top half of clockwise diagonal\")\r\n                        return true\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == -1) {\r\n                                //console.log(\"in check from bottom half of clockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from bottom half of clockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for knights check\r\n        let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1)\r\n        let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1)\r\n        let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1)\r\n        let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1)\r\n        let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2)\r\n        let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2)\r\n        let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2)\r\n        let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2)\r\n\r\n        if (knight1) {\r\n            if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight1.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 1\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight2) {\r\n            if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight2.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 2\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight3) {\r\n            if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight3.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 3\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight4) {\r\n            if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight4.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 4\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight5) {\r\n            if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight5.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 5\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight6) {\r\n            if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight6.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 6\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight7) {\r\n            if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight7.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 7\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight8) {\r\n            if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight8.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 8\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function movePiece(x, y) {\r\n        let squares = boardSquares\r\n        let position = BoardPosition\r\n\r\n        let targetSquare = getATargetSquareByLocation(x, y)\r\n        let square = squares.find(s => s.props.x == CurrentSquareSelection.x && s.props.y == CurrentSquareSelection.y)\r\n\r\n        let color = getPieceColor(square)\r\n        let piece = getPiece(square)\r\n\r\n        //disable castling if the king moves\r\n        if (piece == PIECES.KING) {\r\n            if (isColorWhite(color)) {\r\n                CastlingRights.whiteLongCastle = false\r\n                CastlingRights.whiteShortCastle = false\r\n            } else {\r\n                CastlingRights.blackLongCastle = false\r\n                CastlingRights.blackShortCastle = false\r\n            }\r\n        }\r\n\r\n        //disable castling if the rook moves\r\n        if (piece == PIECES.ROOK) {\r\n            if (square.props.x == 7 && square.props.y == 7) {\r\n                CastlingRights.whiteShortCastle = false\r\n            }\r\n\r\n            if (square.props.x == 0 && square.props.y == 7) {\r\n                CastlingRights.blackShortCastle = false\r\n            }\r\n\r\n            if (square.props.x == 7 && square.props.y == 0) {\r\n                CastlingRights.whiteLongCastle = false\r\n            }\r\n\r\n            if (square.props.x == 0 && square.props.y == 0) {\r\n                CastlingRights.blackLongCastle = false\r\n            }\r\n        }\r\n\r\n        let p = UpdatePosition(square, targetSquare, position)\r\n\r\n        //capturing enPassant\r\n        if (EnPassant.isPossible) {\r\n            let enPassantTargetSquare = color == COLORS.WHITE ? squares.find(s => s.props.x == x + 1 && s.props.y == y) : squares.find(s => s.props.x == x - 1 && s.props.y == y)\r\n            let enPassantSquare = <Square x={square.props.x} y={square.props.y} piece={\"\"} />\r\n\r\n            p = UpdatePosition(enPassantSquare, enPassantTargetSquare, p)\r\n        }\r\n\r\n        //TODO: ensure p matches the new board Position format\r\n        //setBoardPosition(p)\r\n        const updatedBoardPosition = p.map(row => [...row]);\r\n        BoardPosition.splice(0, BoardPosition.length, ...updatedBoardPosition);\r\n\r\n        PossibleMoves.splice(0, PossibleMoves.length);\r\n        updateIsWhiteToMove(!IsWhiteToMove)\r\n\r\n        //enabling en passant\r\n        if (piece == PIECES.PAWN) {\r\n            if (Math.abs(square.props.x - targetSquare.props.x) == 2) {\r\n                if (square.props.piece.split(PIECE_DELIMITER)[0] == COLORS.WHITE) {\r\n                    EnPassant.isPossible = true\r\n                    EnPassant.x = square.props.x - 1\r\n                    EnPassant.y = square.props.y\r\n                } else {\r\n                    EnPassant.isPossible = true\r\n                    EnPassant.x = square.props.x + 1\r\n                    EnPassant.y = square.props.y\r\n                }\r\n\r\n                // let enPassant1 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y - 1)\r\n                // let enPassant2 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y + 1)\r\n\r\n                // if (enPassant1) {\r\n                //     if (enPassant1.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\r\n                //         if (enPassant1.props.piece.split(PIECE_DELIMITER)[0] != color) {\r\n                //             EnPassant.isPossible = true\r\n                //             EnPassant.x = targetSquare.props.x\r\n                //             EnPassant.y = targetSquare.props.y\r\n                //             return\r\n                //         }\r\n                //     }\r\n                // }\r\n\r\n                // if (enPassant2) {\r\n                //     if (enPassant2.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\r\n                //         if (enPassant2.props.piece.split(PIECE_DELIMITER)[0] != color) {\r\n                //             EnPassant.isPossible = true\r\n                //             EnPassant.x = targetSquare.props.x\r\n                //             EnPassant.y = targetSquare.props.y\r\n                //             return\r\n                //         }\r\n                //     }\r\n                // }\r\n            } else {\r\n                EnPassant.isPossible = false\r\n                EnPassant.x = -1\r\n                EnPassant.y = -1\r\n            }\r\n        } else {\r\n            EnPassant.isPossible = false\r\n            EnPassant.x = -1\r\n            EnPassant.y = -1\r\n        }\r\n\r\n        updateFullMoves(FullMoves + 1)\r\n\r\n        generateANewFen()\r\n    }\r\n\r\n    //updates the state with the selectedSquare X coordinates\r\n    function updateSelectedSquareX(x) {\r\n        setSelectedSquareX(x)\r\n    }\r\n\r\n    //updates the state with the selectedSquare Y coordinates\r\n    function updateSelectedSquareY(y) {\r\n        setSelectedSquareY(y)\r\n    }\r\n\r\n    //retrieves a speecific square from the board using x and y coordinates (location)\r\n    function getATargetSquareByLocation(x, y) {\r\n        return boardSquares.find(s => s.props.x === x && s.props.y === y);\r\n    }\r\n\r\n    //retrieves a speecific square from the board that has a certain piece\r\n    function getATargetSquareByPiece(piece) {\r\n        return boardSquares.find(s => s.props.piece == piece);\r\n    }\r\n\r\n    //check if a specific square has a piece assigned to it\r\n    function isSquareAvailable(square) {\r\n        return square && !square.props.piece\r\n    }\r\n\r\n    //checks if a pawn is on its starting square and allows a 2-squares move\r\n    function isPawnOnStartingSquare(pawn) {\r\n        return isColorWhite(pawn.props.piece.split(PIECE_DELIMITER)[0]) ? pawn.props.x == 6 : pawn.props.x == 1\r\n    }\r\n\r\n    //checks if two pieces have the same color\r\n    function areSameColor(square1, square2) {\r\n        if (!square1 || !square2) {\r\n            return\r\n        }\r\n\r\n        let color1 = square1.props.piece.split(PIECE_DELIMITER)[0];\r\n        let color2 = square2.props.piece.split(PIECE_DELIMITER)[0];\r\n\r\n        return color1 == color2\r\n    }\r\n\r\n    //checks if a square contains a certain piece\r\n    function doesTheSquareHasThePiece(square, piece) {\r\n        let p = getPiece(square)\r\n\r\n        return p == piece\r\n    }\r\n\r\n    //cheks if a pawn is on En Passant square\r\n    function isPawnOnEnPassantSquare(pawn) {\r\n        return isColorWhite(pawn.props.piece.split(PIECE_DELIMITER)[0]) ? pawn.props.x == 3 : pawn.props.x == 4\r\n    }\r\n\r\n    //checks if a color is white\r\n    function isColorWhite(color) {\r\n        return color == COLORS.WHITE\r\n    }\r\n\r\n    //checks if a color is black\r\n    function isColorBlack(color) {\r\n        return color == COLORS.BLACK\r\n    }\r\n\r\n    //checks if white is allowed to long castle\r\n    function checkIfCanWhiteLongCastle() {\r\n        return CastlingRights.whiteLongCastle &&\r\n            BoardPosition[7][0] == 'R' &&\r\n            BoardPosition[7][1] == '' &&\r\n            BoardPosition[7][2] == '' &&\r\n            BoardPosition[7][3] == '';\r\n    }\r\n\r\n    //checks if white is allowed to short castle\r\n    function checkIfCanWhiteShortCastle() {\r\n        return CastlingRights.whiteShortCastle &&\r\n            BoardPosition[7][7] == 'R' &&\r\n            BoardPosition[7][6] == '' &&\r\n            BoardPosition[7][5] == '';\r\n    }\r\n\r\n    //checks if black is allowed to long castle\r\n    function checkIfCanBlackLongCastle() {\r\n        return CastlingRights.blackLongCastle &&\r\n            BoardPosition[0][0] == 'r' &&\r\n            BoardPosition[0][1] == '' &&\r\n            BoardPosition[0][2] == '' &&\r\n            BoardPosition[0][3] == '';\r\n    }\r\n\r\n    //checks if black is allowed to short castle\r\n    function checkIfCanBlackShortCastle() {\r\n        return CastlingRights.blackShortCastle &&\r\n            BoardPosition[7][7] == 'r' &&\r\n            BoardPosition[7][6] == '' &&\r\n            BoardPosition[7][5] == '';\r\n    }\r\n\r\n    //converts board coordinates to X and Y position on the board, e.g., a8 = 0, 0\r\n    function convertCoordinatesToLocation(coordinates) {\r\n        let tokens = coordinates.split('')\r\n\r\n        //skip invalid coordinates\r\n        if (tokens.length != 2) {\r\n            return\r\n        }\r\n\r\n        let letter = tokens[0].toString().toUpperCase()\r\n        let number = tokens[1]\r\n\r\n        //65 is the ASCII code for capital A which will give us 0 if we have A as a coordinate; A-F will give us 0-7 for x\r\n        //reverse the numbers since we draw the board top down\r\n        return { x: DIM - Number(number), y: letter.charCodeAt(0) - 65 }\r\n    }\r\n\r\n    function convertLocationToCoordinates(x, y) {\r\n        return `${String.fromCharCode(y + 65)}${DIM - x}`.toLowerCase()\r\n    }\r\n\r\n    //gets all possible moves for a pawn\r\n    function getPawnsPossibleMoves(square) {\r\n        if (!doesTheSquareHasThePiece(square, PIECES.PAWN)) {\r\n            return\r\n        }\r\n\r\n        let color = getPieceColor(square) //get the piece color\r\n\r\n        let moves = []\r\n\r\n        let position1Offset = 1\r\n        let position2Offset = 2\r\n\r\n        //flips the direction if the color is white\r\n        if (isColorWhite(color)) {\r\n            position1Offset *= -1\r\n            position2Offset *= -1\r\n        }\r\n\r\n        //get all forwards moves + the double move at the start\r\n        let targetPiece1 = getATargetSquareByLocation(square.props.x + position1Offset, square.props.y) //move pawn 1 square ahead\r\n        let targetPiece2 = getATargetSquareByLocation(square.props.x + position2Offset, square.props.y) //move pawn 2 squares ahead\r\n\r\n        //get potential neighbors to capture\r\n        let neighbor1 = getATargetSquareByLocation(square.props.x + position1Offset, square.props.y + position1Offset)\r\n        let neighbor2 = getATargetSquareByLocation(square.props.x + position1Offset, square.props.y + (position1Offset * -1))\r\n\r\n        //get the En Passant coordinates\r\n        let enPassantSquare = EnPassant.isPossible ? getATargetSquareByLocation(EnPassant.x, EnPassant.y) : ''\r\n\r\n        let isTheSquareInFrontAvailable = isSquareAvailable(targetPiece1)\r\n\r\n        //push the one move forward for a pawn\r\n        if (isTheSquareInFrontAvailable) {\r\n            moves.push(targetPiece1)\r\n        }\r\n\r\n        //two moves are allowed only if the two squares above are free/empty\r\n        //allowed if pawn hasn't moved before\r\n        if (isTheSquareInFrontAvailable && isSquareAvailable(targetPiece2) && isPawnOnStartingSquare(square)) {\r\n            moves.push(targetPiece2)\r\n        }\r\n\r\n        //push neighbour if there is a piece to capture and it's a different color than the pawn\r\n        if (!isSquareAvailable(neighbor1) && !areSameColor(neighbor1, square)) {\r\n            moves.push(neighbor1)\r\n        }\r\n\r\n        //push neighbour if there is a piece to capture and it's a different color than the pawn\r\n        if (!isSquareAvailable(neighbor2) && !areSameColor(neighbor2, square)) {\r\n            moves.push(neighbor2)\r\n        }\r\n\r\n        //add En Passant\r\n        if (enPassantSquare) {\r\n            moves.push(enPassantSquare)\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a rook\r\n    function getRooksPossibleMoves(square, skip = true) {\r\n        if (!doesTheSquareHasThePiece(square, PIECES.ROOK) && skip) {\r\n            return\r\n        }\r\n\r\n        let moves = []\r\n\r\n        for (let i = square.props.x + 1; i < DIM; i++) {\r\n            let targetSquare = getATargetSquareByLocation(i, square.props.y)\r\n\r\n            if (isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break\r\n            }\r\n        }\r\n\r\n        for (let i = square.props.x - 1; i >= 0; i--) {\r\n            let targetSquare = getATargetSquareByLocation(i, square.props.y)\r\n\r\n            if (isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = square.props.y + 1; i < DIM; i++) {\r\n            let targetSquare = getATargetSquareByLocation(square.props.x, i)\r\n\r\n            if (isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break\r\n            }\r\n        }\r\n\r\n        for (let i = square.props.y - 1; i >= 0; i--) {\r\n            let targetSquare = getATargetSquareByLocation(square.props.x, i)\r\n\r\n            if (isSquareAvailable(targetSquare)) {\r\n                moves.push(targetSquare)\r\n            } else {\r\n                if (!areSameColor(square, targetSquare)) {\r\n                    moves.push(targetSquare)\r\n                }\r\n                break\r\n            }\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a bishop\r\n    function getBishopPossibleMoves(square, skip = true) {\r\n        if (!doesTheSquareHasThePiece(square, PIECES.BISHOP) && skip) {\r\n            return\r\n        }\r\n\r\n        let moves = []\r\n\r\n        let counter = 0;\r\n\r\n        for (let i = 1; i <= DIM; i++) {\r\n            if (counter == 4) {\r\n                break;\r\n            }\r\n\r\n            let target1 = getATargetSquareByLocation(square.props.x - i, square.props.y - i)\r\n            let target2 = getATargetSquareByLocation(square.props.x - i, square.props.y + i)\r\n            let target3 = getATargetSquareByLocation(square.props.x + i, square.props.y + i)\r\n            let target4 = getATargetSquareByLocation(square.props.x + i, square.props.y - i)\r\n\r\n            if (target1 && isSquareAvailable(target1) && counter < 1) {\r\n                moves.push(target1)\r\n            } else {\r\n                if (!areSameColor(square, target1)) {\r\n                    moves.push(target1)\r\n                }\r\n                counter++;\r\n            }\r\n\r\n            if (target2 && isSquareAvailable(target2) && counter < 2) {\r\n                moves.push(target2)\r\n            } else {\r\n                if (!areSameColor(square, target2)) {\r\n                    moves.push(target2)\r\n                }\r\n                counter++;\r\n            }\r\n\r\n            if (target3 && isSquareAvailable(target3) && counter < 3) {\r\n                moves.push(target3)\r\n            } else {\r\n                if (!areSameColor(square, target3)) {\r\n                    moves.push(target3)\r\n                }\r\n                counter++;\r\n            }\r\n\r\n            if (target4 && isSquareAvailable(target4) && counter < 4) {\r\n                moves.push(target4)\r\n            } else {\r\n                if (!areSameColor(square, target4)) {\r\n                    moves.push(target4)\r\n                }\r\n                counter++;\r\n            }\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a knight\r\n    function getKnightPossibleMoves(square) {\r\n        if (!doesTheSquareHasThePiece(square, PIECES.KNIGHT)) {\r\n            return\r\n        }\r\n\r\n        let offset = 1;\r\n        let doubleOffset = 2 * offset;\r\n\r\n        let moves = []\r\n\r\n        for (let i = 0; i < 8; i++) {\r\n            if (i != 0 && i % 2 == 0) {\r\n                offset *= -1;\r\n            }\r\n\r\n            let targetX = square.props.x + offset;\r\n            let targetY = square.props.y + doubleOffset;\r\n\r\n            let target = getATargetSquareByLocation(targetX, targetY)\r\n\r\n            if (target && isSquareAvailable(target)) {\r\n                moves.push(target)\r\n            } else {\r\n                if (!areSameColor(square, target)) {\r\n                    moves.push(target)\r\n                }\r\n            }\r\n\r\n            doubleOffset *= -1\r\n\r\n            if (i == 4) {\r\n                offset *= 2\r\n                doubleOffset /= 2\r\n            }\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a king\r\n    function getKingPossibleMoves(square) {\r\n        if (!doesTheSquareHasThePiece(square, PIECES.KING)) {\r\n            return\r\n        }\r\n\r\n        let moves = []\r\n\r\n        let color = getPieceColor(square)\r\n\r\n        //gets all possible 1-square moves for the king\r\n        for (let i = -1; i < 2; i++) {\r\n            for (let j = -1; j < 2; j++) {\r\n                let targetPiece = getATargetSquareByLocation(square.props.x + i, square.props.y + j)\r\n\r\n                if (targetPiece && isSquareAvailable(targetPiece)) {\r\n                    moves.push(targetPiece)\r\n                } else {\r\n                    if (!areSameColor(square, targetPiece)) {\r\n                        moves.push(targetPiece)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //Castling logic\r\n        const longCastleSquare = getATargetSquareByLocation(square.props.x, square.props.y - 2)\r\n        const shortCastleSquare = getATargetSquareByLocation(square.props.x, square.props.y + 2)\r\n\r\n        if (isColorWhite(color) && checkIfCanWhiteLongCastle()) {\r\n            moves.push(longCastleSquare)\r\n        }\r\n\r\n        if (isColorWhite(color) && checkIfCanWhiteShortCastle()) {\r\n            moves.push(shortCastleSquare)\r\n        }\r\n\r\n        if (isColorBlack(color) && checkIfCanBlackLongCastle()) {\r\n            moves.push(longCastleSquare)\r\n        }\r\n\r\n        if (isColorBlack(color) && checkIfCanBlackShortCastle()) {\r\n            moves.push(shortCastleSquare)\r\n        }\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets all possible moves for a queen\r\n    function getQueenPossibleMoves(square) {\r\n        if (!doesTheSquareHasThePiece(square, PIECES.QUEEN)) {\r\n            return\r\n        }\r\n\r\n        let moves = []\r\n\r\n        //a queen has the same moves as a bishop and a rook\r\n        const rookMoves = getRooksPossibleMoves(square, false).moves;\r\n        const bishopMoves = getBishopPossibleMoves(square, false).moves;\r\n\r\n        // Concatenate the arrays of moves\r\n        moves.push(...rookMoves, ...bishopMoves);\r\n\r\n        return { piece: square, moves: moves }\r\n    }\r\n\r\n    //gets the piece color\r\n    function getPieceColor(square) {\r\n        return square.props.piece.split(PIECE_DELIMITER)[0]\r\n    }\r\n\r\n    //gets the piece\r\n    function getPiece(square) {\r\n        return square.props.piece.split(PIECE_DELIMITER)[1]\r\n    }\r\n\r\n    //removes moves that do not deal with a check\r\n    function filterMovesIfInCheck(possibleMoves) {\r\n        let blackKing = getATargetSquareByPiece(KINGS.BLACK_KING) //get the black king\r\n        let whiteKing = getATargetSquareByPiece(KINGS.WHITE_KING) //get the white king\r\n\r\n        for (let i = 0; i < possibleMoves.length; i++) {\r\n            for (let j = 0; j < possibleMoves[i].moves; j++) {\r\n                if (possibleMoves[i].piece.props.piece == KINGS.BLACK_KING) {\r\n                    let move = <Square x={possibleMoves[i].moves[j].props.x} y={possibleMoves[i].moves[j].props.y} piece={\"black-king\"} />\r\n                    let pseudo = <Square x={blackKing.props.x} y={blackKing.props.y} piece={\"\"} />\r\n                    let isInCheck = isBlackInCheck(move, pseudo)\r\n\r\n                    if (isInCheck) {\r\n                        possibleMoves[i].moves.splice(j, 1);\r\n                        j--;\r\n                    }\r\n                } else if (possibleMoves[i].piece.props.piece == KINGS.WHITE_KING) {\r\n                    let move = <Square x={possibleMoves[i].moves[j].props.x} y={possibleMoves[i].moves[j].props.y} piece={\"white-king\"} />\r\n                    let pseudo = <Square x={whiteKing.props.x} y={whiteKing.props.y} piece={\"\"} />\r\n                    let isInCheck = isWhiteInCheck(move, pseudo)\r\n\r\n                    if (isInCheck) {\r\n                        possibleMoves[i].moves.splice(j, 1);\r\n                        j--;\r\n                    }\r\n                } else {\r\n                    let move = <Square x={possibleMoves[i].moves[j].props.x} y={possibleMoves[i].moves[j].props.y} piece={possibleMoves[i].piece.props.piece} />\r\n                    let isInCheck = isBlackInCheck(blackKing, move) ? true : isWhiteInCheck(whiteKing, move)\r\n\r\n                    if (isInCheck) {\r\n                        possibleMoves[i].moves.splice(j, 1);\r\n                        j--;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return possibleMoves\r\n    }\r\n\r\n    //removes moves that allow illigal castling (castles through check for example)\r\n    function filterMovesThatAllowIllegalCastling(possibleMoves) {\r\n        let blackKing = getATargetSquareByPiece(KINGS.BLACK_KING) //get the black king\r\n        let whiteKing = getATargetSquareByPiece(KINGS.WHITE_KING) //get the white king\r\n\r\n        for (let i = 0; i < possibleMoves.length; i++) {\r\n            let whiteCastle1 = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 6) //sqaure where king will be after short castle (white)\r\n            let whiteCastle2 = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 2) //sqaure where king will be after long castle (white)\r\n            let blackCastle1 = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 6) //square where king will be after shot castle (black)\r\n            let blackCastle2 = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 2) //square where king will be after long castle (black)\r\n\r\n            if (possibleMoves[i].piece == blackKing || possibleMoves[i].piece == whiteKing) {\r\n                if (whiteCastle1) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 5)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n\r\n                if (whiteCastle2) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 7 && m.props.y == 3)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n\r\n                if (blackCastle1) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 5)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n\r\n                if (blackCastle2) {\r\n                    let pieceAcross = possibleMoves[i].moves.find(m => m.props.x == 0 && m.props.y == 3)\r\n                    if (!pieceAcross) {\r\n                        possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(pieceAcross), 1)\r\n                    }\r\n                }\r\n            }\r\n\r\n            //prevents black to castle if in check\r\n            if (isBlackInCheck(blackKing)) {\r\n                if (blackCastle1) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove), 1)\r\n                }\r\n\r\n                if (blackCastle2) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove2), 1)\r\n                }\r\n            }\r\n\r\n            //prevents white to castle if in check\r\n            if (isWhiteInCheck(whiteKing)) {\r\n                if (whiteCastle1) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove), 1)\r\n                }\r\n\r\n                if (whiteCastle2) {\r\n                    possibleMoves[i].moves.splice(possibleMoves[i].moves.indexOf(castleMove2), 1)\r\n                }\r\n            }\r\n        }\r\n\r\n        return possibleMoves\r\n    }\r\n\r\n    //removes empty/undefined values for generated moves\r\n    function removeEmptyMoves(possibleMoves) {\r\n        for (let i = 0; i < possibleMoves.length; i++) {\r\n            if (!possibleMoves[i]) {\r\n                possibleMoves.splice(i, 1)\r\n                i--;\r\n                continue;\r\n            }\r\n\r\n            if (possibleMoves[i].moves.length == 0) {\r\n                possibleMoves.splice(i, 1)\r\n                i--;\r\n                continue;\r\n            }\r\n\r\n            for (let j = 0; j < possibleMoves[i].moves.length; j++) {\r\n                if (!possibleMoves[i].moves[j]) {\r\n                    possibleMoves[i].moves.splice(j, 1);\r\n                    j--;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possibleMoves\r\n    }\r\n\r\n    function updatePossibleMovesVisually() {\r\n        for (let i = 0; i < PossibleMoves.length; i++) {\r\n            if (PossibleMoves[i].piece.props.x == CurrentSquareSelection.x && PossibleMoves[i].piece.props.y == CurrentSquareSelection.y) {\r\n                for (let j = 0; j < PossibleMoves[i].moves.length; j++) {\r\n                    updateIsPossibleMove(`${PossibleMoves[i].moves[j].props.x}-${PossibleMoves[i].moves[j].props.y}`, true)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //gets all possible/legal moves\r\n    function getPossibleMoves() {\r\n        //let square = getATargetSquareByLocation(x, y)\r\n        let possiblePieceMoves = [];\r\n        let squares = boardSquares\r\n\r\n        for (let i = 0; i < squares.length; i++) {\r\n            let square = squares[i]\r\n\r\n            //if the square has a piece\r\n            if (square.props.piece) {\r\n                let color = getPieceColor(square); //get the piece color\r\n\r\n                //don't collect possible moves if it's black to move and you're trying to move a white piece\r\n                if (isColorWhite(color) && !IsWhiteToMove) {\r\n                    //console.log(`Skipping because it's black to move and you're moving a white piece, x: ${square.props.x}, y: ${square.props.y}`)\r\n                    continue\r\n                }\r\n\r\n                //don't collect possible moves if it's white to move and you're trying to move a black piece\r\n                if (isColorBlack(color) && IsWhiteToMove) {\r\n                    //console.log(`Skipping because it's white to move and you're moving a black piece, x: ${square.props.x}, y: ${square.props.y}`)\r\n                    continue\r\n                }\r\n\r\n                //console.log(`Getting possible moves, x: ${square.props.x}, y: ${square.props.y}`)\r\n                //get all possible moves for each piece\r\n                possiblePieceMoves.push(getPawnsPossibleMoves(square))\r\n                possiblePieceMoves.push(getRooksPossibleMoves(square))\r\n                possiblePieceMoves.push(getBishopPossibleMoves(square))\r\n                possiblePieceMoves.push(getKnightPossibleMoves(square))\r\n                possiblePieceMoves.push(getKingPossibleMoves(square))\r\n                possiblePieceMoves.push(getQueenPossibleMoves(square))\r\n\r\n                //filter empty moves\r\n                possiblePieceMoves = removeEmptyMoves(possiblePieceMoves);\r\n\r\n                //filter possible moves\r\n                possiblePieceMoves = filterMovesIfInCheck(possiblePieceMoves)\r\n                possiblePieceMoves = filterMovesThatAllowIllegalCastling(possiblePieceMoves)\r\n            }\r\n        }\r\n\r\n        console.log(\"Possible Moves:\", possiblePieceMoves);\r\n        console.log('Moves count', possiblePieceMoves.reduce((sum, pieceMove) => sum + pieceMove.moves.length, 0))\r\n        PossibleMoves.splice(0, PossibleMoves.length, ...possiblePieceMoves);\r\n        updatePossibleMovesVisually()\r\n    }\r\n\r\n    //renders the board\r\n    return (\r\n        <>\r\n            <div className=\"chessGrid\">\r\n                {boardSquares.map((sqr) => sqr)}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Board"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}