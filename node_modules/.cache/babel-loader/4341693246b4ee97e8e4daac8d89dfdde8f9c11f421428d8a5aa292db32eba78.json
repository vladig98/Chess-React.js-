{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vladi Gotsin\\\\Desktop\\\\react\\\\Chess-React.js-\\\\src\\\\Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Square from \"./Square.js\";\nimport * as HelperMethods from \"./HelperMethods.js\";\nimport * as GlobalVariables from \"./globalVariables.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Board() {\n  _s();\n  //<summary>\n  //FEN - Forsyth-Edwards Notation\n  //small letters - black pieces\n  //capital letters - white pieces\n  //numbers - empty board squares\n  //(/) - separates each board row\n  //first letter after the board indicates whose turn it is to move (w - white, b - black)\n  //next letters indicate castling rights, k - king-side, q - queen-side, (-) - no castling allowed for any side\n  //en passant square - when a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square\n  //the number of half turns (white moves, then black moves = 2 half moves) that were made without a pawn move or a capture of a piece (50-move rule when reaches 100)\n  //the number of full moves (white moves, then black moves = 1 full move); increase after every black half move\n  //</summary>\n  //starting position\n  //'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\n  //examples of FEN positions\n  //r1bqk2r/pppp1ppp/2n5/8/1bBPn3/2N2N2/PP3PPP/R1BQK2R w KQkq - 0 8\n  //r1bqk2r/pppp1ppp/2n2n2/2b5/2BPP3/5N2/PP3PPP/RNBQK2R b KQkq - 0 6\n  //r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21\n\n  const [fen, setFen] = useState('r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21');\n  const [isPossibleMove, setIsPossibleMove] = useState([]);\n  const [boardSquares, setBoardSquares] = useState([]);\n  const isPossibleMoveRef = useRef(isPossibleMove);\n  const boardSquaresRef = useRef(boardSquares);\n\n  //updates the possible move array\n  //if a square is a possible move, it will receive a circle indicating you can move there\n  const updateIsPossibleMove = (key, value) => {\n    //we are updating the state based on the previous state to resolve the issue with pending state and queue in React\n    setIsPossibleMove(prevState => prevState.map(item =>\n    //if the current item's key matches the key we're looking for\n    //copy all properties of the object in a new object using the spread syntax (...)\n    //modify the value property to whatever value we're using\n    //copy the original item if no modifications are needed\n    item.key === key ? {\n      ...item,\n      value: value\n    } : item));\n  };\n\n  //update the reference to the IsPossibleMove array whenever we set a new value to the array\n  useEffect(() => {\n    isPossibleMoveRef.current = isPossibleMove;\n    fenParser(false);\n  }, [isPossibleMove]);\n\n  //called when the page loads\n  //removes all circles from squares indicating that they can be clicked to move a piece there\n  //we parse the FEN to fill in the board\n  useEffect(() => {\n    resetPossibleMoves();\n    fenParser();\n  }, []);\n\n  //parse the FEN and fill in the board with the new position when the FEN updates\n  useEffect(() => {\n    fenParser();\n  }, [fen]);\n\n  //update the reference to the BoardSquares array whenever we set a new value to the array\n  useEffect(() => {\n    boardSquaresRef.current = boardSquares;\n  }, [boardSquares]);\n\n  /**\r\n  * Resets possible moves highlighting.\r\n  */\n  function resetPossibleMoves() {\n    const initialIsPossibleMove = [];\n    for (let i = 0; i < DIM; i++) {\n      for (let j = 0; j < DIM; j++) {\n        initialIsPossibleMove.push({\n          key: `${i}-${j}`,\n          value: false\n        });\n      }\n    }\n    setIsPossibleMove(initialIsPossibleMove);\n  }\n\n  /**\r\n   * Determines if the king is in check.\r\n   * @param {object} kingSquare - The square where the king is located.\r\n   * @param {object} [pseudo] - The square where a piece is hypothetically moved.\r\n   * @param {object} [currentSquare=null] - The square of the piece being moved.\r\n   * @param {string} color - The color of the king ('white' or 'black').\r\n   * @returns {boolean} - True if the king is in check, false otherwise.\r\n   */\n  function isKingInCheck(kingSquare, pseudo, currentSquare = null, color) {\n    const squares = boardSquaresRef.current;\n    const updatedSquares = squares.map(s => {\n      if (pseudo && s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\n        return /*#__PURE__*/React.cloneElement(s, {\n          piece: pseudo.props.piece\n        });\n      } else if (currentSquare && s.props.x === currentSquare.props.x && s.props.y === currentSquare.props.y) {\n        return /*#__PURE__*/React.cloneElement(s, {\n          piece: ''\n        });\n      } else {\n        return s;\n      }\n    });\n    const checkDirections = directions => {\n      for (const [dx, dy] of directions) {\n        for (let i = 1; i < DIM; i++) {\n          const piece = updatedSquares.find(s => s.props.x === kingSquare.props.x + dx * i && s.props.y === kingSquare.props.y + dy * i);\n          if (!piece) break;\n          const [pieceColor, pieceType] = piece.props.piece.split(\"-\");\n          if (pieceColor !== color) {\n            if (pieceType === \"queen\" || pieceType === \"rook\" || pieceType === \"bishop\" || i === 1 && pieceType === \"pawn\" && (dx === -1 || dx === 1)) {\n              return true;\n            }\n            if (piece.props.piece) break;\n          } else {\n            break;\n          }\n        }\n      }\n      return false;\n    };\n    const linearDirections = [[1, 0], [-1, 0], [0, 1], [0, -1] // Right, Left, Up, Down\n    ];\n    const diagonalDirections = [[1, 1], [-1, -1], [1, -1], [-1, 1] // Diagonals\n    ];\n    if (checkDirections(linearDirections) || checkDirections(diagonalDirections)) {\n      return true;\n    }\n    const knightMoves = [[-2, -1], [-2, 1], [2, -1], [2, 1], [-1, 2], [1, 2], [-1, -2], [1, -2]];\n    for (const [dx, dy] of knightMoves) {\n      const piece = updatedSquares.find(s => s.props.x === kingSquare.props.x + dx && s.props.y === kingSquare.props.y + dy);\n      if (piece && piece.props.piece.split(\"-\")[0] !== color && piece.props.piece.split(\"-\")[1] === \"knight\") {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\r\n   * Determines if the white king is in check.\r\n   * @param {object} kingSquare - The square where the king is located.\r\n   * @param {object} [pseudo] - The square where a piece is hypothetically moved.\r\n   * @param {object} [currentSquare=null] - The square of the piece being moved.\r\n   * @returns {boolean} - True if the white king is in check, false otherwise.\r\n   */\n  function isWhiteInCheck(kingSquare, pseudo, currentSquare = null) {\n    return isKingInCheck(kingSquare, pseudo, currentSquare, 'white');\n  }\n\n  /**\r\n   * Determines if the black king is in check.\r\n   * @param {object} kingSquare - The square where the king is located.\r\n   * @param {object} [pseudo] - The square where a piece is hypothetically moved.\r\n   * @param {object} [currentSquare=null] - The square of the piece being moved.\r\n   * @returns {boolean} - True if the black king is in check, false otherwise.\r\n   */\n  function isBlackInCheck(kingSquare, pseudo, currentSquare = null) {\n    return isKingInCheck(kingSquare, pseudo, currentSquare, 'black');\n  }\n\n  /**\r\n   * Handles moving a piece to a new location.\r\n   * @param {number} x - The X coordinate.\r\n   * @param {number} y - The Y coordinate.\r\n   */\n  //TODO: refactor\n  function movePiece(x, y) {\n    let squares = boardSquares;\n    let position = BoardPosition;\n    let targetSquare = HelperMethods.getATargetSquareByLocation(x, y, boardSquaresRef.current);\n    let square = squares.find(s => s.props.x == CurrentSquareSelection.x && s.props.y == CurrentSquareSelection.y);\n    let color = HelperMethods.getPieceColor(square);\n    let piece = HelperMethods.getPiece(square);\n\n    //disable castling if the king moves\n    if (piece == PIECES.KING) {\n      if (isColorWhite(color)) {\n        CastlingRights.whiteLongCastle = false;\n        CastlingRights.whiteShortCastle = false;\n      } else {\n        CastlingRights.blackLongCastle = false;\n        CastlingRights.blackShortCastle = false;\n      }\n    }\n\n    //disable castling if the rook moves\n    if (piece == PIECES.ROOK) {\n      if (square.props.x == 7 && square.props.y == 7) {\n        CastlingRights.whiteShortCastle = false;\n      }\n      if (square.props.x == 0 && square.props.y == 7) {\n        CastlingRights.blackShortCastle = false;\n      }\n      if (square.props.x == 7 && square.props.y == 0) {\n        CastlingRights.whiteLongCastle = false;\n      }\n      if (square.props.x == 0 && square.props.y == 0) {\n        CastlingRights.blackLongCastle = false;\n      }\n    }\n    let p = HelperMethods.UpdatePosition(square, targetSquare, position);\n\n    //capturing enPassant\n    // if (EnPassant.isPossible) {\n    //     let enPassantTargetSquare = color == COLORS.WHITE ? squares.find(s => s.props.x == x + 1 && s.props.y == y) : squares.find(s => s.props.x == x - 1 && s.props.y == y)\n    //     let enPassantSquare = <Square x={square.props.x} y={square.props.y} piece={\"\"} />\n\n    //     p = UpdatePosition(enPassantSquare, enPassantTargetSquare, p)\n    // }\n\n    //TODO: ensure p matches the new board Position format\n    //setBoardPosition(p)\n    const updatedBoardPosition = p.map(row => [...row]);\n    BoardPosition.splice(0, BoardPosition.length, ...updatedBoardPosition);\n    PossibleMoves.splice(0, PossibleMoves.length);\n    updateIsWhiteToMove(!IsWhiteToMove);\n\n    //enabling en passant\n    if (piece == PIECES.PAWN) {\n      if (Math.abs(square.props.x - targetSquare.props.x) == 2) {\n        if (square.props.piece.split(PIECE_DELIMITER)[0] == COLORS.WHITE) {\n          EnPassant.isPossible = true;\n          EnPassant.x = square.props.x - 1;\n          EnPassant.y = square.props.y;\n        } else {\n          EnPassant.isPossible = true;\n          EnPassant.x = square.props.x + 1;\n          EnPassant.y = square.props.y;\n        }\n\n        // let enPassant1 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y - 1)\n        // let enPassant2 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y + 1)\n\n        // if (enPassant1) {\n        //     if (enPassant1.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\n        //         if (enPassant1.props.piece.split(PIECE_DELIMITER)[0] != color) {\n        //             EnPassant.isPossible = true\n        //             EnPassant.x = targetSquare.props.x\n        //             EnPassant.y = targetSquare.props.y\n        //             return\n        //         }\n        //     }\n        // }\n\n        // if (enPassant2) {\n        //     if (enPassant2.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\n        //         if (enPassant2.props.piece.split(PIECE_DELIMITER)[0] != color) {\n        //             EnPassant.isPossible = true\n        //             EnPassant.x = targetSquare.props.x\n        //             EnPassant.y = targetSquare.props.y\n        //             return\n        //         }\n        //     }\n        // }\n      } else {\n        EnPassant.isPossible = false;\n        EnPassant.x = -1;\n        EnPassant.y = -1;\n      }\n    } else {\n      EnPassant.isPossible = false;\n      EnPassant.x = -1;\n      EnPassant.y = -1;\n    }\n    updateFullMoves(FullMoves + 1);\n    generateANewFen();\n  }\n\n  //updates the isPossibleMove array based on the possibleMoves array and forces a component update of the square to visually the circles indicating a move is possible\n  function updatePossibleMovesVisually() {\n    for (let i = 0; i < PossibleMoves.length; i++) {\n      if (checkIfAMoveIsEqualToTheCurrentSelectedSquare(PossibleMoves[i].piece)) {\n        for (let j = 0; j < PossibleMoves[i].moves.length; j++) {\n          updateIsPossibleMove(`${PossibleMoves[i].moves[j].props.x}-${PossibleMoves[i].moves[j].props.y}`, true);\n        }\n      }\n    }\n  }\n\n  /**\r\n   * Gets possible moves for a piece.\r\n   * @param {object} square - The square object.\r\n   */\n  //TODO: check if can be refactored further\n  function getPossibleMoves() {\n    //let square = getATargetSquareByLocation(x, y)\n    let possiblePieceMoves = [];\n    let squares = boardSquares;\n    for (let i = 0; i < squares.length; i++) {\n      let square = squares[i];\n\n      //if the square has a piece\n      if (square.props.piece) {\n        let color = getPieceColor(square); //get the piece color\n\n        //don't collect possible moves if it's black to move and you're trying to move a white piece\n        if (isColorWhite(color) && !IsWhiteToMove) {\n          //console.log(`Skipping because it's black to move and you're moving a white piece, x: ${square.props.x}, y: ${square.props.y}`)\n          continue;\n        }\n\n        //don't collect possible moves if it's white to move and you're trying to move a black piece\n        if (isColorBlack(color) && IsWhiteToMove) {\n          //console.log(`Skipping because it's white to move and you're moving a black piece, x: ${square.props.x}, y: ${square.props.y}`)\n          continue;\n        }\n\n        //console.log(`Getting possible moves, x: ${square.props.x}, y: ${square.props.y}`)\n        //get all possible moves for each piece\n        possiblePieceMoves.push(getPawnsPossibleMoves(square));\n        possiblePieceMoves.push(getRooksPossibleMoves(square));\n        possiblePieceMoves.push(getBishopPossibleMoves(square));\n        possiblePieceMoves.push(getKnightPossibleMoves(square));\n        possiblePieceMoves.push(getKingPossibleMoves(square));\n        possiblePieceMoves.push(getQueenPossibleMoves(square));\n\n        //filter empty moves\n        possiblePieceMoves = removeEmptyMoves(possiblePieceMoves);\n\n        //filter possible moves\n        possiblePieceMoves = filterMovesIfInCheck(possiblePieceMoves);\n        possiblePieceMoves = filterMovesThatAllowIllegalCastling(possiblePieceMoves);\n      }\n    }\n    console.log(\"Possible Moves:\", possiblePieceMoves);\n    console.log('Moves count', possiblePieceMoves.reduce((sum, pieceMove) => sum + pieceMove.moves.length, 0));\n    PossibleMoves.splice(0, PossibleMoves.length, ...possiblePieceMoves);\n    updatePossibleMovesVisually();\n  }\n\n  //renders the board\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessGrid\",\n      children: boardSquares.map(sqr => sqr)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Board, \"IVJugR7YzpxWBiVdY41x4HwgqNQ=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Square","HelperMethods","GlobalVariables","jsxDEV","_jsxDEV","Fragment","_Fragment","Board","_s","fen","setFen","isPossibleMove","setIsPossibleMove","boardSquares","setBoardSquares","isPossibleMoveRef","boardSquaresRef","updateIsPossibleMove","key","value","prevState","map","item","current","fenParser","resetPossibleMoves","initialIsPossibleMove","i","DIM","j","push","isKingInCheck","kingSquare","pseudo","currentSquare","color","squares","updatedSquares","s","props","x","y","cloneElement","piece","checkDirections","directions","dx","dy","find","pieceColor","pieceType","split","linearDirections","diagonalDirections","knightMoves","isWhiteInCheck","isBlackInCheck","movePiece","position","BoardPosition","targetSquare","getATargetSquareByLocation","square","CurrentSquareSelection","getPieceColor","getPiece","PIECES","KING","isColorWhite","CastlingRights","whiteLongCastle","whiteShortCastle","blackLongCastle","blackShortCastle","ROOK","p","UpdatePosition","updatedBoardPosition","row","splice","length","PossibleMoves","updateIsWhiteToMove","IsWhiteToMove","PAWN","Math","abs","PIECE_DELIMITER","COLORS","WHITE","EnPassant","isPossible","updateFullMoves","FullMoves","generateANewFen","updatePossibleMovesVisually","checkIfAMoveIsEqualToTheCurrentSelectedSquare","moves","getPossibleMoves","possiblePieceMoves","isColorBlack","getPawnsPossibleMoves","getRooksPossibleMoves","getBishopPossibleMoves","getKnightPossibleMoves","getKingPossibleMoves","getQueenPossibleMoves","removeEmptyMoves","filterMovesIfInCheck","filterMovesThatAllowIllegalCastling","console","log","reduce","sum","pieceMove","children","className","sqr","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/Chess-React.js-/src/Board.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport Square from \"./Square.js\"\r\nimport * as HelperMethods from \"./HelperMethods.js\";\r\nimport * as GlobalVariables from \"./globalVariables.js\"\r\n\r\nfunction Board() {\r\n    //<summary>\r\n    //FEN - Forsyth-Edwards Notation\r\n    //small letters - black pieces\r\n    //capital letters - white pieces\r\n    //numbers - empty board squares\r\n    //(/) - separates each board row\r\n    //first letter after the board indicates whose turn it is to move (w - white, b - black)\r\n    //next letters indicate castling rights, k - king-side, q - queen-side, (-) - no castling allowed for any side\r\n    //en passant square - when a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square\r\n    //the number of half turns (white moves, then black moves = 2 half moves) that were made without a pawn move or a capture of a piece (50-move rule when reaches 100)\r\n    //the number of full moves (white moves, then black moves = 1 full move); increase after every black half move\r\n    //</summary>\r\n    //starting position\r\n    //'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\r\n    //examples of FEN positions\r\n    //r1bqk2r/pppp1ppp/2n5/8/1bBPn3/2N2N2/PP3PPP/R1BQK2R w KQkq - 0 8\r\n    //r1bqk2r/pppp1ppp/2n2n2/2b5/2BPP3/5N2/PP3PPP/RNBQK2R b KQkq - 0 6\r\n    //r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21\r\n\r\n    const [fen, setFen] = useState('r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21')\r\n    const [isPossibleMove, setIsPossibleMove] = useState([])\r\n    const [boardSquares, setBoardSquares] = useState([])\r\n    const isPossibleMoveRef = useRef(isPossibleMove)\r\n    const boardSquaresRef = useRef(boardSquares)\r\n\r\n    //updates the possible move array\r\n    //if a square is a possible move, it will receive a circle indicating you can move there\r\n    const updateIsPossibleMove = (key, value) => {\r\n        //we are updating the state based on the previous state to resolve the issue with pending state and queue in React\r\n        setIsPossibleMove(prevState =>\r\n            prevState.map(item =>\r\n                //if the current item's key matches the key we're looking for\r\n                //copy all properties of the object in a new object using the spread syntax (...)\r\n                //modify the value property to whatever value we're using\r\n                //copy the original item if no modifications are needed\r\n                item.key === key ? { ...item, value: value } : item\r\n            )\r\n        );\r\n    };\r\n\r\n    //update the reference to the IsPossibleMove array whenever we set a new value to the array\r\n    useEffect(() => {\r\n        isPossibleMoveRef.current = isPossibleMove;\r\n        fenParser(false);\r\n    }, [isPossibleMove])\r\n\r\n    //called when the page loads\r\n    //removes all circles from squares indicating that they can be clicked to move a piece there\r\n    //we parse the FEN to fill in the board\r\n    useEffect(() => {\r\n        resetPossibleMoves()\r\n        fenParser()\r\n    }, [])\r\n\r\n    //parse the FEN and fill in the board with the new position when the FEN updates\r\n    useEffect(() => {\r\n        fenParser()\r\n    }, [fen])\r\n\r\n    //update the reference to the BoardSquares array whenever we set a new value to the array\r\n    useEffect(() => {\r\n        boardSquaresRef.current = boardSquares\r\n    }, [boardSquares])\r\n\r\n    /**\r\n    * Resets possible moves highlighting.\r\n    */\r\n    function resetPossibleMoves() {\r\n        const initialIsPossibleMove = [];\r\n        for (let i = 0; i < DIM; i++) {\r\n            for (let j = 0; j < DIM; j++) {\r\n                initialIsPossibleMove.push({ key: `${i}-${j}`, value: false });\r\n            }\r\n        }\r\n        setIsPossibleMove(initialIsPossibleMove);\r\n    }\r\n\r\n    /**\r\n     * Determines if the king is in check.\r\n     * @param {object} kingSquare - The square where the king is located.\r\n     * @param {object} [pseudo] - The square where a piece is hypothetically moved.\r\n     * @param {object} [currentSquare=null] - The square of the piece being moved.\r\n     * @param {string} color - The color of the king ('white' or 'black').\r\n     * @returns {boolean} - True if the king is in check, false otherwise.\r\n     */\r\n    function isKingInCheck(kingSquare, pseudo, currentSquare = null, color) {\r\n        const squares = boardSquaresRef.current;\r\n\r\n        const updatedSquares = squares.map(s => {\r\n            if (pseudo && s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\r\n                return React.cloneElement(s, { piece: pseudo.props.piece });\r\n            } else if (currentSquare && s.props.x === currentSquare.props.x && s.props.y === currentSquare.props.y) {\r\n                return React.cloneElement(s, { piece: '' });\r\n            } else {\r\n                return s;\r\n            }\r\n        });\r\n\r\n        const checkDirections = (directions) => {\r\n            for (const [dx, dy] of directions) {\r\n                for (let i = 1; i < DIM; i++) {\r\n                    const piece = updatedSquares.find(s => s.props.x === kingSquare.props.x + dx * i && s.props.y === kingSquare.props.y + dy * i);\r\n                    if (!piece) break;\r\n                    const [pieceColor, pieceType] = piece.props.piece.split(\"-\");\r\n                    if (pieceColor !== color) {\r\n                        if (pieceType === \"queen\" || pieceType === \"rook\" || pieceType === \"bishop\" || (i === 1 && pieceType === \"pawn\" && (dx === -1 || dx === 1))) {\r\n                            return true;\r\n                        }\r\n                        if (piece.props.piece) break;\r\n                    } else {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n\r\n        const linearDirections = [\r\n            [1, 0], [-1, 0], [0, 1], [0, -1]  // Right, Left, Up, Down\r\n        ];\r\n\r\n        const diagonalDirections = [\r\n            [1, 1], [-1, -1], [1, -1], [-1, 1]  // Diagonals\r\n        ];\r\n\r\n        if (checkDirections(linearDirections) || checkDirections(diagonalDirections)) {\r\n            return true;\r\n        }\r\n\r\n        const knightMoves = [\r\n            [-2, -1], [-2, 1], [2, -1], [2, 1],\r\n            [-1, 2], [1, 2], [-1, -2], [1, -2]\r\n        ];\r\n\r\n        for (const [dx, dy] of knightMoves) {\r\n            const piece = updatedSquares.find(s => s.props.x === kingSquare.props.x + dx && s.props.y === kingSquare.props.y + dy);\r\n            if (piece && piece.props.piece.split(\"-\")[0] !== color && piece.props.piece.split(\"-\")[1] === \"knight\") {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Determines if the white king is in check.\r\n     * @param {object} kingSquare - The square where the king is located.\r\n     * @param {object} [pseudo] - The square where a piece is hypothetically moved.\r\n     * @param {object} [currentSquare=null] - The square of the piece being moved.\r\n     * @returns {boolean} - True if the white king is in check, false otherwise.\r\n     */\r\n    function isWhiteInCheck(kingSquare, pseudo, currentSquare = null) {\r\n        return isKingInCheck(kingSquare, pseudo, currentSquare, 'white');\r\n    }\r\n\r\n    /**\r\n     * Determines if the black king is in check.\r\n     * @param {object} kingSquare - The square where the king is located.\r\n     * @param {object} [pseudo] - The square where a piece is hypothetically moved.\r\n     * @param {object} [currentSquare=null] - The square of the piece being moved.\r\n     * @returns {boolean} - True if the black king is in check, false otherwise.\r\n     */\r\n    function isBlackInCheck(kingSquare, pseudo, currentSquare = null) {\r\n        return isKingInCheck(kingSquare, pseudo, currentSquare, 'black');\r\n    }\r\n\r\n\r\n    /**\r\n     * Handles moving a piece to a new location.\r\n     * @param {number} x - The X coordinate.\r\n     * @param {number} y - The Y coordinate.\r\n     */\r\n    //TODO: refactor\r\n    function movePiece(x, y) {\r\n        let squares = boardSquares\r\n        let position = BoardPosition\r\n\r\n        let targetSquare = HelperMethods.getATargetSquareByLocation(x, y, boardSquaresRef.current)\r\n        let square = squares.find(s => s.props.x == CurrentSquareSelection.x && s.props.y == CurrentSquareSelection.y)\r\n\r\n        let color = HelperMethods.getPieceColor(square)\r\n        let piece = HelperMethods.getPiece(square)\r\n\r\n        //disable castling if the king moves\r\n        if (piece == PIECES.KING) {\r\n            if (isColorWhite(color)) {\r\n                CastlingRights.whiteLongCastle = false\r\n                CastlingRights.whiteShortCastle = false\r\n            } else {\r\n                CastlingRights.blackLongCastle = false\r\n                CastlingRights.blackShortCastle = false\r\n            }\r\n        }\r\n\r\n        //disable castling if the rook moves\r\n        if (piece == PIECES.ROOK) {\r\n            if (square.props.x == 7 && square.props.y == 7) {\r\n                CastlingRights.whiteShortCastle = false\r\n            }\r\n\r\n            if (square.props.x == 0 && square.props.y == 7) {\r\n                CastlingRights.blackShortCastle = false\r\n            }\r\n\r\n            if (square.props.x == 7 && square.props.y == 0) {\r\n                CastlingRights.whiteLongCastle = false\r\n            }\r\n\r\n            if (square.props.x == 0 && square.props.y == 0) {\r\n                CastlingRights.blackLongCastle = false\r\n            }\r\n        }\r\n\r\n        let p = HelperMethods.UpdatePosition(square, targetSquare, position)\r\n\r\n        //capturing enPassant\r\n        // if (EnPassant.isPossible) {\r\n        //     let enPassantTargetSquare = color == COLORS.WHITE ? squares.find(s => s.props.x == x + 1 && s.props.y == y) : squares.find(s => s.props.x == x - 1 && s.props.y == y)\r\n        //     let enPassantSquare = <Square x={square.props.x} y={square.props.y} piece={\"\"} />\r\n\r\n        //     p = UpdatePosition(enPassantSquare, enPassantTargetSquare, p)\r\n        // }\r\n\r\n        //TODO: ensure p matches the new board Position format\r\n        //setBoardPosition(p)\r\n        const updatedBoardPosition = p.map(row => [...row]);\r\n        BoardPosition.splice(0, BoardPosition.length, ...updatedBoardPosition);\r\n\r\n        PossibleMoves.splice(0, PossibleMoves.length);\r\n        updateIsWhiteToMove(!IsWhiteToMove)\r\n\r\n        //enabling en passant\r\n        if (piece == PIECES.PAWN) {\r\n            if (Math.abs(square.props.x - targetSquare.props.x) == 2) {\r\n                if (square.props.piece.split(PIECE_DELIMITER)[0] == COLORS.WHITE) {\r\n                    EnPassant.isPossible = true\r\n                    EnPassant.x = square.props.x - 1\r\n                    EnPassant.y = square.props.y\r\n                } else {\r\n                    EnPassant.isPossible = true\r\n                    EnPassant.x = square.props.x + 1\r\n                    EnPassant.y = square.props.y\r\n                }\r\n\r\n                // let enPassant1 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y - 1)\r\n                // let enPassant2 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y + 1)\r\n\r\n                // if (enPassant1) {\r\n                //     if (enPassant1.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\r\n                //         if (enPassant1.props.piece.split(PIECE_DELIMITER)[0] != color) {\r\n                //             EnPassant.isPossible = true\r\n                //             EnPassant.x = targetSquare.props.x\r\n                //             EnPassant.y = targetSquare.props.y\r\n                //             return\r\n                //         }\r\n                //     }\r\n                // }\r\n\r\n                // if (enPassant2) {\r\n                //     if (enPassant2.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\r\n                //         if (enPassant2.props.piece.split(PIECE_DELIMITER)[0] != color) {\r\n                //             EnPassant.isPossible = true\r\n                //             EnPassant.x = targetSquare.props.x\r\n                //             EnPassant.y = targetSquare.props.y\r\n                //             return\r\n                //         }\r\n                //     }\r\n                // }\r\n            } else {\r\n                EnPassant.isPossible = false\r\n                EnPassant.x = -1\r\n                EnPassant.y = -1\r\n            }\r\n        } else {\r\n            EnPassant.isPossible = false\r\n            EnPassant.x = -1\r\n            EnPassant.y = -1\r\n        }\r\n\r\n        updateFullMoves(FullMoves + 1)\r\n\r\n        generateANewFen()\r\n    }\r\n\r\n    //updates the isPossibleMove array based on the possibleMoves array and forces a component update of the square to visually the circles indicating a move is possible\r\n    function updatePossibleMovesVisually() {\r\n        for (let i = 0; i < PossibleMoves.length; i++) {\r\n            if (checkIfAMoveIsEqualToTheCurrentSelectedSquare(PossibleMoves[i].piece)) {\r\n                for (let j = 0; j < PossibleMoves[i].moves.length; j++) {\r\n                    updateIsPossibleMove(`${PossibleMoves[i].moves[j].props.x}-${PossibleMoves[i].moves[j].props.y}`, true)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets possible moves for a piece.\r\n     * @param {object} square - The square object.\r\n     */\r\n    //TODO: check if can be refactored further\r\n    function getPossibleMoves() {\r\n        //let square = getATargetSquareByLocation(x, y)\r\n        let possiblePieceMoves = [];\r\n        let squares = boardSquares\r\n\r\n        for (let i = 0; i < squares.length; i++) {\r\n            let square = squares[i]\r\n\r\n            //if the square has a piece\r\n            if (square.props.piece) {\r\n                let color = getPieceColor(square); //get the piece color\r\n\r\n                //don't collect possible moves if it's black to move and you're trying to move a white piece\r\n                if (isColorWhite(color) && !IsWhiteToMove) {\r\n                    //console.log(`Skipping because it's black to move and you're moving a white piece, x: ${square.props.x}, y: ${square.props.y}`)\r\n                    continue\r\n                }\r\n\r\n                //don't collect possible moves if it's white to move and you're trying to move a black piece\r\n                if (isColorBlack(color) && IsWhiteToMove) {\r\n                    //console.log(`Skipping because it's white to move and you're moving a black piece, x: ${square.props.x}, y: ${square.props.y}`)\r\n                    continue\r\n                }\r\n\r\n                //console.log(`Getting possible moves, x: ${square.props.x}, y: ${square.props.y}`)\r\n                //get all possible moves for each piece\r\n                possiblePieceMoves.push(getPawnsPossibleMoves(square))\r\n                possiblePieceMoves.push(getRooksPossibleMoves(square))\r\n                possiblePieceMoves.push(getBishopPossibleMoves(square))\r\n                possiblePieceMoves.push(getKnightPossibleMoves(square))\r\n                possiblePieceMoves.push(getKingPossibleMoves(square))\r\n                possiblePieceMoves.push(getQueenPossibleMoves(square))\r\n\r\n                //filter empty moves\r\n                possiblePieceMoves = removeEmptyMoves(possiblePieceMoves);\r\n\r\n                //filter possible moves\r\n                possiblePieceMoves = filterMovesIfInCheck(possiblePieceMoves)\r\n                possiblePieceMoves = filterMovesThatAllowIllegalCastling(possiblePieceMoves)\r\n            }\r\n        }\r\n\r\n        console.log(\"Possible Moves:\", possiblePieceMoves);\r\n        console.log('Moves count', possiblePieceMoves.reduce((sum, pieceMove) => sum + pieceMove.moves.length, 0))\r\n        PossibleMoves.splice(0, PossibleMoves.length, ...possiblePieceMoves);\r\n        updatePossibleMovesVisually()\r\n    }\r\n\r\n    //renders the board\r\n    return (\r\n        <>\r\n            <div className=\"chessGrid\">\r\n                {boardSquares.map((sqr) => sqr)}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Board"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}