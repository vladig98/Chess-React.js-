{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vladi Gotsin\\\\Desktop\\\\react\\\\Chess-React.js-\\\\src\\\\Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Square from \"./Square.js\";\nimport * as HelperMethods from \"./HelperMethods.js\";\nimport * as GlobalVariables from \"./globalVariables.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Board() {\n  _s();\n  //<summary>\n  //FEN - Forsyth-Edwards Notation\n  //small letters - black pieces\n  //capital letters - white pieces\n  //numbers - empty board squares\n  //(/) - separates each board row\n  //first letter after the board indicates whose turn it is to move (w - white, b - black)\n  //next letters indicate castling rights, k - king-side, q - queen-side, (-) - no castling allowed for any side\n  //en passant square - when a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square\n  //the number of half turns (white moves, then black moves = 2 half moves) that were made without a pawn move or a capture of a piece (50-move rule when reaches 100)\n  //the number of full moves (white moves, then black moves = 1 full move); increase after every black half move\n  //</summary>\n  //starting position\n  //'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\n  //examples of FEN positions\n  //r1bqk2r/pppp1ppp/2n5/8/1bBPn3/2N2N2/PP3PPP/R1BQK2R w KQkq - 0 8\n  //r1bqk2r/pppp1ppp/2n2n2/2b5/2BPP3/5N2/PP3PPP/RNBQK2R b KQkq - 0 6\n  //r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21\n\n  const [fen, setFen] = useState('r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21');\n  const [isPossibleMove, setIsPossibleMove] = useState([]);\n  const [boardSquares, setBoardSquares] = useState([]);\n  const isPossibleMoveRef = useRef(isPossibleMove);\n  const boardSquaresRef = useRef(boardSquares);\n\n  //updates the possible move array\n  //if a square is a possible move, it will receive a circle indicating you can move there\n  const updateIsPossibleMove = (key, value) => {\n    //we are updating the state based on the previous state to resolve the issue with pending state and queue in React\n    setIsPossibleMove(prevState => prevState.map(item =>\n    //if the current item's key matches the key we're looking for\n    //copy all properties of the object in a new object using the spread syntax (...)\n    //modify the value property to whatever value we're using\n    //copy the original item if no modifications are needed\n    item.key === key ? {\n      ...item,\n      value: value\n    } : item));\n  };\n\n  //update the reference to the IsPossibleMove array whenever we set a new value to the array\n  useEffect(() => {\n    isPossibleMoveRef.current = isPossibleMove;\n    fenParser(false);\n  }, [isPossibleMove]);\n\n  //called when the page loads\n  //removes all circles from squares indicating that they can be clicked to move a piece there\n  //we parse the FEN to fill in the board\n  useEffect(() => {\n    resetPossibleMoves();\n    fenParser();\n  }, []);\n\n  //parse the FEN and fill in the board with the new position when the FEN updates\n  useEffect(() => {\n    fenParser();\n  }, [fen]);\n\n  //update the reference to the BoardSquares array whenever we set a new value to the array\n  useEffect(() => {\n    boardSquaresRef.current = boardSquares;\n  }, [boardSquares]);\n\n  /**\r\n  * Resets possible moves highlighting.\r\n  */\n  function resetPossibleMoves() {\n    const initialIsPossibleMove = [];\n    for (let i = 0; i < GlobalVariables.DIM; i++) {\n      for (let j = 0; j < GlobalVariables.DIM; j++) {\n        initialIsPossibleMove.push({\n          key: `${i}-${j}`,\n          value: false\n        });\n      }\n    }\n    setIsPossibleMove(initialIsPossibleMove);\n  }\n\n  /**\r\n   * Handles moving a piece to a new location.\r\n   * @param {number} x - The X coordinate.\r\n   * @param {number} y - The Y coordinate.\r\n   */\n  //TODO: refactor\n  function movePiece(x, y) {\n    let squares = boardSquares;\n    let position = GlobalVariables.BoardPosition;\n    let targetSquare = HelperMethods.getATargetSquareByLocation(x, y, boardSquaresRef.current);\n    let square = squares.find(s => s.props.x == GlobalVariables.CurrentSquareSelection.x && s.props.y == GlobalVariables.CurrentSquareSelection.y);\n    let color = HelperMethods.getPieceColor(square);\n    let piece = HelperMethods.getPiece(square);\n\n    //disable castling if the king moves\n    if (piece == GlobalVariables.PIECES.KING) {\n      if (isColorWhite(color)) {\n        GlobalVariables.CastlingRights.whiteLongCastle = false;\n        GlobalVariables.CastlingRights.whiteShortCastle = false;\n      } else {\n        GlobalVariables.CastlingRights.blackLongCastle = false;\n        GlobalVariables.CastlingRights.blackShortCastle = false;\n      }\n    }\n\n    //disable castling if the rook moves\n    if (piece == GlobalVariables.PIECES.ROOK) {\n      if (square.props.x == 7 && square.props.y == 7) {\n        GlobalVariables.CastlingRights.whiteShortCastle = false;\n      }\n      if (square.props.x == 0 && square.props.y == 7) {\n        GlobalVariables.CastlingRights.blackShortCastle = false;\n      }\n      if (square.props.x == 7 && square.props.y == 0) {\n        GlobalVariables.CastlingRights.whiteLongCastle = false;\n      }\n      if (square.props.x == 0 && square.props.y == 0) {\n        GlobalVariables.CastlingRights.blackLongCastle = false;\n      }\n    }\n    let p = HelperMethods.UpdatePosition(square, targetSquare, position);\n\n    //capturing enPassant\n    // if (EnPassant.isPossible) {\n    //     let enPassantTargetSquare = color == COLORS.WHITE ? squares.find(s => s.props.x == x + 1 && s.props.y == y) : squares.find(s => s.props.x == x - 1 && s.props.y == y)\n    //     let enPassantSquare = <Square x={square.props.x} y={square.props.y} piece={\"\"} />\n\n    //     p = UpdatePosition(enPassantSquare, enPassantTargetSquare, p)\n    // }\n\n    //TODO: ensure p matches the new board Position format\n    //setBoardPosition(p)\n    const updatedBoardPosition = p.map(row => [...row]);\n    GlobalVariables.BoardPosition.splice(0, GlobalVariables.BoardPosition.length, ...updatedBoardPosition);\n    GlobalVariables.PossibleMoves.splice(0, GlobalVariables.PossibleMoves.length);\n    GlobalVariables.updateIsWhiteToMove(!GlobalVariables.IsWhiteToMove);\n\n    //enabling en passant\n    if (piece == GlobalVariables.PIECES.PAWN) {\n      if (Math.abs(square.props.x - targetSquare.props.x) == 2) {\n        if (square.props.piece.split(GlobalVariables.PIECE_DELIMITER)[0] == GlobalVariables.COLORS.WHITE) {\n          GlobalVariables.EnPassant.isPossible = true;\n          GlobalVariables.EnPassant.x = square.props.x - 1;\n          GlobalVariables.EnPassant.y = square.props.y;\n        } else {\n          GlobalVariables.EnPassant.isPossible = true;\n          GlobalVariables.EnPassant.x = square.props.x + 1;\n          GlobalVariables.EnPassant.y = square.props.y;\n        }\n\n        // let enPassant1 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y - 1)\n        // let enPassant2 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y + 1)\n\n        // if (enPassant1) {\n        //     if (enPassant1.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\n        //         if (enPassant1.props.piece.split(PIECE_DELIMITER)[0] != color) {\n        //             EnPassant.isPossible = true\n        //             EnPassant.x = targetSquare.props.x\n        //             EnPassant.y = targetSquare.props.y\n        //             return\n        //         }\n        //     }\n        // }\n\n        // if (enPassant2) {\n        //     if (enPassant2.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\n        //         if (enPassant2.props.piece.split(PIECE_DELIMITER)[0] != color) {\n        //             EnPassant.isPossible = true\n        //             EnPassant.x = targetSquare.props.x\n        //             EnPassant.y = targetSquare.props.y\n        //             return\n        //         }\n        //     }\n        // }\n      } else {\n        GlobalVariables.EnPassant.isPossible = false;\n        GlobalVariables.EnPassant.x = -1;\n        GlobalVariables.EnPassant.y = -1;\n      }\n    } else {\n      GlobalVariables.EnPassant.isPossible = false;\n      GlobalVariables.EnPassant.x = -1;\n      GlobalVariables.EnPassant.y = -1;\n    }\n    GlobalVariables.updateFullMoves(GlobalVariables.FullMoves + 1);\n    generateANewFen();\n  }\n\n  //updates the isPossibleMove array based on the possibleMoves array and forces a component update of the square to visually the circles indicating a move is possible\n  function updatePossibleMovesVisually() {\n    for (let i = 0; i < PossibleMoves.length; i++) {\n      if (checkIfAMoveIsEqualToTheCurrentSelectedSquare(PossibleMoves[i].piece)) {\n        for (let j = 0; j < PossibleMoves[i].moves.length; j++) {\n          updateIsPossibleMove(`${PossibleMoves[i].moves[j].props.x}-${PossibleMoves[i].moves[j].props.y}`, true);\n        }\n      }\n    }\n  }\n\n  /**\r\n   * Gets possible moves for a piece.\r\n   * @param {object} square - The square object.\r\n   */\n  //TODO: check if can be refactored further\n  function getPossibleMoves() {\n    //let square = getATargetSquareByLocation(x, y)\n    let possiblePieceMoves = [];\n    let squares = boardSquares;\n    for (let i = 0; i < squares.length; i++) {\n      let square = squares[i];\n\n      //if the square has a piece\n      if (square.props.piece) {\n        let color = getPieceColor(square); //get the piece color\n\n        //don't collect possible moves if it's black to move and you're trying to move a white piece\n        if (isColorWhite(color) && !IsWhiteToMove) {\n          //console.log(`Skipping because it's black to move and you're moving a white piece, x: ${square.props.x}, y: ${square.props.y}`)\n          continue;\n        }\n\n        //don't collect possible moves if it's white to move and you're trying to move a black piece\n        if (isColorBlack(color) && IsWhiteToMove) {\n          //console.log(`Skipping because it's white to move and you're moving a black piece, x: ${square.props.x}, y: ${square.props.y}`)\n          continue;\n        }\n\n        //console.log(`Getting possible moves, x: ${square.props.x}, y: ${square.props.y}`)\n        //get all possible moves for each piece\n        possiblePieceMoves.push(getPawnsPossibleMoves(square));\n        possiblePieceMoves.push(getRooksPossibleMoves(square));\n        possiblePieceMoves.push(getBishopPossibleMoves(square));\n        possiblePieceMoves.push(getKnightPossibleMoves(square));\n        possiblePieceMoves.push(getKingPossibleMoves(square));\n        possiblePieceMoves.push(getQueenPossibleMoves(square));\n\n        //filter empty moves\n        possiblePieceMoves = removeEmptyMoves(possiblePieceMoves);\n\n        //filter possible moves\n        possiblePieceMoves = filterMovesIfInCheck(possiblePieceMoves);\n        possiblePieceMoves = filterMovesThatAllowIllegalCastling(possiblePieceMoves);\n      }\n    }\n    console.log(\"Possible Moves:\", possiblePieceMoves);\n    console.log('Moves count', possiblePieceMoves.reduce((sum, pieceMove) => sum + pieceMove.moves.length, 0));\n    PossibleMoves.splice(0, PossibleMoves.length, ...possiblePieceMoves);\n    updatePossibleMovesVisually();\n  }\n\n  //renders the board\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessGrid\",\n      children: boardSquares.map(sqr => sqr)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Board, \"IVJugR7YzpxWBiVdY41x4HwgqNQ=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Square","HelperMethods","GlobalVariables","jsxDEV","_jsxDEV","Fragment","_Fragment","Board","_s","fen","setFen","isPossibleMove","setIsPossibleMove","boardSquares","setBoardSquares","isPossibleMoveRef","boardSquaresRef","updateIsPossibleMove","key","value","prevState","map","item","current","fenParser","resetPossibleMoves","initialIsPossibleMove","i","DIM","j","push","movePiece","x","y","squares","position","BoardPosition","targetSquare","getATargetSquareByLocation","square","find","s","props","CurrentSquareSelection","color","getPieceColor","piece","getPiece","PIECES","KING","isColorWhite","CastlingRights","whiteLongCastle","whiteShortCastle","blackLongCastle","blackShortCastle","ROOK","p","UpdatePosition","updatedBoardPosition","row","splice","length","PossibleMoves","updateIsWhiteToMove","IsWhiteToMove","PAWN","Math","abs","split","PIECE_DELIMITER","COLORS","WHITE","EnPassant","isPossible","updateFullMoves","FullMoves","generateANewFen","updatePossibleMovesVisually","checkIfAMoveIsEqualToTheCurrentSelectedSquare","moves","getPossibleMoves","possiblePieceMoves","isColorBlack","getPawnsPossibleMoves","getRooksPossibleMoves","getBishopPossibleMoves","getKnightPossibleMoves","getKingPossibleMoves","getQueenPossibleMoves","removeEmptyMoves","filterMovesIfInCheck","filterMovesThatAllowIllegalCastling","console","log","reduce","sum","pieceMove","children","className","sqr","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/Chess-React.js-/src/Board.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport Square from \"./Square.js\"\r\nimport * as HelperMethods from \"./HelperMethods.js\";\r\nimport * as GlobalVariables from \"./globalVariables.js\"\r\n\r\nfunction Board() {\r\n    //<summary>\r\n    //FEN - Forsyth-Edwards Notation\r\n    //small letters - black pieces\r\n    //capital letters - white pieces\r\n    //numbers - empty board squares\r\n    //(/) - separates each board row\r\n    //first letter after the board indicates whose turn it is to move (w - white, b - black)\r\n    //next letters indicate castling rights, k - king-side, q - queen-side, (-) - no castling allowed for any side\r\n    //en passant square - when a pawn moves two squares, the square behind it is put in this place or (-) if no en passant square\r\n    //the number of half turns (white moves, then black moves = 2 half moves) that were made without a pawn move or a capture of a piece (50-move rule when reaches 100)\r\n    //the number of full moves (white moves, then black moves = 1 full move); increase after every black half move\r\n    //</summary>\r\n    //starting position\r\n    //'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0'\r\n    //examples of FEN positions\r\n    //r1bqk2r/pppp1ppp/2n5/8/1bBPn3/2N2N2/PP3PPP/R1BQK2R w KQkq - 0 8\r\n    //r1bqk2r/pppp1ppp/2n2n2/2b5/2BPP3/5N2/PP3PPP/RNBQK2R b KQkq - 0 6\r\n    //r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21\r\n\r\n    const [fen, setFen] = useState('r1b5/p1p3k1/2pp1r1p/6pB/3P4/8/P4PPP/Q1B3K1 b - - 0 21')\r\n    const [isPossibleMove, setIsPossibleMove] = useState([])\r\n    const [boardSquares, setBoardSquares] = useState([])\r\n    const isPossibleMoveRef = useRef(isPossibleMove)\r\n    const boardSquaresRef = useRef(boardSquares)\r\n\r\n    //updates the possible move array\r\n    //if a square is a possible move, it will receive a circle indicating you can move there\r\n    const updateIsPossibleMove = (key, value) => {\r\n        //we are updating the state based on the previous state to resolve the issue with pending state and queue in React\r\n        setIsPossibleMove(prevState =>\r\n            prevState.map(item =>\r\n                //if the current item's key matches the key we're looking for\r\n                //copy all properties of the object in a new object using the spread syntax (...)\r\n                //modify the value property to whatever value we're using\r\n                //copy the original item if no modifications are needed\r\n                item.key === key ? { ...item, value: value } : item\r\n            )\r\n        );\r\n    };\r\n\r\n    //update the reference to the IsPossibleMove array whenever we set a new value to the array\r\n    useEffect(() => {\r\n        isPossibleMoveRef.current = isPossibleMove;\r\n        fenParser(false);\r\n    }, [isPossibleMove])\r\n\r\n    //called when the page loads\r\n    //removes all circles from squares indicating that they can be clicked to move a piece there\r\n    //we parse the FEN to fill in the board\r\n    useEffect(() => {\r\n        resetPossibleMoves()\r\n        fenParser()\r\n    }, [])\r\n\r\n    //parse the FEN and fill in the board with the new position when the FEN updates\r\n    useEffect(() => {\r\n        fenParser()\r\n    }, [fen])\r\n\r\n    //update the reference to the BoardSquares array whenever we set a new value to the array\r\n    useEffect(() => {\r\n        boardSquaresRef.current = boardSquares\r\n    }, [boardSquares])\r\n\r\n    /**\r\n    * Resets possible moves highlighting.\r\n    */\r\n    function resetPossibleMoves() {\r\n        const initialIsPossibleMove = [];\r\n        for (let i = 0; i < GlobalVariables.DIM; i++) {\r\n            for (let j = 0; j < GlobalVariables.DIM; j++) {\r\n                initialIsPossibleMove.push({ key: `${i}-${j}`, value: false });\r\n            }\r\n        }\r\n        setIsPossibleMove(initialIsPossibleMove);\r\n    }\r\n\r\n    /**\r\n     * Handles moving a piece to a new location.\r\n     * @param {number} x - The X coordinate.\r\n     * @param {number} y - The Y coordinate.\r\n     */\r\n    //TODO: refactor\r\n    function movePiece(x, y) {\r\n        let squares = boardSquares\r\n        let position = GlobalVariables.BoardPosition\r\n\r\n        let targetSquare = HelperMethods.getATargetSquareByLocation(x, y, boardSquaresRef.current)\r\n        let square = squares.find(s => s.props.x == GlobalVariables.CurrentSquareSelection.x && s.props.y == GlobalVariables.CurrentSquareSelection.y)\r\n\r\n        let color = HelperMethods.getPieceColor(square)\r\n        let piece = HelperMethods.getPiece(square)\r\n\r\n        //disable castling if the king moves\r\n        if (piece == GlobalVariables.PIECES.KING) {\r\n            if (isColorWhite(color)) {\r\n                GlobalVariables.CastlingRights.whiteLongCastle = false\r\n                GlobalVariables.CastlingRights.whiteShortCastle = false\r\n            } else {\r\n                GlobalVariables.CastlingRights.blackLongCastle = false\r\n                GlobalVariables.CastlingRights.blackShortCastle = false\r\n            }\r\n        }\r\n\r\n        //disable castling if the rook moves\r\n        if (piece == GlobalVariables.PIECES.ROOK) {\r\n            if (square.props.x == 7 && square.props.y == 7) {\r\n                GlobalVariables.CastlingRights.whiteShortCastle = false\r\n            }\r\n\r\n            if (square.props.x == 0 && square.props.y == 7) {\r\n                GlobalVariables.CastlingRights.blackShortCastle = false\r\n            }\r\n\r\n            if (square.props.x == 7 && square.props.y == 0) {\r\n                GlobalVariables.CastlingRights.whiteLongCastle = false\r\n            }\r\n\r\n            if (square.props.x == 0 && square.props.y == 0) {\r\n                GlobalVariables.CastlingRights.blackLongCastle = false\r\n            }\r\n        }\r\n\r\n        let p = HelperMethods.UpdatePosition(square, targetSquare, position)\r\n\r\n        //capturing enPassant\r\n        // if (EnPassant.isPossible) {\r\n        //     let enPassantTargetSquare = color == COLORS.WHITE ? squares.find(s => s.props.x == x + 1 && s.props.y == y) : squares.find(s => s.props.x == x - 1 && s.props.y == y)\r\n        //     let enPassantSquare = <Square x={square.props.x} y={square.props.y} piece={\"\"} />\r\n\r\n        //     p = UpdatePosition(enPassantSquare, enPassantTargetSquare, p)\r\n        // }\r\n\r\n        //TODO: ensure p matches the new board Position format\r\n        //setBoardPosition(p)\r\n        const updatedBoardPosition = p.map(row => [...row]);\r\n        GlobalVariables.BoardPosition.splice(0, GlobalVariables.BoardPosition.length, ...updatedBoardPosition);\r\n\r\n        GlobalVariables.PossibleMoves.splice(0, GlobalVariables.PossibleMoves.length);\r\n        GlobalVariables.updateIsWhiteToMove(!GlobalVariables.IsWhiteToMove)\r\n\r\n        //enabling en passant\r\n        if (piece == GlobalVariables.PIECES.PAWN) {\r\n            if (Math.abs(square.props.x - targetSquare.props.x) == 2) {\r\n                if (square.props.piece.split(GlobalVariables.PIECE_DELIMITER)[0] == GlobalVariables.COLORS.WHITE) {\r\n                    GlobalVariables.EnPassant.isPossible = true\r\n                    GlobalVariables.EnPassant.x = square.props.x - 1\r\n                    GlobalVariables.EnPassant.y = square.props.y\r\n                } else {\r\n                    GlobalVariables.EnPassant.isPossible = true\r\n                    GlobalVariables.EnPassant.x = square.props.x + 1\r\n                    GlobalVariables.EnPassant.y = square.props.y\r\n                }\r\n\r\n                // let enPassant1 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y - 1)\r\n                // let enPassant2 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y + 1)\r\n\r\n                // if (enPassant1) {\r\n                //     if (enPassant1.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\r\n                //         if (enPassant1.props.piece.split(PIECE_DELIMITER)[0] != color) {\r\n                //             EnPassant.isPossible = true\r\n                //             EnPassant.x = targetSquare.props.x\r\n                //             EnPassant.y = targetSquare.props.y\r\n                //             return\r\n                //         }\r\n                //     }\r\n                // }\r\n\r\n                // if (enPassant2) {\r\n                //     if (enPassant2.props.piece.split(PIECE_DELIMITER)[1] == PIECES.PAWN) {\r\n                //         if (enPassant2.props.piece.split(PIECE_DELIMITER)[0] != color) {\r\n                //             EnPassant.isPossible = true\r\n                //             EnPassant.x = targetSquare.props.x\r\n                //             EnPassant.y = targetSquare.props.y\r\n                //             return\r\n                //         }\r\n                //     }\r\n                // }\r\n            } else {\r\n                GlobalVariables.EnPassant.isPossible = false\r\n                GlobalVariables.EnPassant.x = -1\r\n                GlobalVariables.EnPassant.y = -1\r\n            }\r\n        } else {\r\n            GlobalVariables.EnPassant.isPossible = false\r\n            GlobalVariables.EnPassant.x = -1\r\n            GlobalVariables.EnPassant.y = -1\r\n        }\r\n\r\n        GlobalVariables.updateFullMoves(GlobalVariables.FullMoves + 1)\r\n\r\n        generateANewFen()\r\n    }\r\n\r\n    //updates the isPossibleMove array based on the possibleMoves array and forces a component update of the square to visually the circles indicating a move is possible\r\n    function updatePossibleMovesVisually() {\r\n        for (let i = 0; i < PossibleMoves.length; i++) {\r\n            if (checkIfAMoveIsEqualToTheCurrentSelectedSquare(PossibleMoves[i].piece)) {\r\n                for (let j = 0; j < PossibleMoves[i].moves.length; j++) {\r\n                    updateIsPossibleMove(`${PossibleMoves[i].moves[j].props.x}-${PossibleMoves[i].moves[j].props.y}`, true)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets possible moves for a piece.\r\n     * @param {object} square - The square object.\r\n     */\r\n    //TODO: check if can be refactored further\r\n    function getPossibleMoves() {\r\n        //let square = getATargetSquareByLocation(x, y)\r\n        let possiblePieceMoves = [];\r\n        let squares = boardSquares\r\n\r\n        for (let i = 0; i < squares.length; i++) {\r\n            let square = squares[i]\r\n\r\n            //if the square has a piece\r\n            if (square.props.piece) {\r\n                let color = getPieceColor(square); //get the piece color\r\n\r\n                //don't collect possible moves if it's black to move and you're trying to move a white piece\r\n                if (isColorWhite(color) && !IsWhiteToMove) {\r\n                    //console.log(`Skipping because it's black to move and you're moving a white piece, x: ${square.props.x}, y: ${square.props.y}`)\r\n                    continue\r\n                }\r\n\r\n                //don't collect possible moves if it's white to move and you're trying to move a black piece\r\n                if (isColorBlack(color) && IsWhiteToMove) {\r\n                    //console.log(`Skipping because it's white to move and you're moving a black piece, x: ${square.props.x}, y: ${square.props.y}`)\r\n                    continue\r\n                }\r\n\r\n                //console.log(`Getting possible moves, x: ${square.props.x}, y: ${square.props.y}`)\r\n                //get all possible moves for each piece\r\n                possiblePieceMoves.push(getPawnsPossibleMoves(square))\r\n                possiblePieceMoves.push(getRooksPossibleMoves(square))\r\n                possiblePieceMoves.push(getBishopPossibleMoves(square))\r\n                possiblePieceMoves.push(getKnightPossibleMoves(square))\r\n                possiblePieceMoves.push(getKingPossibleMoves(square))\r\n                possiblePieceMoves.push(getQueenPossibleMoves(square))\r\n\r\n                //filter empty moves\r\n                possiblePieceMoves = removeEmptyMoves(possiblePieceMoves);\r\n\r\n                //filter possible moves\r\n                possiblePieceMoves = filterMovesIfInCheck(possiblePieceMoves)\r\n                possiblePieceMoves = filterMovesThatAllowIllegalCastling(possiblePieceMoves)\r\n            }\r\n        }\r\n\r\n        console.log(\"Possible Moves:\", possiblePieceMoves);\r\n        console.log('Moves count', possiblePieceMoves.reduce((sum, pieceMove) => sum + pieceMove.moves.length, 0))\r\n        PossibleMoves.splice(0, PossibleMoves.length, ...possiblePieceMoves);\r\n        updatePossibleMovesVisually()\r\n    }\r\n\r\n    //renders the board\r\n    return (\r\n        <>\r\n            <div className=\"chessGrid\">\r\n                {boardSquares.map((sqr) => sqr)}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Board"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}