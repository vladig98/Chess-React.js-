{"ast":null,"code":"import { PIECES, FEN_PIECES_BLACK, COLORS, CASTLE_ROW_WHITE, CASTLE_ROW_BLACK, CASTLE_KING_INITIAL_COL, CASTLE_ROOK_INITIAL_COL_LONG, CASTLE_ROOK_INITIAL_COL_SHORT, CASTLE_PATH_COLS_LONG, CASTLE_PATH_COLS_SHORT, PIECE_COLOR_INDEX, PIECE_PIECE_INDEX, FEN_PIECES_WHITE, EMPTY_SQUARE_PIECE, CASTLE_ROOK_FINAL_COL_LONG, CASTLE_ROOK_FINAL_COL_SHORT, CASTLE_KING_FINAL_COL_LONG, CASTLE_KING_FINAL_COL_SHORT, EMPTY_SQUARES_AFTER_LONG_CASTLE, EMPTY_SQUARES_AFTER_SHORT_CASTLE, BoardPosition, PIECE_DELIMITER } from './globalVariables';\n\n//Checks if a character is Uppercase using the ASCII table; 65 (A); 90 (Z)\nexport function IsUpperCase(value) {\n  return value.charCodeAt(0) >= 65 && value.charCodeAt(0) <= 90;\n}\n\n//Checks if a character is Lowercase using the ASCII table; 97 (a); 122 (z)\n_c = IsUpperCase;\nexport function IsLowerCase(value) {\n  return value.charCodeAt(0) >= 97 && value.charCodeAt(0) <= 122;\n}\n\n//Checks if a character is a Digit using the ASCII table; 48 (0); 57 (9)\n_c2 = IsLowerCase;\nexport function IsDigit(value) {\n  return value.charCodeAt(0) >= 48 && value.charCodeAt(0) <= 57;\n}\n\n//splits the FEN string to each individual part that makes it\n_c3 = IsDigit;\nexport function ParseFEN(fen) {\n  const fenParts = fen.split(' ');\n  if (fenParts.length != 6) {\n    console.log('Invalid FEN');\n    return;\n  }\n  const fenBoard = fenParts[0];\n  const fenTurn = fenParts[1];\n  const fenCastling = fenParts[2];\n  const fenEnPassant = fenParts[3];\n  const fenHalfMoves = Number(fenParts[4]);\n  const fenFullMoves = Number(fenParts[5]);\n  return {\n    fenBoard,\n    fenTurn,\n    fenCastling,\n    fenEnPassant,\n    fenHalfMoves,\n    fenFullMoves\n  };\n}\n\n//converts FEN piece notation to an actual piece\n_c4 = ParseFEN;\nexport function ConvertFENtoPiece(letter) {\n  switch (letter.toLowerCase()) {\n    case FEN_PIECES_BLACK.PAWN:\n      return PIECES.PAWN;\n    case FEN_PIECES_BLACK.KNIGHT:\n      return PIECES.KNIGHT;\n    case FEN_PIECES_BLACK.KING:\n      return PIECES.KING;\n    case FEN_PIECES_BLACK.QUEEN:\n      return PIECES.QUEEN;\n    case FEN_PIECES_BLACK.ROOK:\n      return PIECES.ROOK;\n    case FEN_PIECES_BLACK.BISHOP:\n      return PIECES.BISHOP;\n    default:\n      return \"\";\n  }\n}\n\n//converts the FEN piece notation to a piece that we can use in the square component\n_c5 = ConvertFENtoPiece;\nexport function ConvertFENPieceToPiece(value) {\n  if (IsUpperCase(value)) {\n    return `${COLORS.WHITE}-${ConvertFENtoPiece(value)}`;\n  }\n  if (IsLowerCase(value)) {\n    return `${COLORS.BLACK}-${ConvertFENtoPiece(value)}`;\n  }\n  return \"\";\n}\n_c6 = ConvertFENPieceToPiece;\nexport function ConvertFenToString(value) {\n  let result = [];\n  for (let i = 0; i < value.length; i++) {\n    if (IsDigit(value.charAt(i))) {\n      for (let j = 0; j < Number(value.charAt(i)); j++) {\n        result.push(\" \");\n      }\n    } else {\n      result.push(value.charAt(i));\n    }\n  }\n  return result.join('');\n}\n_c7 = ConvertFenToString;\nfunction checkIfTwoSquaresAreOnTheSameRow(square1, square2) {\n  return square1.props.x == square2.props.x;\n}\nfunction isSquareOnRow(square, rowNumber) {\n  return square.props.x == rowNumber;\n}\n\n//gets the piece\nexport function getPiece(square) {\n  return square.props.piece.split(PIECE_DELIMITER)[PIECE_PIECE_INDEX];\n}\n\n//checks if piece is positioned on a certain square\nexport function doesTheSquareHasThePiece(square, piece) {\n  let p = getPiece(square);\n  return p == piece;\n}\n\n//gets the piece color\nexport function getPieceColor(square) {\n  return square.props.piece.split(PIECE_DELIMITER)[PIECE_COLOR_INDEX];\n}\n\n//checks if a color is white\nexport function isColorWhite(color) {\n  return color == COLORS.WHITE;\n}\nfunction areWeCastling(square1, square2) {\n  return Math.abs(square1.props.y - square2.props.y) == 2;\n}\nfunction areWeShortCastling(withWhite = true) {\n  const piecesCastling = withWhite ? CASTLE_ROW_WHITE : CASTLE_ROW_BLACK;\n  const pieces = withWhite ? [...FEN_PIECES_WHITE] : [...FEN_PIECES_BLACK];\n  return BoardPosition[piecesCastling][CASTLE_ROOK_INITIAL_COL_SHORT] == pieces.ROOK && BoardPosition[piecesCastling][CASTLE_KING_INITIAL_COL] == pieces.KING && CASTLE_PATH_COLS_SHORT.every(col => BoardPosition[piecesCastling][col] == EMPTY_SQUARE_PIECE);\n}\nfunction areWeLongCastling(withWhite = true) {\n  const piecesCastling = withWhite ? CASTLE_ROW_WHITE : CASTLE_ROW_BLACK;\n  const pieces = withWhite ? [...FEN_PIECES_WHITE] : [...FEN_PIECES_BLACK];\n  return BoardPosition[piecesCastling][CASTLE_ROOK_INITIAL_COL_LONG] == pieces.ROOK && BoardPosition[piecesCastling][CASTLE_KING_INITIAL_COL] == pieces.KING && CASTLE_PATH_COLS_LONG.every(col => BoardPosition[piecesCastling][col] == EMPTY_SQUARE_PIECE);\n}\nfunction updateColumnOnARow(row, colIndex, newValue) {\n  row[colIndex] = newValue;\n  return row;\n}\nfunction handleSquareOnCurrentRow(square, targetSquare, row) {\n  if (checkIfTwoSquaresAreOnTheSameRow(square, targetSquare)) {\n    return handleSquareAndTargetSquareOnTheSameRow(square, targetSquare, row);\n  }\n  return updateColumnOnARow(row, square.props.y, EMPTY_SQUARE_PIECE);\n}\nfunction handleTargetSquareOnCurrentRow(square, targetSquare, row) {\n  return updateColumnOnARow(row, targetSquare.props.y, ConvertPieceToFENPiece(square.props.piece));\n}\nfunction handleSquareAndTargetSquareOnTheSameRow(square, targetSquare, row) {\n  if (doesTheSquareHasThePiece(square, PIECES.KING) && areWeCastling(square, targetSquare)) {\n    row = handleCastling(square, row);\n  }\n  return SidewaysCapture(row, Number(square.props.y), Number(targetSquare.props.y), square.props.piece);\n}\nfunction handleCastling(square, row) {\n  const color = getPieceColor(square);\n  const isWhite = isColorWhite(color);\n  const kingPiece = isWhite ? FEN_PIECES_WHITE.KING : FEN_PIECES_BLACK.KING;\n  const rookPiece = isWhite ? FEN_PIECES_WHITE.ROOK : FEN_PIECES_BLACK.ROOK;\n  if (areWeLongCastling() || areWeLongCastling(false)) {\n    EMPTY_SQUARES_AFTER_LONG_CASTLE.forEach(col => row[col] = EMPTY_SQUARE_PIECE);\n    row[CASTLE_KING_FINAL_COL_LONG] = kingPiece;\n    row[CASTLE_ROOK_FINAL_COL_LONG] = rookPiece;\n  }\n  if (areWeShortCastling() || areWeShortCastling(false)) {\n    EMPTY_SQUARES_AFTER_SHORT_CASTLE.forEach(col => row[col] = EMPTY_SQUARE_PIECE);\n    row[CASTLE_KING_FINAL_COL_SHORT] = kingPiece;\n    row[CASTLE_ROOK_FINAL_COL_SHORT] = rookPiece;\n  }\n}\nexport function UpdatePosition(square, targetSquare, position) {\n  return position.map((row, rowIndex) => {\n    if (isSquareOnRow(square, rowIndex)) {\n      row = handleSquareOnCurrentRow(square, targetSquare, row);\n    }\n    if (isSquareOnRow(targetSquare, rowIndex)) {\n      row = handleTargetSquareOnCurrentRow(square, targetSquare, row);\n    }\n    return row;\n  });\n}\n_c8 = UpdatePosition;\nfunction SidewaysCapture(row, colIndex, targetColIndex, value) {\n  let result = [];\n  for (let i = 0; i < row.length; i++) {\n    if (i == colIndex) {\n      result.push(EMPTY_SQUARE_PIECE);\n    } else if (i == targetColIndex) {\n      result.push(ConvertPieceToFENPiece(value));\n    } else {\n      result.push(row[i]);\n    }\n  }\n  return result;\n}\n_c9 = SidewaysCapture;\nfunction ConvertStringToFEN(value) {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < value.length; i++) {\n    if (value.charAt(i) == ' ') {\n      counter++;\n    } else {\n      if (counter != 0) {\n        result.push(counter);\n      }\n      result.push(value.charAt(i));\n      counter = 0;\n    }\n  }\n  if (counter != 0) {\n    result.push(counter);\n  }\n  return result.join('');\n}\n_c10 = ConvertStringToFEN;\nfunction replaceAt(value, replacement, index) {\n  return value.substring(0, index) + replacement + value.substring(index + replacement.toString().length);\n}\nfunction ConvertPieceToFENPiece(value) {\n  let color = value.split('-')[0];\n  let piece = value.split('-')[1];\n  let p = '';\n  switch (piece) {\n    case \"pawn\":\n      p = 'p';\n      break;\n    case \"knight\":\n      p = 'n';\n      break;\n    case \"bishop\":\n      p = 'b';\n      break;\n    case \"rook\":\n      p = 'r';\n      break;\n    case \"queen\":\n      p = 'q';\n      break;\n    case \"king\":\n      p = 'k';\n      break;\n    default:\n      break;\n  }\n  return color == \"white\" ? p.toString().toUpperCase() : p.toString();\n}\n_c11 = ConvertPieceToFENPiece;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11;\n$RefreshReg$(_c, \"IsUpperCase\");\n$RefreshReg$(_c2, \"IsLowerCase\");\n$RefreshReg$(_c3, \"IsDigit\");\n$RefreshReg$(_c4, \"ParseFEN\");\n$RefreshReg$(_c5, \"ConvertFENtoPiece\");\n$RefreshReg$(_c6, \"ConvertFENPieceToPiece\");\n$RefreshReg$(_c7, \"ConvertFenToString\");\n$RefreshReg$(_c8, \"UpdatePosition\");\n$RefreshReg$(_c9, \"SidewaysCapture\");\n$RefreshReg$(_c10, \"ConvertStringToFEN\");\n$RefreshReg$(_c11, \"ConvertPieceToFENPiece\");","map":{"version":3,"names":["PIECES","FEN_PIECES_BLACK","COLORS","CASTLE_ROW_WHITE","CASTLE_ROW_BLACK","CASTLE_KING_INITIAL_COL","CASTLE_ROOK_INITIAL_COL_LONG","CASTLE_ROOK_INITIAL_COL_SHORT","CASTLE_PATH_COLS_LONG","CASTLE_PATH_COLS_SHORT","PIECE_COLOR_INDEX","PIECE_PIECE_INDEX","FEN_PIECES_WHITE","EMPTY_SQUARE_PIECE","CASTLE_ROOK_FINAL_COL_LONG","CASTLE_ROOK_FINAL_COL_SHORT","CASTLE_KING_FINAL_COL_LONG","CASTLE_KING_FINAL_COL_SHORT","EMPTY_SQUARES_AFTER_LONG_CASTLE","EMPTY_SQUARES_AFTER_SHORT_CASTLE","BoardPosition","PIECE_DELIMITER","IsUpperCase","value","charCodeAt","_c","IsLowerCase","_c2","IsDigit","_c3","ParseFEN","fen","fenParts","split","length","console","log","fenBoard","fenTurn","fenCastling","fenEnPassant","fenHalfMoves","Number","fenFullMoves","_c4","ConvertFENtoPiece","letter","toLowerCase","PAWN","KNIGHT","KING","QUEEN","ROOK","BISHOP","_c5","ConvertFENPieceToPiece","WHITE","BLACK","_c6","ConvertFenToString","result","i","charAt","j","push","join","_c7","checkIfTwoSquaresAreOnTheSameRow","square1","square2","props","x","isSquareOnRow","square","rowNumber","getPiece","piece","doesTheSquareHasThePiece","p","getPieceColor","isColorWhite","color","areWeCastling","Math","abs","y","areWeShortCastling","withWhite","piecesCastling","pieces","every","col","areWeLongCastling","updateColumnOnARow","row","colIndex","newValue","handleSquareOnCurrentRow","targetSquare","handleSquareAndTargetSquareOnTheSameRow","handleTargetSquareOnCurrentRow","ConvertPieceToFENPiece","handleCastling","SidewaysCapture","isWhite","kingPiece","rookPiece","forEach","UpdatePosition","position","map","rowIndex","_c8","targetColIndex","_c9","ConvertStringToFEN","counter","_c10","replaceAt","replacement","index","substring","toString","toUpperCase","_c11","$RefreshReg$"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/Chess-React.js-/src/HelperMethods.js"],"sourcesContent":["import {\r\n    PIECES, FEN_PIECES_BLACK, COLORS, CASTLE_ROW_WHITE, CASTLE_ROW_BLACK, CASTLE_KING_INITIAL_COL, CASTLE_ROOK_INITIAL_COL_LONG, CASTLE_ROOK_INITIAL_COL_SHORT,\r\n    CASTLE_PATH_COLS_LONG, CASTLE_PATH_COLS_SHORT, PIECE_COLOR_INDEX, PIECE_PIECE_INDEX, FEN_PIECES_WHITE, EMPTY_SQUARE_PIECE, CASTLE_ROOK_FINAL_COL_LONG,\r\n    CASTLE_ROOK_FINAL_COL_SHORT, CASTLE_KING_FINAL_COL_LONG, CASTLE_KING_FINAL_COL_SHORT, EMPTY_SQUARES_AFTER_LONG_CASTLE, EMPTY_SQUARES_AFTER_SHORT_CASTLE,\r\n    BoardPosition, PIECE_DELIMITER\r\n} from './globalVariables'\r\n\r\n//Checks if a character is Uppercase using the ASCII table; 65 (A); 90 (Z)\r\nexport function IsUpperCase(value) {\r\n    return value.charCodeAt(0) >= 65 && value.charCodeAt(0) <= 90\r\n}\r\n\r\n//Checks if a character is Lowercase using the ASCII table; 97 (a); 122 (z)\r\nexport function IsLowerCase(value) {\r\n    return value.charCodeAt(0) >= 97 && value.charCodeAt(0) <= 122\r\n}\r\n\r\n//Checks if a character is a Digit using the ASCII table; 48 (0); 57 (9)\r\nexport function IsDigit(value) {\r\n    return value.charCodeAt(0) >= 48 && value.charCodeAt(0) <= 57\r\n}\r\n\r\n//splits the FEN string to each individual part that makes it\r\nexport function ParseFEN(fen) {\r\n    const fenParts = fen.split(' ');\r\n\r\n    if (fenParts.length != 6) {\r\n        console.log('Invalid FEN')\r\n        return;\r\n    }\r\n\r\n    const fenBoard = fenParts[0];\r\n    const fenTurn = fenParts[1];\r\n    const fenCastling = fenParts[2];\r\n    const fenEnPassant = fenParts[3];\r\n    const fenHalfMoves = Number(fenParts[4])\r\n    const fenFullMoves = Number(fenParts[5])\r\n\r\n    return { fenBoard, fenTurn, fenCastling, fenEnPassant, fenHalfMoves, fenFullMoves }\r\n}\r\n\r\n//converts FEN piece notation to an actual piece\r\nexport function ConvertFENtoPiece(letter) {\r\n    switch (letter.toLowerCase()) {\r\n        case FEN_PIECES_BLACK.PAWN:\r\n            return PIECES.PAWN\r\n        case FEN_PIECES_BLACK.KNIGHT:\r\n            return PIECES.KNIGHT\r\n        case FEN_PIECES_BLACK.KING:\r\n            return PIECES.KING\r\n        case FEN_PIECES_BLACK.QUEEN:\r\n            return PIECES.QUEEN\r\n        case FEN_PIECES_BLACK.ROOK:\r\n            return PIECES.ROOK\r\n        case FEN_PIECES_BLACK.BISHOP:\r\n            return PIECES.BISHOP\r\n        default:\r\n            return \"\";\r\n    }\r\n}\r\n\r\n//converts the FEN piece notation to a piece that we can use in the square component\r\nexport function ConvertFENPieceToPiece(value) {\r\n    if (IsUpperCase(value)) {\r\n        return `${COLORS.WHITE}-${ConvertFENtoPiece(value)}`;\r\n    }\r\n\r\n    if (IsLowerCase(value)) {\r\n        return `${COLORS.BLACK}-${ConvertFENtoPiece(value)}`;\r\n    }\r\n\r\n    return \"\";\r\n}\r\n\r\nexport function ConvertFenToString(value) {\r\n    let result = [];\r\n\r\n    for (let i = 0; i < value.length; i++) {\r\n        if (IsDigit(value.charAt(i))) {\r\n            for (let j = 0; j < Number(value.charAt(i)); j++) {\r\n                result.push(\" \")\r\n            }\r\n        } else {\r\n            result.push(value.charAt(i))\r\n        }\r\n    }\r\n\r\n    return result.join('');\r\n}\r\n\r\nfunction checkIfTwoSquaresAreOnTheSameRow(square1, square2) {\r\n    return square1.props.x == square2.props.x\r\n}\r\n\r\nfunction isSquareOnRow(square, rowNumber) {\r\n    return square.props.x == rowNumber\r\n}\r\n\r\n//gets the piece\r\nexport function getPiece(square) {\r\n    return square.props.piece.split(PIECE_DELIMITER)[PIECE_PIECE_INDEX]\r\n}\r\n\r\n//checks if piece is positioned on a certain square\r\nexport function doesTheSquareHasThePiece(square, piece) {\r\n    let p = getPiece(square)\r\n\r\n    return p == piece\r\n}\r\n\r\n//gets the piece color\r\nexport function getPieceColor(square) {\r\n    return square.props.piece.split(PIECE_DELIMITER)[PIECE_COLOR_INDEX]\r\n}\r\n\r\n//checks if a color is white\r\nexport function isColorWhite(color) {\r\n    return color == COLORS.WHITE\r\n}\r\n\r\nfunction areWeCastling(square1, square2) {\r\n    return Math.abs(square1.props.y - square2.props.y) == 2\r\n}\r\n\r\nfunction areWeShortCastling(withWhite = true) {\r\n    const piecesCastling = withWhite ? CASTLE_ROW_WHITE : CASTLE_ROW_BLACK\r\n    const pieces = withWhite ? [...FEN_PIECES_WHITE] : [...FEN_PIECES_BLACK]\r\n\r\n    return BoardPosition[piecesCastling][CASTLE_ROOK_INITIAL_COL_SHORT] == pieces.ROOK &&\r\n        BoardPosition[piecesCastling][CASTLE_KING_INITIAL_COL] == pieces.KING &&\r\n        CASTLE_PATH_COLS_SHORT.every(col => BoardPosition[piecesCastling][col] == EMPTY_SQUARE_PIECE);\r\n}\r\n\r\nfunction areWeLongCastling(withWhite = true) {\r\n    const piecesCastling = withWhite ? CASTLE_ROW_WHITE : CASTLE_ROW_BLACK\r\n    const pieces = withWhite ? [...FEN_PIECES_WHITE] : [...FEN_PIECES_BLACK]\r\n\r\n    return BoardPosition[piecesCastling][CASTLE_ROOK_INITIAL_COL_LONG] == pieces.ROOK &&\r\n        BoardPosition[piecesCastling][CASTLE_KING_INITIAL_COL] == pieces.KING &&\r\n        CASTLE_PATH_COLS_LONG.every(col => BoardPosition[piecesCastling][col] == EMPTY_SQUARE_PIECE);\r\n}\r\n\r\nfunction updateColumnOnARow(row, colIndex, newValue) {\r\n    row[colIndex] = newValue\r\n    return row\r\n}\r\n\r\nfunction handleSquareOnCurrentRow(square, targetSquare, row) {\r\n    if (checkIfTwoSquaresAreOnTheSameRow(square, targetSquare)) {\r\n        return handleSquareAndTargetSquareOnTheSameRow(square, targetSquare, row);\r\n    }\r\n\r\n    return updateColumnOnARow(row, square.props.y, EMPTY_SQUARE_PIECE)\r\n}\r\n\r\nfunction handleTargetSquareOnCurrentRow(square, targetSquare, row) {\r\n    return updateColumnOnARow(row, targetSquare.props.y, ConvertPieceToFENPiece(square.props.piece))\r\n}\r\n\r\nfunction handleSquareAndTargetSquareOnTheSameRow(square, targetSquare, row) {\r\n    if (doesTheSquareHasThePiece(square, PIECES.KING) && areWeCastling(square, targetSquare)) {\r\n        row = handleCastling(square, row)\r\n    }\r\n\r\n    return SidewaysCapture(row, Number(square.props.y), Number(targetSquare.props.y), square.props.piece)\r\n}\r\n\r\nfunction handleCastling(square, row) {\r\n    const color = getPieceColor(square)\r\n    const isWhite = isColorWhite(color);\r\n    const kingPiece = isWhite ? FEN_PIECES_WHITE.KING : FEN_PIECES_BLACK.KING;\r\n    const rookPiece = isWhite ? FEN_PIECES_WHITE.ROOK : FEN_PIECES_BLACK.ROOK;\r\n\r\n    if (areWeLongCastling() || areWeLongCastling(false)) {\r\n        EMPTY_SQUARES_AFTER_LONG_CASTLE.forEach(col => row[col] = EMPTY_SQUARE_PIECE);\r\n        row[CASTLE_KING_FINAL_COL_LONG] = kingPiece\r\n        row[CASTLE_ROOK_FINAL_COL_LONG] = rookPiece\r\n    }\r\n\r\n    if (areWeShortCastling() || areWeShortCastling(false)) {\r\n        EMPTY_SQUARES_AFTER_SHORT_CASTLE.forEach(col => row[col] = EMPTY_SQUARE_PIECE);\r\n        row[CASTLE_KING_FINAL_COL_SHORT] = kingPiece\r\n        row[CASTLE_ROOK_FINAL_COL_SHORT] = rookPiece\r\n    }\r\n}\r\n\r\nexport function UpdatePosition(square, targetSquare, position) {\r\n    return position.map((row, rowIndex) => {\r\n        if (isSquareOnRow(square, rowIndex)) {\r\n            row = handleSquareOnCurrentRow(square, targetSquare, row);\r\n        }\r\n        if (isSquareOnRow(targetSquare, rowIndex)) {\r\n            row = handleTargetSquareOnCurrentRow(square, targetSquare, row);\r\n        }\r\n        return row;\r\n    });\r\n}\r\n\r\nfunction SidewaysCapture(row, colIndex, targetColIndex, value) {\r\n    let result = []\r\n\r\n    for (let i = 0; i < row.length; i++) {\r\n        if (i == colIndex) {\r\n            result.push(EMPTY_SQUARE_PIECE)\r\n        } else if (i == targetColIndex) {\r\n            result.push(ConvertPieceToFENPiece(value))\r\n        } else {\r\n            result.push(row[i])\r\n        }\r\n    }\r\n\r\n    return result\r\n}\r\n\r\nfunction ConvertStringToFEN(value) {\r\n    let result = [];\r\n\r\n    let counter = 0;\r\n    for (let i = 0; i < value.length; i++) {\r\n        if (value.charAt(i) == ' ') {\r\n            counter++;\r\n        } else {\r\n            if (counter != 0) {\r\n                result.push(counter)\r\n            }\r\n            result.push(value.charAt(i))\r\n            counter = 0;\r\n        }\r\n    }\r\n\r\n    if (counter != 0) {\r\n        result.push(counter)\r\n    }\r\n\r\n    return result.join('')\r\n}\r\n\r\nfunction replaceAt(value, replacement, index) {\r\n    return value.substring(0, index) + replacement + value.substring(index + replacement.toString().length);\r\n}\r\n\r\nfunction ConvertPieceToFENPiece(value) {\r\n    let color = value.split('-')[0]\r\n    let piece = value.split('-')[1]\r\n\r\n    let p = '';\r\n\r\n    switch (piece) {\r\n        case \"pawn\":\r\n            p = 'p';\r\n            break;\r\n        case \"knight\":\r\n            p = 'n';\r\n            break;\r\n        case \"bishop\":\r\n            p = 'b';\r\n            break;\r\n        case \"rook\":\r\n            p = 'r';\r\n            break;\r\n        case \"queen\":\r\n            p = 'q';\r\n            break;\r\n        case \"king\":\r\n            p = 'k';\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return color == \"white\" ? p.toString().toUpperCase() : p.toString()\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}